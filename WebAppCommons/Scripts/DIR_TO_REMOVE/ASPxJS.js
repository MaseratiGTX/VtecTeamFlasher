var ASPx = {};
ASPx.SSLSecureBlankUrl = "/FSCAdminArea/DXR.axd?r=1_0-poafa";
ASPx.EmptyImageUrl = "/FSCAdminArea/DXR.axd?r=1_11-poafa";
var __aspxVersionInfo = "Version='13.2.6.0', File Version='13.2.6.0', Date Modified='11.02.2015 3:32:22'";
var __aspxStyleSheet = null;
var __aspxInvalidDimension = -10000;
var __aspxInvalidPosition = -10000;
var __aspxAbsoluteLeftPosition = -10000;
var __aspxAbsoluteRightPosition = 10000;
var __aspxMenuZIndex = 21998;
var __aspxPopupControlZIndex = 11998;
var __aspxPopupShadowWidth = 5;
var __aspxPopupShadowHeight = 5;
var __aspxCallbackSeparator = ":";
var __aspxItemIndexSeparator = "i";
var __aspxCallbackResultPrefix = "/*DX*/";
var __aspxItemClassName = "dxi";
var __aspxAccessibilityEmptyUrl = "javascript:;";
var __aspxAccessibilityMarkerClass = "dxalink";
var __aspxEmptyAttributeValue = {};
var __aspxEmptyCachedValue = {};
var __aspxCachedRules = {};
var __aspxStyleCount = 0;
var __aspxStyleNameCache = {};
var __aspxPossibleNumberDecimalSeparators = [",", "."];
var __aspxAdaptiveClass = "dx-adaptive";
var __aspxCultureInfo = {
    twoDigitYearMax: 2029,
    ts: ":",
    ds: "/",
    am: "AM",
    pm: "PM",
    monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
    genMonthNames: null,
    abbrMonthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""],
    abbrDayNames: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    numDecimalPoint: ".",
    numPrec: 2,
    numGroupSeparator: ",",
    numGroups: [3],
    numNegPattern: 1,
    numPosInf: "Infinity",
    numNegInf: "-Infinity",
    numNan: "NaN",
    currency: "$",
    currDecimalPoint: ".",
    currPrec: 2,
    currGroupSeparator: ",",
    currGroups: [3],
    currPosPattern: 0,
    currNegPattern: 0,
    percentPattern: 0,
    shortTime: "h:mm tt",
    longTime: "h:mm:ss tt",
    shortDate: "M/d/yyyy",
    longDate: "dddd, MMMM dd, yyyy",
    monthDay: "MMMM dd",
    yearMonth: "MMMM, yyyy"
};
__aspxCultureInfo.genMonthNames = __aspxCultureInfo.monthNames;
function _aspxGetInvariantDateString(date) {
    if (!date)
        return "01/01/0001";
    var day = date.getDate();
    var month = date.getMonth() + 1;
    var year = date.getFullYear();
    var result = "";
    if (month < 10)
        result += "0";
    result += month.toString() + "/";
    if (day < 10)
        result += "0";
    result += day.toString() + "/";
    if (year < 1000)
        result += "0";
    result += year.toString();
    return result;
}
function _aspxGetInvariantDateTimeString(date) {
    var dateTimeString = _aspxGetInvariantDateString(date);
    var time = {
        h: date.getHours(),
        m: date.getMinutes(),
        s: date.getSeconds()
    };
    for (var key in time) {
        var str = time[key].toString();
        if (str.length < 2)
            str = "0" + str;
        time[key] = str;
    }
    dateTimeString += " " + time.h + ":" + time.m + ":" + time.s;
    var msec = date.getMilliseconds();
    if (msec > 0)
        dateTimeString += "." + msec.toString();
    return dateTimeString;
}
function _aspxExpandTwoDigitYear(value) {
    value += 1900;
    if (value + 99 < __aspxCultureInfo.twoDigitYearMax)
        value += 100;
    return value;
}
function _aspxToUtcTime(date) {
    var result = new Date();
    result.setTime(date.valueOf() + 60000 * date.getTimezoneOffset());
    return result;
}
function _aspxToLocalTime(date) {
    var result = new Date();
    result.setTime(date.valueOf() - 60000 * date.getTimezoneOffset());
    return result;
}
function _aspxAreDatesEqualExact(date1, date2) {
    if (date1 == null && date2 == null)
        return true;
    if (date1 == null || date2 == null)
        return false;
    return date1.getTime() == date2.getTime();
}
function _aspxFixTimezoneGap(oldDate, newDate) {
    var diff = newDate.getHours() - oldDate.getHours();
    if (diff == 0)
        return;
    var sign = (diff == 1 || diff == -23) ? -1 : 1;
    var trial = new Date(newDate.getTime() + sign * 3600000);
    if (sign > 0 || trial.getDate() == newDate.getDate())
        newDate.setTime(trial.getTime());
}
var ASPxKey = {
    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123,
    Ctrl: 17,
    Shift: 16,
    Alt: 18,
    Enter: 13,
    Home: 36,
    End: 35,
    Left: 37,
    Right: 39,
    Up: 38,
    Down: 40,
    PageUp: 33,
    PageDown: 34,
    Esc: 27,
    Space: 32,
    Tab: 9,
    Backspace: 8,
    Delete: 46,
    Insert: 45,
    ContextMenu: 93,
    Windows: 91,
    Decimal: 110
};
var ASPxCallbackType = {
    Data: "d",
    Common: "c"
};
var ASPxWhiteSpaces = {
    0x0009: 1, 0x000a: 1, 0x000b: 1, 0x000c: 1, 0x000d: 1, 0x0020: 1, 0x0085: 1,
    0x00a0: 1, 0x1680: 1, 0x180e: 1, 0x2000: 1, 0x2001: 1, 0x2002: 1, 0x2003: 1,
    0x2004: 1, 0x2005: 1, 0x2006: 1, 0x2007: 1, 0x2008: 1, 0x2009: 1, 0x200a: 1,
    0x200b: 1, 0x2028: 1, 0x2029: 1, 0x202f: 1, 0x205f: 1, 0x3000: 1
};
function _aspxFalseFunction() { return false; }
function _aspxGetActiveElement() {
    try {
        return document.activeElement;
    } catch (e) {
    }
    return null;
}
var __aspxUserAgent = navigator.userAgent.toLowerCase();
var __aspxMozilla,
 __aspxIE,
 __aspxFirefox,
 __aspxNetscape,
 __aspxSafari,
 __aspxChrome,
 __aspxOpera,
 __aspxBrowserVersion,
 __aspxBrowserMajorVersion,
 __aspxWindowsPlatform,
 __aspxMacOSPlatform,
 __aspxMacOSMobilePlatform,
 __aspxWebKitFamily,
 __aspxNetscapeFamily,
 __aspxBrowserWithHardwareAcceleration;
function _aspxIdentUserAgent(userAgent, ignoreDocumentMode) {
    var browserTypesOrderedList = ["Mozilla", "IE", "Firefox", "Netscape", "Safari", "Chrome", "Opera", "Opera10"];
    var defaultBrowserType = "IE";
    var defaultPlatform = "Win";
    var defaultVersions = { Safari: 2, Chrome: 0.1, Mozilla: 1.9, Netscape: 8, Firefox: 2, Opera: 9, IE: 6 };
    if (!userAgent || userAgent.length == 0) {
        _aspxFillUserAgentInfo(browserTypesOrderedList, defaultBrowserType, defaultVersions[defaultBrowserType], defaultPlatform);
        return;
    }
    userAgent = userAgent.toLowerCase();
    try {
        var platformIdentStrings = {
            "Windows": "Win",
            "Macintosh": "Mac",
            "Mac OS": "Mac",
            "Mac_PowerPC": "Mac",
            "cpu os": "MacMobile",
            "cpu iphone os": "MacMobile",
            "Android": "Android",
            "!Windows Phone": "WinPhone",
            "!WPDesktop": "WinPhone",
            "!ZuneWP": "WinPhone"
        };
        var tridentIdentStrings = {
            "Trident/5": 9,
            "Trident/6": 10
        };
        var optSlashOrSpace = "(?:/|\\s*)?";
        var version = "(\\d+)(?:\\.((?:\\d+?[1-9])|\\d)0*?)?";
        var optVersion = "(?:" + version + ")?";
        var patterns = {
            Safari: "applewebkit(?:.*?(?:version/" + version + "[\\.\\w\\d]*?(?:\\s+mobile\/\\S*)?\\s+safari))?",
            Chrome: "chrome(?!frame)" + optSlashOrSpace + optVersion,
            Mozilla: "mozilla(?:.*rv:" + optVersion + ".*Gecko)?",
            Netscape: "(?:netscape|navigator)\\d*/?\\s*" + optVersion,
            Firefox: "firefox" + optSlashOrSpace + optVersion,
            Opera: "opera" + optSlashOrSpace + optVersion,
            Opera10: "opera.*\\s*version" + optSlashOrSpace + optVersion,
            IE: "msie\\s*" + optVersion
        };
        var browserType;
        var version = -1;
        for (var i = 0; i < browserTypesOrderedList.length; i++) {
            var browserTypeCandidate = browserTypesOrderedList[i];
            var regExp = new RegExp(patterns[browserTypeCandidate], "i");
            if (regExp.compile)
                regExp.compile(patterns[browserTypeCandidate], "i");
            var matches = regExp.exec(userAgent);
            if (matches && matches.index >= 0) {
                browserType = browserTypeCandidate;
                if (browserType == "Opera10")
                    browserType = "Opera";
                version = -1;
                var versionStr = "";
                if (matches[1]) {
                    versionStr += matches[1];
                    if (matches[2])
                        versionStr += "." + matches[2];
                }
                if (versionStr != "") {
                    version = parseFloat(versionStr);
                    if (version == NaN)
                        version = -1;
                }
                if (browserType == "Mozilla" && version >= 11)
                    browserType = "IE";
            }
        }
        if (!browserType)
            browserType = defaultBrowserType;
        var browserVersionDetected = version != -1;
        if (!browserVersionDetected)
            version = defaultVersions[browserType];
        var platform;
        var minOccurenceIndex = Number.MAX_VALUE;
        for (var identStr in platformIdentStrings) {
            if (!platformIdentStrings.hasOwnProperty(identStr)) continue;
            var importantIdent = identStr.substr(0, 1) == "!";
            var occurenceIndex = userAgent.indexOf((importantIdent ? identStr.substr(1) : identStr).toLowerCase());
            if (occurenceIndex >= 0 && (occurenceIndex < minOccurenceIndex || importantIdent)) {
                minOccurenceIndex = importantIdent ? 0 : occurenceIndex;
                platform = platformIdentStrings[identStr];
            }
        }
        if (platform == "WinPhone" && version < 9) {
            for (var identStr in tridentIdentStrings) {
                if (!tridentIdentStrings.hasOwnProperty(identStr)) continue;
                if (userAgent.indexOf(identStr.toLowerCase()) > -1)
                    version = tridentIdentStrings[identStr];
            }
        }
        if (!ignoreDocumentMode && browserType == "IE" && version > 7 && document.documentMode < version)
            version = document.documentMode;
        if (platform == "WinPhone")
            version = Math.max(9, version);
        if (!platform)
            platform = defaultPlatform;
        if (platform == platformIdentStrings["cpu os"] && !browserVersionDetected)
            version = 4;
        _aspxFillUserAgentInfo(browserTypesOrderedList, browserType, version, platform);
    } catch (e) {
        _aspxFillUserAgentInfo(browserTypesOrderedList, defaultBrowserType, defaultVersions[defaultBrowserType], defaultPlatform);
    }
}
function _aspxFillUserAgentInfo(browserTypesOrderedList, browserType, version, platform) {
    for (var i = 0; i < browserTypesOrderedList.length; i++) {
        var type = browserTypesOrderedList[i];
        window["__aspx" + type] = type == browserType;
    }
    __aspxBrowserVersion = Math.floor(10.0 * version) / 10.0;
    __aspxBrowserMajorVersion = Math.floor(__aspxBrowserVersion);
    __aspxWindowsPlatform = platform == "Win";
    __aspxMacOSPlatform = platform == "Mac";
    __aspxMacOSMobilePlatform = platform == "MacMobile";
    __aspxAndroidMobilePlatform = platform == "Android";
    __aspxWindowsPhonePlatform = platform == "WinPhone";
    __aspxWebKitFamily = __aspxSafari || __aspxChrome;
    __aspxNetscapeFamily = __aspxNetscape || __aspxMozilla || __aspxFirefox;
    __aspxBrowserWithHardwareAcceleration = (__aspxIE && __aspxBrowserMajorVersion >= 9) || (__aspxFirefox && __aspxBrowserMajorVersion >= 4);
    __aspxWebKitTouchUI = __aspxMacOSMobilePlatform || __aspxAndroidMobilePlatform;
    __aspxMSTouchUI = __aspxIE && __aspxBrowserMajorVersion > 9 && __aspxWindowsPlatform && __aspxUserAgent.toLowerCase().indexOf("touch") >= 0;
    __aspxTouchUI = __aspxWebKitTouchUI || __aspxMSTouchUI;
    __aspxAndroidDefaultBrowser = __aspxAndroidMobilePlatform && !__aspxChrome;
}
_aspxIdentUserAgent(__aspxUserAgent);
ASPx.BlankUrl = __aspxIE
 ? ASPx.SSLSecureBlankUrl
 : (__aspxOpera
  ? "about:blank"
  : "");
function _aspxArrayInsert(array, element, position) {
    if (0 <= position && position < array.length) {
        for (var i = array.length; i > position; i--)
            array[i] = array[i - 1];
        array[position] = element;
    }
    else
        array.push(element);
}
function _aspxArrayRemove(array, element) {
    var index = _aspxArrayIndexOf(array, element);
    if (index > -1) _aspxArrayRemoveAt(array, index);
}
function _aspxArrayRemoveAt(array, index) {
    if (index >= 0 && index < array.length) {
        for (var i = index; i < array.length - 1; i++)
            array[i] = array[i + 1];
        array.pop();
    }
}
function _aspxArrayClear(array) {
    while (array.length > 0)
        array.pop();
}
function _aspxArrayIndexOf(array, element, comparer) {
    if (!comparer) {
        for (var i = 0; i < array.length; i++) {
            if (array[i] == element)
                return i;
        }
    } else {
        for (var i = 0; i < array.length; i++) {
            if (comparer(array[i], element))
                return i;
        }
    }
    return -1;
}
function _aspxArrayIntegerAscendingSort(array) {
    _aspxArrayIntegerSort(array);
}
function _aspxArrayIntegerSort(array, desc) {
    array.sort(function (i1, i2) {
        var res = 0;
        if (i1 > i2)
            res = 1;
        else if (i1 < i2)
            res = -1;
        if (desc)
            res *= -1;
        return res;
    });
}
function _aspxCollectionsUnionToArray(firstCollection, secondCollection) {
    var result = [];
    var firstCollectionLength = firstCollection.length;
    var secondCollectionLength = secondCollection.length;
    for (var i = 0; i < firstCollectionLength + secondCollectionLength; i++) {
        if (i < firstCollectionLength)
            result.push(firstCollection[i]);
        else
            result.push(secondCollection[i - firstCollectionLength]);
    }
    return result;
}
function _aspxCollectionToArray(collection) {
    var array = [];
    for (var i = 0; i < collection.length; i++)
        array.push(collection[i]);
    return array;
}
function _aspxCreateHashTableFromArray(array) {
    var hash = [];
    for (var i = 0; i < array.length; i++)
        hash[array[i]] = 1;
    return hash;
}
function _aspxCreateIndexHashTableFromArray(array) {
    var hash = [];
    for (var i = 0; i < array.length; i++)
        hash[array[i]] = i;
    return hash;
}
var __aspxDefaultBinarySearchComparer = function (array, index, value) {
    var arrayElement = array[index];
    if (arrayElement == value)
        return 0;
    else
        return arrayElement < value ? -1 : 1;
};
var __aspxNearestLeftBinarySearchComparer = function (array, index, value) {
    var arrayElement = array[index];
    var leftPoint = arrayElement < value;
    var lastLeftPoint = leftPoint && index == array.length - 1;
    var nearestLeftPoint = lastLeftPoint || (leftPoint && array[index + 1] >= value)
    if (nearestLeftPoint)
        return 0;
    else
        return arrayElement < value ? -1 : 1;
};
function _aspxArrayBinarySearch(array, value, binarySearchComparer, startIndex, length) {
    if (!binarySearchComparer)
        binarySearchComparer = __aspxDefaultBinarySearchComparer;
    if (!_aspxIsExists(startIndex))
        startIndex = 0;
    if (!_aspxIsExists(length))
        length = array.length - startIndex;
    var endIndex = (startIndex + length) - 1;
    while (startIndex <= endIndex) {
        var middle = (startIndex + ((endIndex - startIndex) >> 1));
        var compareResult = binarySearchComparer(array, middle, value);
        if (compareResult == 0)
            return middle;
        if (compareResult < 0)
            startIndex = middle + 1;
        else
            endIndex = middle - 1;
    }
    return -(startIndex + 1);
}
function _aspxGetDistinctArray(array) {
    var resultArray = [];
    for (var i = 0; i < array.length; i++) {
        var currentEntry = array[i];
        if (resultArray.indexOf(currentEntry) == -1) {
            resultArray.push(currentEntry);
        }
    }
    return resultArray;
}
function _aspxApplyReplacement(text, replecementTable) {
    for (var i = 0; i < replecementTable.length; i++) {
        var replacement = replecementTable[i];
        text = text.replace(replacement[0], replacement[1]);
    }
    return text;
}
function _aspxCompleteReplace(text, regexp, newSubStr) {
    var textPrev;
    do {
        textPrev = text;
        text = text.replace(regexp, newSubStr);
    } while (text != textPrev);
    return text;
}
function _aspxNodeListToArray(nodeList, filter) {
    var result = [];
    for (var i = 0, element; element = nodeList[i]; i++) {
        if (filter && !filter(element))
            continue;
        result.push(element);
    }
    return result;
}
function _aspxEncodeHtml(html) {
    return _aspxApplyReplacement(html, [
  [/&amp;/g, '&ampx;'], [/&/g, '&amp;'],
  [/&quot;/g, '&quotx;'], [/"/g, '&quot;'],
  [/&lt;/g, '&ltx;'], [/</g, '&lt;'],
  [/&gt;/g, '&gtx;'], [/>/g, '&gt;']
 ]);
}
function _aspxDecodeHtml(html) {
    return _aspxApplyReplacement(html, [
  [/&gt;/g, '>'], [/&gtx;/g, '&gt;'],
  [/&lt;/g, '<'], [/&ltx;/g, '&lt;'],
  [/&quot;/g, '"'], [/&quotx;/g, '&quot;'],
  [/&amp;/g, '&'], [/&ampx;/g, '&amp;']
 ]);
}
function _aspxParseShortcutString(shortcutString) {
    if (!shortcutString)
        return 0;
    var isCtrlKey = false;
    var isShiftKey = false;
    var isAltKey = false;
    var keyCode = null;
    var shcKeys = shortcutString.toString().split("+");
    if (shcKeys.length > 0) {
        for (var i = 0; i < shcKeys.length; i++) {
            var key = _aspxTrim(shcKeys[i].toUpperCase());
            switch (key) {
                case "CTRL":
                    isCtrlKey = true;
                    break;
                case "SHIFT":
                    isShiftKey = true;
                    break;
                case "ALT":
                    isAltKey = true;
                    break;
                case "F1": keyCode = ASPxKey.F1; break;
                case "F2": keyCode = ASPxKey.F2; break;
                case "F3": keyCode = ASPxKey.F3; break;
                case "F4": keyCode = ASPxKey.F4; break;
                case "F5": keyCode = ASPxKey.F5; break;
                case "F6": keyCode = ASPxKey.F6; break;
                case "F7": keyCode = ASPxKey.F7; break;
                case "F8": keyCode = ASPxKey.F8; break;
                case "F9": keyCode = ASPxKey.F9; break;
                case "F10": keyCode = ASPxKey.F10; break;
                case "F11": keyCode = ASPxKey.F11; break;
                case "F12": keyCode = ASPxKey.F12; break;
                case "ENTER": keyCode = ASPxKey.Enter; break;
                case "HOME": keyCode = ASPxKey.Home; break;
                case "END": keyCode = ASPxKey.End; break;
                case "LEFT": keyCode = ASPxKey.Left; break;
                case "RIGHT": keyCode = ASPxKey.Right; break;
                case "UP": keyCode = ASPxKey.Up; break;
                case "DOWN": keyCode = ASPxKey.Down; break;
                case "PAGEUP": keyCode = ASPxKey.PageUp; break;
                case "PAGEDOWN": keyCode = ASPxKey.PageDown; break;
                case "SPACE": keyCode = ASPxKey.Space; break;
                case "TAB": keyCode = ASPxKey.Tab; break;
                case "BACK": keyCode = ASPxKey.Backspace; break;
                case "CONTEXT": keyCode = ASPxKey.ContextMenu; break;
                case "ESCAPE":
                case "ESC":
                    keyCode = ASPxKey.Esc;
                    break;
                case "DELETE":
                case "DEL":
                    keyCode = ASPxKey.Delete;
                    break;
                case "INSERT":
                case "INS":
                    keyCode = ASPxKey.Insert;
                    break;
                case "PLUS":
                    keyCode = "+".charCodeAt(0);
                    break;
                default:
                    keyCode = key.charCodeAt(0);
                    break;
            }
        }
    } else
        alert("Invalid shortcut");
    return _aspxGetShortcutCode(keyCode, isCtrlKey, isShiftKey, isAltKey);
}
function _aspxGetShortcutCode(keyCode, isCtrlKey, isShiftKey, isAltKey) {
    var value = keyCode & 0xFFFF;
    var flags = 0;
    flags |= isCtrlKey ? 1 << 0 : 0;
    flags |= isShiftKey ? 1 << 2 : 0;
    flags |= isAltKey ? 1 << 4 : 0;
    value |= flags << 16;
    return value;
}
function _aspxGetShortcutCodeByEvent(evt) {
    return _aspxGetShortcutCode(_aspxGetKeyCode(evt), evt.ctrlKey, evt.shiftKey, evt.altKey);
}
function _aspxIsPasteShortcut(evt) {
    var keyCode = _aspxGetKeyCode(evt);
    if (__aspxNetscapeFamily && evt.which == 0)
        keyCode = evt.keyCode;
    return (evt.ctrlKey && (keyCode == 118 || (keyCode == 86))) ||
     (evt.shiftKey && !evt.ctrlKey && !evt.altKey &&
     (keyCode == ASPxKey.Insert));
}
var ASPxImageUtils = {
    GetImageSrc: function (image) {
        return image.src;
    },
    SetImageSrc: function (image, src) {
        image.src = src;
    },
    SetSize: function (image, width, height) {
        image.style.width = width + "px";
        image.style.height = height + "px";
    },
    GetSize: function (image, isWidth) {
        return (isWidth ? image.offsetWidth : image.offsetHeight);
    }
};
var __aspxVerticalScrollBarWidth;
function _aspxGetVerticalScrollBarWidth() {
    if (typeof (__aspxVerticalScrollBarWidth) == "undefined") {
        var container = document.createElement("DIV");
        container.style.cssText = "position: absolute; top: 0px; left: 0px; visibility: hidden; width: 200px; height: 150px; overflow: hidden";
        document.body.appendChild(container);
        var child = document.createElement("P");
        container.appendChild(child);
        child.style.cssText = "width: 100%; height: 200px;";
        var widthWithoutScrollBar = child.offsetWidth;
        container.style.overflow = "scroll";
        var widthWithScrollBar = child.offsetWidth;
        if (widthWithoutScrollBar == widthWithScrollBar)
            widthWithScrollBar = container.clientWidth;
        __aspxVerticalScrollBarWidth = widthWithoutScrollBar - widthWithScrollBar;
        document.body.removeChild(container);
    }
    return __aspxVerticalScrollBarWidth;
}
function _aspxGetVerticalOverflow(element) {
    if (__aspxIE || __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome)
        return element.style.overflowY;
    return element.style.overflow;
}
function _aspxSetVerticalOverflow(element, value) {
    if (__aspxIE || __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome)
        element.style.overflowY = value;
    else
        element.style.overflow = value;
}
function _aspxHideScrollBarCore(element, scrollName) {
    if (element.tagName == "IFRAME") {
        if ((element.scrolling == "yes") || (element.scrolling == "auto")) {
            _aspxChangeAttribute(element, "scrolling", "no");
            return true;
        }
    }
    else if (element.tagName == "DIV") {
        if ((element.style[scrollName] == "scroll") || (element.style[scrollName] == "auto")) {
            _aspxChangeStyleAttribute(element, scrollName, "hidden");
            return true;
        }
    }
    return false;
}
function _aspxRestoreScrollBarCore(element, scrollName) {
    if (element.tagName == "IFRAME")
        return _aspxRestoreAttribute(element, "scrolling");
    else if (element.tagName == "DIV")
        return _aspxRestoreStyleAttribute(element, scrollName);
    return false;
}
function _aspxSetScrollBarVisibilityCore(element, scrollName, isVisible) {
    return isVisible ? _aspxRestoreScrollBarCore(element, scrollName) : _aspxHideScrollBarCore(element, scrollName);
}
function _aspxSetScrollBarVisibility(element, isVisible) {
    if (_aspxSetScrollBarVisibilityCore(element, "overflow", isVisible))
        return true;
    var result = _aspxSetScrollBarVisibilityCore(element, "overflowX", isVisible)
  || _aspxSetScrollBarVisibilityCore(element, "overflowY", isVisible);
    return result;
}
function _aspxSetTimeout(callString, timeout) {
    return window.setTimeout(callString, timeout);
}
function _aspxClearTimer(timerID) {
    if (timerID > -1)
        window.clearTimeout(timerID);
    return -1;
}
function _aspxSetInterval(callString, interval) {
    return window.setInterval(callString, interval);
}
function _aspxClearInterval(timerID) {
    if (timerID > -1)
        window.clearInterval(timerID);
    return -1;
}
function _aspxSetInnerHtml(element, html) {
    if (__aspxIE) {
        element.innerHTML = "<em>&nbsp;</em>" + html;
        element.removeChild(element.firstChild);
    } else
        element.innerHTML = html;
}
function _aspxGetInnerText(container) {
    if (__aspxNetscapeFamily)
        return container.textContent;
    else if (__aspxWebKitFamily) {
        var filter = _aspxGetHtml2PlainTextFilter();
        filter.innerHTML = container.innerHTML;
        _aspxSetElementDisplay(filter, true);
        var innerText = filter.innerText;
        _aspxSetElementDisplay(filter, false);
        return innerText;
    } else
        return container.innerText;
}
var __aspxHtml2PlainTextFilter = null;
function _aspxGetHtml2PlainTextFilter() {
    if (__aspxHtml2PlainTextFilter == null) {
        __aspxHtml2PlainTextFilter = document.createElement("DIV");
        __aspxHtml2PlainTextFilter.style.width = "0";
        __aspxHtml2PlainTextFilter.style.height = "0";
        __aspxHtml2PlainTextFilter.style.overflow = "visible";
        _aspxSetElementDisplay(__aspxHtml2PlainTextFilter, false);
        document.body.appendChild(__aspxHtml2PlainTextFilter);
    }
    return __aspxHtml2PlainTextFilter;
}
function _aspxCreateHiddenField(name, id) {
    var input = document.createElement("INPUT");
    input.setAttribute("type", "hidden");
    if (name)
        input.setAttribute("name", name);
    if (id)
        input.setAttribute("id", id);
    return input;
}
function _aspxCloneObject(srcObject) {
    if (typeof (srcObject) != 'object' || srcObject == null)
        return srcObject;
    var newObject = {};
    for (var i in srcObject)
        newObject[i] = srcObject[i];
    return newObject;
}
function _aspxIsExists(obj) {
    return (typeof (obj) != "undefined") && (obj != null);
}
function _aspxIsFunction(obj) {
    return typeof (obj) == "function";
}
function _aspxGetDefinedValue(value, defaultValue) {
    return (typeof (value) != "undefined") ? value : defaultValue;
}
function _aspxGetKeyCode(srcEvt) {
    return __aspxNetscapeFamily || __aspxOpera ? srcEvt.which : srcEvt.keyCode;
}
function _aspxPreventElementDrag(element) {
    if (__aspxIE)
        _aspxAttachEventToElement(element, "dragstart", _aspxPreventEvent);
    else
        _aspxAttachEventToElement(element, "mousedown", _aspxPreventEvent);
}
function _aspxPreventElementDragAndSelect(element, skipMouseMove, skipIESelect) {
    if (__aspxWebKitFamily)
        _aspxAttachEventToElement(element, "selectstart", _aspxPreventEventAndBubble);
    if (__aspxIE) {
        if (!skipIESelect)
            _aspxAttachEventToElement(element, "selectstart", _aspxFalseFunction);
        if (!skipMouseMove)
            _aspxAttachEventToElement(element, "mousemove", _aspxClearSelectionOnMouseMove);
        _aspxAttachEventToElement(element, "dragstart", _aspxPreventDragStart);
    }
}
function _aspxSetElementAsUnselectable(element, isWithChild, recursive) {
    if (element && element.nodeType == 1) {
        element.unselectable = "on";
        if (__aspxNetscapeFamily)
            element.onmousedown = _aspxFalseFunction;
        if ((__aspxIE && __aspxBrowserVersion >= 9) || __aspxWebKitFamily)
            _aspxAttachEventToElement(element, "mousedown", _aspxPreventEventAndBubble);
        if (isWithChild === true) {
            for (var j = 0; j < element.childNodes.length; j++)
                _aspxSetElementAsUnselectable(element.childNodes[j], (!!recursive ? true : false), (!!recursive));
        }
    }
}
function _aspxIsPercentageSize(size) {
    return size && size.indexOf('%') != -1;
}
function _aspxClearSelection() {
    try {
        if (window.getSelection) {
            if (__aspxWebKitFamily)
                window.getSelection().collapse();
            else
                window.getSelection().removeAllRanges();
        }
        else if (document.selection) {
            if (document.selection.empty)
                document.selection.empty();
            else if (document.selection.clear)
                document.selection.clear();
        }
    } catch (e) {
    }
}
function _aspxClearSelectionOnMouseMove(evt) {
    if (!__aspxIE || (evt.button != 0))
        _aspxClearSelection();
}
function _aspxPreventDragStart(evt) {
    evt = _aspxGetEvent(evt);
    var element = _aspxGetEventSource(evt);
    element.releaseCapture();
    return false;
}
function _aspxSetElementSelectionEnabled(element, value) {
    var userSelectValue = value ? "" : "none";
    var func = value ? _aspxDetachEventFromElement : _aspxAttachEventToElement;
    if (__aspxFirefox)
        element.style.MozUserSelect = userSelectValue;
    else if (__aspxWebKitFamily)
        element.style.webkitUserSelect = userSelectValue;
    else if (__aspxOpera)
        func(element, "mousemove", _aspxClearSelection);
    else {
        func(element, "selectstart", _aspxFalseFunction);
        func(element, "mousemove", _aspxClearSelection);
    }
}
function _aspxGetElementById(id) {
    if (document.getElementById)
        return document.getElementById(id);
    else
        return document.all[id];
}
function _aspxGetInputElementById(id) {
    var elem = _aspxGetElementById(id);
    if (!__aspxIE)
        return elem;
    if (elem) {
        if (elem.id == id)
            return elem;
        else {
            for (var i = 1; i < document.all[id].length; i++) {
                if (document.all[id][i].id == id)
                    return document.all[id][i];
            }
        }
    }
    return null;
}
function _aspxGetElementByIdInDocument(documentObj, id) {
    if (documentObj.getElementById)
        return documentObj.getElementById(id);
    else
        return documentObj.all[id];
}
function _aspxGetIsParent(parentElement, element) {
    while (element) {
        if (element === parentElement)
            return true;
        if (element.tagName === "BODY")
            return false;
        element = element.parentNode;
    }
    return false;
}
function _aspxGetParentById(element, id) {
    element = element.parentNode;
    while (element) {
        if (element.id === id)
            return element;
        element = element.parentNode;
    }
    return null;
}
function _aspxGetParentByTagName(element, tagName) {
    tagName = tagName.toUpperCase();
    while (element) {
        if (element.tagName === "BODY")
            return null;
        if (element.tagName === tagName)
            return element;
        element = element.parentNode;
    }
    return null;
}
function _aspxElementHasCssClass(element, className) {
    try {
        return !!element.className.match("(^|\\s)" + className + "(\\s|$)");
    } catch (e) {
        return false;
    }
}
function _aspxElementCssClassContains(element, className) {
    try {
        return element.className.indexOf(className) != -1;
    } catch (e) {
        return false;
    }
}
function _aspxAddClassNameToElement(element, className) {
    if (!_aspxElementHasCssClass(element, className))
        element.className = element.className + " " + className;
}
function _aspxRemoveClassNameFromElement(element, className) {
    if (_aspxElementHasCssClass(element, className)) {
        element.className = (" " + element.className + " ").replace(" " + className + " ", " ");
    }
}
function _aspxGetChildNodesByClassName(parent, className) {
    if (parent.querySelectorAll) {
        var children = parent.querySelectorAll('.' + className);
        return _aspxNodeListToArray(children, function (element) {
            return element.parentNode === parent;
        });
    }
    return _aspxGetChildNodes(parent, function (elem) { return elem.className && _aspxElementHasCssClass(elem, className); });
}
function _aspxGetDescendantNodesByClassName(parent, className) {
    if (parent.querySelectorAll) {
        var children = parent.querySelectorAll('.' + className);
        return _aspxNodeListToArray(children);
    }
    return _aspxGetDescendantNodes(parent, function (elem) { return elem.className && _aspxElementHasCssClass(elem, className); });
}
function _aspxGetParentByClassNameInternal(element, className, selector) {
    while (element != null) {
        if (element.tagName == "BODY")
            return null;
        if (selector(element, className))
            return element;
        element = element.parentNode;
    }
    return null;
}
function _aspxGetParentByPartialClassName(element, className) {
    return _aspxGetParentByClassNameInternal(element, className, _aspxElementCssClassContains);
}
function _aspxGetParentByClassName(element, className) {
    return _aspxGetParentByClassNameInternal(element, className, _aspxElementHasCssClass);
}
function _aspxGetParentByTagNameAndAttributeValue(element, tagName, attrName, attrValue) {
    tagName = tagName.toUpperCase();
    while (element != null) {
        if (element.tagName == "BODY")
            return null;
        if (element.tagName == tagName && element[attrName] == attrValue)
            return element;
        element = element.parentNode;
    }
    return null;
}
function _aspxGetChildById(element, id) {
    if (element.all) {
        var child = element.all[id];
        if (!child) {
            child = element.all(id);
            if (!child)
                return __aspxIE ? document.getElementById(id) : null;
        }
        if (!_aspxIsExists(child.length))
            return child;
        else
            return _aspxGetElementById(id);
    }
    else
        return _aspxGetElementById(id);
}
function _aspxGetElementsByTagName(element, tagName) {
    tagName = tagName.toUpperCase();
    if (element) {
        if (element.getElementsByTagName)
            return element.getElementsByTagName(tagName);
        else if (element.all && element.all.tags !== undefined)
            return __aspxNetscape ? element.all.tags[tagName] : element.all.tags(tagName);
    }
    return null;
}
function _aspxGetChildByTagName(element, tagName, index) {
    if (element != null) {
        var collection = _aspxGetElementsByTagName(element, tagName);
        if (collection != null) {
            if (index < collection.length)
                return collection[index];
        }
    }
    return null;
}
function _aspxRetrieveByPredicate(scourceCollection, predicate) {
    var result = [];
    for (var i = 0; i < scourceCollection.length; i++) {
        var element = scourceCollection[i];
        if (!predicate || predicate(element))
            result.push(element);
    }
    return result;
}
function _aspxGetChildNodes(parent, predicate) {
    return _aspxRetrieveByPredicate(parent.childNodes, predicate);
}
function _aspxGetChildNodesByTagName(parent, tagName) {
    return _aspxGetChildNodes(parent, function (child) { return child.tagName === tagName; });
}
function _aspxGetDescendantNodes(parent, predicate) {
    var c = parent.all || parent.getElementsByTagName('*');
    return _aspxRetrieveByPredicate(c, predicate);
}
function _aspxGetElementNodes(parent) {
    if (!parent) return null;
    return _aspxGetChildNodes(parent, function (e) { return e.nodeType == 1 })
}
function _aspxGetElementNodesByPredicate(parent, predicate) {
    if (!parent) return null;
    if (!predicate) return _aspxGetElementNodes(parent);
    return _aspxGetChildNodes(parent, function (e) { return e.nodeType == 1 && predicate(e); })
}
function _aspxGetChildTextNode(element, index) {
    if (element != null) {
        var collection = [];
        _aspxGetChildTextNodeCollection(element, collection);
        if (index < collection.length)
            return collection[index];
    }
    return null;
}
function _aspxGetChildTextNodeCollection(element, collection) {
    for (var i = 0; i < element.childNodes.length; i++) {
        var childNode = element.childNodes[i];
        if (_aspxIsExists(childNode.nodeValue))
            collection.push(childNode);
        _aspxGetChildTextNodeCollection(childNode, collection);
    }
}
function _aspxGetChildrenByPartialClassName(element, className) {
    if (element.querySelectorAll) {
        var list = element.querySelectorAll('*[class*=' + className + ']');
        return _aspxNodeListToArray(list);
    }
    var collection = element.all || element.getElementsByTagName('*');
    var ret = [];
    if (collection != null) {
        for (var i = 0; i < collection.length; i++) {
            if (_aspxElementCssClassContains(collection[i], className))
                ret.push(collection[i]);
        }
    }
    return ret;
}
function _aspxGetParentByPartialId(element, idPart) {
    while (element && element.tagName != "BODY") {
        if (element.id && element.id.indexOf(idPart) > -1)
            return element;
        element = element.parentNode;
    }
    return null;
}
function _aspxGetElementsByPartialId(element, partialName, list) {
    if (element.id && element.id.indexOf(partialName) > -1) {
        list.push(element);
    }
    if (element.childNodes)
        for (var i = 0; i < element.childNodes.length; i++) {
            _aspxGetElementsByPartialId(element.childNodes[i], partialName, list);
        }
}
function _aspxGetElementDocument(element) {
    return element.document || element.ownerDocument;
}
function _aspxRemoveElement(element) {
    if (element && element.parentNode)
        element.parentNode.removeChild(element);
}
function _aspxReplaceTagName(element, newTagName, cloneChilds) {
    if (element.nodeType != 1)
        return null;
    if (element.nodeName == newTagName)
        return element;
    cloneChilds = cloneChilds !== undefined ? cloneChilds : true;
    var doc = element.ownerDocument;
    var newElem = doc.createElement(newTagName);
    _aspxCopyAllAttributes(element, newElem);
    if (cloneChilds) {
        for (var i = 0; i < element.childNodes.length; i++)
            newElem.appendChild(element.childNodes[i].cloneNode(true));
    }
    else {
        for (var child; child = element.firstChild; )
            newElem.appendChild(child);
    }
    element.parentNode.replaceChild(newElem, element);
    return newElem;
}
function _aspxRemoveOuterTags(element) {
    if (__aspxIE) {
        element.insertAdjacentHTML('beforeBegin', element.innerHTML);
        _aspxRemoveElement(element);
    } else {
        var docFragment = element.ownerDocument.createDocumentFragment();
        for (var i = 0; i < element.childNodes.length; i++)
            docFragment.appendChild(element.childNodes[i].cloneNode(true));
        element.parentNode.replaceChild(docFragment, element);
    }
}
function _aspxWrapElementInNewElement(element, newElementTagName) {
    var wrapElement = null;
    if (__aspxIE) {
        var wrapElement = element.ownerDocument.createElement(newElementTagName);
        wrapElement.appendChild(element.cloneNode(true));
        element.parentNode.insertBefore(wrapElement, element);
        element.parentNode.removeChild(element);
    } else {
        var docFragment = element.ownerDocument.createDocumentFragment();
        wrapElement = element.ownerDocument.createElement(newElementTagName);
        docFragment.appendChild(wrapElement);
        wrapElement.appendChild(element.cloneNode(true));
        element.parentNode.replaceChild(docFragment, element);
    }
    return wrapElement;
}
function _aspxInsertElementAfter(newElement, targetElement) {
    var parentElem = targetElement.parentNode;
    if (parentElem.childNodes[parentElem.childNodes.length - 1] == targetElement)
        parentElem.appendChild(newElement);
    else
        parentElem.insertBefore(newElement, targetElement.nextSibling);
}
function _aspxGetEvent(evt) {
    return (typeof (event) != "undefined" && event != null && __aspxIE) ? event : evt;
}
function _aspxPreventEvent(evt) {
    if (evt.preventDefault)
        evt.preventDefault();
    else
        evt.returnValue = false;
    return false;
}
function _aspxPreventEventAndBubble(evt) {
    _aspxPreventEvent(evt);
    if (evt.stopPropagation)
        evt.stopPropagation();
    evt.cancelBubble = true;
    return false;
}
function _aspxCancelBubble(evt) {
    evt.cancelBubble = true;
    return false;
}
function _aspxPreventImageDragging(image) {
    if (image) {
        if (__aspxNetscapeFamily)
            image.onmousedown = function (evt) {
                evt.cancelBubble = true;
                return false;
            };
        else
            image.ondragstart = function () {
                return false;
            };
    }
}
function _aspxClientEventRequiresDocScrollCorrection() {
    return __aspxAndroidDefaultBrowser || !(__aspxSafari && __aspxBrowserVersion < 3 || __aspxMacOSMobilePlatform && __aspxBrowserVersion < 5.1);
}
function _aspxGetEventSource(evt) {
    if (!_aspxIsExists(evt)) return null;
    return evt.srcElement ? evt.srcElement : evt.target;
}
function _aspxGetEventX(evt) {
    if (ASPxClientTouchUI.isTouchEvent(evt))
        return ASPxClientTouchUI.getEventX(evt);
    return evt.clientX - _aspxGetIEDocumentClientOffsetInternal(true) + (_aspxClientEventRequiresDocScrollCorrection() ? _aspxGetDocumentScrollLeft() : 0);
}
function _aspxGetEventY(evt) {
    if (ASPxClientTouchUI.isTouchEvent(evt))
        return ASPxClientTouchUI.getEventY(evt);
    var oldSafari = __aspxSafari && __aspxBrowserVersion < 3 || __aspxMacOSMobilePlatform && __aspxBrowserVersion < 5.1;
    return evt.clientY - _aspxGetIEDocumentClientOffsetInternal(false) + (_aspxClientEventRequiresDocScrollCorrection() ? _aspxGetDocumentScrollTop() : 0);
}
function _aspxGetIEDocumentClientOffsetInternal(IsX) {
    var clientOffset = 0;
    if (__aspxIE && __aspxBrowserVersion < 8) {
        if (document.documentElement)
            clientOffset = IsX ? document.documentElement.clientLeft : document.documentElement.clientTop;
        if (clientOffset == 0 && document.body)
            var clientOffset = IsX ? document.body.clientLeft : document.body.clientTop;
    }
    return clientOffset;
}
function _aspxGetIsLeftButtonPressed(evt) {
    if (ASPxClientTouchUI.isTouchEvent(evt))
        return true;
    evt = _aspxGetEvent(evt);
    if (!evt) return false;
    if (__aspxIE && __aspxBrowserVersion < 11) {
        if (__aspxMSTouchUI)
            return true;
        return evt.button % 2 == 1;
    }
    else if (__aspxNetscapeFamily || __aspxWebKitFamily || (__aspxIE && __aspxBrowserVersion >= 11))
        return evt.which == 1;
    else if (__aspxOpera)
        return evt.button == 0;
    return true;
}
function _aspxGetWheelDelta(evt) {
    var ret = __aspxNetscapeFamily ? -evt.detail : evt.wheelDelta;
    if (__aspxOpera && __aspxBrowserVersion < 9)
        ret = -ret;
    return ret;
}
function _aspxDelCookie(name) {
    _aspxSetCookieInternal(name, "", new Date(1970, 1, 1));
}
function _aspxGetCookie(name) {
    name = escape(name);
    var cookies = document.cookie.split(';');
    for (var i = 0; i < cookies.length; i++) {
        var cookie = _aspxTrim(cookies[i]);
        if (cookie.indexOf(name + "=") == 0)
            return unescape(cookie.substring(name.length + 1, cookie.length));
        else if (cookie.indexOf(name + ";") == 0 || cookie === name)
            return "";
    }
    return null;
}
function _aspxSetCookie(name, value, expirationDate) {
    if (!_aspxIsExists(value)) {
        _aspxDelCookie(name);
        return;
    }
    if (!ASPxIdent.IsDate(expirationDate)) {
        expirationDate = new Date();
        expirationDate.setFullYear(expirationDate.getFullYear() + 1);
    }
    _aspxSetCookieInternal(name, value, expirationDate);
}
function _aspxSetCookieInternal(name, value, date) {
    document.cookie = escape(name) + "=" + escape(value.toString()) + "; expires=" + date.toGMTString() + "; path=/";
}
function _aspxSetElementOpacity(element, value) {
    var useOpacityStyle = !__aspxIE || __aspxBrowserVersion > 8;
    if (useOpacityStyle) {
        element.style.opacity = value;
    } else {
        if (typeof (element.filters) === "object" && element.filters["DXImageTransform.Microsoft.Alpha"])
            element.filters.item("DXImageTransform.Microsoft.Alpha").Opacity = value * 100;
        else
            element.style.filter = "alpha(opacity=" + (value * 100) + ")";
    }
}
function _aspxGetElementOpacity(element) {
    var useOpacityStyle = !__aspxIE || __aspxBrowserVersion > 8;
    if (useOpacityStyle)
        return parseFloat(_aspxGetCurrentStyle(element).opacity);
    else {
        if (typeof (element.filters) === "object" && element.filters["DXImageTransform.Microsoft.Alpha"]) {
            return element.filters.item("DXImageTransform.Microsoft.Alpha").Opacity / 100;
        } else {
            var alphaValue = _aspxGetCurrentStyle(element).filter;
            var value = alphaValue.replace("alpha(opacity=", "");
            value = value.replace(")", "");
            return parseInt(value) / 100;
        }
        return 100;
    }
}
function _aspxGetElementDisplay(element) {
    return element.style.display != "none";
}
function _aspxSetElementDisplay(element, value) {
    if (!element) return;
    element.style.display = value ? "" : "none";
}
function _aspxGetElementVisibility(element) {
    return element.style.visibility != "hidden";
}
function _aspxSetElementVisibility(element, value) {
    element.style.visibility = value ? "visible" : "hidden";
}
function _aspxElementIsVisible(element) {
    while (element && element.tagName != "BODY") {
        if (!_aspxGetElementDisplay(element) || (!_aspxGetElementVisibility(element) && !_aspxIsExistsAttribute(element, "errorFrame")))
            return false;
        element = element.parentNode;
    }
    return true;
}
function _aspxElementIsDisplayed(element) {
    while (element && element.tagName != "BODY") {
        if (!_aspxGetElementDisplay(element))
            return false;
        element = element.parentNode;
    }
    return true;
}
function _aspxAddStyleSheetLinkToDocument(doc, linkUrl) {
    var newLink = _aspxCreateStyleLink(doc, linkUrl);
    var head = _aspxGetHeadElementOrCreateIfNotExist(doc);
    head.appendChild(newLink);
}
function _aspxGetHeadElementOrCreateIfNotExist(doc) {
    var elements = _aspxGetElementsByTagName(doc, "head");
    var head = null;
    if (elements.length == 0) {
        head = doc.createElement("head");
        head.visibility = "hidden";
        doc.insertBefore(head, doc.body);
    } else
        head = elements[0];
    return head;
}
function _aspxCreateStyleLink(doc, url) {
    var newLink = doc.createElement("link");
    _aspxSetAttribute(newLink, "href", url);
    _aspxSetAttribute(newLink, "type", "text/css");
    _aspxSetAttribute(newLink, "rel", "stylesheet");
    return newLink;
}
function _aspxGetCurrentStyle(element) {
    if (__aspxIE)
        return element.currentStyle;
    else if (__aspxOpera && __aspxBrowserVersion < 9)
        return window.getComputedStyle(element, null);
    else if (!document.defaultView.getComputedStyle(element, null) && __aspxFirefox && !!window.frameElement) {
        var currentWindowParent = window.parent;
        var currentElement = window.frameElement;
        var elements = [];
        var elementsCssText = [];
        while (!document.defaultView.getComputedStyle(element, null) && !!currentElement) {
            elements.push(currentElement);
            elementsCssText.push(currentElement.style.cssText);
            currentElement.style.cssText += ";display: inline !important;";
            currentElement = currentElement.parentNode;
            if (currentElement.tagName == "HTML") {
                currentElement = currentWindowParent.frameElement;
                currentWindowParent = currentWindowParent.parent;
            }
        }
        var result = _aspxCloneObject(document.defaultView.getComputedStyle(element, null));
        for (var i = 0; i < elements.length; i++) {
            elements[i].style.cssText = elementsCssText[i];
        }
        return result;
    }
    else
        return document.defaultView.getComputedStyle(element, null);
}
function _aspxIsElementRightToLeft(element) {
    return _aspxGetElementDirection(element) == "rtl";
}
function _aspxCreateStyleSheetInDocument(doc) {
    if (doc.createStyleSheet) {
        try {
            return doc.createStyleSheet();
        }
        catch (e) {
            var message = "The CSS link limit (31) has been exceeded. Please enable CSS merging or reduce the number of CSS files on the page. For details, see http://www.devexpress.com/Support/Center/p/K18487.aspx.";
            throw new Error(message);
        }
    }
    else {
        var styleSheet = doc.createElement("STYLE");
        _aspxGetChildByTagName(doc, "HEAD", 0).appendChild(styleSheet);
        return styleSheet.sheet;
    }
}
function _aspxGetCurrentStyleSheet() {
    if (!__aspxStyleSheet)
        __aspxStyleSheet = _aspxCreateStyleSheetInDocument(document);
    return __aspxStyleSheet;
}
function _aspxCreateStyleSheet() {
    return _aspxCreateStyleSheetInDocument(document);
}
function _aspxGetStyleSheetRules(styleSheet) {
    try {
        return __aspxIE ? styleSheet.rules : styleSheet.cssRules;
    }
    catch (e) {
        return null;
    }
}
function _aspxGetStyleSheetRule(className) {
    if (__aspxCachedRules[className]) {
        if (__aspxCachedRules[className] != __aspxEmptyCachedValue)
            return __aspxCachedRules[className];
        return null;
    }
    for (var i = 0; i < document.styleSheets.length; i++) {
        var styleSheet = document.styleSheets[i];
        var rules = _aspxGetStyleSheetRules(styleSheet);
        if (rules != null) {
            for (var j = 0; j < rules.length; j++) {
                if (rules[j].selectorText == "." + className) {
                    __aspxCachedRules[className] = rules[j];
                    return rules[j];
                }
            }
        }
    }
    __aspxCachedRules[className] = __aspxEmptyCachedValue;
    return null;
}
function _aspxCreateImportantStyleRule(styleSheet, cssText, postfix, prefix) {
    styleSheet = styleSheet || _aspxGetCurrentStyleSheet();
    var cacheKey = (postfix ? postfix + "||" : "") + cssText + (prefix ? "||" + prefix : "");
    if (__aspxStyleNameCache[cacheKey])
        return __aspxStyleNameCache[cacheKey];
    prefix = prefix ? prefix + " " : "";
    var className = "dxh" + __aspxStyleCount + (postfix ? postfix : "");
    _aspxAddStyleSheetRule(styleSheet, prefix + "." + className, _aspxCreateImportantCssText(cssText));
    __aspxStyleCount++;
    __aspxStyleNameCache[cacheKey] = className;
    return className;
}
function _aspxCreateImportantCssText(cssText) {
    var newText = "";
    var attributes = cssText.split(";");
    for (var i = 0; i < attributes.length; i++) {
        if (attributes[i] != "")
            newText += attributes[i] + " !important;";
    }
    return newText;
}
function _aspxRemoveStyleSheetRule(styleSheet, index) {
    var rules = _aspxGetStyleSheetRules(styleSheet);
    if (rules != null && rules.length > 0 && rules.length >= index) {
        if (__aspxIE)
            styleSheet.removeRule(index);
        else
            styleSheet.deleteRule(index);
    }
}
function _aspxAddStyleSheetRule(styleSheet, selector, cssText) {
    if (!cssText) return;
    if (__aspxIE)
        styleSheet.addRule(selector, cssText);
    else
        styleSheet.insertRule(selector + " { " + cssText + " }", styleSheet.cssRules.length);
}
function _aspxGetPointerCursor() {
    return "pointer";
}
function _aspxSetPointerCursor(element) {
    if (element.style.cursor == "")
        element.style.cursor = _aspxGetPointerCursor();
}
function _aspxSetElementFloat(element, value) {
    if (_aspxIsExists(element.style.cssFloat))
        element.style.cssFloat = value;
    else if (_aspxIsExists(element.style.styleFloat))
        element.style.styleFloat = value;
    else
        _aspxSetAttribute(element.style, "float", value);
}
function _aspxGetElementFloat(element) {
    var currentStyle = _aspxGetCurrentStyle(element);
    if (_aspxIsExists(currentStyle.cssFloat))
        return currentStyle.cssFloat;
    if (_aspxIsExists(currentStyle.styleFloat))
        return currentStyle.styleFloat;
    return _aspxGetAttribute(currentStyle, "float");
}
function _aspxGetElementDirection(element) {
    return _aspxGetCurrentStyle(element).direction;
}
function _aspxSetElementDirection(element, value) {
    element.style.direction = value;
}
function _aspxAdjustVerticalMarginsInContainer(container) {
    var containerBorderAndPaddings = _aspxGetTopBottomBordersAndPaddingsSummaryValue(container);
    var flowElements = [], floatElements = [], floatTextElements = [];
    var maxHeight = 0, maxFlowHeight = 0;
    for (var i = 0; i < container.childNodes.length; i++) {
        var element = container.childNodes[i];
        if (!element.offsetHeight) continue;
        _aspxClearVerticalMargins(element);
    }
    for (var i = 0; i < container.childNodes.length; i++) {
        var element = container.childNodes[i];
        if (!element.offsetHeight) continue;
        var float = _aspxGetElementFloat(element);
        var isFloat = (float === "left" || float === "right");
        if (isFloat)
            floatElements.push(element)
        else {
            flowElements.push(element);
            if (element.tagName !== "IMG") {
                element.style.verticalAlign = 'baseline';
                floatTextElements.push(element);
            }
            if (element.tagName === "DIV")
                _aspxChangeStyleAttribute(element, "float", "left");
        }
        if (element.offsetHeight > maxHeight)
            maxHeight = element.offsetHeight;
        if (!isFloat && element.offsetHeight > maxFlowHeight)
            maxFlowHeight = element.offsetHeight;
    }
    for (var i = 0; i < flowElements.length; i++)
        _aspxRestoreStyleAttribute(flowElements[i], "float");
    var containerBorderAndPaddings = _aspxGetTopBottomBordersAndPaddingsSummaryValue(container);
    var containerHeight = container.offsetHeight - containerBorderAndPaddings;
    if (maxHeight == containerHeight) {
        var verticalAlign = _aspxGetCurrentStyle(container).verticalAlign;
        for (var i = 0; i < floatTextElements.length; i++)
            flowElements[i].style.verticalAlign = '';
        containerHeight = container.offsetHeight - containerBorderAndPaddings;
        for (var i = 0; i < floatElements.length; i++)
            _aspxAdjustVerticalMarginsCore(floatElements[i], containerHeight, verticalAlign);
        for (var i = 0; i < flowElements.length; i++) {
            if (maxFlowHeight != maxHeight)
                _aspxAdjustVerticalMarginsCore(flowElements[i], containerHeight, verticalAlign);
        }
    }
}
function _aspxAdjustVerticalMargins(element) {
    _aspxClearVerticalMargins(element);
    var parentElement = element.parentNode;
    var parentHeight = parentElement.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(parentElement);
    _aspxAdjustVerticalMarginsCore(element, parentHeight, _aspxGetCurrentStyle(parentElement).verticalAlign);
}
function _aspxAdjustVerticalMarginsCore(element, parentHeight, verticalAlign) {
    var marginTop;
    if (verticalAlign == "top")
        marginTop = 0;
    else if (verticalAlign == "bottom")
        marginTop = parentHeight - element.offsetHeight;
    else
        marginTop = (parentHeight - element.offsetHeight) / 2;
    if (marginTop !== 0)
        element.style.marginTop = Math.floor(marginTop) + "px";
}
function _aspxClearVerticalMargins(element) {
    element.style.marginTop = "";
    element.style.marginBottom = "";
}
function _aspxAdjustHeightInContainer(container) {
    var height = container.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(container);
    for (var i = 0; i < container.childNodes.length; i++) {
        var element = container.childNodes[i];
        if (!element.offsetHeight) continue;
        _aspxClearHeight(element);
    }
    var elements = [];
    var childrenHeight = 0;
    for (var i = 0; i < container.childNodes.length; i++) {
        var element = container.childNodes[i];
        if (!element.offsetHeight) continue;
        childrenHeight += element.offsetHeight;
        elements.push(element);
    }
    if (elements.length > 0 && childrenHeight < height) {
        var correctedHeight = 0;
        for (var i = 0; i < elements.length; i++) {
            var elementHeight = 0;
            if (i < elements.length - 1) {
                var elementHeight = Math.floor(height / elements.length);
                correctedHeight += elementHeight;
            }
            else {
                var elementHeight = height - correctedHeight;
                if (elementHeight < 0) elementHeight = 0;
            }
            _aspxAdjustHeightCore(elements[i], elementHeight);
        }
    }
}
function _aspxAdjustHeight(element) {
    _aspxClearHeight(element);
    var parentElement = element.parentNode;
    var height = parentElement.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(parentElement);
    _aspxAdjustHeightCore(element, height);
}
function _aspxAdjustHeightCore(element, height) {
    var height = height - _aspxGetTopBottomBordersAndPaddingsSummaryValue(element);
    element.style.height = height + "px";
}
function _aspxClearHeight(element) {
    element.style.height = "";
}
function _aspxAdjustWrappedTextInContainer(container) {
    if (!container) return;
    var textContainer, leftWidth = 0, rightWidth = 0;
    for (var i = 0; i < container.childNodes.length; i++) {
        var child = container.childNodes[i];
        if (!child.tagName || !child.offsetWidth)
            continue;
        if (child.tagName === "BR")
            break;
        if (child.tagName !== "IMG") {
            textContainer = child;
            textContainer.style.width = "";
            textContainer.style.marginRight = "";
        }
        else {
            var width = child.offsetWidth + _aspxGetLeftRightMargins(child);
            if (textContainer)
                rightWidth += width;
            else
                leftWidth += width;
        }
    }
    var containerWidth = container.offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(container);
    if (textContainer && _aspxIsTextWrapped(textContainer) && textContainer.offsetWidth + leftWidth + rightWidth >= containerWidth) {
        if (rightWidth > 0)
            textContainer.style.width = (containerWidth - rightWidth) + "px";
        else if (leftWidth > 0)
            textContainer.style.marginRight = leftWidth + "px";
    }
}
function _aspxIsTextWrapped(element) {
    return element && _aspxGetCurrentStyle(element).whiteSpace !== "nowrap";
}
var _aspxWebKit3TDRealInfo = {
    GetOffsetTop: function (tdElement) {
        switch (_aspxGetCurrentStyle(tdElement).verticalAlign) {
            case "middle":
                return Math.round(tdElement.offsetTop - (tdElement.offsetHeight - tdElement.clientHeight) / 2 + tdElement.clientTop);
            case "bottom":
                return tdElement.offsetTop - tdElement.offsetHeight + tdElement.clientHeight + tdElement.clientTop;
        }
        return tdElement.offsetTop;
    },
    GetClientHeight: function (tdElement) {
        var valign = _aspxGetCurrentStyle(tdElement).verticalAlign;
        switch (valign) {
            case "middle":
                return tdElement.clientHeight + tdElement.offsetTop * 2;
            case "top":
                return tdElement.offsetHeight - tdElement.clientTop * 2;
            case "bottom":
                return tdElement.clientHeight + tdElement.offsetTop;
        }
        return tdElement.clientHeight;
    }
}
function _aspxGetIsValidPosition(pos) {
    return pos != __aspxInvalidPosition && pos != -__aspxInvalidPosition;
}
function _aspxGetAbsoluteX(curEl) {
    return _aspxGetAbsolutePositionX(curEl);
}
function _aspxGetAbsoluteY(curEl) {
    return _aspxGetAbsolutePositionY(curEl);
}
function _aspxSetAbsoluteX(element, x) {
    element.style.left = _aspxPrepareClientPosForElement(x, element, true) + "px";
}
function _aspxSetAbsoluteY(element, y) {
    element.style.top = _aspxPrepareClientPosForElement(y, element, false) + "px";
}
function _aspxGetAbsolutePositionX(element) {
    if (__aspxIE)
        return _aspxGetAbsolutePositionX_IE(element);
    else if (__aspxFirefox && __aspxBrowserVersion >= 3)
        return _aspxGetAbsolutePositionX_FF3(element);
    else if (__aspxOpera)
        return _aspxGetAbsolutePositionX_Opera(element);
    else if (__aspxNetscapeFamily && (!__aspxFirefox || __aspxBrowserVersion < 3))
        return _aspxGetAbsolutePositionX_NS(element);
    else if (__aspxWebKitFamily)
        return _aspxGetAbsolutePositionX_Safari(element);
    else
        return _aspxGetAbsolutePositionX_Other(element);
}
function _aspxGetAbsolutePositionX_Opera(curEl) {
    var isFirstCycle = true;
    var pos = _aspxGetAbsoluteScrollOffset_OperaFF(curEl, true);
    while (curEl != null) {
        pos += curEl.offsetLeft;
        if (!isFirstCycle)
            pos -= curEl.scrollLeft;
        curEl = curEl.offsetParent;
        isFirstCycle = false;
    }
    pos += document.body.scrollLeft;
    return pos;
}
function _aspxGetAbsolutePositionX_IE(element) {
    if (element == null || __aspxIE && element.parentNode == null) return 0;
    return element.getBoundingClientRect().left + _aspxGetDocumentScrollLeft() - _aspxGetIEDocumentClientOffsetInternal(true);
}
function _aspxGetAbsolutePositionX_FF3(element) {
    if (element == null) return 0;
    var x = element.getBoundingClientRect().left + _aspxGetDocumentScrollLeft();
    return Math.round(x);
}
function _aspxGetAbsolutePositionX_NS(curEl) {
    var pos = _aspxGetAbsoluteScrollOffset_OperaFF(curEl, true);
    var isFirstCycle = true;
    while (curEl != null) {
        pos += curEl.offsetLeft;
        if (!isFirstCycle && curEl.offsetParent != null)
            pos -= curEl.scrollLeft;
        if (!isFirstCycle && __aspxFirefox) {
            var style = _aspxGetCurrentStyle(curEl);
            if (curEl.tagName == "DIV" && style.overflow != "visible")
                pos += _aspxPxToInt(style.borderLeftWidth);
        }
        isFirstCycle = false;
        curEl = curEl.offsetParent;
    }
    return pos;
}
function _aspxGetAbsolutePositionX_Safari(curEl) {
    var pos = _aspxGetAbsoluteScrollOffset_WebKit(curEl, true);
    var isSafariVerNonLessThan3OrChrome = __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome;
    if (curEl != null) {
        var isFirstCycle = true;
        if (isSafariVerNonLessThan3OrChrome && curEl.tagName == "TD") {
            pos += curEl.offsetLeft;
            curEl = curEl.offsetParent;
            isFirstCycle = false;
        }
        while (curEl != null) {
            pos += curEl.offsetLeft;
            var style = _aspxGetCurrentStyle(curEl);
            var posDiv = curEl.tagName == "DIV" && (style.position == "absolute" || style.position == "relative");
            if (!isFirstCycle && (curEl.tagName == "TD" || curEl.tagName == "TABLE" || posDiv))
                pos += curEl.clientLeft;
            isFirstCycle = false;
            curEl = curEl.offsetParent;
        }
    }
    return pos;
}
function _aspxGetAbsolutePositionX_Other(curEl) {
    var pos = 0;
    var isFirstCycle = true;
    while (curEl != null) {
        pos += curEl.offsetLeft;
        if (!isFirstCycle && curEl.offsetParent != null)
            pos -= curEl.scrollLeft;
        isFirstCycle = false;
        curEl = curEl.offsetParent;
    }
    return pos;
}
function _aspxGetAbsolutePositionY(element) {
    if (__aspxIE)
        return _aspxGetAbsolutePositionY_IE(element);
    else if (__aspxFirefox && __aspxBrowserVersion >= 3)
        return _aspxGetAbsolutePositionY_FF3(element);
    else if (__aspxOpera)
        return _aspxGetAbsolutePositionY_Opera(element);
    else if (__aspxNetscapeFamily && (!__aspxFirefox || __aspxBrowserVersion < 3))
        return _aspxGetAbsolutePositionY_NS(element);
    else if (__aspxWebKitFamily)
        return _aspxGetAbsolutePositionY_Safari(element);
    else
        return _aspxGetAbsolutePositionY_Other(element);
}
function _aspxGetAbsolutePositionY_Opera(curEl) {
    var isFirstCycle = true;
    if (curEl && curEl.tagName == "TR" && curEl.cells.length > 0)
        curEl = curEl.cells[0];
    var pos = _aspxGetAbsoluteScrollOffset_OperaFF(curEl, false);
    while (curEl != null) {
        pos += curEl.offsetTop;
        if (!isFirstCycle)
            pos -= curEl.scrollTop;
        curEl = curEl.offsetParent;
        isFirstCycle = false;
    }
    pos += document.body.scrollTop;
    return pos;
}
function _aspxGetAbsolutePositionY_IE(element) {
    if (element == null || __aspxIE && element.parentNode == null) return 0;
    return element.getBoundingClientRect().top + _aspxGetDocumentScrollTop() - _aspxGetIEDocumentClientOffsetInternal(false);
}
function _aspxGetAbsolutePositionY_FF3(element) {
    if (element == null) return 0;
    var y = element.getBoundingClientRect().top + _aspxGetDocumentScrollTop();
    return Math.round(y);
}
function _aspxGetAbsolutePositionY_NS(curEl) {
    var pos = _aspxGetAbsoluteScrollOffset_OperaFF(curEl, false);
    var isFirstCycle = true;
    while (curEl != null) {
        pos += curEl.offsetTop;
        if (!isFirstCycle && curEl.offsetParent != null)
            pos -= curEl.scrollTop;
        if (!isFirstCycle && __aspxFirefox) {
            var style = _aspxGetCurrentStyle(curEl);
            if (curEl.tagName == "DIV" && style.overflow != "visible")
                pos += _aspxPxToInt(style.borderTopWidth);
        }
        isFirstCycle = false;
        curEl = curEl.offsetParent;
    }
    return pos;
}
function _aspxGetAbsolutePositionY_Safari(curEl) {
    var pos = _aspxGetAbsoluteScrollOffset_WebKit(curEl, false);
    var isSafariVerNonLessThan3OrChrome = __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome;
    if (curEl != null) {
        var isFirstCycle = true;
        if (isSafariVerNonLessThan3OrChrome && curEl.tagName == "TD") {
            pos += _aspxWebKit3TDRealInfo.GetOffsetTop(curEl);
            curEl = curEl.offsetParent;
            isFirstCycle = false;
        }
        while (curEl != null) {
            pos += curEl.offsetTop;
            var style = _aspxGetCurrentStyle(curEl);
            var posDiv = curEl.tagName == "DIV" && (style.position == "absolute" || style.position == "relative");
            if (!isFirstCycle && (curEl.tagName == "TD" || curEl.tagName == "TABLE" || posDiv))
                pos += curEl.clientTop;
            isFirstCycle = false;
            curEl = curEl.offsetParent;
        }
    }
    return pos;
}
function _aspxGetAbsoluteScrollOffset_OperaFF(curEl, isX) {
    var pos = 0;
    var isFirstCycle = true;
    while (curEl != null) {
        if (curEl.tagName == "BODY")
            break;
        var style = _aspxGetCurrentStyle(curEl);
        if (style.position == "absolute")
            break;
        if (!isFirstCycle && curEl.tagName == "DIV" && (style.position == "" || style.position == "static"))
            pos -= isX ? curEl.scrollLeft : curEl.scrollTop;
        curEl = curEl.parentNode;
        isFirstCycle = false;
    }
    return pos;
}
function _aspxGetAbsoluteScrollOffset_WebKit(curEl, isX) {
    var pos = 0;
    var isFirstCycle = true;
    var step = 0;
    var absoluteWasFoundAtStep = -1;
    while (curEl != null) {
        if (curEl.tagName == "BODY")
            break;
        var style = _aspxGetCurrentStyle(curEl);
        var positionIsDefault = style.position == "" || style.position == "static";
        var absoluteWasFoundAtPreviousStep = absoluteWasFoundAtStep >= 0 && absoluteWasFoundAtStep < step;
        if (!isFirstCycle && curEl.tagName == "DIV" && (!positionIsDefault || !absoluteWasFoundAtPreviousStep))
            pos -= isX ? curEl.scrollLeft : curEl.scrollTop;
        if (style.position == "absolute")
            absoluteWasFoundAtStep = step;
        else if (style.position == "relative")
            absoluteWasFoundAtStep = -1;
        curEl = curEl.parentNode;
        isFirstCycle = false;
        step++;
    }
    return pos;
}
function _aspxGetAbsolutePositionY_Other(curEl) {
    var pos = 0;
    var isFirstCycle = true;
    while (curEl != null) {
        pos += curEl.offsetTop;
        if (!isFirstCycle && curEl.offsetParent != null)
            pos -= curEl.scrollTop;
        isFirstCycle = false;
        curEl = curEl.offsetParent;
    }
    return pos;
}
function _aspxPrepareClientPosForElement(pos, element, isX) {
    pos -= _aspxGetPositionElementOffset(element, isX);
    return pos;
}
function _aspxGetExperimentalPositionOffset(element, isX) {
    var div = document.createElement('div');
    div.style.top = "0px";
    div.style.left = "0px";
    div.visibility = "hidden";
    div.style.position = _aspxGetCurrentStyle(element).position;
    if (__aspxFirefox && __aspxBrowserVersion >= 10 && div.style.position == "static")
        div.style.position = "absolute";
    element.parentNode.appendChild(div);
    var realPos = isX ? _aspxGetAbsoluteX(div) : _aspxGetAbsoluteY(div);
    element.parentNode.removeChild(div);
    return realPos;
}
function _aspxTestElementParentsByFunc(element, func) {
    while (element) {
        var tagName = element.tagName;
        if (tagName == "HTML" || tagName == "BODY")
            return false;
        if (func(element))
            return true;
        element = element.parentNode;
    }
    return false;
}
function _aspxGetPositionElementOffset(element, isX) {
    if (__aspxFirefox && __aspxBrowserVersion >= 10) {
        return _aspxGetExperimentalPositionOffset(element, isX);
    }
    return _aspxGetPositionElementOffsetCore(element, isX);
}
function _aspxGetPositionElementOffsetCore(element, isX) {
    var curEl = element.offsetParent;
    var offset = 0;
    var scroll = 0;
    var isThereFixedParent = false;
    var isFixed = false;
    var hasDisplayTableParent = false;
    var position = "";
    while (curEl != null) {
        var tagName = curEl.tagName;
        if (tagName == "HTML") {
            break;
        }
        if (tagName == "BODY") {
            if (!__aspxOpera && !__aspxChrome) {
                var style = _aspxGetCurrentStyle(curEl);
                if (style.position != "" && style.position != "static") {
                    offset += _aspxPxToInt(isX ? style.left : style.top);
                    offset += _aspxPxToInt(isX ? style.marginLeft : style.marginTop);
                }
            }
            break;
        }
        if (tagName != "TD" && tagName != "TR") {
            var style = _aspxGetCurrentStyle(curEl);
            isFixed = style.position == "fixed";
            if (isFixed) {
                isThereFixedParent = true;
                if (__aspxIE && __aspxBrowserVersion >= 8) {
                    return _aspxGetExperimentalPositionOffset(element, isX);
                }
            }
            hasDisplayTableParent = style.display == "table" && (style.position == "absolute" || style.position == "relative");
            if (hasDisplayTableParent && __aspxIE && __aspxBrowserVersion >= 8)
                return _aspxGetExperimentalPositionOffset(element, isX);
            if (style.position == "absolute" || isFixed || style.position == "relative") {
                offset += isX ? curEl.offsetLeft : curEl.offsetTop;
                offset += _aspxPxToInt(isX ? style.borderLeftWidth : style.borderTopWidth);
            }
            if (style.position == "relative" && !(__aspxIE && __aspxBrowserVersion < 8))
                scroll += _aspxGetElementChainScroll(curEl, curEl.offsetParent, isX);
        }
        scroll += isX ? curEl.scrollLeft : curEl.scrollTop;
        curEl = curEl.offsetParent;
    }
    offset -= scroll;
    if ((__aspxIE && __aspxBrowserVersion >= 7 || __aspxFirefox && __aspxBrowserVersion >= 3) && isThereFixedParent)
        offset += isX ? _aspxGetDocumentScrollLeft() : _aspxGetDocumentScrollTop();
    return offset;
}
function _aspxGetElementChainScroll(startElement, endElement, isX) {
    var curEl = startElement.parentNode;
    var scroll = 0;
    while (curEl != endElement) {
        scroll += isX ? curEl.scrollLeft : curEl.scrollTop;
        curEl = curEl.parentNode;
    }
    return scroll;
}
function _aspxGetSizeOfText(text, textCss) {
    var testContainer = document.createElement("tester");
    testContainer.style.fontSize = textCss.fontSize;
    testContainer.style.fontFamily = textCss.fontFamily;
    testContainer.style.fontWeight = textCss.fontWeight;
    testContainer.style.letterSpacing = textCss.letterSpacing;
    testContainer.style.lineHeight = textCss.lineHeight;
    testContainer.style.position = "absolute";
    testContainer.style.top = __aspxInvalidPosition + "px";
    testContainer.style.left = __aspxInvalidPosition + "px";
    testContainer.style.width = "auto";
    testContainer.style.whiteSpace = "nowrap";
    testContainer.appendChild(document.createTextNode(text));
    var testElement = document.body.appendChild(testContainer);
    var size = {
        "width": testElement.offsetWidth,
        "height": testElement.offsetHeight
    };
    document.body.removeChild(testElement);
    return size;
}
function _aspxIsValidJSON(JsonString) {
    return !(/[^,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]/.test(JsonString.replace(/"(\\.|[^"\\])*"/g, '')))
}
function _aspxEvalJSON(jsonString, controlName) {
    if (_aspxIsValidJSON(jsonString))
        return eval("(" + jsonString + ")");
    else
        throw new Error(controlName + " received incorrect JSON-data: " + jsonString);
}
function _aspxPointToPixel(points, addPx) {
    var result = 0;
    try {
        var indexOfPt = points.toLowerCase().indexOf("pt");
        if (indexOfPt > -1)
            result = parseInt(points.substr(0, indexOfPt)) * 96 / 72;
        else
            result = parseInt(points) * 96 / 72;
        if (addPx)
            result = result + "px";
    } catch (e) { }
    return result;
}
function _aspxPixelToPoint(pixels, addPt) {
    var result = 0;
    try {
        var indexOfPx = pixels.toLowerCase().indexOf("px");
        if (indexOfPx > -1)
            result = parseInt(pixels.substr(0, indexOfPx)) * 72 / 96;
        else
            result = parseInt(pixels) * 72 / 96;
        if (addPt)
            result = result + "pt";
    } catch (e) { }
    return result;
}
function _aspxPxToInt(px) {
    return _aspxPxToNumber(px, parseInt);
}
function _aspxPxToFloat(px) {
    return _aspxPxToNumber(px, parseFloat);
}
function _aspxPxToNumber(px, parseFunction) {
    var result = 0;
    if (px != null && px != "") {
        try {
            var indexOfPx = px.indexOf("px");
            if (indexOfPx > -1)
                result = parseFunction(px.substr(0, indexOfPx));
        } catch (e) { }
    }
    return result;
}
function _aspxPercentageToFloat(perc) {
    var result = 0;
    if (perc != null && perc != "") {
        try {
            var indexOfPerc = perc.indexOf("%");
            if (indexOfPerc > -1)
                result = parseFloat(perc.substr(0, indexOfPerc)) / 100;
        } catch (e) { }
    }
    return result;
}
function _aspxGetLeftRightBordersAndPaddingsSummaryValue(element, currentStyle) {
    if (!_aspxIsExists(currentStyle))
        currentStyle = _aspxGetCurrentStyle(element);
    var value = _aspxPxToInt(currentStyle.paddingLeft) + _aspxPxToInt(currentStyle.paddingRight);
    return value + _aspxGetHorizontalBordersWidth(element, currentStyle);
}
function _aspxGetTopBottomBordersAndPaddingsSummaryValue(element, currentStyle) {
    if (!_aspxIsExists(currentStyle))
        currentStyle = _aspxGetCurrentStyle(element);
    var value = _aspxPxToInt(currentStyle.paddingTop) + _aspxPxToInt(currentStyle.paddingBottom);
    return value + _aspxGetVerticalBordersWidth(element, currentStyle);
}
function _aspxGetVerticalBordersWidth(element, style) {
    if (!_aspxIsExists(style))
        style = _aspxGetCurrentStyle(element);
    var res = 0;
    if (style.borderTopStyle != "none")
        res += _aspxPxToInt(style.borderTopWidth);
    if (style.borderBottomStyle != "none")
        res += _aspxPxToInt(style.borderBottomWidth);
    return res;
}
function _aspxGetHorizontalBordersWidth(element, style) {
    if (!_aspxIsExists(style))
        style = _aspxGetCurrentStyle(element);
    var res = 0;
    if (style.borderLeftStyle != "none")
        res += _aspxPxToInt(style.borderLeftWidth);
    if (style.borderRightStyle != "none")
        res += _aspxPxToInt(style.borderRightWidth);
    return res;
}
function _aspxGetTopBottomMargins(element) {
    var currentStyle = _aspxGetCurrentStyle(element);
    return _aspxPxToInt(currentStyle.marginTop) + _aspxPxToInt(currentStyle.marginBottom);
}
function _aspxGetLeftRightMargins(element) {
    var currentStyle = _aspxGetCurrentStyle(element);
    return _aspxPxToInt(currentStyle.marginLeft) + _aspxPxToInt(currentStyle.marginRight);
}
function _aspxGetCeilOffsetHeight(element) {
    if (__aspxIE && __aspxBrowserVersion > 9)
        return Math.ceil(element.getBoundingClientRect().height);
    return element.offsetHeight;
}
function _aspxGetClearClientWidth(element) {
    return element.offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(element);
}
function _aspxGetClearClientHeight(element) {
    return element.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(element);
}
function _aspxSetOffsetWidth(element, widthValue, currentStyle) {
    if (!_aspxIsExists(currentStyle))
        currentStyle = _aspxGetCurrentStyle(element);
    var value = widthValue - _aspxPxToInt(currentStyle.marginLeft) - _aspxPxToInt(currentStyle.marginRight);
    value -= _aspxGetLeftRightBordersAndPaddingsSummaryValue(element, currentStyle);
    if (value > -1)
        element.style.width = value + "px";
}
function _aspxSetOffsetHeight(element, heightValue, currentStyle) {
    if (!_aspxIsExists(currentStyle))
        currentStyle = _aspxGetCurrentStyle(element);
    var value = heightValue - _aspxPxToInt(currentStyle.marginTop) - _aspxPxToInt(currentStyle.marginBottom);
    value -= _aspxGetTopBottomBordersAndPaddingsSummaryValue(element, currentStyle);
    if (value > -1)
        element.style.height = value + "px";
}
function _aspxFindOffsetParent(element) {
    if (__aspxIE && __aspxBrowserVersion < 8)
        return element.offsetParent;
    var currentElement = element.parentNode;
    while (_aspxIsExistsElement(currentElement) && currentElement.tagName != "BODY") {
        if (currentElement.offsetWidth > 0 && currentElement.offsetHeight > 0)
            return currentElement;
        currentElement = currentElement.parentNode;
    }
    return document.body;
}
function _aspxGetDocumentScrollTop() {
    if (__aspxWebKitFamily || __aspxIE && __aspxBrowserVersion == 5.5 || document.documentElement.scrollTop == 0) {
        if (__aspxMacOSMobilePlatform)
            return window.pageYOffset;
        else
            return document.body.scrollTop;
    }
    else
        return document.documentElement.scrollTop;
}
function _aspxSetDocumentScrollTop(scrollTop) {
    if (__aspxWebKitFamily || __aspxIE && __aspxBrowserVersion == 5.5 || document.documentElement.scrollTop == 0) {
        if (__aspxMacOSMobilePlatform)
            window.pageYOffset = scrollTop;
        else
            document.body.scrollTop = scrollTop;
    }
    else
        document.documentElement.scrollTop = scrollTop;
}
function _aspxGetDocumentScrollLeft() {
    if (__aspxIE && __aspxBrowserVersion < 8) {
        var body = document.body || document.documentElement;
        if (_aspxIsElementRightToLeft(body))
            return body.scrollWidth - body.scrollLeft - body.clientWidth;
    }
    if (__aspxWebKitFamily || __aspxIE && __aspxBrowserVersion == 5.5 || document.documentElement.scrollLeft == 0)
        return document.body.scrollLeft;
    return document.documentElement.scrollLeft;
}
function _aspxSetDocumentScrollLeft(scrollLeft) {
    if (__aspxWebKitFamily || __aspxIE && __aspxBrowserVersion == 5.5 || document.documentElement.scrollLeft == 0) {
        if (__aspxMacOSMobilePlatform)
            window.pageXOffset = scrollLeft;
        else
            document.body.scrollLeft = scrollLeft;
    }
    else
        document.documentElement.scrollLeft = scrollLeft;
}
function _aspxGetDocumentClientWidth() {
    if (__aspxIE && __aspxBrowserVersion == 5.5 || document.documentElement.clientWidth == 0)
        return document.body.clientWidth;
    else
        return document.documentElement.clientWidth;
}
function _aspxGetDocumentClientHeight() {
    if (__aspxOpera)
        return __aspxBrowserVersion >= 9.6 ? document.documentElement.clientHeight : document.body.clientHeight;
    else if (__aspxIE && __aspxBrowserVersion == 5.5 || document.documentElement.clientHeight == 0)
        return document.body.clientHeight;
    else
        return document.documentElement.clientHeight;
}
function _aspxSetStyles(element, styles) {
    if (_aspxIsExists(styles.cssText))
        element.style.cssText = styles.cssText;
    if (_aspxIsExists(styles.className))
        element.className = styles.className;
    for (var property in styles) {
        if (!styles.hasOwnProperty(property))
            continue;
        var value = styles[property];
        switch (property) {
            case "cssText":
            case "className":
                break;
            case "float":
                _aspxSetElementFloat(element, value);
                break;
            case "opacity":
                _aspxSetElementOpacity(element, value);
                break;
            default:
                element.style[property] = value + (typeof (value) == "number" ? "px" : "");
        }
    }
}
function _aspxGetDocumentWidth() {
    var bodyWidth = document.body.offsetWidth;
    var docWidth = (__aspxIE && __aspxBrowserMajorVersion != 7) ? document.documentElement.clientWidth : document.documentElement.offsetWidth;
    var bodyScrollWidth = document.body.scrollWidth;
    var docScrollWidth = document.documentElement.scrollWidth;
    return _aspxGetMaxDimensionOf(bodyWidth, docWidth, bodyScrollWidth, docScrollWidth);
}
function _aspxGetDocumentHeight() {
    var bodyHeight = document.body.offsetHeight;
    var docHeight = (__aspxIE && __aspxBrowserMajorVersion != 7) ? document.documentElement.clientHeight : document.documentElement.offsetHeight;
    var bodyScrollHeight = document.body.scrollHeight;
    var docScrollHeight = document.documentElement.scrollHeight;
    var maxHeight = _aspxGetMaxDimensionOf(bodyHeight, docHeight, bodyScrollHeight, docScrollHeight);
    if (__aspxOpera && __aspxBrowserVersion >= 9.6) {
        if (__aspxBrowserVersion < 10)
            maxHeight = _aspxGetMaxDimensionOf(bodyHeight, docHeight, bodyScrollHeight);
        var visibleHeightOfDocument = document.documentElement.clientHeight;
        if (maxHeight > visibleHeightOfDocument)
            maxHeight = _aspxGetMaxDimensionOf(window.outerHeight, maxHeight);
        else
            maxHeight = document.documentElement.clientHeight;
        return maxHeight;
    }
    return maxHeight;
}
function _aspxGetDocumentMaxClientWidth() {
    var bodyWidth = document.body.offsetWidth;
    var docWidth = document.documentElement.offsetWidth;
    var docClientWidth = document.documentElement.clientWidth;
    return _aspxGetMaxDimensionOf(bodyWidth, docWidth, docClientWidth);
}
function _aspxGetDocumentMaxClientHeight() {
    var bodyHeight = document.body.offsetHeight;
    var docHeight = document.documentElement.offsetHeight;
    var docClientHeight = document.documentElement.clientHeight;
    return _aspxGetMaxDimensionOf(bodyHeight, docHeight, docClientHeight);
}
function _aspxGetMaxDimensionOf() {
    var max = __aspxInvalidDimension;
    for (var i = 0; i < arguments.length; i++) {
        if (max < arguments[i])
            max = arguments[i];
    }
    return max;
}
function _aspxGetClientLeft(element) {
    return _aspxIsExists(element.clientLeft) ? element.clientLeft : (element.offsetWidth - element.clientWidth) / 2;
}
function _aspxGetClientTop(element) {
    return _aspxIsExists(element.clientTop) ? element.clientTop : (element.offsetHeight - element.clientHeight) / 2;
}
function _aspxRemoveBorders(element) {
    if (!element)
        return;
    element.style.borderWidth = 0;
    for (var i = 0; i < element.childNodes.length; i++) {
        var child = element.childNodes[i];
        if (child.style)
            child.style.border = "0";
    }
}
function _aspxSetBackground(element, background) {
    if (!element)
        return;
    element.style.backgroundColor = background;
    for (var i = 0; i < element.childNodes.length; i++) {
        var child = element.childNodes[i];
        if (child.style)
            child.style.backgroundColor = background;
    }
}
function _aspxDoElementClick(element) {
    try {
        element.click();
    }
    catch (e) {
    }
}
function _aspxGetCellSpacing(element) {
    var val = parseInt(element.cellSpacing);
    if (!isNaN(val)) return val;
    val = parseInt(_aspxGetCurrentStyle(element).borderSpacing);
    if (!isNaN(val)) return val;
    return 0;
}
function _aspxSetSelection(input, startPos, endPos, scrollToSelection) {
    if (!_aspxIsExistsElement(input))
        return;
    var textLen = input.value.length;
    startPos = _aspxGetDefinedValue(startPos, 0);
    endPos = _aspxGetDefinedValue(endPos, textLen);
    if (startPos < 0)
        startPos = 0;
    if (endPos < 0 || endPos > textLen)
        endPos = textLen;
    if (startPos > endPos)
        startPos = endPos;
    var makeReadOnly = false;
    if (__aspxWebKitFamily && input.readOnly) {
        input.readOnly = false;
        makeReadOnly = true;
    }
    try {
        if (__aspxIE) {
            var range = input.createTextRange();
            range.collapse(true);
            range.moveStart("character", startPos);
            range.moveEnd("character", endPos - startPos);
            range.select();
        } else {
            (__aspxFirefox && __aspxBrowserVersion >= 8) ? input.setSelectionRange(startPos, endPos, "backward") : input.setSelectionRange(startPos, endPos);
            if (__aspxOpera || __aspxFirefox)
                input.focus();
        }
    } catch (e) {
    }
    if (scrollToSelection && input.tagName == 'TEXTAREA') {
        var scrollHeight = input.scrollHeight;
        var approxCaretPos = startPos;
        var scrollTop = Math.max(Math.round(approxCaretPos * scrollHeight / textLen - input.clientHeight / 2), 0);
        input.scrollTop = scrollTop;
    }
    if (makeReadOnly)
        input.readOnly = true;
}
function _aspxGetSelectionInfo(input) {
    var start, end;
    if (__aspxIE && __aspxBrowserVersion < 9) {
        var range = document.selection.createRange();
        var rangeCopy = range.duplicate();
        range.move('character', -input.value.length);
        range.setEndPoint('EndToStart', rangeCopy);
        start = range.text.length;
        end = start + rangeCopy.text.length;
    } else {
        try {
            start = input.selectionStart;
            end = input.selectionEnd;
        } catch (e) {
        }
    }
    return { startPos: start, endPos: end };
}
function _aspxGetBaseSelectionInfo(input) {
    var start = 0, end = 0, textLen = 0;
    var normalizedValue;
    var range, textInputRange, textInputEndRange;
    if (typeof input.selectionStart == "number" && typeof input.selectionEnd == "number") {
        start = input.selectionStart;
        end = input.selectionEnd;
    } else {
        range = document.selection.createRange();
        if (range && range.parentElement() == input) {
            textLen = input.value.length;
            normalizedValue = input.value.replace(/\r\n/g, "\n");
            textInputRange = input.createTextRange();
            textInputRange.moveToBookmark(range.getBookmark());
            textInputEndRange = input.createTextRange();
            textInputEndRange.collapse(false);
            if (textInputRange.compareEndPoints("StartToEnd", textInputEndRange) > -1) {
                start = textLen;
                end = textLen;
            } else {
                start = normalizedValue.slice(0, start).split("\n").length - textInputRange.moveStart("character", -textLen) - 1;
                if (textInputRange.compareEndPoints("EndToEnd", textInputEndRange) > -1)
                    end = textLen;
                else
                    end = normalizedValue.slice(0, end).split("\n").length - textInputRange.moveEnd("character", -textLen) - 1;
            }
        }
    }
    return { startPos: start, endPos: end };
}
function _aspxSetCaretPosition(input, caretPos) {
    if (typeof caretPos === "undefined" || caretPos < 0)
        caretPos = input.value.length;
    _aspxSetSelection(input, caretPos, caretPos, true);
}
_aspxSetInputSelection = _aspxSetSelectionCore = _aspxSetSelection;
_aspxClearInputSelection = _aspxSetCaretPosition;
function _aspxSetFocus(element, selectAction) {
    function focusCore(element, selectAction) {
        try {
            element.focus();
            if (__aspxIE && document.activeElement != element)
                element.focus();
            if (selectAction) {
                var currentSelection = _aspxGetSelectionInfo(element);
                if (currentSelection.startPos == currentSelection.endPos) {
                    switch (selectAction) {
                        case "start":
                            _aspxSetCaretPosition(element, 0);
                            break;
                        case "all":
                            _aspxSetSelection(element);
                            break;
                    }
                }
            }
        } catch (e) {
        }
    }
    if (ASPxClientUtils.iOSPlatform)
        focusCore(element, selectAction);
    else {
        window.setTimeout(function () {
            focusCore(element, selectAction);
        }, 100);
    }
}
function _aspxIsFocusableCore(element, skipContainerVisibilityCheck) {
    var current = element;
    while (current && current.nodeType == 1) {
        if (current == element || !skipContainerVisibilityCheck(current)) {
            if (current.tagName == "BODY")
                return true;
            if (current.disabled || !_aspxGetElementDisplay(current) || !_aspxGetElementVisibility(current))
                return false;
        }
        current = current.parentNode;
    }
    return true;
}
function _aspxIsFocusable(element) {
    return _aspxIsFocusableCore(element, _aspxFalseFunction);
}
function _aspxAttachEventToElement(element, eventName, func, onlyBubbling) {
    if (element.addEventListener)
        element.addEventListener(eventName, func, !onlyBubbling);
    else
        element.attachEvent("on" + eventName, func);
}
function _aspxDetachEventFromElement(element, eventName, func) {
    if (element.removeEventListener)
        element.removeEventListener(eventName, func, true);
    else
        element.detachEvent("on" + eventName, func);
}
function _aspxAttachEventToDocument(eventName, func) {
    var attachingAllowed = ASPxClientTouchUI.onEventAttachingToDocument(eventName, func);
    if (attachingAllowed)
        _aspxAttachEventToDocumentCore(eventName, func);
}
function _aspxAttachEventToDocumentCore(eventName, func) {
    _aspxAttachEventToElement(document, eventName, func);
}
function _aspxDetachEventFromDocument(eventName, func) {
    _aspxDetachEventFromDocumentCore(eventName, func);
    ASPxClientTouchUI.onEventDettachedFromDocument(eventName, func);
}
function _aspxDetachEventFromDocumentCore(eventName, func) {
    _aspxDetachEventFromElement(document, eventName, func);
}
function _aspxCreateEventHandlerFunction(funcName, controlName, withHtmlEventArg) {
    if (withHtmlEventArg)
        return function (e) { window[funcName](controlName, e) };
    return function () { window[funcName](controlName) };
}
function _aspxGetMouseWheelEventName() {
    return __aspxNetscapeFamily ? "DOMMouseScroll" : "mousewheel";
}
function _aspxAttachMouseEnterToElement(element, onMouseOverHandler, onMouseOutHandler) {
    _aspxAttachEventToElement(element, "mouseover", function (evt) { _aspxMouseEnterHandler(evt, element, onMouseOverHandler, onMouseOutHandler); });
    _aspxAttachEventToElement(element, "mouseout", function (evt) { _aspxMouseEnterHandler(evt, element, onMouseOverHandler, onMouseOutHandler); });
}
function _aspxMouseEnterHandler(evt, element, onMouseOverHandler, onMouseOutHandler) {
    var isMouseOverExecuted = !!element.dxMouseOverExecuted;
    var isMouseOverEvent = (evt.type == "mouseover");
    if (isMouseOverEvent && isMouseOverExecuted || !isMouseOverEvent && !isMouseOverExecuted)
        return;
    var source = evt.relatedTarget || (isMouseOverEvent ? evt.srcElement : evt.toElement);
    if (!_aspxGetIsParent(element, source)) {
        element.dxMouseOverExecuted = isMouseOverEvent;
        if (isMouseOverEvent)
            onMouseOverHandler(element);
        else
            onMouseOutHandler(element);
    }
    else if (isMouseOverEvent && !isMouseOverExecuted) {
        element.dxMouseOverExecuted = true;
        onMouseOverHandler(element);
    }
}
function _aspxCreateClass(parentClass, properties) {
    var ret = function () {
        if (ret.preparing)
            return delete (ret.preparing);
        if (ret.constr) {
            this.constructor = ret;
            ret.constr.apply(this, arguments);
        }
    }
    ret.prototype = {};
    if (parentClass) {
        parentClass.preparing = true;
        ret.prototype = new parentClass;
        ret.prototype.constructor = parentClass;
        ret.constr = parentClass;
    }
    if (properties) {
        var constructorName = "constructor";
        for (var name in properties) {
            if (name != constructorName)
                ret.prototype[name] = properties[name];
        }
        if (properties[constructorName] && properties[constructorName] != Object)
            ret.constr = properties[constructorName];
    }
    return ret;
}
function _aspxGetAttribute(obj, attrName) {
    if (obj.getAttribute)
        return obj.getAttribute(attrName);
    else if (obj.getPropertyValue)
        return obj.getPropertyValue(attrName);
    return null;
}
function _aspxSetAttribute(obj, attrName, value) {
    if (obj.setAttribute)
        obj.setAttribute(attrName, value);
    else if (obj.setProperty)
        obj.setProperty(attrName, value, "");
}
function _aspxRemoveAttribute(obj, attrName) {
    if (obj.removeAttribute)
        obj.removeAttribute(attrName);
    else if (obj.removeProperty)
        obj.removeProperty(attrName);
}
function _aspxIsExistsAttribute(obj, attrName) {
    var value = _aspxGetAttribute(obj, attrName);
    return (value != null) && (value !== "");
}
function _aspxSetOrRemoveAttribute(obj, attrName, value) {
    if (!value)
        _aspxRemoveAttribute(obj, attrName);
    else
        _aspxSetAttribute(obj, attrName, value);
}
function _aspxSaveAttribute(obj, attrName, savedObj, savedAttrName) {
    if (!_aspxIsExistsAttribute(savedObj, savedAttrName)) {
        var oldValue = _aspxIsExistsAttribute(obj, attrName) ? _aspxGetAttribute(obj, attrName) : __aspxEmptyAttributeValue;
        _aspxSetAttribute(savedObj, savedAttrName, oldValue);
    }
}
function _aspxSaveStyleAttribute(obj, attrName) {
    _aspxSaveAttribute(obj.style, attrName, obj, "saved" + attrName);
}
function _aspxChangeAttributeExtended(obj, attrName, savedObj, savedAttrName, newValue) {
    _aspxSaveAttribute(obj, attrName, savedObj, savedAttrName);
    _aspxSetAttribute(obj, attrName, newValue);
}
function _aspxChangeAttribute(obj, attrName, newValue) {
    _aspxChangeAttributeExtended(obj, attrName, obj, "saved" + attrName, newValue);
}
function _aspxChangeStyleAttribute(obj, attrName, newValue) {
    _aspxChangeAttributeExtended(obj.style, attrName, obj, "saved" + attrName, newValue);
}
function _aspxResetAttributeExtended(obj, attrName, savedObj, savedAttrName) {
    _aspxSaveAttribute(obj, attrName, savedObj, savedAttrName);
    _aspxSetAttribute(obj, attrName, "");
    _aspxRemoveAttribute(obj, attrName);
}
function _aspxResetAttribute(obj, attrName) {
    _aspxResetAttributeExtended(obj, attrName, obj, "saved" + attrName);
}
function _aspxResetStyleAttribute(obj, attrName) {
    _aspxResetAttributeExtended(obj.style, attrName, obj, "saved" + attrName);
}
function _aspxRestoreAttributeExtended(obj, attrName, savedObj, savedAttrName) {
    if (_aspxIsExistsAttribute(savedObj, savedAttrName)) {
        var oldValue = _aspxGetAttribute(savedObj, savedAttrName);
        if (oldValue != __aspxEmptyAttributeValue)
            _aspxSetAttribute(obj, attrName, oldValue);
        else
            _aspxRemoveAttribute(obj, attrName);
        _aspxRemoveAttribute(savedObj, savedAttrName);
        return true;
    }
    return false;
}
function _aspxRestoreAttribute(obj, attrName) {
    return _aspxRestoreAttributeExtended(obj, attrName, obj, "saved" + attrName);
}
function _aspxRestoreStyleAttribute(obj, attrName) {
    return _aspxRestoreAttributeExtended(obj.style, attrName, obj, "saved" + attrName);
}
function _aspxCopyAllAttributes(sourceElem, destElement) {
    var attrs = sourceElem.attributes;
    for (var n = 0; n < attrs.length; n++) {
        var attr = attrs[n];
        if (attr.specified) {
            var attrName = attr.nodeName;
            var attrValue = sourceElem.getAttribute(attrName, 2);
            if (attrValue == null)
                attrValue = attr.nodeValue;
            destElement.setAttribute(attrName, attrValue, 0);
        }
    }
    if (sourceElem.style.cssText !== '')
        destElement.style.cssText = sourceElem.style.cssText;
}
function _aspxRemoveAllAttributes(element, excludedAttributes) {
    var excludedAttributesHashTable = {};
    if (excludedAttributes)
        excludedAttributesHashTable = _aspxCreateHashTableFromArray(excludedAttributes);
    if (element.attributes) {
        var attrArray = element.attributes;
        for (var i = 0; i < attrArray.length; i++) {
            var attrName = attrArray[i].name;
            if (!_aspxIsExists(excludedAttributesHashTable[attrName.toLowerCase()])) {
                try {
                    attrArray.removeNamedItem(attrName);
                } catch (e) { }
            }
        }
    }
}
function _aspxRemoveStyleAttribute(element, attrName) {
    if (element.style) {
        if (__aspxFirefox && element.style[attrName])
            element.style[attrName] = "";
        if (element.style.removeAttribute && element.style.removeAttribute != "")
            element.style.removeAttribute(attrName);
        else if (element.style.removeProperty && element.style.removeProperty != "")
            element.style.removeProperty(attrName);
    }
}
function _aspxRemoveAllStyles(element) {
    if (element.style) {
        for (var key in element.style)
            _aspxRemoveStyleAttribute(element, key);
        _aspxRemoveAttribute(element, "style");
    }
}
function _aspxChangeTabIndexAttribute(element) {
    var attribute = _aspxGetTabIndexAttribute();
    if (_aspxGetAttribute(element, attribute) != -1)
        _aspxChangeAttribute(element, attribute, -1);
}
function _aspxSaveTabIndexAttributeAndReset(element) {
    var attribute = _aspxGetTabIndexAttribute();
    _aspxSaveAttribute(element, attribute, element, "saved" + attribute);
    _aspxSetAttribute(element, attribute, -1);
}
function _aspxRestoreTabIndexAttribute(element) {
    var attribute = _aspxGetTabIndexAttribute();
    if (_aspxIsExistsAttribute(element, attribute)) {
        if (_aspxGetAttribute(element, attribute) == -1) {
            if (_aspxIsExistsAttribute(element, "saved" + attribute)) {
                var oldValue = _aspxGetAttribute(element, "saved" + attribute);
                if (oldValue != __aspxEmptyAttributeValue)
                    _aspxSetAttribute(element, attribute, oldValue);
                else {
                    if (__aspxWebKitFamily)
                        _aspxSetAttribute(element, attribute, 0);
                    _aspxRemoveAttribute(element, attribute);
                }
                _aspxRemoveAttribute(element, "saved" + attribute);
            }
        }
    }
}
function _aspxGetTabIndexAttribute() {
    return __aspxIE ? "tabIndex" : "tabindex";
}
function _aspxChangeAttributesMethod(enabled) {
    return enabled ? _aspxRestoreAttribute : _aspxResetAttribute;
}
function _aspxInitiallyChangeAttributesMethod(enabled) {
    return enabled ? _aspxChangeAttribute : _aspxResetAttribute;
}
function _aspxChangeStyleAttributesMethod(enabled) {
    return enabled ? _aspxRestoreStyleAttribute : _aspxResetStyleAttribute;
}
function _aspxInitiallyChangeStyleAttributesMethod(enabled) {
    return enabled ? _aspxChangeStyleAttribute : _aspxResetStyleAttribute;
}
function _aspxChangeEventsMethod(enabled) {
    return enabled ? _aspxAttachEventToElement : _aspxDetachEventFromElement;
}
function _aspxChangeDocumentEventsMethod(enabled) {
    return enabled ? _aspxAttachEventToDocument : _aspxDetachEventFromDocument;
}
function _aspxTrimStart(str) {
    return _aspxTrimImpl(str, true);
}
function _aspxTrimEnd(str) {
    return _aspxTrimImpl(str, false, true);
}
function _aspxTrim(str) {
    return _aspxTrimImpl(str, true, true);
}
function _aspxTrimImpl(source, trimStart, trimEnd) {
    var len = source.length;
    if (!len)
        return source;
    if (len < 0xBABA1) {
        var result = source;
        if (trimStart) {
            result = result.replace(/^\s+/, "");
        }
        if (trimEnd) {
            result = result.replace(/\s+$/, "");
        }
        return result;
    } else {
        var start = 0;
        if (trimEnd) {
            while (len > 0 && ASPxWhiteSpaces[source.charCodeAt(len - 1)]) {
                len--;
            }
        }
        if (trimStart && len > 0) {
            while (start < len && ASPxWhiteSpaces[source.charCodeAt(start)]) {
                start++;
            }
        }
        return source.substring(start, len);
    }
}
function _aspxInsert(str, subStr, index) {
    var leftText = str.slice(0, index);
    var rightText = str.slice(index);
    return leftText + subStr + rightText;
}
function _aspxInsertEx(str, subStr, startIndex, endIndex) {
    var leftText = str.slice(0, startIndex);
    var rightText = str.slice(endIndex);
    return leftText + subStr + rightText;
}
function _aspxNavigateUrl(url, target) {
    var javascriptPrefix = "javascript:";
    if (url == "")
        return;
    else if (url.indexOf(javascriptPrefix) != -1)
        eval(url.substr(javascriptPrefix.length));
    else {
        try {
            if (target != "")
                _aspxNavigateTo(url, target);
            else
                location.href = url;
        }
        catch (e) {
        }
    }
}
function _aspxNavigateByLink(linkElement) {
    _aspxNavigateUrl(_aspxGetAttribute(linkElement, "href"), linkElement.target);
}
function _aspxNavigateTo(url, target) {
    var lowerCaseTarget = target.toLowerCase();
    if ("_top" == lowerCaseTarget)
        top.location.href = url;
    else if ("_self" == lowerCaseTarget)
        location.href = url;
    else if ("_search" == lowerCaseTarget)
        window.open(url, '_blank');
    else if ("_media" == lowerCaseTarget)
        window.open(url, '_blank');
    else if ("_parent" == lowerCaseTarget)
        window.parent.location.href = url;
    else if ("_blank" == lowerCaseTarget)
        window.open(url, '_blank');
    else {
        var frame = _aspxGetFrame(top.frames, target);
        if (frame != null)
            frame.location.href = url;
        else
            window.open(url, '_blank');
    }
}
function _aspxGetFrame(frames, name) {
    if (frames[name])
        return frames[name];
    for (var i = 0; i < frames.length; i++) {
        try {
            var frame = frames[i];
            if (frame.name == name)
                return frame;
            frame = _aspxGetFrame(frame.frames, name);
            if (frame != null)
                return frame;
        } catch (e) {
        }
    }
    return null;
}
function _aspxToHex(d) {
    return (d < 16) ? ("0" + d.toString(16)) : d.toString(16);
}
function _aspxColorToHexadecimal(colorValue) {
    if (typeof (colorValue) == "number") {
        var r = colorValue & 0xFF;
        var g = (colorValue >> 8) & 0xFF;
        var b = (colorValue >> 16) & 0xFF;
        return "#" + _aspxToHex(r) + _aspxToHex(g) + _aspxToHex(b);
    }
    if (colorValue && (colorValue.substr(0, 3).toLowerCase() == "rgb")) {
        var re = /rgb\s*\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*\)/;
        var regResult = colorValue.toLowerCase().match(re);
        if (regResult) {
            var r = parseInt(regResult[1]);
            var g = parseInt(regResult[2]);
            var b = parseInt(regResult[3]);
            return "#" + _aspxToHex(r) + _aspxToHex(g) + _aspxToHex(b);
        }
        return null;
    }
    if (colorValue && (colorValue.charAt(0) == "#"))
        return colorValue;
    return null;
}
function _aspxFormatCallbackArg(prefix, arg) {
    if (prefix == null && arg == null)
        return "";
    if (prefix == null) prefix = "";
    if (arg == null) arg = "";
    if (arg != null && !_aspxIsExists(arg.length) && _aspxIsExists(arg.value))
        arg = arg.value;
    arg = arg.toString();
    return [prefix, '|', arg.length, '|', arg].join('');
}
function _aspxFormatCallbackArgs(callbackData) {
    var sb = [];
    for (var i = 0; i < callbackData.length; i++)
        sb.push(_aspxFormatCallbackArg(callbackData[i][0], callbackData[i][1]));
    return sb.join("");
}
function _aspxIsValidElement(element) {
    if (!element)
        return false;
    if (!(__aspxFirefox && __aspxBrowserVersion < 4)) {
        if (element.ownerDocument && element.ownerDocument.body.compareDocumentPosition)
            return element.ownerDocument.body.compareDocumentPosition(element) % 2 === 0;
    }
    if (!__aspxOpera && !(__aspxIE && __aspxBrowserVersion < 9) && element.offsetParent && element.parentNode.tagName)
        return true;
    while (element != null) {
        if (element.tagName == "BODY")
            return true;
        element = element.parentNode;
    }
    return false;
}
function _aspxIsValidElements(elements) {
    if (!elements)
        return false;
    for (var i = 0; i < elements.length; i++) {
        if (elements[i] && !_aspxIsValidElement(elements[i]))
            return false;
    }
    return true;
}
function _aspxIsExistsElement(element) {
    return element && _aspxIsValidElement(element);
}
function _aspxFindParentByTestFunc(element, testFunc) {
    if (!testFunc) return null;
    while (element != null && element.tagName != "BODY") {
        if (testFunc(element))
            return element;
        element = element.parentNode;
    }
    return null;
}
function _aspxCorrectJSFloatNumber(number) {
    var ret = 21;
    var numString = number.toPrecision(21);
    numString = numString.replace("-", "");
    var integerDigitsCount = numString.indexOf(__aspxPossibleNumberDecimalSeparators[0]);
    if (integerDigitsCount < 0)
        integerDigitsCount = numString.indexOf(__aspxPossibleNumberDecimalSeparators[1]);
    var floatDigitsCount = numString.length - integerDigitsCount - 1;
    if (floatDigitsCount < 10)
        return number;
    if (integerDigitsCount > 0) {
        ret = integerDigitsCount + 12;
    }
    var toPrecisionNumber = Math.min(ret, 21);
    var newValueString = number.toPrecision(toPrecisionNumber);
    return parseFloat(newValueString, 10);
}
function _aspxToJson(param) {
    var paramType = typeof (param);
    if ((paramType == "undefined") || (param == null))
        return null;
    if ((paramType == "object") && (typeof (param.__toJson) == "function"))
        return param.__toJson();
    if ((paramType == "number") || (paramType == "boolean"))
        return param;
    if (param.constructor == Date)
        return _aspxDateToJson(param);
    if (paramType == "string") {
        var result = param.replace(/\\/g, "\\\\");
        result = result.replace(/"/g, "\\\"");
        result = result.replace(/</g, "\\u003c");
        result = result.replace(/>/g, "\\u003e");
        return "\"" + result + "\"";
    }
    if (param.constructor == Array) {
        var values = [];
        for (var i = 0; i < param.length; i++)
            values.push(_aspxToJson(param[i]));
        return "[" + values.join(",") + "]";
    }
    var exceptKeys = {};
    if (ASPxIdent.IsArray(param.__toJsonExceptKeys))
        exceptKeys = _aspxCreateHashTableFromArray(param.__toJsonExceptKeys);
    exceptKeys["__toJsonExceptKeys"] = 1;
    var values = [];
    for (var key in param) {
        if (_aspxIsFunction(param[key]))
            continue;
        if (exceptKeys[key] == 1)
            continue;
        values.push(_aspxToJson(key) + ":" + _aspxToJson(param[key]));
    }
    return "{" + values.join(",") + "}";
}
function _aspxDateToJson(date) {
    var result = [
  date.getFullYear(),
  date.getMonth(),
  date.getDate()
 ];
    var time = {
        h: date.getHours(),
        m: date.getMinutes(),
        s: date.getSeconds(),
        ms: date.getMilliseconds()
    };
    if (time.h || time.m || time.s || time.ms)
        result.push(time.h);
    if (time.m || time.s || time.ms)
        result.push(time.m);
    if (time.s || time.ms)
        result.push(time.s);
    if (time.ms)
        result.push(time.ms);
    return "new Date(" + result.join() + ")";
}
function _aspxEmulateDocumentOnMouseDown(evt) {
    _aspxEmulateOnMouseDown(document, evt);
}
function _aspxEmulateOnMouseDown(element, evt) {
    if (__aspxIE && __aspxBrowserVersion < 9)
        element.fireEvent("onmousedown", evt);
    else if (!__aspxWebKitFamily) {
        var emulatedEvt = document.createEvent("MouseEvents");
        emulatedEvt.initMouseEvent("mousedown", true, true, window, 0, evt.screenX, evt.screenY,
   evt.clientX, evt.clientY, evt.ctrlKey, evt.altKey, evt.shiftKey, false, 0, null);
        element.dispatchEvent(emulatedEvt);
    }
}
function _aspxCreateHtmlElementFromString(str) {
    var dummy = document.createElement("DIV");
    dummy.innerHTML = str;
    return dummy.firstChild;
}
function _aspxDelayedFunctionCall(object, functionName) {
    var callTimerIdPropertyName = "delayed" + functionName + "CallTimerId";
    var additionalCallRequiredPropertyName = "delayed" + functionName + "AdditionalCallRequired";
    if (!object[callTimerIdPropertyName] || object[callTimerIdPropertyName] == -1) {
        var timeoutFunction = function () {
            object[functionName]();
            object[callTimerIdPropertyName] = _aspxClearTimer(object[callTimerIdPropertyName]);
            if (object[additionalCallRequiredPropertyName]) {
                object[additionalCallRequiredPropertyName] = false;
                object[callTimerIdPropertyName] = _aspxSetTimeout(timeoutFunction, 0);
            }
        };
        object[callTimerIdPropertyName] = _aspxSetTimeout(timeoutFunction, 0);
    }
    else
        object[additionalCallRequiredPropertyName] = true;
}
function _aspxRestoreElementOriginalWidth(element) {
    if (!_aspxIsExistsElement(element))
        return;
    element.style.width = element.dxOrigWidth = _aspxGetElementOriginalWidth(element);
}
function _aspxGetElementOriginalWidth(element) {
    if (!_aspxIsExistsElement(element))
        return null;
    var width;
    if (!_aspxIsExists(element.dxOrigWidth)) {
        width = String(element.style.width).length > 0
  ? element.style.width
  : element.offsetWidth + "px";
    } else {
        width = element.dxOrigWidth;
    }
    return width;
}
function _aspxDropElementOriginalWidth(element) {
    if (_aspxIsExists(element.dxOrigWidth))
        element.dxOrigWidth = null;
}
Function.prototype.aspxBind = function (scope) {
    var func = this;
    return function () {
        return func.apply(scope, arguments);
    };
};
ASPxScrollBarMode = { Hidden: 0, Visible: 1, Auto: 2 };
ASPxColumnResizeMode = { None: 0, Control: 1, NextColumn: 2 };
ASPxSimpleHiddenField = {};
ASPxSimpleHiddenField.Separator = "|";
ASPxSimpleHiddenField.GetBag = function (key, input) {
    if (!key || !input)
        return { "keyIndex": -1 };
    var keyString = key.toString();
    if (keyString.length == 0)
        return { "keyIndex": -1 };
    var value = input.value;
    var keyIndex = value.indexOf(keyString);
    if (keyIndex < 0)
        return { "keyIndex": -1 };
    var sepIndex = value.indexOf(ASPxSimpleHiddenField.Separator, keyIndex + keyString.length);
    var count = Number(value.slice(keyIndex + keyString.length, sepIndex));
    return {
        "keyIndex": keyIndex,
        "valueIndex": sepIndex + 1,
        "count": count,
        "inputValue": value
    };
};
ASPxSimpleHiddenField.Get = function (key, input) {
    var bag = ASPxSimpleHiddenField.GetBag(key, input);
    if (bag.keyIndex < 0) return;
    return bag.inputValue.substr(bag.valueIndex, bag.count);
};
ASPxSimpleHiddenField.Set = function (key, value, input) {
    var value = _aspxIsExists(value) ? value.toString() : "";
    var newValue = key.toString() + value.length + ASPxSimpleHiddenField.Separator + value;
    var bag = ASPxSimpleHiddenField.GetBag(key, input);
    if (bag.keyIndex < 0) {
        input.value += newValue;
        return;
    }
    var prevValue = bag.inputValue.slice(bag.keyIndex, bag.valueIndex + bag.count);
    input.value = bag.inputValue.replace(prevValue, newValue);
};
(function () {
    window.ASPxMouseScroller = window.ASPxMouseScroller || {};
    ASPxMouseScroller.MinimumOffset = 10;
    ASPxMouseScroller.Create = function (getElement, getScrollXElement, getScrollYElement, needPreventScrolling, vertRecursive, onMouseDown, onMouseMove, onMouseUp) {
        var element = getElement();
        if (!element)
            return;
        if (!element.dxMouseScroller)
            element.dxMouseScroller = new ASPxMouseScroller.Extender(getElement, getScrollXElement, getScrollYElement, needPreventScrolling, vertRecursive, onMouseDown, onMouseMove, onMouseUp);
        return element.dxMouseScroller;
    }
    ASPxMouseScroller.Extender = function (getElement, getScrollXElement, getScrollYElement, needPreventScrolling, vertRecursive, onMouseDown, onMouseMove, onMouseUp) {
        this.getElement = getElement;
        this.getScrollXElement = getScrollXElement;
        this.getScrollYElement = getScrollYElement;
        this.needPreventScrolling = needPreventScrolling;
        this.vertRecursive = !!vertRecursive;
        this.createHandlers(onMouseDown || function () { }, onMouseMove || function () { }, onMouseUp || function () { });
        this.update()
    };
    ASPxMouseScroller.Extender.prototype = {
        update: function () {
            if (this.element)
                _aspxDetachEventFromElement(this.element, ASPxClientTouchUI.touchMouseDownEventName, this.mouseDownHandler);
            this.element = this.getElement();
            _aspxAttachEventToElement(this.element, ASPxClientTouchUI.touchMouseDownEventName, this.mouseDownHandler);
            _aspxAttachEventToElement(this.element, "click", this.mouseClickHandler);
            if (__aspxMSTouchUI && this.element.className.indexOf(ASPxClientTouchUI.msTouchDraggableClassName) < 0)
                this.element.className += " " + ASPxClientTouchUI.msTouchDraggableClassName;
            this.scrollXElement = this.getScrollXElement();
            this.scrollYElement = this.getScrollYElement();
        },
        createHandlers: function (onMouseDown, onMouseMove, onMouseUp) {
            this.onMouseDown = onMouseDown;
            this.onMouseMove = onMouseMove;
            this.onMouseUp = onMouseUp;
            this.mouseDownHandler = function (e) {
                if (this.needPreventScrolling && this.needPreventScrolling(_aspxGetEventSource(e)))
                    return;
                this.scrollableTreeLine = this.GetScrollableElements();
                this.firstX = this.prevX = _aspxGetEventX(e);
                this.firstY = this.prevY = this.GetEventY(e);
                _aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseMoveEventName, this.mouseMoveHandler);
                _aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, this.mouseUpHandler);
                this.onMouseDown(e);
            } .aspxBind(this);
            this.mouseMoveHandler = function (e) {
                if (ASPxClientTouchUI.isGesture)
                    return;
                var x = _aspxGetEventX(e);
                var y = this.GetEventY(e);
                var xDiff = this.prevX - x;
                var yDiff = this.prevY - y;
                if (this.vertRecursive) {
                    var isTopDirection = yDiff < 0;
                    this.scrollYElement = this.GetElementForVertScrolling(isTopDirection, this.prevIsTopDirection, this.scrollYElement);
                    this.prevIsTopDirection = isTopDirection;
                }
                if (this.scrollXElement && xDiff != 0)
                    this.scrollXElement.scrollLeft += xDiff;
                if (this.scrollYElement && yDiff != 0)
                    this.scrollYElement.scrollTop += yDiff;
                this.prevX = x;
                this.prevY = y;
                e.preventDefault();
                this.onMouseMove(e);
            } .aspxBind(this);
            this.mouseUpHandler = function (e) {
                _aspxDetachEventFromDocument(ASPxClientTouchUI.touchMouseMoveEventName, this.mouseMoveHandler);
                _aspxDetachEventFromDocument(ASPxClientTouchUI.touchMouseMoveEventName, this.mouseUpHandler);
                this.scrollableTreeLine = [];
                this.prevIsTopDirection = null;
                this.onMouseUp(e);
            } .aspxBind(this);
            this.mouseClickHandler = function (e) {
                var xDiff = this.firstX - _aspxGetEventX(e);
                var yDiff = this.firstY - _aspxGetEventY(e);
                if (xDiff > ASPxMouseScroller.MinimumOffset || yDiff > ASPxMouseScroller.MinimumOffset)
                    return _aspxPreventEventAndBubble(e);
            } .aspxBind(this);
        },
        GetEventY: function (e) {
            return _aspxGetEventY(e) - _aspxGetDocumentScrollTop();
        },
        GetScrollableElements: function () {
            var result = [];
            var el = this.element;
            while (el && el != document && this.vertRecursive) {
                if (this.CanVertScroll(el) || el.tagName == "HTML")
                    result.push(el);
                el = el.parentNode;
            }
            return result;
        },
        CanVertScroll: function (element) {
            var style = _aspxGetCurrentStyle(element);
            return style.overflow == "scroll" || style.overflow == "auto" || style.overflowY == "scroll" || style.overflowY == "auto";
        },
        GetElementForVertScrolling: function (currentIsTop, prevIsTop, prevElement) {
            if (prevElement && currentIsTop === prevIsTop && this.GetVertScrollExcess(prevElement, currentIsTop) > 0)
                return prevElement;
            for (var i = 0; i < this.scrollableTreeLine.length; i++) {
                var element = this.scrollableTreeLine[i];
                var excess = this.GetVertScrollExcess(element, currentIsTop);
                if (excess > 0)
                    return element;
            }
            return null;
        },
        GetVertScrollExcess: function (element, isTop) {
            if (isTop)
                return element.scrollTop;
            return element.scrollHeight - element.clientHeight - element.scrollTop;
        }
    }
})();
ASPxClientUtils = {};
ASPxClientUtils.agent = __aspxUserAgent;
ASPxClientUtils.opera = __aspxOpera;
ASPxClientUtils.opera9 = __aspxOpera && __aspxBrowserMajorVersion == 9;
ASPxClientUtils.safari = __aspxSafari;
ASPxClientUtils.safari3 = __aspxSafari && __aspxBrowserMajorVersion == 3;
ASPxClientUtils.safariMacOS = __aspxSafari && __aspxMacOSPlatform;
ASPxClientUtils.chrome = __aspxChrome;
ASPxClientUtils.ie = __aspxIE;
ASPxClientUtils.ie55 = __aspxIE && __aspxBrowserVersion == 5.5;
;
ASPxClientUtils.ie7 = __aspxIE && __aspxBrowserMajorVersion == 7;
ASPxClientUtils.firefox = __aspxFirefox;
ASPxClientUtils.firefox3 = __aspxFirefox && __aspxBrowserMajorVersion == 3;
ASPxClientUtils.mozilla = __aspxMozilla;
ASPxClientUtils.netscape = __aspxNetscape;
ASPxClientUtils.browserVersion = __aspxBrowserVersion;
ASPxClientUtils.browserMajorVersion = __aspxBrowserMajorVersion;
ASPxClientUtils.macOSPlatform = __aspxMacOSPlatform;
ASPxClientUtils.windowsPlatform = __aspxWindowsPlatform;
ASPxClientUtils.webKitFamily = __aspxWebKitFamily;
ASPxClientUtils.netscapeFamily = __aspxNetscapeFamily;
ASPxClientUtils.touchUI = __aspxTouchUI;
ASPxClientUtils.webKitTouchUI = __aspxWebKitTouchUI;
ASPxClientUtils.msTouchUI = __aspxMSTouchUI;
ASPxClientUtils.iOSPlatform = __aspxMacOSMobilePlatform;
ASPxClientUtils.androidPlatform = __aspxAndroidMobilePlatform;
ASPxClientUtils.ArrayInsert = _aspxArrayInsert;
ASPxClientUtils.ArrayRemove = _aspxArrayRemove;
ASPxClientUtils.ArrayRemoveAt = _aspxArrayRemoveAt;
ASPxClientUtils.ArrayClear = _aspxArrayClear;
ASPxClientUtils.ArrayIndexOf = _aspxArrayIndexOf;
ASPxClientUtils.AttachEventToElement = _aspxAttachEventToElement;
ASPxClientUtils.DetachEventFromElement = _aspxDetachEventFromElement;
ASPxClientUtils.GetEventSource = _aspxGetEventSource;
ASPxClientUtils.GetEventX = _aspxGetEventX;
ASPxClientUtils.GetEventY = _aspxGetEventY;
ASPxClientUtils.GetKeyCode = _aspxGetKeyCode;
ASPxClientUtils.PreventEvent = _aspxPreventEvent;
ASPxClientUtils.PreventEventAndBubble = _aspxPreventEventAndBubble;
ASPxClientUtils.PreventDragStart = _aspxPreventDragStart;
ASPxClientUtils.ClearSelection = _aspxClearSelection;
ASPxClientUtils.IsExists = _aspxIsExists;
ASPxClientUtils.IsFunction = _aspxIsFunction;
ASPxClientUtils.GetAbsoluteX = _aspxGetAbsoluteX;
ASPxClientUtils.GetAbsoluteY = _aspxGetAbsoluteY;
ASPxClientUtils.SetAbsoluteX = _aspxSetAbsoluteX;
ASPxClientUtils.SetAbsoluteY = _aspxSetAbsoluteY;
ASPxClientUtils.GetDocumentScrollTop = _aspxGetDocumentScrollTop;
ASPxClientUtils.GetDocumentScrollLeft = _aspxGetDocumentScrollLeft;
ASPxClientUtils.GetDocumentClientWidth = _aspxGetDocumentClientWidth;
ASPxClientUtils.GetDocumentClientHeight = _aspxGetDocumentClientHeight;
ASPxClientUtils.GetIsParent = _aspxGetIsParent;
ASPxClientUtils.GetParentById = _aspxGetParentById;
ASPxClientUtils.GetParentByTagName = _aspxGetParentByTagName;
ASPxClientUtils.GetParentByClassName = _aspxGetParentByPartialClassName;
ASPxClientUtils.GetChildById = _aspxGetChildById;
ASPxClientUtils.GetChildByTagName = _aspxGetChildByTagName;
ASPxClientUtils.SetCookie = _aspxSetCookie;
ASPxClientUtils.GetCookie = _aspxGetCookie;
ASPxClientUtils.DeleteCookie = _aspxDelCookie;
ASPxClientUtils.GetShortcutCode = _aspxGetShortcutCode;
ASPxClientUtils.GetShortcutCodeByEvent = _aspxGetShortcutCodeByEvent;
ASPxClientUtils.StringToShortcutCode = _aspxParseShortcutString;
ASPxClientUtils.Trim = _aspxTrim;
ASPxClientUtils.TrimStart = _aspxTrimStart;
ASPxClientUtils.TrimEnd = _aspxTrimEnd;

var __aspxClassesScriptParsed = false;
var __aspxDocumentLoaded = false;
ASPxClientEvent = _aspxCreateClass(null, {
    constructor: function () {
        this.handlerInfoList = [];
    },
    AddHandler: function (handler, executionContext) {
        if (typeof (executionContext) == "undefined")
            executionContext = null;
        var handlerInfo = ASPxClientEvent.CreateHandlerInfo(handler, executionContext);
        this.handlerInfoList.push(handlerInfo);
    },
    RemoveHandler: function (handler, executionContext) {
        this.removeHandlerByCondition(function (handlerInfo) {
            return handlerInfo.handler == handler &&
    (!executionContext || handlerInfo.executionContext == executionContext);
        });
    },
    removeHandlerByCondition: function (predicate) {
        for (var i = this.handlerInfoList.length - 1; i >= 0; i--) {
            var handlerInfo = this.handlerInfoList[i];
            if (predicate(handlerInfo))
                _aspxArrayRemoveAt(this.handlerInfoList, i);
        }
    },
    removeHandlerByControlName: function (controlName) {
        this.removeHandlerByCondition(function (handlerInfo) {
            return handlerInfo.executionContext &&
    handlerInfo.executionContext.name === controlName;
        });
    },
    ClearHandlers: function () {
        this.handlerInfoList.length = 0;
    },
    FireEvent: function (obj, args) {
        for (var i = 0; i < this.handlerInfoList.length; i++) {
            var handlerInfo = this.handlerInfoList[i];
            handlerInfo.handler.call(handlerInfo.executionContext, obj, args);
        }
    },
    InsertFirstHandler: function (handler, executionContext) {
        if (typeof (executionContext) == "undefined")
            executionContext = null;
        var handlerInfo = ASPxClientEvent.CreateHandlerInfo(handler, executionContext);
        _aspxArrayInsert(this.handlerInfoList, handlerInfo, 0);
    },
    IsEmpty: function () {
        return this.handlerInfoList.length == 0;
    }
});
ASPxClientEvent.CreateHandlerInfo = function (handler, executionContext) {
    return {
        handler: handler,
        executionContext: executionContext
    };
};
ASPxClientEventArgs = _aspxCreateClass(null, {
    constructor: function () {
    }
});
ASPxClientEventArgs.Empty = new ASPxClientEventArgs();
ASPxClientCancelEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
    constructor: function () {
        this.constructor.prototype.constructor.call(this);
        this.cancel = false;
    }
});
ASPxClientProcessingModeEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
    constructor: function (processOnServer) {
        this.constructor.prototype.constructor.call(this);
        this.processOnServer = processOnServer;
    }
});
ASPxClientProcessingModeCancelEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
    constructor: function (processOnServer) {
        this.constructor.prototype.constructor.call(this, processOnServer);
        this.cancel = false;
    }
});
ASPxClientBeginCallbackEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
    constructor: function (command) {
        this.constructor.prototype.constructor.call(this);
        this.command = command;
    }
});
ASPxClientEndCallbackEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
    constructor: function () {
        this.constructor.prototype.constructor.call(this);
    }
});
ASPxClientCustomDataCallbackEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
    constructor: function (result) {
        this.constructor.prototype.constructor.call(this);
        this.result = result;
    }
});
ASPxClientCallbackErrorEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
    constructor: function (message) {
        this.constructor.prototype.constructor.call(this);
        this.message = message;
        this.handled = false;
    }
});
ASPxClientControlsInitializedEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
    constructor: function (isCallback) {
        this.isCallback = isCallback;
    }
});
ASPxClientAdaptiveLayoutChangingEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
    constructor: function () {
        this.constructor.prototype.constructor.call(this);
        this.isAdaptiveView = false;
    }
});
ASPxClientControlCollection = _aspxCreateClass(null, {
    constructor: function () {
        this.elements = new Object();
        this.prevWndWidth = "";
        this.prevWndHeight = "";
        this.BeforeInitCallback = new ASPxClientEvent();
        this.ControlsInitialized = new ASPxClientEvent();
    },
    Add: function (element) {
        this.elements[element.name] = element;
    },
    Remove: function (element) {
        this.elements[element.name] = null;
    },
    Get: function (name) {
        return this.elements[name];
    },
    GetGlobal: function (name) {
        var result = window[name];
        return result && result.isASPxClientControl
   ? result
   : null;
    },
    GetByName: function (name) {
        return this.Get(name) || this.GetGlobal(name);
    },
    ForEachControl: function (processFunc, context) {
        if (!context)
            context = this;
        for (var name in this.elements) {
            var control = this.elements[name];
            if (ASPxIdent.IsASPxClientControl(control))
                if (processFunc.call(context, control))
                    return;
        }
    },
    AdjustControls: function (container) {
        if (typeof (container) == "undefined")
            container = null;
        var collection = this;
        window.setTimeout(function () {
            collection.ProcessControlsInContainer(container, function (control) {
                control.AdjustControl();
            });
        }, 0);
    },
    CollapseControls: function (container) {
        this.ProcessControlsInContainer(container, function (control) {
            control.CollapseControl();
        });
    },
    AtlasInitialize: function (isCallback) {
        if (__aspxIE && __aspxBrowserMajorVersion < 9) {
            var func = function () {
                if (_aspxIsLinksLoaded())
                    _aspxProcessScriptsAndLinks("", isCallback);
                else
                    setTimeout(func, 100);
            }
            func();
        }
        else
            _aspxProcessScriptsAndLinks("", isCallback);
    },
    Initialize: function () {
        this.InitializeElements(false);
        if (typeof (Sys) != "undefined" && typeof (Sys.Application) != "undefined")
            Sys.Application.add_load(aspxCAInit);
        this.InitWindowSizeCache();
    },
    InitializeElements: function (isCallback) {
        this.ForEachControl(function (control) {
            if (!control.isInitialized)
                control.Initialize();
        });
        if (typeof (_aspxGetEditorStretchedInputElementsManager) != "undefined")
            _aspxGetEditorStretchedInputElementsManager().Initialize();
        this.AfterInitializeElements(true);
        this.AfterInitializeElements(false);
        this.RaiseControlsInitialized(isCallback);
    },
    AfterInitializeElements: function (leadingCall) {
        this.ForEachControl(function (control) {
            if (control.leadingAfterInitCall && leadingCall || !control.leadingAfterInitCall && !leadingCall) {
                if (!control.isInitialized)
                    control.AfterInitialize();
            }
        });
    },
    DoFinalizeCallback: function () {
        this.ForEachControl(function (control) {
            control.DoFinalizeCallback();
        });
    },
    ProcessControlsInContainer: function (container, processFunc) {
        this.ForEachControl(function (control) {
            if (!container || this.IsControlInContainer(container, control))
                processFunc(control);
        });
    },
    IsControlInContainer: function (container, control) {
        if (control.GetMainElement) {
            var mainElement = control.GetMainElement();
            if (mainElement && (mainElement != container)) {
                if (_aspxGetIsParent(container, mainElement))
                    return true;
            }
        }
        return false;
    },
    RaiseControlsInitialized: function (isCallback) {
        if (!this.ControlsInitialized.IsEmpty()) {
            if (typeof (isCallback) == "undefined")
                isCallback = true;
            var args = new ASPxClientControlsInitializedEventArgs(isCallback);
            this.ControlsInitialized.FireEvent(this, args);
        }
    },
    Before_WebForm_InitCallback: function (callbackOwnerID) {
        var args = new ASPxClientBeforeInitCallbackEventArgs(callbackOwnerID);
        this.BeforeInitCallback.FireEvent(this, args);
    },
    InitWindowSizeCache: function () {
        this.prevWndWidth = _aspxGetDocumentClientWidth();
        this.prevWndHeight = _aspxGetDocumentClientHeight();
    },
    BrowserWindowSizeChanged: function () {
        var wndWidth = _aspxGetDocumentClientWidth();
        var wndHeight = _aspxGetDocumentClientHeight();
        var browserWindowSizeChanged = (this.prevWndWidth != wndWidth) || (this.prevWndHeight != wndHeight);
        if (browserWindowSizeChanged) {
            this.prevWndWidth = wndWidth;
            this.prevWndHeight = wndHeight;
            return true;
        }
        return false;
    },
    OnBrowserWindowResize: function (evt) {
        if (this.BrowserWindowSizeChanged()) {
            this.ForEachControl(function (control) {
                if (control.ControlRenderExists())
                    control.OnBrowserWindowResizeInternal(evt);
            });
        }
    }
});
ASPxClientControl = _aspxCreateClass(null, {
    constructor: function (name) {
        this.isASPxClientControl = true;
        this.name = name;
        this.uniqueID = name;
        this.enabled = true;
        this.clientEnabled = true;
        this.clientVisible = true;
        this.rtl = false;
        this.autoPostBack = false;
        this.allowMultipleCallbacks = true;
        this.callBack = null;
        this.enableCallbackAnimation = false;
        this.enableSlideCallbackAnimation = false;
        this.slideAnimationDirection = null;
        this.beginCallbackAnimationProcessing = false;
        this.endCallbackAnimationProcessing = false;
        this.savedCallbackResult = null;
        this.savedCallbacks = null;
        this.isCallbackAnimationPrevented = false;
        this.lpDelay = 300;
        this.lpTimer = -1;
        this.isNative = false;
        this.requestCount = 0;
        this.enableSwipeGestures = false;
        this.supportGestures = false;
        this.repeatedGestureValue = 0;
        this.repeatedGestureCount = 0;
        this.isInitialized = false;
        this.initialFocused = false;
        this.leadingAfterInitCall = false;
        this.adjustedSizes = {};
        this.adjustedHeight = 0;
        this.serverEvents = [];
        this.dialogContentHashTable = {};
        this.loadingPanelElement = null;
        this.loadingDivElement = null;
        this.hasPhantomLoadingElements = false;
        this.mainElement = null;
        this.renderIFrameForPopupElements = false;
        this.widthValueSetInPercentage = false;
        this.heightValueSetInPercentage = false;
        this.touchUIMouseScroller = null;
        this.verticalAlignedElements = {};
        this.sizingConfig = {
            allowSetWidth: true,
            allowSetHeight: true,
            correction: false,
            adjustControl: false
        };
        this.Init = new ASPxClientEvent();
        this.BeginCallback = new ASPxClientEvent();
        this.EndCallback = new ASPxClientEvent();
        this.EndCallbackAnimationStart = new ASPxClientEvent();
        this.CallbackError = new ASPxClientEvent();
        this.CustomDataCallback = new ASPxClientEvent();
        this.LayoutChanging = new ASPxClientEvent();
        aspxGetControlCollection().Add(this);
    },
    Initialize: function () {
        if (this.callBack != null)
            this.InitializeCallBackData();
    },
    InlineInitialize: function () {
    },
    InitializeGestures: function () {
        if (this.enableSwipeGestures && this.supportGestures) {
            ASPxGesturesHelper.AddSwipeGestureHandler(this.name,
    function () { return this.GetCallbackAnimationElement(); } .aspxBind(this),
    function (evt) { return this.CanHandleGestureCore(evt); } .aspxBind(this),
    function (value) { return this.AllowStartGesture(); } .aspxBind(this),
    function (value) { return this.StartGesture(); } .aspxBind(this),
    function (value) { return this.AllowExecuteGesture(value); } .aspxBind(this),
    function (value) { this.ExecuteGesture(value); } .aspxBind(this),
    function (value) { this.CancelGesture(value); } .aspxBind(this)
   );
            if (__aspxMSTouchUI)
                this.touchUIMouseScroller = ASPxMouseScroller.Create(
     function () { return this.GetCallbackAnimationElement(); } .aspxBind(this),
     function () { return null; },
     function () { return this.GetCallbackAnimationElement(); } .aspxBind(this),
     function (element) { return this.NeedPreventTouchUIMouseScrolling(element); } .aspxBind(this),
     true
    );
        }
    },
    NeedPreventTouchUIMouseScrolling: function (element) {
        return false;
    },
    InitailizeFocus: function () {
        if (this.initialFocused && this.IsVisible())
            this.Focus();
    },
    AfterCreate: function () {
        this.InlineInitialize();
        this.InitializeGestures();
        this.UpdateAdjustmentFlags();
        this.AdjustControl();
    },
    AfterInitialize: function () {
        this.AdjustControl();
        this.InitailizeFocus();
        this.isInitialized = true;
        this.RaiseInit();
        if (this.savedCallbacks) {
            for (var i = 0; i < this.savedCallbacks.length; i++)
                this.CreateCallbackInternal(this.savedCallbacks[i].arg, this.savedCallbacks[i].command,
     false, this.savedCallbacks[i].callbackInfo);
            this.savedCallbacks = null;
        }
    },
    InitializeCallBackData: function () {
    },
    RenderExistsOnPage: function () {
        return _aspxIsExistsElement(this.GetMainElement());
    },
    IsStateControllerEnabled: function () {
        return typeof (aspxGetStateController) != "undefined" && aspxGetStateController();
    },
    GetWidth: function () {
        return this.GetMainElement().offsetWidth;
    },
    GetHeight: function () {
        return this.GetMainElement().offsetHeight;
    },
    SetWidth: function (width) {
        if (this.sizingConfig.allowSetWidth)
            this.SetSizeCore("width", width, "GetWidth", false);
    },
    SetHeight: function (height) {
        if (this.sizingConfig.allowSetHeight)
            this.SetSizeCore("height", height, "GetHeight", false);
    },
    SetSizeCore: function (sizePropertyName, size, getFunctionName, corrected) {
        if (size < 0)
            return;
        this.GetMainElement().style[sizePropertyName] = size + "px";
        if (this.sizingConfig.adjustControl)
            this.AdjustControl(true);
        if (this.sizingConfig.correction && !corrected) {
            var realSize = this[getFunctionName]();
            if (realSize != size) {
                var correctedSize = size - (realSize - size);
                this.SetSizeCore(sizePropertyName, correctedSize, getFunctionName, true);
            }
        }
    },
    AdjustControl: function (nestedCall) {
        if (this.IsAdjustmentRequired() && (!ASPxClientControl.adjustControlLocked || nestedCall)) {
            ASPxClientControl.adjustControlLocked = true;
            try {
                var mainElement = this.GetMainElement();
                if (!mainElement || !this.IsDisplayed() || this.IsHidden())
                    return;
                this.AdjustControlCore();
                this.UpdateAdjustedSizes();
            }
            finally {
                delete ASPxClientControl.adjustControlLocked;
            }
        }
        this.TryShowPhantomLoadingElements();
    },
    ResetControlAdjustment: function () {
        this.adjustedSizes = {};
    },
    UpdateAdjustmentFlags: function () {
        var mainElement = this.GetMainElement();
        if (mainElement) {
            var mainElementStyle = _aspxGetCurrentStyle(mainElement);
            this.widthValueSetInPercentage = _aspxIsPercentageSize(mainElementStyle.width) || _aspxIsPercentageSize(mainElement.style.width);
            this.heightValueSetInPercentage = _aspxIsPercentageSize(mainElementStyle.height) || _aspxIsPercentageSize(mainElement.style.height);
        }
    },
    GetAdjustedSizes: function () {
        var mainElement = this.GetMainElement();
        if (mainElement)
            return { width: mainElement.offsetWidth, height: mainElement.offsetHeight };
        return { width: 0, height: 0 };
    },
    IsAdjusted: function () {
        return (this.adjustedSizes.width && this.adjustedSizes.width > 0) && (this.adjustedSizes.height && this.adjustedSizes.height > 0);
    },
    IsAdjustmentRequired: function () {
        if (!this.IsAdjusted())
            return true;
        if (this.widthValueSetInPercentage)
            return true;
        if (this.heightValueSetInPercentage)
            return true;
        var sizes = this.GetAdjustedSizes();
        for (var name in sizes) {
            if (this.adjustedSizes[name] !== sizes[name])
                return true;
        }
        return false;
    },
    UpdateAdjustedSizes: function () {
        var sizes = this.GetAdjustedSizes();
        for (var name in sizes)
            this.adjustedSizes[name] = sizes[name];
    },
    AdjustControlCore: function () {
    },
    CollapseControl: function () {
    },
    ControlRenderExists: function () {
        return !!this.GetMainElement();
    },
    OnBrowserWindowResize: function (evt) {
    },
    OnBrowserWindowResizeInternal: function (evt) {
        if (this.BrowserWindowResizeSubscriber())
            this.OnBrowserWindowResize(evt);
    },
    BrowserWindowResizeSubscriber: function () {
        return this.widthValueSetInPercentage;
    },
    CorrectVerticalAlignment: function (alignMethod, getElements, key, reAlign) {
        var elements = this.GetVerticalAlignedCachedElements(getElements, key);
        for (var i = 0; i < elements.length; i++)
            this.CorrectElementVerticalAlignment(alignMethod, elements[i], reAlign);
    },
    CorrectElementVerticalAlignment: function (alignMethod, element, reAlign) {
        if (!element || (element.dxVerticalAligned && !reAlign) || !_aspxElementIsVisible(element)) return;
        alignMethod(element);
        element.dxVerticalAligned = true;
    },
    GetVerticalAlignedCachedElements: function (getElements, key) {
        if (!key) key = "elements";
        if (!this.verticalAlignedElements[key] || !_aspxIsValidElements(this.verticalAlignedElements[key])) {
            var elements = getElements.call(this);
            if (!ASPxIdent.IsArray(elements))
                elements = [elements];
            this.verticalAlignedElements[key] = elements;
        }
        return this.verticalAlignedElements[key];
    },
    ClearVerticalAlignedElementsCache: function (key) {
        if (this.verticalAlignedElements[key])
            this.verticalAlignedElements[key] = null;
    },
    AdjustPagerControls: function () {
        if (typeof (aspxGetPagersCollection) != "undefined")
            aspxGetPagersCollection().AdjustControls(this.GetMainElement());
    },
    OnAdaptiveLayoutChanging: function (isAdaptiveView) {
    },
    RaiseAdaptiveLayoutChanging: function (isAdaptiveView) {
        if (!this.LayoutChanging.IsEmpty()) {
            var args = new ASPxClientAdaptiveLayoutChangingEventArgs(isAdaptiveView);
            this.LayoutChanging.FireEvent(this, args);
            return args.isAdaptiveView;
        }
        return isAdaptiveView;
    },
    SetAdaptiveClassNames: function (prevClassName, newClassName) {
        var maiElement = this.GetMainElement();
        if (maiElement) {
            _aspxRemoveClassNameFromElement(maiElement, prevClassName);
            _aspxAddClassNameToElement(maiElement, newClassName);
        }
    },
    RegisterServerEventAssigned: function (eventNames) {
        for (var i = 0; i < eventNames.length; i++)
            this.serverEvents[eventNames[i]] = true;
    },
    IsServerEventAssigned: function (eventName) {
        return !!this.serverEvents[eventName];
    },
    GetChild: function (idPostfix) {
        var mainElement = this.GetMainElement();
        return mainElement ? _aspxGetChildById(mainElement, this.name + idPostfix) : null;
    },
    GetItemElementName: function (element) {
        var name = "";
        if (element.id)
            name = element.id.substring(this.name.length + 1);
        return name;
    },
    GetLinkElement: function (element) {
        if (element == null) return null;
        return (element.tagName == "A") ? element : _aspxGetChildByTagName(element, "A", 0);
    },
    GetInternalHyperlinkElement: function (parentElement, index) {
        var element = _aspxGetChildByTagName(parentElement, "A", index);
        if (element == null)
            element = _aspxGetChildByTagName(parentElement, "SPAN", index);
        return element;
    },
    GetParentForm: function () {
        return _aspxGetParentByTagName(this.GetMainElement(), "FORM");
    },
    GetMainElement: function () {
        if (!_aspxIsExistsElement(this.mainElement))
            this.mainElement = _aspxGetElementById(this.name);
        return this.mainElement;
    },
    OnControlClick: function (clickedElement, htmlEvent) {
    },
    IsLoadingContainerVisible: function () {
        return this.IsVisible();
    },
    GetLoadingPanelElement: function () {
        return _aspxGetElementById(this.name + "_LP");
    },
    CloneLoadingPanel: function (element, parent) {
        var clone = element.cloneNode(true);
        clone.id = element.id + "V";
        parent.appendChild(clone);
        return clone;
    },
    CreateLoadingPanelWithoutBordersInsideContainer: function (container) {
        var loadingPanel = this.CreateLoadingPanelInsideContainer(container, false, true, true);
        var contentStyle = _aspxGetCurrentStyle(container);
        if (!loadingPanel || !contentStyle)
            return;
        var elements = [];
        elements.push(loadingPanel.tagName == "TABLE" ? loadingPanel : _aspxGetChildByTagName(loadingPanel, "TABLE", 0));
        var cells = _aspxGetElementsByTagName(loadingPanel, "TD");
        if (!cells) cells = [];
        for (var i = 0; i < cells.length; i++)
            elements.push(cells[i]);
        for (var i = 0; i < elements.length; i++) {
            var el = elements[i];
            el.style.borderWidth = 0;
            el.style.backgroundColor = contentStyle.backgroundColor;
            if (_aspxIsExists(el.style.boxShadow))
                el.style.boxShadow = "none";
            else if (_aspxIsExists(el.style.MozBoxShadow))
                el.style.MozBoxShadow = "none";
            else if (_aspxIsExists(el.style.webkitBoxShadow))
                el.style.webkitBoxShadow = "none";
        }
    },
    CreateLoadingPanelInsideContainer: function (parentElement, hideContent, collapseHeight, collapseWidth) {
        if (this.ShouldHideExistingLoadingElements())
            this.HideLoadingPanel();
        if (parentElement == null)
            return null;
        if (!this.IsLoadingContainerVisible()) {
            this.hasPhantomLoadingElements = true;
            return null;
        }
        var element = this.GetLoadingPanelElement();
        if (element != null) {
            var width = collapseWidth ? 0 : _aspxGetClearClientWidth(parentElement);
            var height = collapseHeight ? 0 : _aspxGetClearClientHeight(parentElement);
            if (hideContent) {
                for (var i = parentElement.childNodes.length - 1; i > -1; i--) {
                    if (parentElement.childNodes[i].style)
                        parentElement.childNodes[i].style.display = "none";
                    else if (parentElement.childNodes[i].nodeType == 3)
                        parentElement.removeChild(parentElement.childNodes[i]);
                }
            }
            else
                parentElement.innerHTML = "";
            var table = document.createElement("TABLE");
            parentElement.appendChild(table);
            table.border = 0;
            table.cellPadding = 0;
            table.cellSpacing = 0;
            _aspxSetStyles(table, {
                width: (width > 0) ? width : "100%",
                height: (height > 0) ? height : "100%"
            });
            var tbody = document.createElement("TBODY");
            table.appendChild(tbody);
            var tr = document.createElement("TR");
            tbody.appendChild(tr);
            var td = document.createElement("TD");
            tr.appendChild(td);
            td.align = "center";
            td.vAlign = "middle";
            element = this.CloneLoadingPanel(element, td);
            _aspxSetElementDisplay(element, true);
            this.loadingPanelElement = element;
            return element;
        } else
            parentElement.innerHTML = "&nbsp;";
        return null;
    },
    CreateLoadingPanelWithAbsolutePosition: function (parentElement, offsetElement) {
        if (this.ShouldHideExistingLoadingElements())
            this.HideLoadingPanel();
        if (parentElement == null)
            return null;
        if (!this.IsLoadingContainerVisible()) {
            this.hasPhantomLoadingElements = true;
            return null;
        }
        if (!offsetElement)
            offsetElement = parentElement;
        var element = this.GetLoadingPanelElement();
        if (element != null) {
            element = this.CloneLoadingPanel(element, parentElement);
            _aspxSetStyles(element, {
                position: "absolute",
                display: ""
            });
            this.SetLoadingPanelLocation(offsetElement, element);
            this.loadingPanelElement = element;
            return element;
        }
        return null;
    },
    CreateLoadingPanelInline: function (parentElement) {
        if (this.ShouldHideExistingLoadingElements())
            this.HideLoadingPanel();
        if (parentElement == null)
            return null;
        if (!this.IsLoadingContainerVisible()) {
            this.hasPhantomLoadingElements = true;
            return null;
        }
        var element = this.GetLoadingPanelElement();
        if (element != null) {
            element = this.CloneLoadingPanel(element, parentElement);
            _aspxSetElementDisplay(element, true);
            this.loadingPanelElement = element;
            return element;
        }
        return null;
    },
    ShowLoadingPanel: function () {
    },
    ShowLoadingElements: function () {
        if (this.InCallback() || this.lpTimer > -1) return;
        this.ShowLoadingDiv();
        if (this.IsCallbackAnimationEnabled())
            this.StartBeginCallbackAnimation();
        else
            this.ShowLoadingElementsInternal();
    },
    ShowLoadingElementsInternal: function () {
        if (this.lpDelay > 0 && !this.IsCallbackAnimationEnabled()) {
            var _this = this;
            this.lpTimer = _aspxSetTimeout(function () { _this.ShowLoadingPanelOnTimer(); }, this.lpDelay);
        }
        else {
            this.RestoreLoadingDivOpacity();
            this.ShowLoadingPanel();
        }
    },
    GetLoadingPanelOffsetElement: function (baseElement) {
        if (this.IsCallbackAnimationEnabled()) {
            var element = this.GetLoadingPanelCallbackAnimationOffsetElement();
            if (element) {
                var container = typeof (ASPxAnimationHelper) != "undefined" ? ASPxAnimationHelper.findSlideAnimationContainer(element) : null;
                if (container)
                    return container.parentNode.parentNode;
                else
                    return element;
            }
        }
        return baseElement;
    },
    GetLoadingPanelCallbackAnimationOffsetElement: function () {
        return this.GetCallbackAnimationElement();
    },
    IsCallbackAnimationEnabled: function () {
        return (this.enableCallbackAnimation || this.enableSlideCallbackAnimation) && !this.isCallbackAnimationPrevented;
    },
    StartBeginCallbackAnimation: function () {
        this.beginCallbackAnimationProcessing = true;
        this.isCallbackFinished = false;
        var element = this.GetCallbackAnimationElement();
        if (element && this.enableSlideCallbackAnimation && this.slideAnimationDirection)
            ASPxAnimationHelper.slideOut(element, this.slideAnimationDirection, this.FinishBeginCallbackAnimation.aspxBind(this));
        else if (element && this.enableCallbackAnimation)
            ASPxAnimationHelper.fadeOut(element, this.FinishBeginCallbackAnimation.aspxBind(this));
        else
            this.FinishBeginCallbackAnimation();
    },
    FinishBeginCallbackAnimation: function () {
        this.beginCallbackAnimationProcessing = false;
        if (!this.isCallbackFinished)
            this.ShowLoadingElementsInternal();
        else {
            this.DoCallback(this.savedCallbackResult);
            this.savedCallbackResult = null;
        }
    },
    CheckBeginCallbackAnimationInProgress: function (callbackResult) {
        if (this.beginCallbackAnimationProcessing) {
            this.savedCallbackResult = callbackResult;
            this.isCallbackFinished = true;
            return true;
        }
        return false;
    },
    StartEndCallbackAnimation: function () {
        this.HideLoadingPanel();
        this.SetInitialLoadingDivOpacity();
        this.RaiseEndCallbackAnimationStart();
        this.endCallbackAnimationProcessing = true;
        var element = this.GetCallbackAnimationElement();
        if (element && this.enableSlideCallbackAnimation && this.slideAnimationDirection)
            ASPxAnimationHelper.slideIn(element, this.slideAnimationDirection, this.FinishEndCallbackAnimation.aspxBind(this));
        else if (element && this.enableCallbackAnimation)
            ASPxAnimationHelper.fadeIn(element, this.FinishEndCallbackAnimation.aspxBind(this));
        else
            this.FinishEndCallbackAnimation();
        this.slideAnimationDirection = null;
    },
    FinishEndCallbackAnimation: function () {
        this.DoEndCallback();
        this.endCallbackAnimationProcessing = false;
        this.CheckRepeatGesture();
    },
    CheckEndCallbackAnimationNeeded: function () {
        if (!this.endCallbackAnimationProcessing && this.requestCount == 1) {
            this.StartEndCallbackAnimation();
            return true;
        }
        return false;
    },
    PreventCallbackAnimation: function () {
        this.isCallbackAnimationPrevented = true;
    },
    GetCallbackAnimationElement: function () {
        return null;
    },
    AssignSlideAnimationDirectionByPagerArgument: function (arg, currentPageIndex) {
        this.slideAnimationDirection = null;
        if (this.enableSlideCallbackAnimation && typeof (ASPxAnimationHelper) != "undefined") {
            if (arg == ASPxClientPagerCommands.Next || arg == ASPxClientPagerCommands.Last)
                this.slideAnimationDirection = ASPxAnimationHelper.SLIDE_LEFT_DIRECTION;
            else if (arg == ASPxClientPagerCommands.First || arg == ASPxClientPagerCommands.Prev)
                this.slideAnimationDirection = ASPxAnimationHelper.SLIDE_RIGHT_DIRECTION;
            else if (!isNaN(currentPageIndex) && arg.indexOf(ASPxClientPagerCommands.PageNumber) == 0) {
                var newPageIndex = parseInt(arg.substring(2));
                if (!isNaN(newPageIndex))
                    this.slideAnimationDirection = newPageIndex < currentPageIndex ? ASPxAnimationHelper.SLIDE_RIGHT_DIRECTION : ASPxAnimationHelper.SLIDE_LEFT_DIRECTION;
            }
        }
    },
    TryShowPhantomLoadingElements: function () {
        if (this.hasPhantomLoadingElements && this.InCallback()) {
            this.ShowLoadingDivAndPanel();
            this.hasPhantomLoadingElements = false;
        }
    },
    ShowLoadingDivAndPanel: function () {
        this.ShowLoadingDiv();
        this.RestoreLoadingDivOpacity();
        this.ShowLoadingPanel();
    },
    HideLoadingElements: function () {
        this.HideLoadingPanel();
        this.HideLoadingDiv();
    },
    ShowLoadingPanelOnTimer: function () {
        this.ClearLoadingPanelTimer();
        if (this.RenderExistsOnPage()) {
            this.RestoreLoadingDivOpacity();
            this.ShowLoadingPanel();
        }
    },
    ClearLoadingPanelTimer: function () {
        this.lpTimer = _aspxClearTimer(this.lpTimer);
    },
    HideLoadingPanel: function () {
        this.ClearLoadingPanelTimer();
        this.hasPhantomLoadingElements = false;
        if (_aspxIsExistsElement(this.loadingPanelElement)) {
            _aspxRemoveElement(this.loadingPanelElement);
            this.loadingPanelElement = null;
        }
    },
    SetLoadingPanelLocation: function (offsetElement, loadingPanel, x, y, offsetX, offsetY) {
        if (!_aspxIsExists(x) || !_aspxIsExists(y)) {
            var x1 = _aspxGetAbsoluteX(offsetElement);
            var y1 = _aspxGetAbsoluteY(offsetElement);
            var x2 = x1;
            var y2 = y1;
            if (offsetElement == document.body) {
                x2 += _aspxGetDocumentMaxClientWidth();
                y2 += _aspxGetDocumentMaxClientHeight();
            }
            else {
                x2 += offsetElement.offsetWidth;
                y2 += offsetElement.offsetHeight;
            }
            if (x1 < _aspxGetDocumentScrollLeft())
                x1 = _aspxGetDocumentScrollLeft();
            if (y1 < _aspxGetDocumentScrollTop())
                y1 = _aspxGetDocumentScrollTop();
            if (x2 > _aspxGetDocumentScrollLeft() + _aspxGetDocumentClientWidth())
                x2 = _aspxGetDocumentScrollLeft() + _aspxGetDocumentClientWidth();
            if (y2 > _aspxGetDocumentScrollTop() + _aspxGetDocumentClientHeight())
                y2 = _aspxGetDocumentScrollTop() + _aspxGetDocumentClientHeight();
            x = x1 + ((x2 - x1 - loadingPanel.offsetWidth) / 2);
            y = y1 + ((y2 - y1 - loadingPanel.offsetHeight) / 2);
        }
        if (_aspxIsExists(offsetX) && _aspxIsExists(offsetY)) {
            x += offsetX;
            y += offsetY;
        }
        x = _aspxPrepareClientPosForElement(x, loadingPanel, true);
        y = _aspxPrepareClientPosForElement(y, loadingPanel, false);
        if (__aspxIE && __aspxBrowserVersion > 8 && (y - Math.floor(y) === 0.5))
            y = Math.ceil(y);
        _aspxSetStyles(loadingPanel, { left: x, top: y });
    },
    GetLoadingDiv: function () {
        return _aspxGetElementById(this.name + "_LD");
    },
    CreateLoadingDiv: function (parentElement, offsetElement) {
        if (this.ShouldHideExistingLoadingElements())
            this.HideLoadingDiv();
        if (parentElement == null)
            return null;
        if (!this.IsLoadingContainerVisible()) {
            this.hasPhantomLoadingElements = true;
            return null;
        }
        if (!offsetElement)
            offsetElement = parentElement;
        var div = this.GetLoadingDiv();
        if (div != null) {
            div = div.cloneNode(true);
            parentElement.appendChild(div);
            _aspxSetElementDisplay(div, true);
            _aspxAttachEventToElement(div, ASPxClientTouchUI.touchMouseDownEventName, _aspxPreventEvent);
            _aspxAttachEventToElement(div, ASPxClientTouchUI.touchMouseMoveEventName, _aspxPreventEvent);
            _aspxAttachEventToElement(div, ASPxClientTouchUI.touchMouseUpEventName, _aspxPreventEvent);
            this.SetLoadingDivBounds(offsetElement, div);
            this.loadingDivElement = div;
            this.SetInitialLoadingDivOpacity();
            return div;
        }
        return null;
    },
    SetInitialLoadingDivOpacity: function () {
        if (!this.loadingDivElement) return;
        _aspxSaveStyleAttribute(this.loadingDivElement, "opacity");
        _aspxSaveStyleAttribute(this.loadingDivElement, "filter");
        _aspxSetElementOpacity(this.loadingDivElement, 0.01);
    },
    RestoreLoadingDivOpacity: function () {
        if (!this.loadingDivElement) return;
        _aspxRestoreStyleAttribute(this.loadingDivElement, "opacity");
        _aspxRestoreStyleAttribute(this.loadingDivElement, "filter");
    },
    SetLoadingDivBounds: function (offsetElement, loadingDiv) {
        var absX = (offsetElement == document.body) ? 0 : _aspxGetAbsoluteX(offsetElement);
        var absY = (offsetElement == document.body) ? 0 : _aspxGetAbsoluteY(offsetElement);
        _aspxSetStyles(loadingDiv, {
            left: _aspxPrepareClientPosForElement(absX, loadingDiv, true),
            top: _aspxPrepareClientPosForElement(absY, loadingDiv, false)
        });
        var width = (offsetElement == document.body) ? _aspxGetDocumentWidth() : offsetElement.offsetWidth;
        var height = (offsetElement == document.body) ? _aspxGetDocumentHeight() : offsetElement.offsetHeight;
        if (height < 0)
            height = 0;
        _aspxSetStyles(loadingDiv, { width: width, height: height });
        var correctedWidth = 2 * width - loadingDiv.offsetWidth;
        if (correctedWidth <= 0) correctedWidth = width;
        var correctedHeight = 2 * height - loadingDiv.offsetHeight;
        if (correctedHeight <= 0) correctedHeight = height;
        _aspxSetStyles(loadingDiv, { width: correctedWidth, height: correctedHeight });
    },
    ShowLoadingDiv: function () {
    },
    HideLoadingDiv: function () {
        this.hasPhantomLoadingElements = false;
        if (_aspxIsExistsElement(this.loadingDivElement)) {
            _aspxRemoveElement(this.loadingDivElement);
            this.loadingDivElement = null;
        }
    },
    CanHandleGesture: function (evt) {
        return false;
    },
    CanHandleGestureCore: function (evt) {
        var source = _aspxGetEventSource(evt);
        if (_aspxGetIsParent(this.loadingPanelElement, source) || _aspxGetIsParent(this.loadingDivElement, source))
            return true;
        var callbackAnimationElement = this.GetCallbackAnimationElement();
        if (!callbackAnimationElement)
            return false;
        var animationContainer = ASPxAnimationHelper.getSlideAnimationContainer(callbackAnimationElement, false, false);
        if (animationContainer && _aspxGetIsParent(animationContainer, source) && !_aspxGetIsParent(animationContainer.childNodes[0], source))
            return true;
        return this.CanHandleGesture(evt);
    },
    AllowStartGesture: function () {
        return !this.beginCallbackAnimationProcessing && !this.endCallbackAnimationProcessing;
    },
    StartGesture: function () {
    },
    AllowExecuteGesture: function (value) {
        return false;
    },
    ExecuteGesture: function (value) {
    },
    CancelGesture: function (value) {
        if (this.repeatedGestureCount === 0) {
            this.repeatedGestureValue = value;
            this.repeatedGestureCount = 1;
        }
        else {
            if (this.repeatedGestureValue * value > 0)
                this.repeatedGestureCount++;
            else
                this.repeatedGestureCount--;
            if (this.repeatedGestureCount === 0)
                this.repeatedGestureCount = 0;
        }
    },
    CheckRepeatGesture: function () {
        if (this.repeatedGestureCount !== 0) {
            if (this.AllowExecuteGesture(this.repeatedGestureValue))
                this.ExecuteGesture(this.repeatedGestureValue, this.repeatedGestureCount);
            this.repeatedGestureValue = 0;
            this.repeatedGestureCount = 0;
        }
    },
    AllowExecutePagerGesture: function (pageIndex, pageCount, value) {
        if (pageIndex < 0) return false;
        if (pageCount <= 1) return false;
        if (value > 0 && pageIndex === 0) return false;
        if (value < 0 && pageIndex === pageCount - 1) return false;
        return true;
    },
    ExecutePagerGesture: function (pageIndex, pageCount, value, count, method) {
        if (!count) count = 1;
        var pageIndex = pageIndex + (value < 0 ? count : -count);
        if (pageIndex < 0) pageIndex = 0;
        if (pageIndex > pageCount - 1) pageIndex = pageCount - 1;
        method(ASPxClientPagerCommands.PageNumber + pageIndex);
    },
    RaiseInit: function () {
        if (!this.Init.IsEmpty()) {
            var args = new ASPxClientEventArgs();
            this.Init.FireEvent(this, args);
        }
    },
    RaiseBeginCallbackInternal: function (command) {
        if (!this.BeginCallback.IsEmpty()) {
            var args = new ASPxClientBeginCallbackEventArgs(command);
            this.BeginCallback.FireEvent(this, args);
        }
    },
    RaiseBeginCallback: function (command) {
        this.RaiseBeginCallbackInternal(command);
        if (typeof (aspxGetGlobalEvents) != "undefined")
            aspxGetGlobalEvents().OnBeginCallback(this, command);
    },
    RaiseEndCallback: function () {
        if (!this.EndCallback.IsEmpty()) {
            var args = new ASPxClientEndCallbackEventArgs();
            this.EndCallback.FireEvent(this, args);
        }
        if (typeof (aspxGetGlobalEvents) != "undefined")
            aspxGetGlobalEvents().OnEndCallback(this);
    },
    RaiseEndCallbackAnimationStart: function () {
        if (!this.EndCallbackAnimationStart.IsEmpty()) {
            var args = new ASPxClientEventArgs();
            this.EndCallbackAnimationStart.FireEvent(this, args);
        }
    },
    RaiseCallbackError: function (message) {
        if (!this.CallbackError.IsEmpty()) {
            var args = new ASPxClientCallbackErrorEventArgs(message);
            this.CallbackError.FireEvent(this, args);
            if (args.handled)
                return { isHandled: true, errorMessage: args.message };
        }
        if (typeof (aspxGetGlobalEvents) != "undefined") {
            var args = new ASPxClientCallbackErrorEventArgs(message);
            aspxGetGlobalEvents().OnCallbackError(this, args);
            if (args.handled)
                return { isHandled: true, errorMessage: args.message };
        }
        return { isHandled: false, errorMessage: message };
    },
    IsVisible: function () {
        var element = this.GetMainElement();
        return _aspxElementIsVisible(element);
    },
    IsDisplayed: function () {
        var element = this.GetMainElement();
        while (element && element.tagName != "BODY") {
            if (!_aspxGetElementDisplay(element))
                return false;
            element = element.parentNode;
        }
        return true;
    },
    IsHidden: function () {
        var element = this.GetMainElement();
        return element.offsetWidth == 0 && element.offsetHeight == 0;
    },
    Focus: function () {
    },
    GetClientVisible: function () {
        return this.GetVisible();
    },
    SetClientVisible: function (visible) {
        this.SetVisible(visible);
    },
    GetVisible: function () {
        return this.clientVisible;
    },
    SetVisible: function (visible) {
        if (this.clientVisible != visible) {
            this.clientVisible = visible;
            _aspxSetElementDisplay(this.GetMainElement(), visible);
            if (visible) {
                this.AdjustControl();
                var mainElement = this.GetMainElement();
                if (mainElement)
                    aspxGetControlCollection().AdjustControls(mainElement);
            }
        }
    },
    GetEnabled: function () {
        return this.clientEnabled;
    },
    SetEnabled: function (enabled) {
        this.clientEnabled = enabled;
        if (ASPxClientControl.setEnabledLocked)
            return;
        else
            ASPxClientControl.setEnabledLocked = true;
        aspxGetControlCollection().ProcessControlsInContainer(this.GetMainElement(), function (control) {
            if (_aspxIsFunction(control.SetEnabled))
                control.SetEnabled(enabled);
        });
        delete ASPxClientControl.setEnabledLocked;
    },
    InCallback: function () {
        return this.requestCount > 0;
    },
    DoBeginCallback: function (command) {
        this.RaiseBeginCallback(command || "");
        aspxGetControlCollection().Before_WebForm_InitCallback(this.name);
        if (typeof (WebForm_InitCallback) != "undefined" && WebForm_InitCallback) {
            __theFormPostData = "";
            __theFormPostCollection = [];
            this.ClearPostBackEventInput("__EVENTTARGET");
            this.ClearPostBackEventInput("__EVENTARGUMENT");
            WebForm_InitCallback();
            this.savedFormPostData = __theFormPostData;
            this.savedFormPostCollection = __theFormPostCollection;
        }
    },
    ClearPostBackEventInput: function (id) {
        var element = _aspxGetElementById(id);
        if (element != null) element.value = "";
    },
    PerformDataCallback: function (arg, handler) {
        this.CreateCustomDataCallback(arg, "", handler);
    },
    CreateCallback: function (arg, command) {
        var callbackInfo = this.CreateCallbackInfo(ASPxCallbackType.Common, null);
        this.CreateCallbackByInfo(arg, command, callbackInfo);
    },
    CreateCustomDataCallback: function (arg, command, handler) {
        var callbackInfo = this.CreateCallbackInfo(ASPxCallbackType.Data, handler);
        this.CreateCallbackByInfo(arg, command, callbackInfo);
    },
    CreateCallbackByInfo: function (arg, command, callbackInfo) {
        if (!this.CanCreateCallback()) return;
        if (typeof (WebForm_DoCallback) != "undefined" && WebForm_DoCallback && __aspxDocumentLoaded)
            this.CreateCallbackInternal(arg, command, true, callbackInfo);
        else {
            if (!this.savedCallbacks)
                this.savedCallbacks = [];
            var callbackInfo = { arg: arg, command: command, callbackInfo: callbackInfo };
            if (this.allowMultipleCallbacks)
                this.savedCallbacks.push(callbackInfo);
            else
                this.savedCallbacks[0] = callbackInfo;
        }
    },
    CreateCallbackInternal: function (arg, command, viaTimer, callbackInfo) {
        this.requestCount++;
        this.DoBeginCallback(command);
        if (typeof (arg) == "undefined")
            arg = "";
        if (typeof (command) == "undefined")
            command = "";
        var callbackID = this.SaveCallbackInfo(callbackInfo);
        if (viaTimer)
            window.setTimeout("aspxCreateCallback('" + this.name + "', '" + escape(arg) + "', '" + escape(command) + "', " + callbackID + ");", 0);
        else
            this.CreateCallbackCore(arg, command, callbackID);
    },
    CreateCallbackCore: function (arg, command, callbackID) {
        var callBackMethod = this.GetCallbackMethod(command);
        __theFormPostData = this.savedFormPostData;
        __theFormPostCollection = this.savedFormPostCollection;
        callBackMethod.call(this, this.GetSerializedCallbackInfoByID(callbackID) + arg);
    },
    GetCallbackMethod: function (command) {
        return this.callBack;
    },
    CanCreateCallback: function () {
        return !this.InCallback() || (this.allowMultipleCallbacks && !this.beginCallbackAnimationProcessing && !this.endCallbackAnimationProcessing);
    },
    DoLoadCallbackScripts: function () {
        _aspxProcessScriptsAndLinks(this.name, true);
    },
    DoEndCallback: function () {
        if (this.IsCallbackAnimationEnabled() && this.CheckEndCallbackAnimationNeeded())
            return;
        this.requestCount--;
        if (this.HideLoadingPanelOnCallback() && this.requestCount < 1)
            this.HideLoadingElements();
        if (this.enableSwipeGestures && this.supportGestures) {
            ASPxGesturesHelper.UpdateSwipeAnimationContainer(this.name);
            if (this.touchUIMouseScroller)
                this.touchUIMouseScroller.update();
        }
        this.isCallbackAnimationPrevented = false;
        this.OnCallbackFinalized();
        this.RaiseEndCallback();
    },
    DoFinalizeCallback: function () {
    },
    OnCallbackFinalized: function () {
    },
    HideLoadingPanelOnCallback: function () {
        return true;
    },
    ShouldHideExistingLoadingElements: function () {
        return true;
    },
    EvalCallbackResult: function (resultString) {
        return eval(resultString)
    },
    DoCallback: function (result) {
        if (this.IsCallbackAnimationEnabled() && this.CheckBeginCallbackAnimationInProgress(result))
            return;
        result = _aspxTrim(result);
        if (result.indexOf(__aspxCallbackResultPrefix) != 0)
            this.ProcessCallbackGeneralError(result);
        else {
            var resultObj = null;
            try {
                resultObj = this.EvalCallbackResult(result);
            }
            catch (e) {
            }
            if (resultObj) {
                if (resultObj.redirect) {
                    if (!__aspxIE)
                        window.location.href = resultObj.redirect;
                    else {
                        var fakeLink = document.createElement("a");
                        fakeLink.href = resultObj.redirect;
                        document.body.appendChild(fakeLink);
                        fakeLink.click();
                    }
                }
                else if (resultObj.generalError) {
                    this.ProcessCallbackGeneralError(resultObj.generalError);
                }
                else {
                    var errorObj = resultObj.error;
                    if (errorObj)
                        this.ProcessCallbackError(errorObj);
                    else {
                        if (resultObj.cp) {
                            for (var name in resultObj.cp)
                                this[name] = resultObj.cp[name];
                        }
                        var callbackInfo = this.DequeueCallbackInfo(resultObj.id);
                        if (callbackInfo.type == ASPxCallbackType.Data)
                            this.ProcessCustomDataCallback(resultObj.result, callbackInfo);
                        else
                            this.ProcessCallback(resultObj.result);
                    }
                }
            }
        }
        this.DoLoadCallbackScripts();
    },
    DoCallbackError: function (result) {
        this.HideLoadingElements();
        this.ProcessCallbackGeneralError(result);
    },
    DoControlClick: function (evt) {
        this.OnControlClick(_aspxGetEventSource(evt), evt);
    },
    ProcessCallback: function (result) {
        this.OnCallback(result);
    },
    ProcessCustomDataCallback: function (result, callbackInfo) {
        if (callbackInfo.handler != null)
            callbackInfo.handler(this, result);
        this.RaiseCustomDataCallback(result);
    },
    RaiseCustomDataCallback: function (result) {
        if (!this.CustomDataCallback.IsEmpty()) {
            var arg = new ASPxClientCustomDataCallbackEventArgs(result);
            this.CustomDataCallback.FireEvent(this, arg);
        }
    },
    OnCallback: function (result) {
    },
    CreateCallbackInfo: function (type, handler) {
        return { type: type, handler: handler };
    },
    GetSerializedCallbackInfoByID: function (callbackID) {
        return this.GetCallbackInfoByID(callbackID).type + callbackID + __aspxCallbackSeparator;
    },
    SaveCallbackInfo: function (callbackInfo) {
        var activeCallbacksInfo = this.GetActiveCallbacksInfo();
        for (var i = 0; i < activeCallbacksInfo.length; i++) {
            if (activeCallbacksInfo[i] == null) {
                activeCallbacksInfo[i] = callbackInfo;
                return i;
            }
        }
        activeCallbacksInfo.push(callbackInfo);
        return activeCallbacksInfo.length - 1;
    },
    GetActiveCallbacksInfo: function () {
        var persistentProperties = this.GetPersistentProperties();
        if (!persistentProperties.activeCallbacks)
            persistentProperties.activeCallbacks = [];
        return persistentProperties.activeCallbacks;
    },
    GetPersistentProperties: function () {
        var storage = _aspxGetPersistentControlPropertiesStorage();
        var persistentProperties = storage[this.name];
        if (!persistentProperties) {
            persistentProperties = {};
            storage[this.name] = persistentProperties;
        }
        return persistentProperties;
    },
    GetCallbackInfoByID: function (callbackID) {
        return this.GetActiveCallbacksInfo()[callbackID];
    },
    DequeueCallbackInfo: function (index) {
        var activeCallbacksInfo = this.GetActiveCallbacksInfo();
        if (index < 0 || index >= activeCallbacksInfo.length)
            return null;
        var result = activeCallbacksInfo[index];
        activeCallbacksInfo[index] = null;
        return result;
    },
    ProcessCallbackError: function (errorObj) {
        var data = _aspxIsExists(errorObj.data) ? errorObj.data : null;
        var result = this.RaiseCallbackError(errorObj.message);
        if (!result.isHandled)
            this.OnCallbackError(result.errorMessage, data);
    },
    OnCallbackError: function (errorMessage, data) {
        if (errorMessage)
            alert(errorMessage);
    },
    ProcessCallbackGeneralError: function (errorMessage) {
        var result = this.RaiseCallbackError(errorMessage);
        if (!result.isHandled)
            this.OnCallbackGeneralError(result.errorMessage);
    },
    OnCallbackGeneralError: function (errorMessage) {
        this.OnCallbackError(errorMessage, null);
    },
    SendPostBack: function (params) {
        __doPostBack(this.uniqueID, params);
    }
});
ASPxClientControl.AdjustControls = function (container) {
    aspxGetControlCollection().AdjustControls(container);
};
ASPxClientControl.Cast = function (obj) {
    if (typeof obj == "string")
        return window[obj];
    return obj;
};
ASPxClientControl.GetControlCollection = function () {
    return aspxGetControlCollection();
}
var __aspxControlCollection = null;
function aspxGetControlCollection() {
    if (__aspxControlCollection == null)
        __aspxControlCollection = new ASPxClientControlCollection();
    return __aspxControlCollection;
}
var __aspxPersistentControlPropertiesStorage = null;
function _aspxGetPersistentControlPropertiesStorage() {
    if (__aspxPersistentControlPropertiesStorage == null)
        __aspxPersistentControlPropertiesStorage = {};
    return __aspxPersistentControlPropertiesStorage;
}
function _aspxFunctionIsInCallstack(currentCallee, targetFunction, depthLimit) {
    var candidate = currentCallee;
    var depth = 0;
    while (candidate && depth <= depthLimit) {
        candidate = candidate.caller;
        if (candidate == targetFunction)
            return true;
        depth++;
    }
    return false;
}
function aspxCAInit() {
    var isAppInit = typeof (Sys$_Application$_doInitialize) != "undefined" &&
  _aspxFunctionIsInCallstack(arguments.callee, Sys$_Application$_doInitialize, 10);
    aspxGetControlCollection().AtlasInitialize(!isAppInit);
}
function aspxCreateCallback(name, arg, command, callbackID) {
    var control = aspxGetControlCollection().Get(name);
    if (control != null)
        control.CreateCallbackCore(unescape(arg), unescape(command), callbackID);
}
function aspxCallback(result, context) {
    var collection = aspxGetControlCollection();
    collection.DoFinalizeCallback();
    var control = collection.Get(context);
    if (control != null)
        control.DoCallback(result);
}
function aspxCallbackError(result, context) {
    var control = aspxGetControlCollection().Get(context);
    if (control != null)
        control.DoCallbackError(result, false);
}
function aspxCClick(name, evt) {
    var control = aspxGetControlCollection().Get(name);
    if (control != null) control.DoControlClick(evt);
}
_aspxAttachEventToElement(window, "resize", aspxGlobalWindowResize);
function aspxGlobalWindowResize(evt) {
    aspxGetControlCollection().OnBrowserWindowResize(evt);
}
_aspxAttachEventToElement(window, "load", aspxClassesWindowOnLoad);
function aspxClassesWindowOnLoad(evt) {
    __aspxDocumentLoaded = true;
    ASPxResourceManager.SynchronizeResources();
    aspxGetControlCollection().Initialize();
    _aspxInitializeScripts();
    _aspxInitializeLinks();
    _aspxInitializeFocus();
}
ASPxIdent = {};
ASPxIdent.IsDate = function (obj) {
    return obj && obj.constructor == Date;
};
ASPxIdent.IsRegExp = function (obj) {
    return obj && obj.constructor === RegExp;
};
ASPxIdent.IsArray = function (obj) {
    return obj && obj.constructor == Array;
};
ASPxIdent.IsASPxClientControl = function (obj) {
    return obj && obj.isASPxClientControl;
};
ASPxIdent.IsASPxClientEdit = function (obj) {
    return obj && obj.isASPxClientEdit;
};
ASPxIdent.IsASPxClientRadioButtonList = function (obj) {
    return obj && obj.isASPxClientRadioButtonList;
};
ASPxClientPagerCommands = {
    Next: "PBN",
    Prev: "PBP",
    Last: "PBL",
    First: "PBF",
    PageNumber: "PN",
    PageSize: "PSP"
};
if (_aspxIsFunction(window.WebForm_InitCallbackAddField)) {
    (function () {
        var original = window.WebForm_InitCallbackAddField;
        window.WebForm_InitCallbackAddField = function (name, value) {
            if (typeof (name) == "string" && name)
                original.apply(null, arguments);
        };
    })();
}
function aspxFireDefaultButton(evt, buttonID) {
    if (_aspxIsDefaultButtonEvent(evt, buttonID)) {
        var defaultButton = _aspxGetElementById(buttonID);
        if (defaultButton && defaultButton.click) {
            if (_aspxIsFocusable(defaultButton))
                defaultButton.focus();
            _aspxDoElementClick(defaultButton);
            _aspxPreventEventAndBubble(evt);
            return false;
        }
    }
    return true;
}
function _aspxIsDefaultButtonEvent(evt, defaultButtonID) {
    if (evt.keyCode != ASPxKey.Enter)
        return false;
    var srcElement = _aspxGetEventSource(evt);
    if (!srcElement || srcElement.id === defaultButtonID)
        return true;
    var tagName = srcElement.tagName;
    var type = srcElement.type;
    return tagName != "TEXTAREA" && tagName != "BUTTON" && tagName != "A" &&
  (tagName != "INPUT" || type != "checkbox" && type != "radio" && type != "button" && type != "submit" && type != "reset");
}
ASPxPostHandler = _aspxCreateClass(null, {
    constructor: function () {
        this.Post = new ASPxClientEvent();
        this.PostFinalization = new ASPxClientEvent();
        this.observableForms = [];
        this.ReplaceGlobalPostFunctions();
        this.HandleDxCallbackBeginning();
        this.HandleMSAjaxRequestBeginning();
    },
    Update: function () {
        this.ReplaceFormsSubmit(true);
    },
    OnPost: function (ownerID, isCallback, isMSAjaxRequest, isDXCallback) {
        var args = new ASPxClientPostHandlerOnPostEventArgs(ownerID, isCallback, isMSAjaxRequest, isDXCallback);
        this.Post.FireEvent(this, args);
        if (args.cancel)
            return false;
        this.PostFinalization.FireEvent(this, ASPxClientEventArgs.Empty);
        return true;
    },
    ReplaceGlobalPostFunctions: function () {
        if (_aspxIsFunction(window.__doPostBack))
            this.ReplaceDoPostBack();
        if (_aspxIsFunction(window.WebForm_DoCallback))
            this.ReplaceDoCallback();
        this.ReplaceFormsSubmit();
    },
    HandleDxCallbackBeginning: function () {
        aspxGetControlCollection().BeforeInitCallback.AddHandler(function (s, e) {
            _aspxRaisePostHandlerOnPost(e.callbackOwnerID, true, false, true);
        });
    },
    HandleMSAjaxRequestBeginning: function () {
        if (window.Sys && Sys.WebForms && Sys.WebForms.PageRequestManager && Sys.WebForms.PageRequestManager.getInstance) {
            var pageRequestManager = Sys.WebForms.PageRequestManager.getInstance();
            if (pageRequestManager != null && ASPxIdent.IsArray(pageRequestManager._onSubmitStatements)) {
                pageRequestManager._onSubmitStatements.unshift(function () {
                    var manager = Sys.WebForms.PageRequestManager.getInstance()._postBackSettings;
                    var targetID = manager && manager.postbackSettings && manager.postbackSettings.asyncTarget;
                    _aspxRaisePostHandlerOnPost(targetID, true, true);
                    return true;
                });
            }
        }
    },
    ReplaceDoPostBack: function () {
        var original = __doPostBack;
        __doPostBack = function (eventTarget, eventArgument) {
            var postHandler = aspxGetPostHandler();
            _aspxRaisePostHandlerOnPost(eventTarget);
            if (postHandler.cancelPostProcessing)
                return;
            original(eventTarget, eventArgument);
        };
    },
    ReplaceDoCallback: function () {
        var original = WebForm_DoCallback;
        WebForm_DoCallback = function (eventTarget, eventArgument, eventCallback, context, errorCallback, useAsync) {
            var postHandler = aspxGetPostHandler();
            if (postHandler.dxCallbackHandled)
                delete postHandler.dxCallbackHandled;
            else
                _aspxRaisePostHandlerOnPost(eventTarget, true);
            if (postHandler.cancelPostProcessing)
                return;
            return original(eventTarget, eventArgument, eventCallback, context, errorCallback, useAsync);
        };
    },
    ReplaceFormsSubmit: function (checkObservableCollection) {
        for (var i = 0; i < document.forms.length; i++) {
            var form = document.forms[i];
            if (checkObservableCollection && _aspxArrayIndexOf(this.observableForms, form) >= 0)
                continue;
            if (form.submit)
                this.ReplaceFormSubmit(form);
            this.ReplaceFormOnSumbit(form);
            this.observableForms.push(form);
        }
    },
    ReplaceFormSubmit: function (form) {
        var originalSubmit = form.submit;
        form.submit = function () {
            var postHandler = aspxGetPostHandler();
            _aspxRaisePostHandlerOnPost();
            if (postHandler.cancelPostProcessing)
                return false;
            var callee = arguments.callee;
            this.submit = originalSubmit;
            var submitResult = this.submit();
            this.submit = callee;
            return submitResult;
        };
        form = null;
    },
    ReplaceFormOnSumbit: function (form) {
        var originalSubmit = form.onsubmit;
        form.onsubmit = function () {
            var postHandler = aspxGetPostHandler();
            if (postHandler.msAjaxRequestBeginningHandled)
                delete postHandler.msAjaxRequestBeginningHandled;
            else
                _aspxRaisePostHandlerOnPost();
            if (postHandler.cancelPostProcessing)
                return false;
            return _aspxIsFunction(originalSubmit)
    ? originalSubmit.apply(this, arguments)
    : true;
        };
        form = null;
    }
});
function _aspxRaisePostHandlerOnPost(ownerID, isCallback, isMSAjaxRequestBeginning, isDXCallbackBeginning) {
    var postHandler = aspxGetPostHandler();
    if (isMSAjaxRequestBeginning)
        postHandler.msAjaxRequestBeginningHandled = true;
    else if (isDXCallbackBeginning)
        postHandler.dxCallbackHandled = true;
    postHandler.cancelPostProcessing = !postHandler.OnPost(ownerID, isCallback, isMSAjaxRequestBeginning, isDXCallbackBeginning);
}
function aspxGetPostHandler() {
    if (!window.__aspxPostHandler)
        window.__aspxPostHandler = new ASPxPostHandler();
    return window.__aspxPostHandler;
}
ASPxClientBeforeInitCallbackEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
    constructor: function (callbackOwnerID) {
        this.constructor.prototype.constructor.call(this);
        this.callbackOwnerID = callbackOwnerID;
    }
});
ASPxClientPostHandlerOnPostEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
    constructor: function (ownerID, isCallback, isMSAjaxCallback, isDXCallback) {
        this.constructor.prototype.constructor.call(this);
        this.ownerID = ownerID;
        this.isCallback = !!isCallback;
        this.isDXCallback = !!isDXCallback;
        this.isMSAjaxCallback = !!isMSAjaxCallback;
    }
});
ASPxResourceManager = {
    HandlerStr: "DXR.axd?r=",
    ResourceHashes: {},
    SynchronizeResources: function () {
        this.SynchronizeResourcesElements(_aspxGetIncludeScripts(), "src", "DXScript");
    },
    SynchronizeResourcesElements: function (elements, urlAttr, id) {
        var s = this.GetResourcesElementsString(elements, urlAttr, id);
        this.UpdateInputElements(id, s);
    },
    GetResourcesElementsString: function (elements, urlAttr, id) {
        if (!this.ResourceHashes[id])
            this.ResourceHashes[id] = {};
        var hash = this.ResourceHashes[id];
        for (var i = 0; i < elements.length; i++) {
            var resourceUrl = _aspxGetAttribute(elements[i], urlAttr);
            if (resourceUrl) {
                var pos = resourceUrl.indexOf(this.HandlerStr);
                if (pos > -1) {
                    var list = resourceUrl.substr(pos + this.HandlerStr.length);
                    var ampPos = list.lastIndexOf("-");
                    if (ampPos > -1)
                        list = list.substr(0, ampPos);
                    var indexes = list.split(",");
                    for (var j = 0; j < indexes.length; j++)
                        hash[indexes[j]] = indexes[j];
                }
                else
                    hash[resourceUrl] = resourceUrl;
            }
        }
        var array = [];
        for (var key in hash)
            array.push(key);
        return array.join(",");
    },
    UpdateInputElements: function (typeName, list) {
        for (var i = 0; i < document.forms.length; i++) {
            var inputElement = document.forms[i][typeName];
            if (!inputElement)
                inputElement = this.CreateInputElement(document.forms[i], typeName);
            inputElement.value = list;
        }
    },
    CreateInputElement: function (form, typeName) {
        var inputElement = _aspxCreateHiddenField(typeName, typeName);
        form.appendChild(inputElement);
        return inputElement;
    }
};
var __aspxIncludeScriptPrefix = "dxis_";
var __aspxStartupScriptPrefix = "dxss_";
var __aspxIncludeScriptsCache = {};
var __aspxCreatedIncludeScripts = [];
var __aspxAppendedScriptsCount = 0;
var __aspxCallbackOwnerNames = [];
var __aspxScriptsRestartHandlers = {};
function _aspxGetScriptCode(script) {
    var useFirstChildElement = __aspxChrome && __aspxBrowserVersion < 11
  || __aspxSafari && __aspxBrowserVersion < 5;
    var text = useFirstChildElement ? script.firstChild.data : script.text;
    var comment = "<!--";
    var pos = text.indexOf(comment);
    if (pos > -1)
        text = text.substr(pos + comment.length);
    return text;
}
function _aspxAppendScript(script) {
    var parent = document.getElementsByTagName("head")[0];
    if (!parent)
        parent = document.body;
    if (parent)
        parent.appendChild(script);
}
function _aspxIsKnownIncludeScript(script) {
    return !!__aspxIncludeScriptsCache[script.src];
}
function _aspxCacheIncludeScript(script) {
    __aspxIncludeScriptsCache[script.src] = 1;
}
function _aspxProcessScriptsAndLinks(ownerName, isCallback) {
    if (!__aspxDocumentLoaded) return;
    _aspxProcessScripts(ownerName, isCallback);
    _aspxSweepDuplicatedLinks();
    _aspxMoveLinkElements();
    __aspxCachedRules = {};
}
function _aspxGetStartupScripts() {
    return _aspxGetScriptsCore(__aspxStartupScriptPrefix);
}
function _aspxGetIncludeScripts() {
    return _aspxGetScriptsCore(__aspxIncludeScriptPrefix);
}
function _aspxGetScriptsCore(prefix) {
    var result = [];
    var scripts = document.getElementsByTagName("SCRIPT");
    for (var i = 0; i < scripts.length; i++) {
        if (scripts[i].id.indexOf(prefix) == 0)
            result.push(scripts[i]);
    }
    return result;
}
function _aspxGetLinks() {
    var result = [];
    var links = document.getElementsByTagName("LINK"); ;
    for (var i = 0; i < links.length; i++)
        result[i] = links[i];
    return result;
}
function _aspxIsLinksLoaded() {
    var links = _aspxGetLinks();
    for (var i = 0, link; link = links[i]; i++) {
        if (link.readyState && link.readyState.toLowerCase() == "loading")
            return false;
    }
    return true;
}
function _aspxInitializeLinks() {
    var links = _aspxGetLinks();
    for (var i = 0; i < links.length; i++)
        links[i].loaded = true;
}
function _aspxInitializeScripts() {
    var scripts = _aspxGetIncludeScripts();
    for (var i = 0; i < scripts.length; i++)
        _aspxCacheIncludeScript(scripts[i]);
    var startupScripts = _aspxGetStartupScripts();
    for (var i = 0; i < startupScripts.length; i++)
        startupScripts[i].executed = true;
}
function _aspxSweepDuplicatedLinks() {
    if ((__aspxIE && __aspxBrowserVersion < 7) || __aspxOpera)
        return;
    var hash = {};
    var links = _aspxGetLinks();
    for (var i = 0; i < links.length; i++) {
        var href = links[i].href;
        if (!href)
            continue;
        if (hash[href]) {
            if ((__aspxIE || !hash[href].loaded) && links[i].loaded) {
                _aspxRemoveElement(hash[href]);
                hash[href] = links[i];
            }
            else
                _aspxRemoveElement(links[i]);
        }
        else
            hash[href] = links[i];
    }
}
function _aspxSweepDuplicatedScripts() {
    var hash = {};
    var scripts = _aspxGetIncludeScripts();
    for (var i = 0; i < scripts.length; i++) {
        var src = scripts[i].src;
        if (!src) continue;
        if (hash[src])
            _aspxRemoveElement(scripts[i]);
        else
            hash[src] = scripts[i];
    }
}
function _aspxProcessScripts(ownerName, isCallback) {
    var scripts = _aspxGetIncludeScripts();
    var previousCreatedScript = null;
    var firstCreatedScript = null;
    for (var i = 0; i < scripts.length; i++) {
        var script = scripts[i];
        if (script.src == "") continue;
        if (_aspxIsKnownIncludeScript(script))
            continue;
        var createdScript = document.createElement("script");
        createdScript.type = "text/javascript";
        createdScript.src = script.src;
        createdScript.id = script.id;
        function AreScriptsEqual(script1, script2) {
            return script1.src == script2.src;
        }
        if (_aspxArrayIndexOf(__aspxCreatedIncludeScripts, createdScript, AreScriptsEqual) >= 0)
            continue;
        __aspxCreatedIncludeScripts.push(createdScript);
        _aspxRemoveElement(script);
        if (__aspxIE && __aspxBrowserVersion < 9) {
            createdScript.onreadystatechange = new Function("_aspxOnScriptReadyStateChangedCallback(this, " + isCallback + ");");
        } else if (__aspxWebKitFamily || (__aspxFirefox && __aspxBrowserVersion >= 4) || __aspxIE && __aspxBrowserVersion >= 9) {
            createdScript.onload = new Function("_aspxOnScriptLoadCallback(this, " + isCallback + ");");
            if (firstCreatedScript == null)
                firstCreatedScript = createdScript;
            createdScript.nextCreatedScript = null;
            if (previousCreatedScript != null)
                previousCreatedScript.nextCreatedScript = createdScript;
            previousCreatedScript = createdScript;
        } else {
            createdScript.onload = new Function("_aspxOnScriptLoadCallback(this);");
            _aspxAppendScript(createdScript);
            _aspxCacheIncludeScript(createdScript);
        }
    }
    if (firstCreatedScript != null) {
        _aspxAppendScript(firstCreatedScript);
        _aspxCacheIncludeScript(firstCreatedScript);
    }
    __aspxCallbackOwnerNames.push(ownerName);
    if (__aspxCreatedIncludeScripts.length == 0)
        _aspxFinalizeScriptProcessing(isCallback);
}
function _aspxFinalizeScriptProcessing(isCallback) {
    __aspxCreatedIncludeScripts = [];
    __aspxAppendedScriptsCount = 0;
    _aspxSweepDuplicatedScripts();
    _aspxRunStartupScripts(isCallback);
    ASPxResourceManager.SynchronizeResources();
}
function _aspxRunStartupScripts(isCallback) {
    var scripts = _aspxGetStartupScripts();
    var code;
    for (var i = 0; i < scripts.length; i++) {
        if (!scripts[i].executed) {
            code = _aspxGetScriptCode(scripts[i]);
            eval(code);
            scripts[i].executed = true;
        }
    }
    if (__aspxDocumentLoaded) {
        aspxGetControlCollection().InitializeElements(isCallback);
        for (var key in __aspxScriptsRestartHandlers)
            __aspxScriptsRestartHandlers[key]();
        _aspxRunEndCallbackScript();
    }
}
function _aspxRunEndCallbackScript() {
    while (__aspxCallbackOwnerNames.length > 0) {
        var callbackOwnerName = __aspxCallbackOwnerNames.pop();
        var callbackOwner = aspxGetControlCollection().Get(callbackOwnerName);
        if (callbackOwner)
            callbackOwner.DoEndCallback();
    }
}
function _aspxOnScriptReadyStateChangedCallback(scriptElement, isCallback) {
    if (scriptElement.readyState == "loaded") {
        _aspxCacheIncludeScript(scriptElement);
        for (var i = 0; i < __aspxCreatedIncludeScripts.length; i++) {
            var script = __aspxCreatedIncludeScripts[i];
            if (_aspxIsKnownIncludeScript(script)) {
                if (!script.executed) {
                    script.executed = true;
                    _aspxAppendScript(script);
                    __aspxAppendedScriptsCount++;
                }
            } else
                break;
        }
        if (__aspxCreatedIncludeScripts.length == __aspxAppendedScriptsCount)
            _aspxFinalizeScriptProcessing(isCallback);
    }
}
function _aspxOnScriptLoadCallback(scriptElement, isCallback) {
    __aspxAppendedScriptsCount++;
    if (scriptElement.nextCreatedScript) {
        _aspxAppendScript(scriptElement.nextCreatedScript);
        _aspxCacheIncludeScript(scriptElement.nextCreatedScript);
    }
    if (__aspxCreatedIncludeScripts.length == __aspxAppendedScriptsCount)
        _aspxFinalizeScriptProcessing(isCallback);
}
function _aspxAddScriptsRestartHandler(objectName, handler) {
    __aspxScriptsRestartHandlers[objectName] = handler;
}
function _aspxMoveLinkElements() {
    if (__aspxIE) return;
    var head = _aspxGetElementsByTagName(document, "head")[0];
    var bodyLinks = _aspxGetElementsByTagName(document.body, "link");
    var headLinks = _aspxGetElementsByTagName(head, "link");
    var dxLinkAnchor = head.firstChild;
    for (var i = 0; i < headLinks.length; i++) {
        if (headLinks[i].href.indexOf(ASPxResourceManager.HandlerStr) > -1)
            dxLinkAnchor = headLinks[i].nextSibling;
    }
    for (var i = 0; i < bodyLinks.length; i++)
        head.insertBefore(bodyLinks[i], dxLinkAnchor);
}
ASPxIFrame = _aspxCreateClass(null, {
    constructor: function (params) {
        this.params = params || {};
        this.params.src = this.params.src || "";
        this.CreateElements();
    },
    CreateElements: function () {
        var elements = ASPxIFrame.Create(this.params);
        this.containerElement = elements.container;
        this.iframeElement = elements.iframe;
        this.AttachOnLoadHandler(this, this.iframeElement);
        this.SetLoading(true);
        if (this.params.onCreate)
            this.params.onCreate(this.containerElement, this.iframeElement);
    },
    AttachOnLoadHandler: function (instance, element) {
        _aspxAttachEventToElement(element, "load", function () {
            instance.OnLoad(element);
        });
    },
    OnLoad: function (element) {
        this.SetLoading(false, element);
        if (!element.preventCustomOnLoad && this.params.onLoad)
            this.params.onLoad();
    },
    IsLoading: function (element) {
        element = element || this.iframeElement;
        if (element)
            return element.loading;
        return false;
    },
    SetLoading: function (value, element) {
        element = element || this.iframeElement;
        if (element)
            element.loading = value;
    },
    GetContentUrl: function () {
        return this.params.src;
    },
    SetContentUrl: function (url, preventBrowserCaching) {
        if (url) {
            this.params.src = url;
            if (preventBrowserCaching)
                url = ASPxIFrame.AddRandomParamToUrl(url);
            this.SetLoading(true);
            this.iframeElement.src = url;
        }
    },
    RefreshContentUrl: function () {
        if (this.IsLoading())
            return;
        this.SetLoading(true);
        var oldContainerElement = this.containerElement;
        var oldIframeElement = this.iframeElement;
        var postfix = "_del" + Math.floor(Math.random() * 100000).toString();
        if (this.params.id)
            oldIframeElement.id = this.params.id + postfix;
        if (this.params.name)
            oldIframeElement.name = this.params.name + postfix;
        _aspxSetStyles(oldContainerElement, { height: 0 });
        this.CreateElements();
        oldIframeElement.preventCustomOnLoad = true;
        oldIframeElement.src = ASPx.BlankUrl;
        window.setTimeout(function () {
            oldContainerElement.parentNode.removeChild(oldContainerElement);
        }, 10000);
    }
});
ASPxIFrame.Create = function (params) {
    var iframeHtmlStringParts = ["<iframe frameborder='0'"];
    if (params) {
        if (params.id)
            iframeHtmlStringParts.push(" id='", params.id, "'");
        if (params.name)
            iframeHtmlStringParts.push(" name='", params.name, "'");
        if (params.title)
            iframeHtmlStringParts.push(" title='", params.title, "'");
        if (params.scrolling)
            iframeHtmlStringParts.push(" scrolling='", params.scrolling, "'");
        if (params.src)
            iframeHtmlStringParts.push(" src='", params.src, "'");
    }
    iframeHtmlStringParts.push("></iframe>");
    var containerElement = _aspxCreateHtmlElementFromString("<div style='border-width: 0px; padding: 0px; margin: 0px'></div>");
    var iframeElement = _aspxCreateHtmlElementFromString(iframeHtmlStringParts.join(""));
    containerElement.appendChild(iframeElement);
    return {
        container: containerElement,
        iframe: iframeElement
    };
};
ASPxIFrame.AddRandomParamToUrl = function (url) {
    var prefix = url.indexOf("?") > -1
  ? "&"
  : "?";
    var param = prefix + Math.floor(Math.random() * 100000).toString();
    var anchorIndex = url.indexOf("#");
    return anchorIndex == -1
  ? url + param
  : url.substr(0, anchorIndex) + param + url.substr(anchorIndex);
};
ASPxIFrame.GetWindow = function (name) {
    if (__aspxIE)
        return window.frames[name].window;
    else {
        var frameElement = document.getElementById(name);
        return (frameElement != null) ? frameElement.contentWindow : null;
    }
};
ASPxIFrame.GetDocument = function (name) {
    var frameElement;
    if (__aspxIE) {
        frameElement = window.frames[name];
        return (frameElement != null) ? frameElement.document : null;
    }
    else {
        frameElement = document.getElementById(name);
        return (frameElement != null) ? frameElement.contentDocument : null;
    }
};
ASPxIFrame.GetDocumentBody = function (name) {
    var doc = ASPxIFrame.GetDocument(name);
    return (doc != null) ? doc.body : null;
};
ASPxIFrame.GetElement = function (name) {
    if (__aspxIE)
        return window.frames[name].window.frameElement;
    else
        return document.getElementById(name);
};
ASPxKbdHelper = _aspxCreateClass(null, {
    constructor: function (control) {
        this.control = control;
    },
    Init: function () {
        ASPxKbdHelper.GlobalInit();
        var element = this.GetFocusableElement();
        element.tabIndex = Math.max(element.tabIndex, 0);
        var instance = this;
        _aspxAttachEventToElement(element, "click", function (e) {
            instance.HandleClick(e);
        });
        _aspxAttachEventToElement(element, "focus", function (e) {
            if (!instance.CanFocus(e))
                return true;
            if (__aspxIE && _aspxGetActiveElement() !== instance.GetFocusableElement())
                return;
            ASPxKbdHelper.active = instance;
        });
        _aspxAttachEventToElement(element, "blur", function () {
            delete ASPxKbdHelper.active;
        });
    },
    GetFocusableElement: function () { return this.control.GetMainElement(); },
    CanFocus: function (e) {
        var tag = _aspxGetEventSource(e).tagName;
        if (tag == "A" || tag == "TEXTAREA" || tag == "INPUT" || tag == "SELECT" || tag == "IFRAME" || tag == "OBJECT")
            return false;
        return true;
    },
    HandleClick: function (e) {
        if (!this.CanFocus(e))
            return;
        this.Focus();
    },
    Focus: function () {
        try {
            this.GetFocusableElement().focus();
        } catch (e) {
        }
    },
    HandleKeyDown: function (e) { },
    HandleKeyPress: function (e) { },
    HandleKeyUp: function (e) { }
});
ASPxKbdHelper.GlobalInit = function () {
    if (ASPxKbdHelper.ready)
        return;
    _aspxAttachEventToDocument("keydown", ASPxKbdHelper.OnKeyDown);
    _aspxAttachEventToDocument("keypress", ASPxKbdHelper.OnKeyPress);
    _aspxAttachEventToDocument("keyup", ASPxKbdHelper.OnKeyUp);
    ASPxKbdHelper.ready = true;
};
ASPxKbdHelper.swallowKey = false;
ASPxKbdHelper.accessKeys = {};
ASPxKbdHelper.ProcessKey = function (e, actionName) {
    if (!ASPxKbdHelper.active)
        return;
    var ctl = ASPxKbdHelper.active.control;
    if (ctl !== aspxGetControlCollection().Get(ctl.name)) {
        delete ASPxKbdHelper.active;
        return;
    }
    if (!ASPxKbdHelper.swallowKey)
        ASPxKbdHelper.swallowKey = ASPxKbdHelper.active[actionName](e);
    if (ASPxKbdHelper.swallowKey)
        _aspxPreventEvent(e);
};
ASPxKbdHelper.OnKeyDown = function (e) {
    ASPxKbdHelper.swallowKey = false;
    if (e.ctrlKey && e.shiftKey && ASPxKbdHelper.TryAccessKey(_aspxGetKeyCode(e)))
        _aspxPreventEvent(e);
    else
        ASPxKbdHelper.ProcessKey(e, "HandleKeyDown");
};
ASPxKbdHelper.OnKeyPress = function (e) { ASPxKbdHelper.ProcessKey(e, "HandleKeyPress"); };
ASPxKbdHelper.OnKeyUp = function (e) { ASPxKbdHelper.ProcessKey(e, "HandleKeyUp"); };
ASPxKbdHelper.RegisterAccessKey = function (obj) {
    var key = obj.accessKey;
    if (!key) return;
    ASPxKbdHelper.accessKeys[key.toLowerCase()] = obj.name;
};
ASPxKbdHelper.TryAccessKey = function (code) {
    var name = ASPxKbdHelper.accessKeys[String.fromCharCode(code).toLowerCase()];
    if (!name) return false;
    var obj = aspxGetControlCollection().Get(name);
    if (!obj) return false;
    var el = obj.GetMainElement();
    if (!el) return false;
    el.focus();
    return true;
};
var __aspxFocusedElement = null;
function aspxOnElementFocused(evt) {
    evt = _aspxGetEvent(evt);
    if (evt && evt.target)
        __aspxFocusedElement = evt.target;
}
function _aspxInitializeFocus() {
    if (!_aspxGetActiveElement())
        _aspxAttachEventToDocument("focus", aspxOnElementFocused);
}
function _aspxGetFocusedElement() {
    var activeElement = _aspxGetActiveElement();
    return activeElement ? activeElement : __aspxFocusedElement;
}
function _aspxChangeElementContainer(element, container, savePreviousContainer) {
    if (element.parentNode != container) {
        var parentNode = element.parentNode;
        parentNode.removeChild(element);
        container.appendChild(element);
        if (savePreviousContainer)
            element.previousContainer = parentNode;
    }
}
function _aspxRestoreElementContainer(element) {
    if (element.previousContainer) {
        _aspxChangeElementContainer(element, element.previousContainer, false);
        element.previousContainer = null;
    }
}
var ASPxCacheHelper = {};
ASPxCacheHelper.GetCachedValue = function (obj, cacheName, func, cacheObj) {
    if (!cacheObj)
        cacheObj = obj;
    if (!cacheObj.cache)
        cacheObj.cache = {};
    if (!_aspxIsExists(cacheObj.cache[cacheName]))
        cacheObj.cache[cacheName] = func.apply(obj, []);
    return cacheObj.cache[cacheName];
};
ASPxCacheHelper.DropCachedValue = function (cacheObj, cacheName) {
    cacheObj.cache[cacheName] = null;
};
ASPxClientTemporaryCache = _aspxCreateClass(null, {
    constructor: function () {
        this.cache = {};
        this.invalidateTimerID = -1;
    },
    Get: function (key, getObjectFunc, context, args) {
        if (this.invalidateTimerID < 0) {
            this.invalidateTimerID = window.setTimeout(function () {
                this.Invalidate();
            } .aspxBind(this), 0);
        }
        if (!_aspxIsExists(this.cache[key])) {
            if (!_aspxIsExists(args))
                args = [];
            this.cache[key] = getObjectFunc.apply(context, args);
        }
        return this.cache[key];
    },
    Invalidate: function () {
        this.cache = {};
        this.invalidateTimerID = _aspxClearTimer(this.invalidateTimerID);
    }
});
ASPxClientCheckBoxCheckState = {
    Checked: "Checked",
    Unchecked: "Unchecked",
    Indeterminate: "Indeterminate"
};
ASPxClientCheckBoxInputKey = {
    Checked: "C",
    Unchecked: "U",
    Indeterminate: "I"
};
ASPxCheckableElementStateController = _aspxCreateClass(null, {
    constructor: function (imageProperties) {
        this.checkBoxStates = [];
        this.imageProperties = imageProperties;
    },
    GetValueByInputKey: function (inputKey) {
        return this.GetFirstValueBySecondValue("Value", "StateInputKey", inputKey);
    },
    GetInputKeyByValue: function (value) {
        return this.GetFirstValueBySecondValue("StateInputKey", "Value", value);
    },
    GetImagePropertiesNumByInputKey: function (value) {
        return this.GetFirstValueBySecondValue("ImagePropertiesNumber", "StateInputKey", value);
    },
    GetNextCheckBoxValue: function (currentValue, allowGrayed) {
        var currentInputKey = this.GetInputKeyByValue(currentValue);
        var nextInputKey = '';
        switch (currentInputKey) {
            case ASPxClientCheckBoxInputKey.Checked:
                nextInputKey = ASPxClientCheckBoxInputKey.Unchecked; break;
            case ASPxClientCheckBoxInputKey.Unchecked:
                nextInputKey = allowGrayed ? ASPxClientCheckBoxInputKey.Indeterminate : ASPxClientCheckBoxInputKey.Checked; break;
            case ASPxClientCheckBoxInputKey.Indeterminate:
                nextInputKey = ASPxClientCheckBoxInputKey.Checked; break;
        }
        return this.GetValueByInputKey(nextInputKey);
    },
    GetCheckStateByInputKey: function (inputKey) {
        switch (inputKey) {
            case ASPxClientCheckBoxInputKey.Checked:
                return ASPxClientCheckBoxCheckState.Checked;
            case ASPxClientCheckBoxInputKey.Unchecked:
                return ASPxClientCheckBoxCheckState.Unchecked;
            case ASPxClientCheckBoxInputKey.Indeterminate:
                return ASPxClientCheckBoxCheckState.Indeterminate;
        }
    },
    GetValueByCheckState: function (checkState) {
        switch (checkState) {
            case ASPxClientCheckBoxCheckState.Checked:
                return this.GetValueByInputKey(ASPxClientCheckBoxInputKey.Checked);
            case ASPxClientCheckBoxCheckState.Unchecked:
                return this.GetValueByInputKey(ASPxClientCheckBoxInputKey.Unchecked);
            case ASPxClientCheckBoxCheckState.Indeterminate:
                return this.GetValueByInputKey(ASPxClientCheckBoxInputKey.Indeterminate);
        }
    },
    GetFirstValueBySecondValue: function (firstValueName, secondValueName, secondValue) {
        return this.GetValueByFunc(firstValueName,
   function (checkBoxState) { return checkBoxState[secondValueName] === secondValue; });
    },
    GetValueByFunc: function (valueName, func) {
        for (var i = 0; i < this.checkBoxStates.length; i++) {
            if (func(this.checkBoxStates[i]))
                return this.checkBoxStates[i][valueName];
        }
    },
    AssignElementClassName: function (element, cssClassPropertyKey, disabledCssClassPropertyKey, assignedClassName) {
        var classNames = [];
        for (var i = 0; i < this.imageProperties[cssClassPropertyKey].length; i++) {
            classNames.push(this.imageProperties[disabledCssClassPropertyKey][i]);
            classNames.push(this.imageProperties[cssClassPropertyKey][i]);
        }
        var elementClassName = element.className;
        for (var i = 0; i < classNames.length; i++) {
            var className = classNames[i];
            var index = elementClassName.indexOf(className);
            if (index > -1)
                elementClassName = elementClassName.replace((index == 0 ? '' : ' ') + className, "");
        }
        elementClassName += " " + assignedClassName;
        element.className = elementClassName;
    },
    UpdateInternalCheckBoxDecoration: function (mainElement, inputKey, enabled) {
        var imagePropertiesNumber = this.GetImagePropertiesNumByInputKey(inputKey);
        for (var imagePropertyKey in this.imageProperties) {
            var propertyValue = this.imageProperties[imagePropertyKey][imagePropertiesNumber];
            propertyValue = propertyValue || !isNaN(propertyValue) ? propertyValue : "";
            switch (imagePropertyKey) {
                case "0": mainElement.title = propertyValue; break;
                case "1": mainElement.style.width = propertyValue + (propertyValue != "" ? "px" : ""); break;
                case "2": mainElement.style.height = propertyValue + (propertyValue != "" ? "px" : ""); break;
            }
            if (enabled) {
                switch (imagePropertyKey) {
                    case "3": this.SetImageSrc(mainElement, propertyValue); break;
                    case "4":
                        this.AssignElementClassName(mainElement, "4", "8", propertyValue);
                        break;
                    case "5": this.SetBackgroundPosition(mainElement, propertyValue, true); break;
                    case "6": this.SetBackgroundPosition(mainElement, propertyValue, false); break;
                }
            } else {
                switch (imagePropertyKey) {
                    case "7": this.SetImageSrc(mainElement, propertyValue); break;
                    case "8":
                        this.AssignElementClassName(mainElement, "4", "8", propertyValue);
                        break;
                    case "9": this.SetBackgroundPosition(mainElement, propertyValue, true); break;
                    case "10": this.SetBackgroundPosition(mainElement, propertyValue, false); break;
                }
            }
        }
    },
    SetImageSrc: function (mainElement, src) {
        if (src === "") {
            mainElement.style.backgroundImage = "";
            mainElement.style.backgroundPosition = "";
        }
        else {
            mainElement.style.backgroundImage = "url(" + src + ")";
            this.SetBackgroundPosition(mainElement, 0, true);
            this.SetBackgroundPosition(mainElement, 0, false);
        }
    },
    SetBackgroundPosition: function (element, value, isX) {
        if (value === "") {
            element.style.backgroundPosition = value;
            return;
        }
        if (element.style.backgroundPosition === "")
            element.style.backgroundPosition = isX ? "-" + value.toString() + "px 0px" : "0px -" + value.toString() + "px";
        else {
            var position = element.style.backgroundPosition.split(' ');
            element.style.backgroundPosition = isX ? '-' + value.toString() + "px " + position[1] : position[0] + " -" + value.toString() + "px";
        }
    },
    AddState: function (value, stateInputKey, imagePropertiesNumber) {
        this.checkBoxStates.push({
            "Value": value,
            "StateInputKey": stateInputKey,
            "ImagePropertiesNumber": imagePropertiesNumber
        });
    }
});
ASPxCheckableElementStateController.Create = function (imageProperties, valueChecked, valueUnchecked, valueGrayed, allowGrayed) {
    var stateController = new ASPxCheckableElementStateController(imageProperties);
    stateController.AddState(valueChecked, ASPxClientCheckBoxInputKey.Checked, 0);
    stateController.AddState(valueUnchecked, ASPxClientCheckBoxInputKey.Unchecked, 1);
    if (typeof (valueGrayed) != "undefined")
        stateController.AddState(valueGrayed, ASPxClientCheckBoxInputKey.Indeterminate, allowGrayed ? 2 : 1);
    stateController.allowGrayed = allowGrayed;
    return stateController;
};
ASPxCheckableElementHelper = _aspxCreateClass(null, {
    InternalCheckBoxInitialize: function (internalCheckBox) {
        this.AttachToMainElement(internalCheckBox);
        this.AttachToInputElement(internalCheckBox);
    },
    AttachToMainElement: function (internalCheckBox) {
        var instance = this;
        if (internalCheckBox.mainElement) {
            _aspxAttachEventToElement(internalCheckBox.mainElement, "click",
    function (evt) {
        instance.InvokeClick(internalCheckBox, evt);
        if (!internalCheckBox.disableCancelBubble)
            return _aspxPreventEventAndBubble(evt);
    }
   );
            _aspxAttachEventToElement(internalCheckBox.mainElement, "mousedown",
    function (evt) {
        internalCheckBox.Refocus();
    }
   );
            _aspxPreventElementDragAndSelect(internalCheckBox.mainElement, true);
        }
    },
    AttachToInputElement: function (internalCheckBox) {
        var instance = this;
        if (internalCheckBox.inputElement && internalCheckBox.mainElement) {
            _aspxAttachEventToElement(internalCheckBox.inputElement, "focus",
    function (evt) {
        if (!internalCheckBox.enabled)
            internalCheckBox.inputElement.blur();
        else
            internalCheckBox.OnFocus();
    }
   );
            _aspxAttachEventToElement(internalCheckBox.inputElement, "blur",
    function (evt) {
        internalCheckBox.OnLostFocus();
    }
   );
            _aspxAttachEventToElement(internalCheckBox.inputElement, "keyup",
    function (evt) {
        if (_aspxGetKeyCode(evt) == ASPxKey.Space)
            instance.InvokeClick(internalCheckBox, evt);
    }
   );
            _aspxAttachEventToElement(internalCheckBox.inputElement, "keydown",
    function (evt) {
        if (_aspxGetKeyCode(evt) == ASPxKey.Space)
            return _aspxPreventEvent(evt);
    }
   );
        }
    },
    IsKBSInputWrapperExist: function () {
        return __aspxOpera || __aspxWebKitFamily;
    },
    GetICBMainElementByInput: function (icbInputElement) {
        return this.IsKBSInputWrapperExist() ? icbInputElement.parentNode.parentNode : icbInputElement.parentNode;
    },
    InvokeClick: function (internalCheckBox, evt) {
        if (internalCheckBox.enabled && !internalCheckBox.readOnly) {
            var inputElementValue = internalCheckBox.inputElement.value;
            internalCheckBox.inputElement.focus();
            if (!__aspxIE)
                internalCheckBox.inputElement.value = inputElementValue;
            this.InvokeClickCore(internalCheckBox, evt)
        }
    },
    InvokeClickCore: function (internalCheckBox, evt) {
        internalCheckBox.OnClick(evt);
    }
});
ASPxCheckableElementHelper.Instance = new ASPxCheckableElementHelper();
ASPxClientCheckBoxInternal = _aspxCreateClass(null, {
    constructor: function (inputElement, stateController, allowGrayed, allowGrayedByClick, helper, container, storeValueInInput, key, disableCancelBubble) {
        this.inputElement = inputElement;
        this.mainElement = helper.GetICBMainElementByInput(this.inputElement);
        this.name = (key ? key : this.inputElement.id) + ASPxClientCheckBoxInternal.GetICBMainElementPostfix();
        this.mainElement.id = this.name;
        this.stateController = stateController;
        this.container = container;
        this.allowGrayed = allowGrayed;
        this.allowGrayedByClick = allowGrayedByClick;
        this.autoSwitchEnabled = true;
        this.storeValueInInput = !!storeValueInInput;
        this.storedInputKey = !this.storeValueInInput ? this.inputElement.value : null;
        this.disableCancelBubble = !!disableCancelBubble;
        this.focusDecoration = null;
        this.focused = false;
        this.focusLocked = false;
        this.enabled = true;
        this.readOnly = false;
        this.CheckedChanged = new ASPxClientEvent();
        this.Focus = new ASPxClientEvent();
        this.LostFocus = new ASPxClientEvent();
        helper.InternalCheckBoxInitialize(this);
    },
    ChangeInputElementTabIndex: function () {
        var changeMethod = this.enabled ? _aspxRestoreTabIndexAttribute : _aspxSaveTabIndexAttributeAndReset;
        changeMethod(this.inputElement);
    },
    CreateFocusDecoration: function (focusedStyle) {
        this.focusDecoration = new ASPxClientEditStyleDecoration(this);
        this.focusDecoration.AddStyle('F', focusedStyle[0], focusedStyle[1]);
        this.focusDecoration.AddPostfix("");
    },
    UpdateFocusDecoration: function () {
        this.focusDecoration.Update();
    },
    StoreInputKey: function (inputKey) {
        if (this.storeValueInInput)
            this.inputElement.value = inputKey;
        else
            this.storedInputKey = inputKey;
    },
    GetStoredInputKey: function () {
        if (this.storeValueInInput)
            return this.inputElement.value;
        else
            return this.storedInputKey;
    },
    OnClick: function (e) {
        if (this.autoSwitchEnabled) {
            var currentValue = this.GetValue();
            var value = this.stateController.GetNextCheckBoxValue(currentValue, this.allowGrayedByClick && this.allowGrayed);
            this.SetValue(value);
        }
        this.CheckedChanged.FireEvent(this, e);
    },
    OnFocus: function () {
        if (!this.IsFocusLocked()) {
            this.focused = true;
            this.UpdateFocusDecoration();
            this.Focus.FireEvent(this, null);
        } else
            this.UnlockFocus();
    },
    OnLostFocus: function () {
        if (!this.IsFocusLocked()) {
            this.focused = false;
            this.UpdateFocusDecoration();
            this.LostFocus.FireEvent(this, null);
        }
    },
    Refocus: function () {
        if (this.focused) {
            this.LockFocus();
            this.inputElement.blur();
            _aspxSetFocus(this.inputElement);
        }
    },
    LockFocus: function () {
        this.focusLocked = true;
    },
    UnlockFocus: function () {
        this.focusLocked = false;
    },
    IsFocusLocked: function () {
        return this.focusLocked;
    },
    SetValue: function (value) {
        var currentValue = this.GetValue();
        if (currentValue !== value) {
            var newInputKey = this.stateController.GetInputKeyByValue(value);
            if (newInputKey) {
                this.StoreInputKey(newInputKey);
                this.stateController.UpdateInternalCheckBoxDecoration(this.mainElement, newInputKey, this.enabled);
            }
        }
    },
    GetValue: function () {
        return this.stateController.GetValueByInputKey(this.GetCurrentInputKey());
    },
    GetCurrentCheckState: function () {
        return this.stateController.GetCheckStateByInputKey(this.GetCurrentInputKey());
    },
    GetCurrentInputKey: function () {
        return this.GetStoredInputKey();
    },
    GetChecked: function () {
        return this.GetCurrentInputKey() === ASPxClientCheckBoxInputKey.Checked;
    },
    SetChecked: function (checked) {
        var newValue = this.stateController.GetValueByCheckState(checked ? ASPxClientCheckBoxCheckState.Checked : ASPxClientCheckBoxCheckState.Unchecked);
        this.SetValue(newValue);
    },
    SetEnabled: function (enabled) {
        if (this.enabled != enabled) {
            this.enabled = enabled;
            this.stateController.UpdateInternalCheckBoxDecoration(this.mainElement, this.GetCurrentInputKey(), this.enabled);
            this.ChangeInputElementTabIndex();
        }
    }
});
ASPxClientCheckBoxInternal.GetICBMainElementPostfix = function () {
    return "_D";
};
ASPxCheckBoxInternalCollection = _aspxCreateClass(null, {
    constructor: function (imageProperties, allowGrayed, storeValueInInput, helper, disableCancelBubble) {
        this.checkBoxes = {};
        this.stateController = allowGrayed
   ? ASPxCheckableElementStateController.Create(imageProperties, ASPxClientCheckBoxInputKey.Checked, ASPxClientCheckBoxInputKey.Unchecked, ASPxClientCheckBoxInputKey.Indeterminate, true)
   : ASPxCheckableElementStateController.Create(imageProperties, ASPxClientCheckBoxInputKey.Checked, ASPxClientCheckBoxInputKey.Unchecked);
        this.helper = helper || ASPxCheckableElementHelper.Instance;
        this.storeValueInInput = !!storeValueInInput;
        this.disableCancelBubble = !!disableCancelBubble;
    },
    Add: function (key, inputElement, container) {
        this.Remove(key);
        this.checkBoxes[key] = this.CreateInternalCheckBox(key, inputElement, container);
        return this.checkBoxes[key];
    },
    Clear: function () {
        this.checkBoxes = {};
    },
    Remove: function (key) {
        delete this.checkBoxes[key];
    },
    Get: function (id) {
        return this.checkBoxes[id];
    },
    SetImageProperties: function (imageProperties) {
        this.stateController.imageProperties = imageProperties;
    },
    CreateInternalCheckBox: function (key, inputElement, container) {
        return new ASPxClientCheckBoxInternal(inputElement, this.stateController, this.stateController.allowGrayed, false, this.helper, container, this.storeValueInInput, key, this.disableCancelBubble);
    }
});
ASPxClientEditStyleDecoration = _aspxCreateClass(null, {
    constructor: function (editor) {
        this.editor = editor;
        this.postfixList = [];
        this.styles = {};
        this.innerStyles = {};
    },
    GetStyleSheet: function () {
        if (!ASPxClientEditStyleDecoration.__sheet)
            ASPxClientEditStyleDecoration.__sheet = _aspxCreateStyleSheet();
        return ASPxClientEditStyleDecoration.__sheet;
    },
    AddPostfix: function (value, applyClass, applyBorders, applyBackground) {
        this.postfixList.push(value);
    },
    AddStyle: function (key, className, cssText) {
        this.styles[key] = this.CreateRule(className, cssText);
        this.innerStyles[key] = this.CreateRule("", this.FilterInnerCss(cssText));
    },
    CreateRule: function (className, cssText) {
        return _aspxTrim(className + " " + _aspxCreateImportantStyleRule(this.GetStyleSheet(), cssText));
    },
    Update: function () {
        for (var i = 0; i < this.postfixList.length; i++) {
            var postfix = this.postfixList[i];
            var inner = postfix.length > 0;
            var element = _aspxGetElementById(this.editor.name + postfix);
            if (!element) continue;
            if (this.HasDecoration("I")) {
                var isValid = this.editor.GetIsValid();
                this.ApplyDecoration("I", element, inner, !isValid);
            }
            if (this.HasDecoration("F"))
                this.ApplyDecoration("F", element, inner, this.editor.focused);
            if (this.HasDecoration("N")) {
                var apply = !this.editor.focused;
                if (apply) {
                    if (this.editor.CanApplyNullTextDecoration) {
                        apply = this.editor.CanApplyNullTextDecoration();
                    } else {
                        var value = this.editor.GetValue();
                        apply = apply && (value == null || value === "");
                    }
                }
                if (apply)
                    _aspxChangeAttribute(element, "spellcheck", "false");
                else
                    _aspxRestoreAttribute(element, "spellcheck");
                this.ApplyDecoration("N", element, inner, apply);
            }
        }
    },
    HasDecoration: function (key) {
        return !!this.styles[key];
    },
    ApplyDecoration: function (key, element, inner, active) {
        var value = inner ? this.innerStyles[key] : this.styles[key];
        element.className = element.className.replace(value, "");
        if (active)
            element.className = _aspxTrim(element.className + " " + value);
    },
    FilterInnerCss: function (css) {
        return css.replace(/(border|background-image)[^:]*:[^;]+/gi, "");
    }
});
var ASPxClientTouchUI = {
    isGesture: false,
    isMouseEventFromScrolling: false,
    isNativeScrollingAllowed: true,
    clickSensetivity: 10,
    documentTouchHandlers: {},
    documentEventAttachingAllowed: true,
    msTouchDraggableClassName: "dxMSTouchDraggable",
    touchMouseDownEventName: __aspxWebKitTouchUI ? "touchstart" : "mousedown",
    touchMouseUpEventName: __aspxWebKitTouchUI ? "touchend" : "mouseup",
    touchMouseMoveEventName: __aspxWebKitTouchUI ? "touchmove" : "mousemove",
    isTouchEvent: function (evt) {
        return __aspxWebKitTouchUI && _aspxIsExists(evt.changedTouches);
    },
    isTouchEventName: function (eventName) {
        return __aspxWebKitTouchUI && (eventName.indexOf("touch") > -1 || eventName.indexOf("gesture") > -1);
    },
    getEventX: function (evt) {
        return evt.changedTouches[0].pageX;
    },
    getEventY: function (evt) {
        return evt.changedTouches[0].pageY;
    },
    getWebkitMajorVersion: function () {
        if (!this.webkitMajorVersion) {
            var regExp = new RegExp("applewebkit/(\\d+)", "i");
            var matches = regExp.exec(__aspxUserAgent);
            if (matches && matches.index >= 1)
                this.webkitMajorVersion = matches[1];
        }
        return this.webkitMajorVersion;
    },
    getIsLandscapeOrientation: function () {
        if (__aspxMacOSMobilePlatform || __aspxAndroidMobilePlatform)
            return Math.abs(window.orientation) == 90;
        return _aspxGetDocumentClientWidth() > _aspxGetDocumentClientHeight();
    },
    nativeWebKitScrollingSupported: function () {
        return __aspxMacOSMobilePlatform && (__aspxBrowserVersion >= 5.1 || this.getWebkitMajorVersion() > 533);
    },
    makeScrollableIfRequired: function (element, options) {
        if (__aspxWebKitTouchUI && element) {
            var overflow = _aspxGetCurrentStyle(element).overflow;
            if (element.tagName == "DIV" && overflow != "hidden" && overflow != "visible") {
                return this.MakeScrollable(element);
            }
        }
    },
    preventScrollOnEvent: function (evt) {
    },
    handleFastTapIfRequired: function (evt, action) {
        if (__aspxWebKitTouchUI && evt.type == 'touchstart' && action) {
            this.FastTapHelper.HandleFastTap(evt, action);
            return true;
        }
        return false;
    },
    ensureDocumentSizesCorrect: function () {
        return (document.documentElement.clientWidth - document.documentElement.clientHeight) / (screen.width - screen.height) > 0;
    },
    ensureOrientationChanged: function (onOrientationChangedFunction) {
        if (ASPxClientUtils.iOSPlatform || this.ensureDocumentSizesCorrect())
            onOrientationChangedFunction();
        else {
            window.setTimeout(function () {
                this.ensureOrientationChanged(onOrientationChangedFunction);
            } .aspxBind(this), 100);
        }
    },
    onEventAttachingToDocument: function (eventName, func) {
        if (__aspxMacOSMobilePlatform && this.isTouchEventName(eventName)) {
            if (!this.documentTouchHandlers[eventName])
                this.documentTouchHandlers[eventName] = [];
            this.documentTouchHandlers[eventName].push(func);
            return this.documentEventAttachingAllowed;
        }
        return true;
    },
    onEventDettachedFromDocument: function (eventName, func) {
        if (__aspxMacOSMobilePlatform && this.isTouchEventName(eventName)) {
            var handlers = this.documentTouchHandlers[eventName];
            if (handlers)
                _aspxArrayRemove(handlers, func);
        }
    },
    processDocumentTouchEventHandlers: function (proc) {
        var touchEventNames = ["touchstart", "touchend", "touchmove", "gesturestart", "gestureend"];
        for (var i = 0; i < touchEventNames.length; i++) {
            var eventName = touchEventNames[i];
            var handlers = this.documentTouchHandlers[eventName];
            if (handlers) {
                for (var j = 0; j < handlers.length; j++) {
                    proc(eventName, handlers[j]);
                }
            }
        }
    },
    removeDocumentTouchEventHandlers: function () {
        if (__aspxMacOSMobilePlatform) {
            this.documentEventAttachingAllowed = false;
            this.processDocumentTouchEventHandlers(_aspxDetachEventFromDocumentCore);
        }
    },
    restoreDocumentTouchEventHandlers: function () {
        if (__aspxMacOSMobilePlatform) {
            this.documentEventAttachingAllowed = true;
            this.processDocumentTouchEventHandlers(_aspxAttachEventToDocumentCore);
        }
    },
    IsNativeScrolling: function () {
        return ASPxClientTouchUI.nativeWebKitScrollingSupported() && ASPxClientTouchUI.isNativeScrollingAllowed;
    },
    msTouchCreateGerturesWrapper: function (element, onTap) {
        if (!window.navigator.msPointerEnabled || typeof (MSGesture) == "undefined")
            return;
        var gesture = new MSGesture();
        gesture.target = element;
        _aspxAttachEventToElement(element, "MSPointerDown", function (evt) {
            gesture.addPointer(evt.pointerId);
        });
        _aspxAttachEventToElement(element, "MSPointerUp", function (evt) {
            gesture.stop();
        });
        if (onTap)
            _aspxAttachEventToElement(element, "MSGestureTap", onTap);
        return gesture;
    }
};
var ASPxClientAdaptiveCore = {
    adaptiveMode: false,
    isAdaptiveView: function () { return false; }
};
__aspxClassesScriptParsed = true;

var __aspxStateItemsExist = false;
var __aspxFocusedItemKind = "FocusedStateItem";
var __aspxHoverItemKind = "HoverStateItem";
var __aspxPressedItemKind = "PressedStateItem";
var __aspxSelectedItemKind = "SelectedStateItem";
var __aspxDisabledItemKind = "DisabledStateItem";
var __aspxCachedStatePrefix = "cached";
ASPxStateItem = _aspxCreateClass(null, {
    constructor: function (name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, kind, disableApplyingStyleToLink) {
        this.name = name;
        this.classNames = classNames;
        this.customClassNames = [];
        this.resultClassNames = [];
        this.cssTexts = cssTexts;
        this.postfixes = postfixes;
        this.imageObjs = imageObjs;
        this.imagePostfixes = imagePostfixes;
        this.kind = kind;
        this.classNamePostfix = kind.substr(0, 1).toLowerCase();
        this.enabled = true;
        this.needRefreshBetweenElements = false;
        this.elements = null;
        this.images = null;
        this.linkColor = null;
        this.lintTextDecoration = null;
        this.disableApplyingStyleToLink = !!disableApplyingStyleToLink;
    },
    GetCssText: function (index) {
        if (_aspxIsExists(this.cssTexts[index]))
            return this.cssTexts[index];
        return this.cssTexts[0];
    },
    CreateStyleRule: function (index) {
        if (this.GetCssText(index) == "") return "";
        var styleSheet = _aspxGetCurrentStyleSheet();
        if (styleSheet)
            return _aspxCreateImportantStyleRule(styleSheet, this.GetCssText(index), this.classNamePostfix);
        return "";
    },
    GetClassName: function (index) {
        if (_aspxIsExists(this.classNames[index]))
            return this.classNames[index];
        return this.classNames[0];
    },
    GetResultClassName: function (index) {
        if (!_aspxIsExists(this.resultClassNames[index])) {
            if (!_aspxIsExists(this.customClassNames[index]))
                this.customClassNames[index] = this.CreateStyleRule(index);
            if (this.GetClassName(index) != "" && this.customClassNames[index] != "")
                this.resultClassNames[index] = this.GetClassName(index) + " " + this.customClassNames[index];
            else if (this.GetClassName(index) != "")
                this.resultClassNames[index] = this.GetClassName(index);
            else if (this.customClassNames[index] != "")
                this.resultClassNames[index] = this.customClassNames[index];
            else
                this.resultClassNames[index] = "";
        }
        return this.resultClassNames[index];
    },
    GetElements: function (element) {
        if (!this.elements || !_aspxIsValidElements(this.elements)) {
            if (this.postfixes && this.postfixes.length > 0) {
                this.elements = [];
                var parentNode = element.parentNode;
                if (parentNode) {
                    for (var i = 0; i < this.postfixes.length; i++) {
                        var id = this.name + this.postfixes[i];
                        this.elements[i] = _aspxGetChildById(parentNode, id);
                        if (!this.elements[i])
                            this.elements[i] = _aspxGetElementById(id);
                    }
                }
            }
            else
                this.elements = [element];
        }
        return this.elements;
    },
    GetImages: function (element) {
        if (!this.images || !_aspxIsValidElements(this.images)) {
            this.images = [];
            if (this.imagePostfixes && this.imagePostfixes.length > 0) {
                var elements = this.GetElements(element);
                for (var i = 0; i < this.imagePostfixes.length; i++) {
                    var id = this.name + this.imagePostfixes[i];
                    for (var j = 0; j < elements.length; j++) {
                        if (!elements[j]) continue;
                        if (elements[j].id == id)
                            this.images[i] = elements[j];
                        else
                            this.images[i] = _aspxGetChildById(elements[j], id);
                        if (this.images[i])
                            break;
                    }
                }
            }
        }
        return this.images;
    },
    Apply: function (element) {
        if (!this.enabled) return;
        try {
            this.ApplyStyle(element);
            if (this.imageObjs && this.imageObjs.length > 0)
                this.ApplyImage(element);
            if (__aspxIE && __aspxBrowserMajorVersion >= 11)
                this.ForceRedrawAppearance(element);
        }
        catch (e) {
        }
    },
    ApplyStyle: function (element) {
        var elements = this.GetElements(element);
        for (var i = 0; i < elements.length; i++) {
            if (!elements[i]) continue;
            var className = elements[i].className.replace(this.GetResultClassName(i), "");
            elements[i].className = _aspxTrim(className) + " " + this.GetResultClassName(i);
            if (!__aspxOpera || __aspxBrowserVersion >= 9)
                this.ApplyStyleToLinks(elements, i);
        }
    },
    ApplyStyleToLinks: function (elements, index) {
        if (this.disableApplyingStyleToLink)
            return;
        var linkCount = 0;
        var savedLinkCount = -1;
        if (_aspxIsExists(elements[index]["savedLinkCount"]))
            savedLinkCount = parseInt(elements[index]["savedLinkCount"]);
        do {
            if (savedLinkCount > -1 && savedLinkCount <= linkCount)
                break;
            var link = elements[index]["link" + linkCount];
            if (!link) {
                link = _aspxGetChildByTagName(elements[index], "A", linkCount);
                if (!link)
                    link = _aspxGetChildByTagName(elements[index], "SPAN", linkCount);
                if (link)
                    elements[index]["link" + linkCount] = link;
            }
            if (link)
                this.ApplyStyleToLinkElement(link, index);
            else
                elements[index]["savedLinkCount"] = linkCount;
            linkCount++;
        }
        while (link != null)
    },
    ApplyStyleToLinkElement: function (link, index) {
        if (this.GetLinkColor(index) != "")
            _aspxChangeAttributeExtended(link.style, "color", link, "saved" + this.kind + "Color", this.GetLinkColor(index));
        if (this.GetLinkTextDecoration(index) != "")
            _aspxChangeAttributeExtended(link.style, "textDecoration", link, "saved" + this.kind + "TextDecoration", this.GetLinkTextDecoration(index));
    },
    ApplyImage: function (element) {
        var images = this.GetImages(element);
        for (var i = 0; i < images.length; i++) {
            if (!images[i] || !this.imageObjs[i]) continue;
            var useSpriteImage = typeof (this.imageObjs[i]) != "string";
            var newUrl = "", newCssClass = "", newBackground = "";
            if (useSpriteImage) {
                newUrl = ASPx.EmptyImageUrl;
                if (this.imageObjs[i].spriteCssClass)
                    newCssClass = this.imageObjs[i].spriteCssClass;
                if (this.imageObjs[i].spriteBackground)
                    newBackground = this.imageObjs[i].spriteBackground;
            }
            else {
                newUrl = this.imageObjs[i];
                if (_aspxIsExistsAttribute(images[i].style, "background"))
                    newBackground = " ";
            }
            if (newUrl != "")
                _aspxChangeAttributeExtended(images[i], "src", images[i], "saved" + this.kind + "Src", newUrl);
            if (newCssClass != "")
                this.ApplyImageClassName(images[i], newCssClass);
            if (newBackground != "") {
                if (__aspxWebKitFamily) {
                    var savedBackground = _aspxGetAttribute(images[i].style, "background");
                    if (!useSpriteImage)
                        savedBackground += " " + images[i].style["backgroundPosition"];
                    _aspxSetAttribute(images[i], "saved" + this.kind + "Background", savedBackground);
                    _aspxSetAttribute(images[i].style, "background", newBackground);
                }
                else
                    _aspxChangeAttributeExtended(images[i].style, "background", images[i], "saved" + this.kind + "Background", newBackground);
            }
        }
    },
    ApplyImageClassName: function (element, newClassName) {
        var className = element.className.replace(newClassName, "");
        _aspxSetAttribute(element, "saved" + this.kind + "ClassName", className);
        element.className = className + " " + newClassName;
    },
    Cancel: function (element) {
        if (!this.enabled) return;
        try {
            if (this.imageObjs && this.imageObjs.length > 0)
                this.CancelImage(element);
            this.CancelStyle(element);
        }
        catch (e) {
        }
    },
    CancelStyle: function (element) {
        var elements = this.GetElements(element);
        for (var i = 0; i < elements.length; i++) {
            if (!elements[i]) continue;
            var className = _aspxTrim(elements[i].className.replace(this.GetResultClassName(i), ""));
            elements[i].className = className;
            if (!__aspxOpera || __aspxBrowserVersion >= 9)
                this.CancelStyleFromLinks(elements, i);
        }
    },
    CancelStyleFromLinks: function (elements, index) {
        if (this.disableApplyingStyleToLink)
            return;
        var linkCount = 0;
        var savedLinkCount = -1;
        if (_aspxIsExists(elements[index]["savedLinkCount"]))
            savedLinkCount = parseInt(elements[index]["savedLinkCount"]);
        do {
            if (savedLinkCount > -1 && savedLinkCount <= linkCount)
                break;
            var link = elements[index]["link" + linkCount];
            if (!link) {
                link = _aspxGetChildByTagName(elements[index], "A", linkCount);
                if (!link)
                    link = _aspxGetChildByTagName(elements[index], "SPAN", linkCount);
                if (link)
                    elements[index]["link" + linkCount] = link;
            }
            if (link)
                this.CancelStyleFromLinkElement(link, index);
            else
                elements[index]["savedLinkCount"] = linkCount;
            linkCount++;
        }
        while (link != null)
    },
    CancelStyleFromLinkElement: function (link, index) {
        if (this.GetLinkColor(index) != "")
            _aspxRestoreAttributeExtended(link.style, "color", link, "saved" + this.kind + "Color");
        if (this.GetLinkTextDecoration(index) != "")
            _aspxRestoreAttributeExtended(link.style, "textDecoration", link, "saved" + this.kind + "TextDecoration");
    },
    CancelImage: function (element) {
        var images = this.GetImages(element);
        for (var i = 0; i < images.length; i++) {
            if (!images[i] || !this.imageObjs[i]) continue;
            _aspxRestoreAttributeExtended(images[i], "src", images[i], "saved" + this.kind + "Src");
            this.CancelImageClassName(images[i]);
            _aspxRestoreAttributeExtended(images[i].style, "background", images[i], "saved" + this.kind + "Background");
        }
    },
    CancelImageClassName: function (element) {
        var savedClassName = _aspxGetAttribute(element, "saved" + this.kind + "ClassName");
        if (_aspxIsExists(savedClassName)) {
            element.className = savedClassName;
            _aspxRemoveAttribute(element, "saved" + this.kind + "ClassName");
        }
    },
    Clone: function () {
        return new ASPxStateItem(this.name, this.classNames, this.cssTexts, this.postfixes,
   this.imageObjs, this.imagePostfixes, this.kind, this.disableApplyingStyleToLink);
    },
    IsChildElement: function (element) {
        if (element != null) {
            var elements = this.GetElements(element);
            for (var i = 0; i < elements.length; i++) {
                if (!elements[i]) continue;
                if (_aspxGetIsParent(elements[i], element))
                    return true;
            }
        }
        return false;
    },
    ForceRedrawAppearance: function (element) {
        _aspxChangeStyleAttribute(element, "display", "none");
        var dummy = element.offsetWidth;
        _aspxRestoreStyleAttribute(element, "display");
    },
    GetLinkColor: function (index) {
        if (!_aspxIsExists(this.linkColor)) {
            var rule = _aspxGetStyleSheetRule(this.customClassNames[index]);
            this.linkColor = rule ? rule.style.color : null;
            if (!_aspxIsExists(this.linkColor)) {
                var rule = _aspxGetStyleSheetRule(this.GetClassName(index));
                this.linkColor = rule ? rule.style.color : null;
            }
            if (this.linkColor == null)
                this.linkColor = "";
        }
        return this.linkColor;
    },
    GetLinkTextDecoration: function (index) {
        if (!_aspxIsExists(this.linkTextDecoration)) {
            var rule = _aspxGetStyleSheetRule(this.customClassNames[index]);
            this.linkTextDecoration = rule ? rule.style.textDecoration : null;
            if (!_aspxIsExists(this.linkTextDecoration)) {
                var rule = _aspxGetStyleSheetRule(this.GetClassName(index));
                this.linkTextDecoration = rule ? rule.style.textDecoration : null;
            }
            if (this.linkTextDecoration == null)
                this.linkTextDecoration = "";
        }
        return this.linkTextDecoration;
    }
});
ASPxClientStateEventArgs = _aspxCreateClass(null, {
    constructor: function (item, element) {
        this.item = item;
        this.element = element;
        this.toElement = null;
        this.fromElement = null;
        this.htmlEvent = null;
    }
});
ASPxStateController = _aspxCreateClass(null, {
    constructor: function () {
        this.focusedItems = {};
        this.hoverItems = {};
        this.pressedItems = {};
        this.selectedItems = {};
        this.disabledItems = {};
        this.currentFocusedElement = null;
        this.currentFocusedItemName = null;
        this.currentHoverElement = null;
        this.currentHoverItemName = null;
        this.currentPressedElement = null;
        this.currentPressedItemName = null;
        this.savedCurrentPressedElement = null;
        this.savedCurrentMouseMoveSrcElement = null;
        this.AfterSetFocusedState = new ASPxClientEvent();
        this.AfterClearFocusedState = new ASPxClientEvent();
        this.AfterSetHoverState = new ASPxClientEvent();
        this.AfterClearHoverState = new ASPxClientEvent();
        this.AfterSetPressedState = new ASPxClientEvent();
        this.AfterClearPressedState = new ASPxClientEvent();
        this.AfterDisabled = new ASPxClientEvent();
        this.AfterEnabled = new ASPxClientEvent();
        this.BeforeSetFocusedState = new ASPxClientEvent();
        this.BeforeClearFocusedState = new ASPxClientEvent();
        this.BeforeSetHoverState = new ASPxClientEvent();
        this.BeforeClearHoverState = new ASPxClientEvent();
        this.BeforeSetPressedState = new ASPxClientEvent();
        this.BeforeClearPressedState = new ASPxClientEvent();
        this.BeforeDisabled = new ASPxClientEvent();
        this.BeforeEnabled = new ASPxClientEvent();
        this.FocusedItemKeyDown = new ASPxClientEvent();
    },
    AddHoverItem: function (name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink) {
        this.AddItem(this.hoverItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, __aspxHoverItemKind, disableApplyingStyleToLink);
        this.AddItem(this.focusedItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, __aspxFocusedItemKind, disableApplyingStyleToLink);
    },
    AddPressedItem: function (name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink) {
        this.AddItem(this.pressedItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, __aspxPressedItemKind, disableApplyingStyleToLink);
    },
    AddSelectedItem: function (name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink) {
        this.AddItem(this.selectedItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, __aspxSelectedItemKind, disableApplyingStyleToLink);
    },
    AddDisabledItem: function (name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink) {
        this.AddItem(this.disabledItems, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, __aspxDisabledItemKind, disableApplyingStyleToLink);
    },
    AddItem: function (items, name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, kind, disableApplyingStyleToLink) {
        var stateItem = new ASPxStateItem(name, classNames, cssTexts, postfixes, imageObjs, imagePostfixes, kind, disableApplyingStyleToLink);
        if (postfixes && postfixes.length > 0) {
            for (var i = 0; i < postfixes.length; i++) {
                items[name + postfixes[i]] = stateItem;
            }
        }
        else
            items[name] = stateItem;
        __aspxStateItemsExist = true;
    },
    RemoveHoverItem: function (name) {
        this.RemoveItem(this.hoverItems, name);
        this.RemoveItem(this.focusedItems, name);
    },
    RemovePressedItem: function (name) {
        this.RemoveItem(this.pressedItems, name);
    },
    RemoveSelectedItem: function (name) {
        this.RemoveItem(this.selectedItems, name);
    },
    RemoveDisabledItem: function (name) {
        this.RemoveItem(this.disabledItems, name);
    },
    RemoveItem: function (items, name) {
        delete items[name];
    },
    GetFocusedElement: function (srcElement) {
        return this.GetItemElement(srcElement, this.focusedItems, __aspxFocusedItemKind);
    },
    GetHoverElement: function (srcElement) {
        return this.GetItemElement(srcElement, this.hoverItems, __aspxHoverItemKind);
    },
    GetPressedElement: function (srcElement) {
        return this.GetItemElement(srcElement, this.pressedItems, __aspxPressedItemKind);
    },
    GetSelectedElement: function (srcElement) {
        return this.GetItemElement(srcElement, this.selectedItems, __aspxSelectedItemKind);
    },
    GetDisabledElement: function (srcElement) {
        return this.GetItemElement(srcElement, this.disabledItems, __aspxDisabledItemKind);
    },
    GetItemElement: function (srcElement, items, kind) {
        if (srcElement && srcElement[__aspxCachedStatePrefix + kind]) {
            var cachedElement = srcElement[__aspxCachedStatePrefix + kind];
            if (cachedElement != __aspxEmptyCachedValue)
                return cachedElement;
            return null;
        }
        var element = srcElement;
        while (element != null) {
            var item = items[element.id];
            if (item) {
                this.CacheItemElement(srcElement, kind, element);
                element[kind] = item;
                return element;
            }
            element = element.parentNode;
        }
        this.CacheItemElement(srcElement, kind, __aspxEmptyCachedValue);
        return null;
    },
    CacheItemElement: function (srcElement, kind, value) {
        if (srcElement && !srcElement[__aspxCachedStatePrefix + kind])
            srcElement[__aspxCachedStatePrefix + kind] = value;
    },
    DoSetFocusedState: function (element, fromElement) {
        var item = element[__aspxFocusedItemKind];
        if (item) {
            var args = new ASPxClientStateEventArgs(item, element);
            args.fromElement = fromElement;
            this.BeforeSetFocusedState.FireEvent(this, args);
            item.Apply(element);
            this.AfterSetFocusedState.FireEvent(this, args);
        }
    },
    DoClearFocusedState: function (element, toElement) {
        var item = element[__aspxFocusedItemKind];
        if (item) {
            var args = new ASPxClientStateEventArgs(item, element);
            args.toElement = toElement;
            this.BeforeClearFocusedState.FireEvent(this, args);
            item.Cancel(element);
            this.AfterClearFocusedState.FireEvent(this, args);
        }
    },
    DoSetHoverState: function (element, fromElement) {
        var item = element[__aspxHoverItemKind];
        if (item) {
            var args = new ASPxClientStateEventArgs(item, element);
            args.fromElement = fromElement;
            this.BeforeSetHoverState.FireEvent(this, args);
            item.Apply(element);
            this.AfterSetHoverState.FireEvent(this, args);
        }
    },
    DoClearHoverState: function (element, toElement) {
        var item = element[__aspxHoverItemKind];
        if (item) {
            var args = new ASPxClientStateEventArgs(item, element);
            args.toElement = toElement;
            this.BeforeClearHoverState.FireEvent(this, args);
            item.Cancel(element);
            this.AfterClearHoverState.FireEvent(this, args);
        }
    },
    DoSetPressedState: function (element) {
        var item = element[__aspxPressedItemKind];
        if (item) {
            var args = new ASPxClientStateEventArgs(item, element);
            this.BeforeSetPressedState.FireEvent(this, args);
            item.Apply(element);
            this.AfterSetPressedState.FireEvent(this, args);
        }
    },
    DoClearPressedState: function (element) {
        var item = element[__aspxPressedItemKind];
        if (item) {
            var args = new ASPxClientStateEventArgs(item, element);
            this.BeforeClearPressedState.FireEvent(this, args);
            item.Cancel(element);
            this.AfterClearPressedState.FireEvent(this, args);
        }
    },
    SetCurrentFocusedElement: function (element) {
        if (this.currentFocusedElement && !_aspxIsValidElement(this.currentFocusedElement)) {
            this.currentFocusedElement = null;
            this.currentFocusedItemName = "";
        }
        if (this.currentFocusedElement != element) {
            var oldCurrentFocusedElement = this.currentFocusedElement;
            var item = (element != null) ? element[__aspxFocusedItemKind] : null;
            var itemName = (item != null) ? item.name : "";
            if (this.currentFocusedItemName != itemName) {
                if (this.currentHoverItemName != "")
                    this.SetCurrentHoverElement(null);
                if (this.currentFocusedElement != null)
                    this.DoClearFocusedState(this.currentFocusedElement, element);
                this.currentFocusedElement = element;
                item = (element != null) ? element[__aspxFocusedItemKind] : null;
                this.currentFocusedItemName = (item != null) ? item.name : "";
                if (this.currentFocusedElement != null)
                    this.DoSetFocusedState(this.currentFocusedElement, oldCurrentFocusedElement);
            }
        }
    },
    SetCurrentHoverElement: function (element) {
        if (this.currentHoverElement && !_aspxIsValidElement(this.currentHoverElement)) {
            this.currentHoverElement = null;
            this.currentHoverItemName = "";
        }
        var item = (element != null) ? element[__aspxHoverItemKind] : null;
        if (item && !item.enabled) {
            element = this.GetItemElement(element.parentNode, this.hoverItems, __aspxHoverItemKind);
            item = (element != null) ? element[__aspxHoverItemKind] : null;
        }
        if (this.currentHoverElement != element) {
            var oldCurrentHoverElement = this.currentHoverElement,
    itemName = (item != null) ? item.name : "";
            if (this.currentHoverItemName != itemName || (item != null && item.needRefreshBetweenElements)) {
                if (this.currentFocusedItemName != "")
                    this.SetCurrentFocusedElement(null);
                if (this.currentHoverElement != null)
                    this.DoClearHoverState(this.currentHoverElement, element);
                item = (element != null) ? element[__aspxHoverItemKind] : null;
                if (item == null || item.enabled) {
                    this.currentHoverElement = element;
                    this.currentHoverItemName = (item != null) ? item.name : "";
                    if (this.currentHoverElement != null)
                        this.DoSetHoverState(this.currentHoverElement, oldCurrentHoverElement);
                }
            }
        }
    },
    SetCurrentPressedElement: function (element) {
        if (this.currentPressedElement && !_aspxIsValidElement(this.currentPressedElement)) {
            this.currentPressedElement = null;
            this.currentPressedItemName = "";
        }
        if (this.currentPressedElement != element) {
            if (this.currentPressedElement != null)
                this.DoClearPressedState(this.currentPressedElement);
            var item = (element != null) ? element[__aspxPressedItemKind] : null;
            if (item == null || item.enabled) {
                this.currentPressedElement = element;
                this.currentPressedItemName = (item != null) ? item.name : "";
                if (this.currentPressedElement != null)
                    this.DoSetPressedState(this.currentPressedElement);
            }
        }
    },
    SetCurrentFocusedElementBySrcElement: function (srcElement) {
        var element = this.GetFocusedElement(srcElement);
        this.SetCurrentFocusedElement(element);
    },
    SetCurrentHoverElementBySrcElement: function (srcElement) {
        var element = this.GetHoverElement(srcElement);
        this.SetCurrentHoverElement(element);
    },
    SetCurrentPressedElementBySrcElement: function (srcElement) {
        var element = this.GetPressedElement(srcElement);
        this.SetCurrentPressedElement(element);
    },
    SetPressedElement: function (element) {
        this.SetCurrentHoverElement(null);
        this.SetCurrentPressedElementBySrcElement(element);
        this.savedCurrentPressedElement = this.currentPressedElement;
    },
    SelectElement: function (element) {
        var item = element[__aspxSelectedItemKind];
        if (item)
            item.Apply(element);
    },
    SelectElementBySrcElement: function (srcElement) {
        var element = this.GetSelectedElement(srcElement);
        if (element != null) this.SelectElement(element);
    },
    DeselectElement: function (element) {
        var item = element[__aspxSelectedItemKind];
        if (item)
            item.Cancel(element);
    },
    DeselectElementBySrcElement: function (srcElement) {
        var element = this.GetSelectedElement(srcElement);
        if (element != null) this.DeselectElement(element);
    },
    SetElementEnabled: function (element, enable) {
        if (enable)
            this.EnableElement(element);
        else
            this.DisableElement(element);
    },
    DisableElement: function (element) {
        var element = this.GetDisabledElement(element);
        if (element != null) {
            var item = element[__aspxDisabledItemKind];
            if (item) {
                var args = new ASPxClientStateEventArgs(item, element);
                this.BeforeDisabled.FireEvent(this, args);
                if (item.name == this.currentPressedItemName)
                    this.SetCurrentPressedElement(null);
                if (item.name == this.currentHoverItemName)
                    this.SetCurrentHoverElement(null);
                item.Apply(element);
                this.SetMouseStateItemsEnabled(item.name, item.postfixes, false);
                this.AfterDisabled.FireEvent(this, args);
            }
        }
    },
    EnableElement: function (element) {
        var element = this.GetDisabledElement(element);
        if (element != null) {
            var item = element[__aspxDisabledItemKind];
            if (item) {
                var args = new ASPxClientStateEventArgs(item, element);
                this.BeforeEnabled.FireEvent(this, args);
                item.Cancel(element);
                this.SetMouseStateItemsEnabled(item.name, item.postfixes, true);
                this.AfterEnabled.FireEvent(this, args);
            }
        }
    },
    SetMouseStateItemsEnabled: function (name, postfixes, enabled) {
        if (postfixes && postfixes.length > 0) {
            for (var i = 0; i < postfixes.length; i++) {
                this.SetItemsEnabled(this.hoverItems, name + postfixes[i], enabled);
                this.SetItemsEnabled(this.pressedItems, name + postfixes[i], enabled);
                this.SetItemsEnabled(this.focusedItems, name + postfixes[i], enabled);
            }
        }
        else {
            this.SetItemsEnabled(this.hoverItems, name, enabled);
            this.SetItemsEnabled(this.pressedItems, name, enabled);
            this.SetItemsEnabled(this.focusedItems, name, enabled);
        }
    },
    SetItemsEnabled: function (items, name, enabled) {
        if (items[name])
            items[name].enabled = enabled;
    },
    OnFocusMove: function (evt) {
        var element = _aspxGetEventSource(evt);
        aspxGetStateController().SetCurrentFocusedElementBySrcElement(element);
    },
    OnMouseMove: function (evt, checkElementChanged) {
        var srcElement = _aspxGetEventSource(evt);
        if (checkElementChanged && srcElement == this.savedCurrentMouseMoveSrcElement) return;
        this.savedCurrentMouseMoveSrcElement = srcElement;
        if (__aspxIE && !_aspxGetIsLeftButtonPressed(evt) && this.savedCurrentPressedElement != null)
            this.ClearSavedCurrentPressedElement();
        if (this.savedCurrentPressedElement == null)
            this.SetCurrentHoverElementBySrcElement(srcElement);
        else {
            var element = this.GetPressedElement(srcElement);
            if (element != this.currentPressedElement) {
                if (element == this.savedCurrentPressedElement)
                    this.SetCurrentPressedElement(this.savedCurrentPressedElement);
                else
                    this.SetCurrentPressedElement(null);
            }
        }
    },
    OnMouseDown: function (evt) {
        if (!_aspxGetIsLeftButtonPressed(evt)) return;
        var srcElement = _aspxGetEventSource(evt);
        this.OnMouseDownOnElement(srcElement);
    },
    OnMouseDownOnElement: function (element) {
        if (this.GetPressedElement(element) == null) return;
        this.SetPressedElement(element);
    },
    OnMouseUp: function (evt) {
        var srcElement = _aspxGetEventSource(evt);
        this.OnMouseUpOnElement(srcElement);
    },
    OnMouseUpOnElement: function (element) {
        if (this.savedCurrentPressedElement == null) return;
        this.ClearSavedCurrentPressedElement();
        this.SetCurrentHoverElementBySrcElement(element);
    },
    OnMouseOver: function (evt) {
        var element = _aspxGetEventSource(evt);
        if (element && element.tagName == "IFRAME")
            this.OnMouseMove(evt, true);
    },
    OnKeyDown: function (evt) {
        var element = this.GetFocusedElement(_aspxGetEventSource(evt));
        if (element != null && element == this.currentFocusedElement) {
            var item = element[__aspxFocusedItemKind];
            if (item) {
                var args = new ASPxClientStateEventArgs(item, element);
                args.htmlEvent = evt;
                this.FocusedItemKeyDown.FireEvent(this, args);
            }
        }
    },
    OnSelectStart: function (evt) {
        if (this.savedCurrentPressedElement) {
            _aspxClearSelection();
            return false;
        }
    },
    ClearSavedCurrentPressedElement: function () {
        this.savedCurrentPressedElement = null;
        this.SetCurrentPressedElement(null);
    },
    ClearCache: function (srcElement, kind) {
        if (srcElement[__aspxCachedStatePrefix + kind])
            srcElement[__aspxCachedStatePrefix + kind] = null;
    },
    ClearElementCache: function (srcElement) {
        this.ClearCache(srcElement, __aspxFocusedItemKind);
        this.ClearCache(srcElement, __aspxHoverItemKind);
        this.ClearCache(srcElement, __aspxPressedItemKind);
        this.ClearCache(srcElement, __aspxSelectedItemKind);
        this.ClearCache(srcElement, __aspxDisabledItemKind);
    }
});
var __aspxStateController = null;
function aspxGetStateController() {
    if (__aspxStateController == null)
        __aspxStateController = new ASPxStateController();
    return __aspxStateController;
}
function aspxAddStateItems(method, namePrefix, classes, disableApplyingStyleToLink) {
    for (var i = 0; i < classes.length; i++) {
        for (var j = 0; j < classes[i][2].length; j++) {
            var name = namePrefix;
            if (classes[i][2][j])
                name += "_" + classes[i][2][j];
            var postfixes = classes[i][3] || null;
            var imageObjs = (classes[i][4] && classes[i][4][j]) || null;
            var imagePostfixes = classes[i][5] || null;
            method.call(aspxGetStateController(), name, classes[i][0], classes[i][1], postfixes, imageObjs, imagePostfixes, disableApplyingStyleToLink);
        }
    }
}
function aspxAddHoverItems(namePrefix, classes, disableApplyingStyleToLink) {
    aspxAddStateItems(aspxGetStateController().AddHoverItem, namePrefix, classes, disableApplyingStyleToLink);
}
function aspxAddPressedItems(namePrefix, classes, disableApplyingStyleToLink) {
    aspxAddStateItems(aspxGetStateController().AddPressedItem, namePrefix, classes, disableApplyingStyleToLink);
}
function aspxAddSelectedItems(namePrefix, classes, disableApplyingStyleToLink) {
    aspxAddStateItems(aspxGetStateController().AddSelectedItem, namePrefix, classes, disableApplyingStyleToLink);
}
function aspxAddDisabledItems(namePrefix, classes, disableApplyingStyleToLink) {
    aspxAddStateItems(aspxGetStateController().AddDisabledItem, namePrefix, classes, disableApplyingStyleToLink);
}
function aspxRemoveStateItems(method, namePrefix, classes) {
    for (var i = 0; i < classes.length; i++) {
        for (var j = 0; j < classes[i][0].length; j++) {
            var name = namePrefix;
            if (classes[i][0][j])
                name += "_" + classes[i][0][j];
            method.call(aspxGetStateController(), name);
        }
    }
}
function aspxRemoveHoverItems(namePrefix, classes) {
    aspxRemoveStateItems(aspxGetStateController().RemoveHoverItem, namePrefix, classes);
}
function aspxRemovePressedItems(namePrefix, classes) {
    aspxRemoveStateItems(aspxGetStateController().RemovePressedItem, namePrefix, classes);
}
function aspxRemoveSelectedItems(namePrefix, classes) {
    aspxRemoveStateItems(aspxGetStateController().RemoveSelectedItem, namePrefix, classes);
}
function aspxRemoveDisabledItems(namePrefix, classes) {
    aspxRemoveStateItems(aspxGetStateController().RemoveDisabledItem, namePrefix, classes);
}
function aspxAddAfterClearFocusedState(handler) {
    aspxGetStateController().AfterClearFocusedState.AddHandler(handler);
}
function aspxAddAfterSetFocusedState(handler) {
    aspxGetStateController().AfterSetFocusedState.AddHandler(handler);
}
function aspxAddAfterClearHoverState(handler) {
    aspxGetStateController().AfterClearHoverState.AddHandler(handler);
}
function aspxAddAfterSetHoverState(handler) {
    aspxGetStateController().AfterSetHoverState.AddHandler(handler);
}
function aspxAddAfterClearPressedState(handler) {
    aspxGetStateController().AfterClearPressedState.AddHandler(handler);
}
function aspxAddAfterSetPressedState(handler) {
    aspxGetStateController().AfterSetPressedState.AddHandler(handler);
}
function aspxAddAfterDisabled(handler) {
    aspxGetStateController().AfterDisabled.AddHandler(handler);
}
function aspxAddAfterEnabled(handler) {
    aspxGetStateController().AfterEnabled.AddHandler(handler);
}
function aspxAddBeforeClearFocusedState(handler) {
    aspxGetStateController().BeforeClearFocusedState.AddHandler(handler);
}
function aspxAddBeforeSetFocusedState(handler) {
    aspxGetStateController().BeforeSetFocusedState.AddHandler(handler);
}
function aspxAddBeforeClearHoverState(handler) {
    aspxGetStateController().BeforeClearHoverState.AddHandler(handler);
}
function aspxAddBeforeSetHoverState(handler) {
    aspxGetStateController().BeforeSetHoverState.AddHandler(handler);
}
function aspxAddBeforeClearPressedState(handler) {
    aspxGetStateController().BeforeClearPressedState.AddHandler(handler);
}
function aspxAddBeforeSetPressedState(handler) {
    aspxGetStateController().BeforeSetPressedState.AddHandler(handler);
}
function aspxAddBeforeDisabled(handler) {
    aspxGetStateController().BeforeDisabled.AddHandler(handler);
}
function aspxAddBeforeEnabled(handler) {
    aspxGetStateController().BeforeEnabled.AddHandler(handler);
}
function aspxAddFocusedItemKeyDown(handler) {
    aspxGetStateController().FocusedItemKeyDown.AddHandler(handler);
}
function aspxSetHoverState(element) {
    aspxGetStateController().SetCurrentHoverElementBySrcElement(element);
}
function aspxClearHoverState(evt) {
    aspxGetStateController().SetCurrentHoverElementBySrcElement(null);
}
function aspxUpdateHoverState(evt) {
    aspxGetStateController().OnMouseMove(evt, false);
}
function aspxSetFocusedState(element) {
    aspxGetStateController().SetCurrentFocusedElementBySrcElement(element);
}
function aspxClearFocusedState(evt) {
    aspxGetStateController().SetCurrentFocusedElementBySrcElement(null);
}
function aspxUpdateFocusedState(evt) {
    aspxGetStateController().OnFocusMove(evt);
}
function aspxAssignAccessabilityEventsToChildrenLinks(container) {
    var links = _aspxGetChildrenByPartialClassName(container, __aspxAccessibilityMarkerClass);
    for (var i = 0; i < links.length; i++)
        aspxAssignAccessabilityEventsToLink(links[i]);
}
function aspxAssignAccessabilityEventsToLink(link) {
    if (!_aspxElementCssClassContains(link, __aspxAccessibilityMarkerClass))
        return;
    _aspxAttachEventToElement(link, "focus", function (e) { aspxUpdateFocusedState(e); });
    _aspxAttachEventToElement(link, "blur", function (e) { aspxClearFocusedState(e); });
    if (__aspxIE && __aspxBrowserMajorVersion < 7 && link.href == __aspxAccessibilityEmptyUrl)
        _aspxAttachEventToElement(link, "click", function () { return false; });
}
_aspxAttachEventToDocument("mousemove", aspxClassesDocumentMouseMove);
function aspxClassesDocumentMouseMove(evt) {
    if (__aspxClassesScriptParsed && __aspxStateItemsExist)
        aspxGetStateController().OnMouseMove(evt, true);
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseDownEventName, aspxClassesDocumentMouseDown);
function aspxClassesDocumentMouseDown(evt) {
    if (__aspxClassesScriptParsed && __aspxStateItemsExist)
        aspxGetStateController().OnMouseDown(evt);
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, aspxClassesDocumentMouseUp);
function aspxClassesDocumentMouseUp(evt) {
    if (__aspxClassesScriptParsed && __aspxStateItemsExist)
        aspxGetStateController().OnMouseUp(evt);
}
_aspxAttachEventToDocument("mouseover", aspxClassesDocumentMouseOver);
function aspxClassesDocumentMouseOver(evt) {
    if (__aspxClassesScriptParsed && __aspxStateItemsExist)
        aspxGetStateController().OnMouseOver(evt);
}
_aspxAttachEventToDocument("keydown", aspxClassesDocumentKeyDown);
function aspxClassesDocumentKeyDown(evt) {
    if (__aspxClassesScriptParsed && __aspxStateItemsExist)
        aspxGetStateController().OnKeyDown(evt);
}
_aspxAttachEventToDocument("selectstart", aspxClassesDocumentSelectStart);
function aspxClassesDocumentSelectStart(evt) {
    if (__aspxClassesScriptParsed && __aspxStateItemsExist)
        return aspxGetStateController().OnSelectStart(evt);
}

ASPxClientLoadingPanel = _aspxCreateClass(ASPxClientControl, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.containerElementID = "";
        this.containerElement = null;
        this.horizontalOffset = 0;
        this.verticalOffset = 0;
        this.isTextEmpty = false;
        this.showImage = true;
        this.shown = false;
        this.currentoffsetElement = null;
        this.currentX = null;
        this.currentY = null;
    },
    Initialize: function () {
        if (this.containerElementID != "")
            this.containerElement = _aspxGetElementById(this.containerElementID);
        this.constructor.prototype.Initialize.call(this);
    },
    SetCurrentShowArguments: function (offsetElement, x, y) {
        if (offsetElement == null)
            offsetElement = this.containerElement;
        if (offsetElement && !_aspxIsValidElement(offsetElement))
            offsetElement = _aspxGetElementById(offsetElement.id);
        if (offsetElement == null)
            offsetElement = document.body;
        this.currentoffsetElement = offsetElement;
        this.currentX = x;
        this.currentY = y;
    },
    ResetCurrentShowArguments: function () {
        this.currentoffsetElement = null;
        this.currentX = null;
        this.currentY = null;
    },
    SetLoadingPanelPosAndSize: function () {
        var element = this.GetMainElement();
        this.SetLoadingPanelLocation(this.currentoffsetElement, element, this.currentX, this.currentY, this.horizontalOffset, this.verticalOffset);
    },
    SetLoadingDivPosAndSize: function () {
        var element = this.GetLoadingDiv();
        if (element != null) {
            _aspxSetElementDisplay(element, true);
            this.SetLoadingDivBounds(this.currentoffsetElement, element);
        }
    },
    ShowInternal: function (offsetElement, x, y) {
        this.SetCurrentShowArguments(offsetElement, x, y);
        var element = this.GetMainElement();
        _aspxSetElementDisplay(element, true);
        this.SetLoadingPanelPosAndSize();
        this.SetLoadingDivPosAndSize();
        this.shown = true;
    },
    Show: function () {
        this.ShowInternal(null);
    },
    ShowInElement: function (htmlElement) {
        if (htmlElement)
            this.ShowInternal(htmlElement);
    },
    ShowInElementByID: function (id) {
        var htmlElement = _aspxGetElementById(id);
        this.ShowInElement(htmlElement);
    },
    ShowAtPos: function (x, y) {
        this.ShowInternal(null, x, y);
    },
    SetText: function (text) {
        this.isTextEmpty = text == null || text == "";
        this.GetTextLabel().innerHTML = this.isTextEmpty ? "&nbsp;" : text;
    },
    GetText: function () {
        return this.isTextEmpty ? "" : this.GetTextLabel().innerHTML;
    },
    Hide: function () {
        var element = this.GetMainElement();
        _aspxSetElementDisplay(element, false);
        element = this.GetLoadingDiv();
        if (element != null) {
            _aspxSetStyles(element, { width: 1, height: 1 });
            _aspxSetElementDisplay(element, false);
        }
        this.ResetCurrentShowArguments();
        this.shown = false;
    },
    GetTextLabel: function () {
        return this.GetChild("_TL");
    },
    GetVisible: function () {
        return _aspxGetElementDisplay(this.GetMainElement());
    },
    SetVisible: function (visible) {
        if (visible && !this.IsVisible())
            this.Show();
        else if (!visible && this.IsVisible())
            this.Hide();
    },
    BrowserWindowResizeSubscriber: function () {
        return true;
    },
    OnBrowserWindowResize: function () {
        if (this.shown) {
            this.SetLoadingPanelPosAndSize();
            this.SetLoadingDivPosAndSize();
        }
    }
});
ASPxClientLoadingPanel.Cast = ASPxClientControl.Cast;
_aspxEnableCssAnimation = true;
aspxAnimationTransitionBase = _aspxCreateClass(null, {
    constructor: function (element, options) {
        aspxAnimationTransitionBase.Cancel(element);
        this.element = element;
        this.element.aspxTransition = this;
        this.duration = options.duration || aspxAnimationTransitionBase.Durations.DEFAULT;
        this.transition = options.transition || aspxAnimationTransitionBase.Transitions.SINE;
        this.property = options.property;
        this.unit = options.unit || "";
        this.onComplete = options.onComplete;
        this.to = null;
        this.from = null;
    },
    Start: function (from, to) {
        if (to != undefined) {
            this.to = to;
            this.from = from;
            this.SetValue(this.from);
        }
        else
            this.to = from;
    },
    Cancel: function () {
        try {
            delete this.element.aspxTransition;
        } catch (e) {
            this.element.aspxTransition = undefined;
        }
    },
    GetValue: function () {
        return this.getValueInternal(this.element, this.property);
    },
    SetValue: function (value) {
        this.setValueInternal(this.element, this.property, this.unit, value);
    },
    setValueInternal: function (element, property, unit, value) {
        if (property == "opacity")
            ASPxAnimationHelper.setOpacity(element, value);
        else
            element.style[property] = value + unit;
    },
    getValueInternal: function (element, property) {
        if (property == "opacity")
            return _aspxGetElementOpacity(element);
        var value = parseFloat(element.style[property]);
        return isNaN(value) ? 0 : value;
    },
    performOnComplete: function () {
        if (this.onComplete)
            this.onComplete(this.element);
    },
    getTransition: function () {
        return this.transition;
    }
});
aspxAnimationTransitionBase.Cancel = function (element) {
    if (element.aspxTransition)
        element.aspxTransition.Cancel();
};
aspxAnimationTransitionBase.Durations = {
    SHORT: 200,
    DEFAULT: 400,
    LONG: 600
};
aspxAnimationTransitionBase.Transitions = {
    LINER: {
        Css: "cubic-bezier(0.250, 0.250, 0.750, 0.750)",
        Js: function (progress) { return progress; }
    },
    SINE: {
        Css: "cubic-bezier(0.470, 0.000, 0.745, 0.715)",
        Js: function (progress) { return Math.sin(progress * 1.57); }
    },
    POW: {
        Css: "cubic-bezier(0.755, 0.050, 0.855, 0.060)",
        Js: function (progress) { return Math.pow(progress, 4); }
    },
    POW_EASE_OUT: {
        Css: "cubic-bezier(0.165, 0.840, 0.440, 1.000)",
        Js: function (progress) { return 1 - aspxAnimationTransitionBase.Transitions.POW.Js(1 - progress); }
    }
};
aspxJsAnimationTransition = _aspxCreateClass(aspxAnimationTransitionBase, {
    constructor: function (element, options) {
        this.constructor.prototype.constructor.call(this, element, options);
        this.fps = 60;
        this.startTime = null;
    },
    Start: function (from, to) {
        aspxAnimationTransitionBase.prototype.Start.call(this, from, to);
        this.initTimer();
    },
    Cancel: function () {
        aspxAnimationTransitionBase.prototype.Cancel.call(this);
        if (this.timerId)
            clearInterval(this.timerId);
    },
    initTimer: function () {
        this.startTime = new Date();
        this.timerId = window.setInterval(function () { this.onTick(); } .aspxBind(this), 1000 / this.fps);
    },
    onTick: function () {
        var progress = (new Date() - this.startTime) / this.duration;
        if (progress >= 1)
            this.complete();
        else
            this.update(progress);
    },
    update: function (progress) {
        this.SetValue(this.gatCalculatedValue(this.from, this.to, progress));
    },
    complete: function () {
        this.Cancel();
        this.update(1);
        this.performOnComplete();
    },
    gatCalculatedValue: function (from, to, progress) {
        if (progress == 1)
            return to;
        return from + (to - from) * this.getTransition()(progress);
    },
    getTransition: function () {
        return this.transition.Js;
    }
});
aspxMultipleJsAnimationTransition = _aspxCreateClass(aspxJsAnimationTransition, {
    constructor: function (element, options) {
        this.constructor.prototype.constructor.call(this, element, options);
        this.properties = {};
    },
    Start: function (properties) {
        this.initProperties(properties);
        this.initTimer();
    },
    initProperties: function (properties) {
        this.properties = properties;
        for (var propName in this.properties)
            if (properties[propName].from == undefined)
                properties[propName].from = this.getValueInternal(this.element, propName);
    },
    update: function (progress) {
        for (var propName in this.properties) {
            var property = this.properties[propName];
            if (property.from != property.to)
                this.setValueInternal(this.element, propName, property.unit, this.gatCalculatedValue(property.from, property.to, progress));
        }
    }
});
aspxCssAnimationTransition = _aspxCreateClass(aspxAnimationTransitionBase, {
    constructor: function (element, options) {
        this.constructor.prototype.constructor.call(this, element, options);
        this.transitionPropertyName = aspxCssAnimationTransition.CSS_TRANSITION.transitionPropertyName;
        this.eventName = aspxCssAnimationTransition.CSS_TRANSITION.eventName;
    },
    Start: function (from, to) {
        aspxAnimationTransitionBase.prototype.Start.call(this, from, to);
        _aspxSetTimeout(function () {
            var isHidden = this.element.offsetHeight == 0 && this.element.offsetWidth == 0;
            if (!isHidden)
                this.prepareElementBeforeAnimation();
            this.SetValue(this.to);
            if (isHidden)
                this.onTransitionEnd();
        } .aspxBind(this), 0);
    },
    Cancel: function () {
        aspxAnimationTransitionBase.prototype.Cancel.call(this);
        _aspxDetachEventFromElement(this.element, this.eventName, aspxCssAnimationTransition.transitionEnd);
        this.stopAnimation();
        this.setValueInternal(this.element, this.transitionPropertyName, "", "");
    },
    prepareElementBeforeAnimation: function () {
        _aspxAttachEventToElement(this.element, this.eventName, aspxCssAnimationTransition.transitionEnd);
        var tmpH = this.element.offsetHeight;
        this.element.style[this.transitionPropertyName] = this.getTransitionCssString();
    },
    stopAnimation: function () {
        this.SetValue(_aspxGetCurrentStyle(this.element)[this.property]);
    },
    onTransitionEnd: function () {
        this.Cancel();
        this.performOnComplete();
    },
    getTransition: function () {
        return this.transition.Css;
    },
    getTransitionCssString: function () {
        return this.getTransitionCssStringInternal(this.getCssName(this.property));
    },
    getTransitionCssStringInternal: function (cssProperty) {
        return cssProperty + " " + this.duration + "ms " + this.getTransition();
    },
    getCssName: function (property) {
        switch (property) {
            case "marginLeft":
                return "margin-left";
            case "marginTop":
                return "margin-top"
        }
        return property;
    }
});
aspxMultipleCssAnimationTransition = _aspxCreateClass(aspxCssAnimationTransition, {
    constructor: function (element, options) {
        this.constructor.prototype.constructor.call(this, element, options);
        this.properties = null;
    },
    Start: function (properties) {
        this.properties = properties;
        this.prepareElementBeforeAnimation();
        this.forEachProperties(function (property, propName) {
            this.setValueInternal(this.element, propName, property.unit, property.to);
        } .aspxBind(this));
    },
    stopAnimation: function () {
        var style = _aspxGetCurrentStyle(this.element);
        this.forEachProperties(function (property, propName) {
            this.setValueInternal(this.element, propName, "", style[propName]);
        } .aspxBind(this));
    },
    getTransitionCssString: function () {
        var str = "";
        this.forEachProperties(function (property, propName) {
            str += this.getTransitionCssStringInternal(this.getCssName(propName)) + ",";
        } .aspxBind(this));
        str = str.substring(0, str.length - 1);
        return str;
    },
    forEachProperties: function (func) {
        for (var propName in this.properties) {
            var property = this.properties[propName];
            if (property.from == undefined)
                property.from = this.getValueInternal(this.element, propName);
            if (property.from != property.to)
                func(property, propName);
        }
    }
});
aspxCssAnimationTransition.transitionEnd = function (evt) {
    var element = evt.target;
    if (element && element.aspxTransition)
        element.aspxTransition.onTransitionEnd();
}
aspxCssAnimationTransition.CSS_TRANSITION = (function () {
    if (__aspxIE)
        return null;
    var cssNames = [
  { transitionPropertyName: "webkitTransition", eventName: "webkitTransitionEnd" },
  { transitionPropertyName: "MozTransition", eventName: "transitionend" },
  { transitionPropertyName: "OTransition", eventName: "oTransitionEnd" },
  { transitionPropertyName: "transition", eventName: "transitionend" }
 ];
    var fakeElement = document.createElement("DIV");
    for (var i = 0; i < cssNames.length; i++)
        if (cssNames[i].transitionPropertyName in fakeElement.style)
            return cssNames[i];
    return null;
})();
aspxCssAnimationTransition.CanUse = function () {
    return _aspxEnableCssAnimation && !!aspxCssAnimationTransition.CSS_TRANSITION;
};
aspxPositionAnimationTransition = _aspxCreateClass(aspxAnimationTransitionBase, {
    constructor: function (element, options) {
        this.constructor.prototype.constructor.call(this, element, options);
        this.direction = options.direction;
        this.animationTransition = this.createAnimationTransition();
        this.patchElement();
    },
    Start: function (to) {
        var from = this.GetValue();
        if (aspxPositionAnimationTransition.CSS_TRANSFORM) {
            from = this.convertPosToCssTransformPos(from);
            to = this.convertPosToCssTransformPos(to);
        }
        this.animationTransition.Start(from, to);
    },
    SetValue: function (value) {
        aspxPositionAnimationTransition.SetValue(this.element, value, this.direction == ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION);
    },
    GetValue: function () {
        return aspxPositionAnimationTransition.GetValue(this.element, this.direction == ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION);
    },
    createAnimationTransition: function () {
        var transition = aspxPositionAnimationTransition.CSS_TRANSFORM ? this.createTransformAnimationTransition() : this.createPositionAnimationTransition();
        transition.transition = aspxAnimationTransitionBase.Transitions.POW_EASE_OUT;
        return transition;
    },
    createTransformAnimationTransition: function () {
        return new aspxCssAnimationTransition(this.element, {
            property: aspxPositionAnimationTransition.CSS_TRANSFORM,
            duration: this.duration,
            onComplete: this.onComplete
        });
    },
    createPositionAnimationTransition: function () {
        return ASPxAnimationHelper.createAnimationTransition(this.element, {
            property: this.direction == ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION ? "top" : "left",
            unit: "px",
            duration: this.duration,
            onComplete: this.onComplete
        });
    },
    convertPosToCssTransformPos: function (position) {
        return aspxPositionAnimationTransition.GetCssTranslateText(position, this.direction == ASPxAnimationHelper.SLIDE_VERTICAL_DIRECTION);
    },
    patchElement: function () {
        if (aspxPositionAnimationTransition.CSS_TRANSFORM && __aspxWebKitFamily && !_aspxElementHasCssClass(this.element, "dxTA"))
            this.element.className += " dxTA";
    }
});
aspxPositionAnimationTransition.GetCssTranslateText = function (position, top) {
    return "matrix(1, 0, 0, 1," + (!top ? position : 0) + ", " + (!top ? 0 : position) + ")";
};
aspxPositionAnimationTransition.GetValue = function (element, top) {
    if (aspxPositionAnimationTransition.CSS_TRANSFORM) {
        var cssValue = element.style[aspxPositionAnimationTransition.CSS_TRANSFORM];
        return cssValue ? Number(cssValue.replace('matrix(1, 0, 0, 1,', '').replace(')', '').split(',')[!top ? 0 : 1]) : 0;
    }
    else
        return !top ? element.offsetLeft : element.offsetTop;
};
aspxPositionAnimationTransition.SetValue = function (element, position, top) {
    if (aspxPositionAnimationTransition.CSS_TRANSFORM)
        element.style[aspxPositionAnimationTransition.CSS_TRANSFORM] = aspxPositionAnimationTransition.GetCssTranslateText(position, top);
    else
        element.style[!top ? "left" : "top"] = position + "px";
};
aspxPositionAnimationTransition.CSS_TRANSFORM = (function () {
    if (!aspxCssAnimationTransition.CanUse())
        return null;
    var transformPropertiesNames = ["transform", "MozTransform", "-webkit-transform", "msTransform", "OTransform"];
    var fakeElement = document.createElement("DIV");
    for (var i = 0; i < transformPropertiesNames.length; i++)
        if (transformPropertiesNames[i] in fakeElement.style)
            return transformPropertiesNames[i];
    return null;
})();
var ASPxAnimationHelper = {
    SLIDE_HORIZONTAL_DIRECTION: 0,
    SLIDE_VERTICAL_DIRECTION: 1,
    SLIDE_TOP_DIRECTION: 0,
    SLIDE_RIGHT_DIRECTION: 1,
    SLIDE_BOTTOM_DIRECTION: 2,
    SLIDE_LEFT_DIRECTION: 3,
    SLIDE_CONTAINER_CLASS: "dxAC",
    MAXIMUM_DEPTH: 3,
    createAnimationTransition: function (element, options) {
        switch (options.animationEngine) {
            case "js":
                return new aspxJsAnimationTransition(element, options);
                break;
            case "css":
                return new aspxCssAnimationTransition(element, options);
                break;
        }
        return aspxCssAnimationTransition.CanUse() ? new aspxCssAnimationTransition(element, options) : new aspxJsAnimationTransition(element, options);
    },
    createMultipleAnimationTransition: function (element, options) {
        return aspxCssAnimationTransition.CanUse() ? new aspxMultipleCssAnimationTransition(element, options) : new aspxMultipleJsAnimationTransition(element, options);
    },
    cancelAnimation: function (element) {
        aspxAnimationTransitionBase.Cancel(element);
    },
    fadeIn: function (element, onComplete) {
        ASPxAnimationHelper.fadeTo(element, {
            from: 0, to: 1,
            onComplete: onComplete,
            duration: aspxAnimationTransitionBase.Durations.DEFAULT
        });
    },
    fadeOut: function (element, onComplete) {
        ASPxAnimationHelper.fadeTo(element, {
            from: 1, to: 0,
            onComplete: onComplete,
            duration: aspxAnimationTransitionBase.Durations.DEFAULT
        });
    },
    fadeTo: function (element, options) {
        options.property = "opacity";
        if (!options.duration)
            options.duration = aspxAnimationTransitionBase.Durations.SHORT;
        var transition = ASPxAnimationHelper.createAnimationTransition(element, options);
        if (!_aspxIsExists(options.from))
            options.from = transition.GetValue();
        transition.Start(options.from, options.to);
    },
    slideIn: function (element, direction, onComplete) {
        ASPxAnimationHelper.setOpacity(element, 1);
        var animationContainer = ASPxAnimationHelper.getSlideAnimationContainer(element, true, true);
        var pos = ASPxAnimationHelper.getSlideInStartPos(animationContainer, direction);
        var transition = ASPxAnimationHelper.createSlideTransition(animationContainer, direction,
   function (el) {
       ASPxAnimationHelper.resetSlideAnimationContainerSize(animationContainer);
       if (onComplete)
           onComplete(el);
   });
        transition.Start(pos, 0);
    },
    slideOut: function (element, direction, onComplete) {
        var animationContainer = ASPxAnimationHelper.getSlideAnimationContainer(element, true, true);
        var pos = ASPxAnimationHelper.getSlideOutFinishPos(animationContainer, direction);
        var transition = ASPxAnimationHelper.createSlideTransition(animationContainer, direction,
   function (el) {
       ASPxAnimationHelper.setOpacity(el.firstChild, 0);
       if (onComplete)
           onComplete(el);
   });
        transition.Start(pos);
    },
    slideTo: function (element, options) {
        if (!_aspxIsExists(options.direction))
            options.direction = ASPxAnimationHelper.SLIDE_HORIZONTAL_DIRECTION;
        var transition = new aspxPositionAnimationTransition(element, options);
        transition.Start(options.to);
    },
    setOpacity: function (element, value) {
        if (__aspxIE && __aspxBrowserVersion < 8)
            element.style.zoom = 1;
        _aspxSetElementOpacity(element, value);
    },
    findSlideAnimationContainer: function (element) {
        var container = element
        for (var i = 0; i < ASPxAnimationHelper.MAXIMUM_DEPTH; i++) {
            if (container.tagName == "BODY")
                return null;
            if (_aspxElementHasCssClass(container, ASPxAnimationHelper.SLIDE_CONTAINER_CLASS))
                return container;
            container = container.parentNode;
        }
        return null;
    },
    createSlideAnimationContainer: function (element) {
        var rootContainer = document.createElement("DIV");
        _aspxSetStyles(rootContainer, {
            className: ASPxAnimationHelper.SLIDE_CONTAINER_CLASS,
            overflow: "hidden"
        });
        var elementContainer = document.createElement("DIV");
        rootContainer.appendChild(elementContainer);
        var parentNode = element.parentNode;
        parentNode.insertBefore(rootContainer, element);
        elementContainer.appendChild(element);
        return rootContainer;
    },
    getSlideAnimationContainer: function (element, create, fixSize) {
        if (!element) return;
        var width = element.offsetWidth;
        var height = element.offsetHeight;
        var container;
        if (element.className == ASPxAnimationHelper.SLIDE_CONTAINER_CLASS)
            container = element;
        if (!container)
            container = ASPxAnimationHelper.findSlideAnimationContainer(element);
        if (!container && create)
            container = ASPxAnimationHelper.createSlideAnimationContainer(element);
        if (container && fixSize) {
            _aspxSetStyles(container, {
                width: width, height: height
            });
            _aspxSetStyles(container.firstChild, {
                width: width, height: height
            });
        }
        return container;
    },
    resetSlideAnimationContainerSize: function (container) {
        _aspxSetStyles(container, {
            width: "", height: ""
        });
        _aspxSetStyles(container.firstChild, {
            width: "", height: ""
        });
    },
    getModifyProperty: function (direction) {
        if (direction == ASPxAnimationHelper.SLIDE_TOP_DIRECTION || direction == ASPxAnimationHelper.SLIDE_BOTTOM_DIRECTION)
            return "marginTop";
        return "marginLeft";
    },
    createSlideTransition: function (animationContainer, direction, complete) {
        return ASPxAnimationHelper.createAnimationTransition(animationContainer.firstChild, {
            unit: "px",
            property: ASPxAnimationHelper.getModifyProperty(direction),
            onComplete: complete
        });
    },
    getSlideInStartPos: function (animationContainer, direction) {
        switch (direction) {
            case ASPxAnimationHelper.SLIDE_TOP_DIRECTION:
                return animationContainer.offsetHeight;
            case ASPxAnimationHelper.SLIDE_LEFT_DIRECTION:
                return animationContainer.offsetWidth;
            case ASPxAnimationHelper.SLIDE_RIGHT_DIRECTION:
                return -animationContainer.offsetWidth;
            case ASPxAnimationHelper.SLIDE_BOTTOM_DIRECTION:
                return -animationContainer.offsetHeight;
        }
    },
    getSlideOutFinishPos: function (animationContainer, direction) {
        switch (direction) {
            case ASPxAnimationHelper.SLIDE_TOP_DIRECTION:
                return -animationContainer.offsetHeight;
            case ASPxAnimationHelper.SLIDE_LEFT_DIRECTION:
                return -animationContainer.offsetWidth;
            case ASPxAnimationHelper.SLIDE_RIGHT_DIRECTION:
                return animationContainer.offsetWidth;
            case ASPxAnimationHelper.SLIDE_BOTTOM_DIRECTION:
                return animationContainer.offsetHeight;
        }
    }
};
var ASPxGesturesHelper = {
    handlers: {},
    activeHandler: null,
    isAttachedEvents: false,
    isExecutedGesture: false,
    AddSwipeGestureHandler: function (id, getAnimationElement, canHandle, allowStart, start, allowComplete, complete, cancel) {
        this.handlers[id] = new ASPxSwipeGestureHandler(getAnimationElement, canHandle, allowStart, start, allowComplete, complete, cancel);
    },
    UpdateSwipeAnimationContainer: function (id) {
        if (this.handlers[id])
            this.handlers[id].UpdateAnimationContainer();
    },
    AddSwipeSlideGestureHandler: function (id, getAnimationElement, direction, canHandle, backward, forward, rollback) {
        this.handlers[id] = new ASPxSwipeSlideGestureHandler(getAnimationElement, direction, canHandle, backward, forward, rollback);
    },
    OnDocumentMouseDown: function (evt) {
        if (!_aspxGetIsLeftButtonPressed(evt))
            return;
        ASPxGesturesHelper.activeHandler = ASPxGesturesHelper.FindHandler(evt);
        if (ASPxGesturesHelper.activeHandler)
            ASPxGesturesHelper.activeHandler.OnMouseDown(evt);
    },
    OnDocumentMouseMove: function (evt) {
        if (ASPxGesturesHelper.activeHandler) {
            ASPxGesturesHelper.isExecutedGesture = true;
            ASPxGesturesHelper.activeHandler.OnMouseMove(evt);
        }
    },
    OnDocumentMouseUp: function (evt) {
        if (ASPxGesturesHelper.activeHandler) {
            ASPxGesturesHelper.activeHandler.OnMouseUp(evt);
            ASPxGesturesHelper.activeHandler = null;
            _aspxSetTimeout(function () { ASPxGesturesHelper.isExecutedGesture = false; }, 0);
        }
    },
    AttachEvents: function () {
        if (!ASPxGesturesHelper.isAttachedEvents) {
            ASPxGesturesHelper.Attach(_aspxAttachEventToElement);
            ASPxGesturesHelper.isAttachedEvents = true;
        }
    },
    DetachEvents: function () {
        if (ASPxGesturesHelper.isAttachedEvents) {
            ASPxGesturesHelper.Attach(_aspxDetachEventFromElement);
            ASPxGesturesHelper.isAttachedEvents = false;
        }
    },
    Attach: function (changeEventsMethod) {
        changeEventsMethod(window.document, ASPxClientTouchUI.touchMouseDownEventName, ASPxGesturesHelper.OnDocumentMouseDown);
        changeEventsMethod(window.document, ASPxClientTouchUI.touchMouseMoveEventName, ASPxGesturesHelper.OnDocumentMouseMove);
        changeEventsMethod(window.document, ASPxClientTouchUI.touchMouseUpEventName, ASPxGesturesHelper.OnDocumentMouseUp);
    },
    FindHandler: function (evt) {
        var handlers = [];
        for (var id in ASPxGesturesHelper.handlers) {
            var handler = ASPxGesturesHelper.handlers[id];
            if (handler.CanHandleEvent(evt))
                handlers.push(handler);
        }
        if (!handlers.length)
            return null;
        handlers.sort(function (a, b) {
            return _aspxGetIsParent(a.getAnimationElement(), b.getAnimationElement()) ? 1 : -1;
        });
        return handlers[0];
    },
    IsExecutedGesture: function () {
        return ASPxGesturesHelper.isExecutedGesture;
    }
};
ASPxGesturesHelper.AttachEvents();
ASPxGestureHandler = _aspxCreateClass(null, {
    constructor: function (getAnimationElement, canHandle, allowStart) {
        this.getAnimationElement = getAnimationElement;
        this.canHandle = canHandle;
        this.allowStart = allowStart;
        this.startMousePosX = 0;
        this.startMousePosY = 0;
        this.startTime = null;
        this.savedElements = [];
    },
    OnMouseDown: function (evt) {
        if (!__aspxTouchUI && !this.IsTextInputEventSource(evt))
            _aspxPreventEvent(evt);
        this.startMousePosX = _aspxGetEventX(evt);
        this.startMousePosY = _aspxGetEventY(evt);
        this.startTime = new Date();
    },
    OnMouseMove: function (evt) {
        if (!__aspxTouchUI)
            _aspxClearSelection();
        if (Math.abs(this.GetCurrentDistanceX(evt)) < ASPxGestureHandler.SLIDER_MIN_START_DISTANCE && Math.abs(this.GetCurrentDistanceY(evt)) < ASPxGestureHandler.SLIDER_MIN_START_DISTANCE)
            ASPxGesturesHelper.isExecutedGesture = false;
    },
    OnMouseUp: function (evt) {
    },
    CanHandleEvent: function (evt) {
        return !this.canHandle || this.canHandle(evt);
    },
    IsStartAllowed: function (value) {
        return !this.allowStart || this.allowStart(value);
    },
    RollbackGesture: function () {
    },
    GetRubberPosition: function (position) {
        return position / ASPxGestureHandler.FACTOR_RUBBER;
    },
    GetCurrentDistanceX: function (evt) {
        return _aspxGetEventX(evt) - this.startMousePosX;
    },
    GetCurrentDistanceY: function (evt) {
        return _aspxGetEventY(evt) - this.startMousePosY;
    },
    GetDistanceLimit: function () {
        return (new Date() - this.startTime) < ASPxGestureHandler.MAX_TIME_SPAN ? ASPxGestureHandler.MIN_DISTANCE_LIMIT : ASPxGestureHandler.MAX_DISTANCE_LIMIT;
    },
    IsTextInputEventSource: function (evt) {
        var element = _aspxGetEventSource(evt);
        return element.tagName == "INPUT" && _aspxGetAttribute(element, "type") == "text";
    },
    GetContainerElement: function () {
    },
    AttachPreventEvents: function (evt) {
        var element = _aspxGetEventSource(evt);
        var container = this.GetContainerElement();
        while (element && element != container) {
            _aspxAttachEventToElement(element, "mouseup", this.PreventEvent);
            _aspxAttachEventToElement(element, "click", this.PreventEvent);
            this.savedElements.push(element);
            element = element.parentNode;
        }
    },
    DetachPreventEvents: function () {
        _aspxSetTimeout(function () {
            while (this.savedElements.length > 0) {
                var element = this.savedElements.pop();
                _aspxDetachEventFromElement(element, "mouseup", this.PreventEvent);
                _aspxDetachEventFromElement(element, "click", this.PreventEvent);
            }
        } .aspxBind(this), 0);
    },
    PreventEvent: function (evt) {
        return _aspxPreventEvent(evt);
    }
});
ASPxGestureHandler.MAX_DISTANCE_LIMIT = 70;
ASPxGestureHandler.MIN_DISTANCE_LIMIT = 10;
ASPxGestureHandler.MIN_START_DISTANCE = 0;
ASPxGestureHandler.SLIDER_MIN_START_DISTANCE = 5;
ASPxGestureHandler.MAX_TIME_SPAN = 300;
ASPxGestureHandler.FACTOR_RUBBER = 4;
ASPxGestureHandler.RETURN_ANIMATION_DURATION = 150;
ASPxSwipeSlideGestureHandler = _aspxCreateClass(ASPxGestureHandler, {
    constructor: function (getAnimationElement, direction, canHandle, backward, forward, rollback) {
        this.constructor.prototype.constructor.call(this, getAnimationElement, canHandle);
        this.slideElement = this.getAnimationElement();
        this.container = this.slideElement.parentNode;
        this.direction = direction;
        this.backward = backward;
        this.forward = forward;
        this.rollback = rollback;
        this.slideElementSize = 0;
        this.containerElementSize = 0;
        this.startSliderElementPosition = 0;
        this.centeredSlideElementPosition = 0;
        this.isAttachedPreventEvents = false;
    },
    OnMouseDown: function (evt) {
        ASPxGestureHandler.prototype.OnMouseDown.call(this, evt);
        this.slideElementSize = this.GetElementSize();
        this.startSliderElementPosition = this.GetElementPosition();
        this.containerElementSize = this.GetContainerElementSize();
        if (this.slideElementSize <= this.containerElementSize)
            this.centeredSlideElementPosition = (this.containerElementSize - this.slideElementSize) / 2;
    },
    OnMouseMove: function (evt) {
        ASPxGestureHandler.prototype.OnMouseMove.call(this, evt);
        if (!__aspxTouchUI && !_aspxGetIsParent(this.container, _aspxGetEventSource(evt))) {
            ASPxGesturesHelper.OnDocumentMouseUp(evt);
            return;
        }
        var distance = this.GetCurrentDistance(evt);
        if (Math.abs(distance) < ASPxGestureHandler.SLIDER_MIN_START_DISTANCE || ASPxClientTouchUI.isGesture)
            return;
        aspxAnimationTransitionBase.Cancel(this.slideElement);
        var position = this.startSliderElementPosition + distance,
   maxPosition = -(this.slideElementSize - this.containerElementSize),
   minPosition = 0;
        if (this.centeredSlideElementPosition > 0)
            position = this.GetRubberPosition(distance) + this.centeredSlideElementPosition;
        else if (position > minPosition)
            position = this.GetRubberPosition(distance);
        else if (position < maxPosition)
            position = this.GetRubberPosition(distance) + maxPosition;
        this.SetElementPosition(position);
        this.AttachPreventEvents(evt);
        return _aspxPreventEvent(evt);
    },
    OnMouseUp: function (evt) {
        this.DetachPreventEvents();
        var distance = this.GetCurrentDistance(evt);
        if (distance == 0)
            return;
        else if (this.centeredSlideElementPosition > 0 || this.CheckSlidePanelIsOutOfBounds())
            this.PerformRollback();
        else {
            if (Math.abs(distance) < this.GetDistanceLimit())
                this.PerformRollback();
            else if (distance < 0)
                this.PerformForward();
            else
                this.PerformBackward();
        }
    },
    PerformBackward: function () {
        this.backward();
    },
    PerformForward: function () {
        this.forward();
    },
    PerformRollback: function () {
        this.rollback();
    },
    CheckSlidePanelIsOutOfBounds: function () {
        var minOffset = -(this.slideElementSize - this.containerElementSize), maxOffset = 0;
        var position = null, slideElementPos = this.GetElementPosition();
        if (slideElementPos > maxOffset || slideElementPos < minOffset)
            return true;
        return false;
    },
    GetContainerElement: function () {
        return this.container;
    },
    GetElementSize: function () {
        return this.IsHorizontalDirection() ? this.slideElement.offsetWidth : this.slideElement.offsetHeight;
    },
    GetContainerElementSize: function () {
        return this.IsHorizontalDirection() ? _aspxGetClearClientWidth(this.container) : _aspxGetClearClientHeight(this.container);
    },
    GetCurrentDistance: function (evt) {
        return this.IsHorizontalDirection() ? this.GetCurrentDistanceX(evt) : this.GetCurrentDistanceY(evt);
    },
    GetElementPosition: function () {
        return aspxPositionAnimationTransition.GetValue(this.slideElement, !this.IsHorizontalDirection());
    },
    SetElementPosition: function (position) {
        aspxPositionAnimationTransition.SetValue(this.slideElement, position, !this.IsHorizontalDirection());
    },
    IsHorizontalDirection: function () {
        return this.direction == ASPxAnimationHelper.SLIDE_HORIZONTAL_DIRECTION;
    },
    AttachPreventEvents: function (evt) {
        if (!this.isAttachedPreventEvents) {
            ASPxGestureHandler.prototype.AttachPreventEvents.call(this, evt);
            this.isAttachedPreventEvents = true;
        }
    },
    DetachPreventEvents: function () {
        if (this.isAttachedPreventEvents) {
            ASPxGestureHandler.prototype.DetachPreventEvents.call(this);
            this.isAttachedPreventEvents = false;
        }
    }
});
ASPxSwipeGestureHandler = _aspxCreateClass(ASPxGestureHandler, {
    constructor: function (getAnimationElement, canHandle, allowStart, start, allowComplete, complete, cancel) {
        this.constructor.prototype.constructor.call(this, getAnimationElement, canHandle, allowStart);
        this.start = start;
        this.allowComplete = allowComplete;
        this.complete = complete;
        this.cancel = cancel;
        this.animationTween = null;
        this.currentDistanceX = 0;
        this.currentDistanceY = 0;
        this.tryStartGesture = false;
        this.tryStartScrolling = false;
        this.UpdateAnimationContainer();
    },
    UpdateAnimationContainer: function () {
        this.animationContainer = ASPxAnimationHelper.getSlideAnimationContainer(this.getAnimationElement(), true, false);
    },
    CanHandleEvent: function (evt) {
        if (ASPxGestureHandler.prototype.CanHandleEvent.call(this, evt))
            return true;
        return this.animationTween && this.animationContainer && _aspxGetIsParent(this.animationContainer, _aspxGetEventSource(evt));
    },
    OnMouseDown: function (evt) {
        ASPxGestureHandler.prototype.OnMouseDown.call(this, evt);
        if (this.animationTween)
            this.animationTween.Cancel();
        this.currentDistanceX = 0;
        this.currentDistanceY = 0;
        this.tryStartGesture = false;
        this.tryStartScrolling = false;
    },
    OnMouseMove: function (evt) {
        ASPxGestureHandler.prototype.OnMouseMove.call(this, evt);
        this.currentDistanceX = this.GetCurrentDistanceX(evt);
        this.currentDistanceY = this.GetCurrentDistanceY(evt);
        if (!this.animationTween && !this.tryStartScrolling && (Math.abs(this.currentDistanceX) > ASPxGestureHandler.MIN_START_DISTANCE || Math.abs(this.currentDistanceY) > ASPxGestureHandler.MIN_START_DISTANCE)) {
            if (Math.abs(this.currentDistanceY) < Math.abs(this.currentDistanceX)) {
                this.tryStartGesture = true;
                if (this.IsStartAllowed(this.currentDistanceX)) {
                    this.animationContainer = ASPxAnimationHelper.getSlideAnimationContainer(this.getAnimationElement(), true, true);
                    this.animationTween = ASPxAnimationHelper.createSlideTransition(this.animationContainer, ASPxAnimationHelper.SLIDE_LEFT_DIRECTION,
      function () {
          ASPxAnimationHelper.resetSlideAnimationContainerSize(this.animationContainer);
          this.animationContainer = null;
          this.animationTween = null;
      } .aspxBind(this));
                    this.PerformStart(this.currentDistanceX);
                    this.AttachPreventEvents(evt);
                }
            }
            else
                this.tryStartScrolling = true;
        }
        if (this.animationTween) {
            if (this.allowComplete && !this.allowComplete(this.currentDistanceX))
                this.currentDistanceX = this.GetRubberPosition(this.currentDistanceX);
            this.animationTween.SetValue(this.currentDistanceX);
        }
        if (!this.tryStartScrolling && !ASPxClientTouchUI.isGesture && evt.touches && evt.touches.length < 2)
            _aspxPreventEvent(evt);
    },
    OnMouseUp: function (evt) {
        if (!this.animationTween) {
            if (this.tryStartGesture)
                this.PerformCancel(this.currentDistanceX);
        }
        else {
            if (Math.abs(this.currentDistanceX) < this.GetDistanceLimit())
                this.RollbackGesture();
            else {
                if (this.IsCompleteAllowed(this.currentDistanceX)) {
                    this.PerformComplete(this.currentDistanceX);
                    this.animationContainer = null;
                    this.animationTween = null;
                }
                else
                    this.RollbackGesture();
            }
        }
        this.DetachPreventEvents();
        this.tryStartGesture = false;
        this.tryStartScrolling = false;
    },
    PerformStart: function (value) {
        if (this.start)
            this.start(value);
    },
    IsCompleteAllowed: function (value) {
        return !this.allowComplete || this.allowComplete(value);
    },
    PerformComplete: function (value) {
        if (this.complete)
            this.complete(value);
    },
    PerformCancel: function (value) {
        if (this.cancel)
            this.cancel(value);
    },
    RollbackGesture: function () {
        this.animationTween.Start(this.currentDistanceX, 0);
    },
    GetContainerElement: function () {
        return this.animationContainer;
    }
});
var __aspxNotSetAlignIndicator = "NotSet";
var __aspxInnerAlignIndicator = "Sides";
function _aspxIsAlignNotSet(align) {
    return align == __aspxNotSetAlignIndicator;
}
function _aspxIsInnerAlign(align) {
    return align.indexOf(__aspxInnerAlignIndicator) != -1;
}
function _aspxIsOuterAlign(align) {
    return (!this.IsInnerAlign(align)) && (!_aspxIsAlignNotSet(align));
}
function _aspxPopupPosition(position, isInverted) {
    this.position = position;
    this.isInverted = isInverted;
}
function _aspxSegment(pos, len) {
    this.pos = pos;
    this.len = len;
}
function _aspxRect(left, top, width, height) {
    this.left = left;
    this.top = top;
    this.width = width;
    this.height = height;
}
function _aspxSize(width, height) {
    this.width = width;
    this.height = height;
}
function _aspxFindPopupElementById(id) {
    if (id == "") return null;
    var popupElement = _aspxGetElementById(id);
    if (!_aspxIsExistsElement(popupElement)) {
        var idParts = id.split("_");
        var uniqueId = idParts.join("$");
        popupElement = _aspxGetElementById(uniqueId);
    }
    return popupElement;
}
function _aspxFindEventSourceParentByTestFunc(evt, testFunc) {
    return _aspxFindParentByTestFunc(_aspxGetEventSource(evt), testFunc);
}
function _aspxPreventContextMenu(evt) {
    if (__aspxWebKitFamily) {
        if (evt.stopPropagation)
            evt.stopPropagation();
        evt.returnValue = false;
        if (evt.preventDefault)
            evt.preventDefault();
    } else if (__aspxNetscapeFamily || (__aspxIE && __aspxBrowserVersion > 8))
        evt.preventDefault();
}
function _aspxIsExistsAbsolutePosParent(element) {
    return _aspxIsExistsParentWithSpecPosition(element, ["absolute"]);
}
function _aspxIsExistsAbsoluteOrRelativePosParent(element) {
    return _aspxIsExistsParentWithSpecPosition(element, ["absolute", "relative"]);
}
function _aspxIsExistsParentWithSpecPosition(element, positions) {
    var curEl = element.offsetParent;
    while (curEl != null) {
        for (var i = 0; i < positions.length; i++) {
            if (_aspxGetCurrentStyle(curEl).position == positions[i])
                return true;
        }
        curEl = curEl.offsetParent;
    }
    return false;
}
function _aspxGetDocumentClientWidthForPopup() {
    return (__aspxWebKitTouchUI ? _aspxGetDocumentWidth() : _aspxGetDocumentClientWidth());
}
function _aspxAdjustPositionToClientScreen(element, shadowSize, pos, isX) {
    var min = isX ? _aspxGetDocumentScrollLeft() : _aspxGetDocumentScrollTop();
    var documentClientWidth = _aspxGetDocumentClientWidthForPopup();
    var max = min + (isX ? documentClientWidth : _aspxGetDocumentClientHeight());
    max -= (isX ? element.offsetWidth + shadowSize : element.offsetHeight + shadowSize);
    if (pos > max) pos = max;
    if (pos < min) pos = min;
    return pos;
}
function _aspxGetPopupAbsoluteX(element, shadowWidth, popupElement, hAlign, hOffset, x, left, rtl, isPopupFullCorrectionOn) {
    var width = element.offsetWidth;
    var bodyWidth = _aspxGetDocumentClientWidth();
    var elementX = _aspxGetAbsoluteX(popupElement);
    var scrollX = _aspxGetDocumentScrollLeft();
    if (hAlign == "WindowCenter") {
        var showAtPos = x != __aspxInvalidPosition && !popupElement;
        if (showAtPos)
            hAlign = "";
        else
            return new _aspxPopupPosition(Math.ceil((__aspxWebKitTouchUI ? window.innerWidth : bodyWidth) / 2 - width / 2) + scrollX + hOffset, false);
    }
    if (popupElement) {
        var leftX = elementX - width;
        var rightX = elementX + popupElement.offsetWidth;
        var innerLeftX = elementX;
        var innerRightX = elementX + popupElement.offsetWidth - width;
        var isMoreFreeSpaceLeft = bodyWidth - (rightX + width) < leftX - 2 * scrollX;
    }
    else
        hAlign = "";
    var isInverted = false;
    if (hAlign == "OutsideLeft") {
        isInverted = isPopupFullCorrectionOn && (!(leftX - scrollX > 0 || isMoreFreeSpaceLeft));
        if (isInverted)
            x = rightX - hOffset;
        else
            x = leftX + hOffset;
    }
    else if (hAlign == "LeftSides") {
        x = innerLeftX + hOffset;
        if (isPopupFullCorrectionOn)
            x = _aspxAdjustPositionToClientScreen(element, shadowWidth, x, true);
    }
    else if (hAlign == "Center") {
        x = elementX + Math.round((popupElement.offsetWidth - width) / 2) + hOffset;
    }
    else if (hAlign == "RightSides") {
        x = innerRightX + hOffset;
        if (isPopupFullCorrectionOn)
            x = _aspxAdjustPositionToClientScreen(element, shadowWidth, x, true);
    }
    else if (hAlign == "OutsideRight") {
        isInverted = isPopupFullCorrectionOn && (!(rightX + width < bodyWidth + scrollX || !isMoreFreeSpaceLeft));
        if (isInverted)
            x = leftX - hOffset;
        else
            x = rightX + hOffset;
    }
    else {
        if (rtl) {
            if (!_aspxGetIsValidPosition(x))
                x = popupElement ? innerRightX : left;
            else
                x -= width;
            isInverted = isPopupFullCorrectionOn && (x < scrollX && x - scrollX < bodyWidth / 2);
            if (isInverted)
                x = x + width + hOffset;
            else
                x = x - hOffset;
        } else {
            if (!_aspxGetIsValidPosition(x))
                x = popupElement ? elementX : left;
            isInverted = isPopupFullCorrectionOn && (x - scrollX + width > bodyWidth && x - scrollX > bodyWidth / 2);
            if (isInverted)
                x = x - width - hOffset;
            else
                x = x + hOffset;
        }
    }
    return new _aspxPopupPosition(x, isInverted);
}
function _aspxGetPopupAbsoluteY(element, shadowHeight, popupElement, vAlign, vOffset, y, top, isPopupFullCorrectionOn) {
    var height = element.offsetHeight;
    var bodyHeight = _aspxGetDocumentClientHeight();
    var elementY = _aspxGetAbsoluteY(popupElement);
    var scrollY = _aspxGetDocumentScrollTop();
    if (vAlign == "WindowCenter") {
        var showAtPos = y != __aspxInvalidPosition && !popupElement;
        if (showAtPos)
            hAlign = "";
        else
            return new _aspxPopupPosition(Math.ceil((__aspxWebKitTouchUI ? window.innerHeight : bodyHeight) / 2 - height / 2) + scrollY + vOffset, false);
    }
    if (popupElement) {
        var bottomY = elementY + popupElement.offsetHeight;
        var topY = elementY - height;
        var innerBottomY = elementY + popupElement.offsetHeight - height;
        var innerTopY = elementY;
        var isMoreFreeSpaceAbove = bodyHeight - (bottomY + height) < topY - 2 * scrollY;
    }
    else
        vAlign = "";
    var isInverted = false;
    if (vAlign == "Above") {
        isInverted = isPopupFullCorrectionOn && (!(topY - scrollY > 0 || isMoreFreeSpaceAbove));
        if (isInverted)
            y = bottomY - vOffset;
        else
            y = topY + vOffset;
    }
    else if (vAlign == "TopSides") {
        y = innerTopY + vOffset;
        if (isPopupFullCorrectionOn)
            y = _aspxAdjustPositionToClientScreen(element, shadowHeight, y, false);
    }
    else if (vAlign == "Middle") {
        y = elementY + Math.round((popupElement.offsetHeight - height) / 2) + vOffset;
    }
    else if (vAlign == "BottomSides") {
        y = innerBottomY + vOffset;
        if (isPopupFullCorrectionOn)
            y = _aspxAdjustPositionToClientScreen(element, shadowHeight, y, false);
    }
    else if (vAlign == "Below") {
        isInverted = isPopupFullCorrectionOn && (!(bottomY + height < bodyHeight + scrollY || !isMoreFreeSpaceAbove));
        if (isInverted)
            y = topY - vOffset;
        else
            y = bottomY + vOffset;
    }
    else {
        if (!_aspxGetIsValidPosition(y))
            y = popupElement ? _aspxGetAbsoluteY(popupElement) : top;
        isInverted = isPopupFullCorrectionOn && (y - _aspxGetDocumentScrollTop() + height > bodyHeight && y - _aspxGetDocumentScrollTop() > bodyHeight / 2);
        if (isInverted)
            y = y - height - vOffset;
        else
            y = y + vOffset;
    }
    return new _aspxPopupPosition(y, isInverted);
}
function _aspxRemoveFocus(parent) {
    var input = document.createElement('div');
    _aspxConcealInputElement(input);
    parent.appendChild(input);
    if (_aspxIsFocusable(input))
        input.focus();
    _aspxRemoveElement(input);
}
function _aspxConcealInputElement(input) {
    input.style.position = "absolute";
    input.style.left = 0;
    input.style.top = 0;
    if (__aspxWebKitFamily) {
        input.style.opacity = 0;
        input.style.width = 1;
        input.style.height = 1;
    } else {
        input.style.border = 0;
        input.style.width = 0;
        input.style.height = 0;
    }
}
function _aspxInitAnimationDiv(element, x, y, onAnimStopCallString, skipSizeInit) {
    element.popuping = true;
    element.onAnimStopCallString = onAnimStopCallString;
    element.style.overflow = "hidden";
    element.style.position = "absolute";
    if (!skipSizeInit)
        _aspxSetStyles(element, { width: element.offsetWidth, height: element.offsetHeight });
    _aspxSetStyles(element, { left: x, top: y });
}
function _aspxStartSlideAnimation(animationDivElement, element, iframeElement, duration) {
    if (iframeElement) {
        var endLeft = _aspxPxToInt(iframeElement.style.left);
        var endTop = _aspxPxToInt(iframeElement.style.top);
        var startLeft = _aspxPxToInt(element.style.left) < 0 ? endLeft : animationDivElement.offsetLeft + animationDivElement.offsetWidth;
        var startTop = _aspxPxToInt(element.style.top) < 0 ? endTop : animationDivElement.offsetTop + animationDivElement.offsetHeight;
        ASPxAnimationHelper.createMultipleAnimationTransition(iframeElement, {
            duration: duration
        }).Start({
            left: { from: startLeft, to: endLeft, unit: "px" },
            top: { from: startTop, to: endTop, unit: "px" },
            width: { to: element.offsetWidth, unit: "px" },
            height: { to: element.offsetHeight, unit: "px" }
        });
    }
    ASPxAnimationHelper.createMultipleAnimationTransition(element, {
        duration: duration,
        onComplete: function () { _aspxAnimationFinished(animationDivElement); }
    }).Start({
        left: { to: 0, unit: "px" },
        top: { to: 0, unit: "px" }
    });
}
function _aspxAnimationFinished(element) {
    if (_aspxStopAnimation(element) && _aspxIsExists(element.onAnimStopCallString) &&
  element.onAnimStopCallString !== "") {
        window.setTimeout(element.onAnimStopCallString, 0);
    }
}
function _aspxStopAnimation(element) {
    if (element.popuping) {
        ASPxAnimationHelper.cancelAnimation(element);
        element.popuping = false;
        element.style.overflow = "visible";
        return true;
    }
    return false;
}
function _aspxGetAnimationHorizontalDirection(popupPosition, horizontalAlign, verticalAlign, rtl) {
    if (_aspxIsInnerAlign(horizontalAlign)
  && !_aspxIsInnerAlign(verticalAlign)
  && !_aspxIsAlignNotSet(verticalAlign))
        return 0;
    var toTheLeft = (horizontalAlign == "OutsideLeft" || horizontalAlign == "RightSides" || (horizontalAlign == "NotSet" && rtl)) ^ popupPosition.isInverted;
    return toTheLeft ? 1 : -1;
}
function _aspxGetAnimationVerticalDirection(popupPosition, horizontalAlign, verticalAlign) {
    if (_aspxIsInnerAlign(verticalAlign)
  && !_aspxIsInnerAlign(horizontalAlign)
  && !_aspxIsAlignNotSet(horizontalAlign))
        return 0;
    var toTheTop = (verticalAlign == "Above" || verticalAlign == "BottomSides") ^ popupPosition.isInverted;
    return toTheTop ? 1 : -1;
}
function _aspxIsVerticalScrollExists() {
    return _aspxGetDocumentHeight() > _aspxGetDocumentClientHeight() || __aspxIE && __aspxBrowserVersion < 8;
}
var _aspxBodyScrollHelper = (function () {
    var hideBodyScrollCount = 0;
    function fixScrollsBug() {
        var scrollTop = document.body.scrollTop;
        var scrollLeft = document.body.scrollLeft;
        document.body.scrollTop++;
        document.body.scrollTop--;
        document.body.scrollLeft++;
        document.body.scrollLeft--;
        document.body.scrollLeft = scrollLeft;
        document.body.scrollTop = scrollTop;
    }
    return {
        HideBodyScroll: function () {
            hideBodyScrollCount++;
            if (hideBodyScrollCount > 1)
                return;
            if (__aspxIE) {
                _aspxChangeAttribute(document.body, "scroll", "no");
                _aspxChangeStyleAttribute(document.documentElement, "overflow", "hidden");
            } else if (__aspxFirefox && __aspxBrowserVersion < 3) {
                var scrollTop = document.documentElement.scrollTop;
                _aspxChangeStyleAttribute(document.body, "overflow", "hidden");
                document.documentElement.scrollTop = scrollTop;
            } else {
                _aspxChangeStyleAttribute(document.documentElement, "overflow", "hidden");
                var documentHeight = _aspxGetDocumentHeight();
                var documentWidth = _aspxGetDocumentWidth();
                if (window.pageYOffset > 0 && _aspxPxToInt(window.getComputedStyle(document.body, null)) != documentHeight)
                    _aspxChangeStyleAttribute(document.body, "height", documentHeight + "px");
                if (window.pageXOffset > 0 && _aspxPxToInt(window.getComputedStyle(document.body, null)) != documentWidth)
                    _aspxChangeStyleAttribute(document.body, "width", documentWidth + "px");
                if (__aspxChrome) {
                    fixScrollsBug();
                }
            }
            if (_aspxIsVerticalScrollExists())
                _aspxChangeStyleAttribute(document.body, "margin-right", _aspxGetVerticalScrollBarWidth() + "px");
            if (__aspxIE && __aspxBrowserVersion == 7)
                _aspxWindowResizedByBodyScrollToggle();
        },
        RestoreBodyScroll: function () {
            hideBodyScrollCount--;
            if (hideBodyScrollCount > 0)
                return;
            if (__aspxIE) {
                _aspxRestoreAttribute(document.body, "scroll");
                _aspxRestoreStyleAttribute(document.documentElement, "overflow");
            } else {
                _aspxRestoreStyleAttribute(document.documentElement, "overflow");
            }
            _aspxRestoreStyleAttribute(document.body, "margin-right");
            _aspxRestoreStyleAttribute(document.body, "height");
            _aspxRestoreStyleAttribute(document.body, "width");
            if (__aspxWebKitFamily) {
                fixScrollsBug();
            }
            if (__aspxIE && __aspxBrowserVersion == 7)
                _aspxWindowResizedByBodyScrollToggle();
        }
    }
})();
function _aspxWindowResizedByBodyScrollToggle() {
    if (aspxGetPopupControlCollection)
        aspxGetPopupControlCollection().LockWindowResizeByBodyScrollVisibilityChanging();
    var docWidth = document.documentElement.clientWidth;
    if (aspxGetPopupControlCollection)
        aspxGetPopupControlCollection().UnlockWindowResizeByBodyScrollVisibilityChanging();
}
function _aspxCoordinatesInDocumentRect(x, y) {
    var docScrollLeft = _aspxGetDocumentScrollLeft();
    var docScrollTop = _aspxGetDocumentScrollTop();
    return (x > docScrollLeft && y > docScrollTop &&
  x < _aspxGetDocumentClientWidth() + docScrollLeft &&
  y < _aspxGetDocumentClientHeight() + docScrollTop);
}
function _aspxGetElementZIndexArray(element) {
    var currentElement = element;
    var zIndexesArray = [0];
    while (currentElement && currentElement.tagName != "BODY") {
        if (currentElement.style) {
            if (typeof (currentElement.style.zIndex) != "undefined" && currentElement.style.zIndex != "")
                zIndexesArray.unshift(currentElement.style.zIndex);
        }
        currentElement = currentElement.parentNode;
    }
    return zIndexesArray;
}
function _aspxIsHigher(higherZIndexArrat, zIndexArray) {
    if (zIndexArray == null) return true;
    var count = (higherZIndexArrat.length >= zIndexArray.length) ? higherZIndexArrat.length : zIndexArray.length;
    for (var i = 0; i < count; i++)
        if (typeof (higherZIndexArrat[i]) != "undefined" && typeof (zIndexArray[i]) != "undefined") {
            var higherZIndexArrayCurrentElement = parseInt(higherZIndexArrat[i].toString());
            var zIndexArrayCurrentElement = parseInt(zIndexArray[i].toString());
            if (higherZIndexArrayCurrentElement != zIndexArrayCurrentElement)
                return higherZIndexArrayCurrentElement > zIndexArrayCurrentElement;
        } else return typeof (zIndexArray[i]) == "undefined";
    return true;
}
function _aspxTestIsPopupElement(element) {
    return !!element.DXPopupElementControl;
}
var _aspxClientOverControlUtils = {
    GetPopupElementByEvt: function (evt) {
        return _aspxFindEventSourceParentByTestFunc(evt, _aspxTestIsPopupElement);
    },
    OnMouseEvent: function (evt, mouseOver) {
        var popupElement = _aspxClientOverControlUtils.GetPopupElementByEvt(evt);
        if (mouseOver)
            popupElement.DXPopupElementControl.OnPopupElementMouseOver(evt, popupElement);
        else
            popupElement.DXPopupElementControl.OnPopupElementMouseOut(evt, popupElement);
    },
    OnMouseOut: function (evt) {
        _aspxClientOverControlUtils.OnMouseEvent(evt, false);
    },
    OnMouseOver: function (evt) {
        _aspxClientOverControlUtils.OnMouseEvent(evt, true);
    }
}
ASPxScrollingManager = _aspxCreateClass(null, {
    constructor: function (owner, scrollableArea, orientation, onBeforeScrolling, onAfterScrolling, forseEmulation) {
        this.owner = owner;
        this.scrollableArea = scrollableArea;
        this.orientation = orientation;
        this.animationDelay = 1;
        this.animationStep = 2;
        this.animationOffset = 5;
        this.animationAcceleration = 0;
        this.scrollSessionInterval = 10;
        this.stopScrolling = true;
        this.busy = false;
        this.currentAcceleration = 0;
        this.startPos;
        this.onBeforeScrolling = onBeforeScrolling;
        this.onAfterScrolling = onAfterScrolling;
        this.emulationMode = forseEmulation === true || !__aspxTouchUI;
        this.Initialize();
    },
    Initialize: function () {
        if (__aspxMSTouchUI) {
            this.scrollableArea.parentNode.style.overflow = "auto";
            this.scrollableArea.parentNode.style["-ms-overflow-style"] = "-ms-autohiding-scrollbar";
        }
        if (this.emulationMode) {
            this.wrapper = new ASPxScrollingManager.scrollWrapper(this.scrollableArea);
        } else {
            this.wrapper = new ASPxScrollingManager.scrollWrapperTouchUI(this.scrollableArea, function (direction) {
                if (this.onAfterScrolling)
                    this.onAfterScrolling(this, direction);
            } .aspxBind(this));
        }
    },
    GetScrolledAreaPosition: function () {
        return this.wrapper.GetScrollLeft() * this.orientation[0]
   + this.wrapper.GetScrollTop() * this.orientation[1];
    },
    SetScrolledAreaPosition: function (pos) {
        this.wrapper.SetScrollLeft(pos * this.orientation[0]);
        this.wrapper.SetScrollTop(pos * this.orientation[1]);
    },
    PrepareForScrollAnimation: function () {
        if (!this.scrollableArea)
            return;
        this.currentAcceleration = 0;
        this.startPos = this.GetScrolledAreaPosition();
        this.busy = false;
    },
    GetAnimationStep: function (dir) {
        var step = dir * (this.animationStep + this.currentAcceleration);
        var newPos = this.GetScrolledAreaPosition() + step;
        var requiredPos = this.startPos + dir * this.animationOffset;
        if ((dir == 1 && newPos >= requiredPos) || (dir == -1 && newPos <= requiredPos)) {
            step = requiredPos - this.GetScrolledAreaPosition();
        }
        return step;
    },
    DoScrollSessionAnimation: function (direction) {
        if (!this.scrollableArea)
            return;
        this.SetScrolledAreaPosition(this.GetScrolledAreaPosition() + this.GetAnimationStep(direction));
        var self = this;
        if (!this.ShouldStopScrollSessionAnimation()) {
            this.busy = true;
            this.currentAcceleration += this.animationAcceleration;
            _aspxSetTimeout(function () { self.DoScrollSessionAnimation(direction); }, this.animationDelay);
        } else {
            if (this.onAfterScrolling)
                this.onAfterScrolling(this, -direction);
            this.busy = false;
            this.currentAcceleration = 0;
            _aspxSetTimeout(function () { self.DoScroll(direction); }, this.scrollSessionInterval);
        }
    },
    ShouldStopScrollSessionAnimation: function () {
        return (Math.abs(this.GetScrolledAreaPosition() - this.startPos) >= Math.abs(this.animationOffset));
    },
    DoScroll: function (direction) {
        if (!this.scrollableArea)
            return;
        if (!this.busy && !this.stopScrolling) {
            if (this.onBeforeScrolling)
                this.onBeforeScrolling(this, -direction);
            if (this.stopScrolling) return;
            this.PrepareForScrollAnimation();
            this.DoScrollSessionAnimation(direction);
        }
    },
    StartScrolling: function (direction, delay, step) {
        this.stopScrolling = false;
        this.animationDelay = delay;
        this.animationStep = step;
        this.DoScroll(-direction);
    },
    StopScrolling: function () {
        this.stopScrolling = true;
    },
    IsStopped: function () {
        return this.stopScrolling;
    }
});
(function () {
    ASPxScrollingManager.scrollWrapper = function (scrollableArea) {
        this.scrollableArea = scrollableArea;
        this.Initialize();
    };
    ASPxScrollingManager.scrollWrapper.prototype = {
        Initialize: function () {
            this.scrollableArea.style.position = "relative";
            this.scrollableArea.parentNode.style.position = "relative";
        },
        GetScrollLeft: function () { return _aspxPxToInt(this.scrollableArea.style.left); },
        GetScrollTop: function () { return _aspxPxToInt(this.scrollableArea.style.top); },
        SetScrollLeft: function (value) { this.scrollableArea.style.left = value + "px"; },
        SetScrollTop: function (value) { this.scrollableArea.style.top = value + "px"; }
    };
    ASPxScrollingManager.scrollWrapperTouchUI = function (scrollableArea, onScroll) {
        this.scrollableArea = scrollableArea;
        this.scrollTimerId = -1;
        this.onScroll = onScroll;
        this.Initialize(onScroll);
    };
    ASPxScrollingManager.scrollWrapperTouchUI.prototype = {
        Initialize: function () {
            var div = this.scrollableArea.parentNode;
            var timeout = __aspxMSTouchUI ? 500 : 1000;
            var nativeScrollSupported = __aspxMSTouchUI || ASPxClientTouchUI.nativeWebKitScrollingSupported();
            this.onScrollCore = function () {
                _aspxClearTimer(this.scrollTimerId);
                if (this.onScrollLocked) return;
                this.scrollTimerId = window.setTimeout(this.onScrollByTimer, timeout);
            } .aspxBind(this);
            this.onScrollByTimer = function () {
                if (this.onScrollLocked) return;
                var direction = this.lastScrollTop < div.scrollTop ? 1 : -1;
                this.lastScrollTop = div.scrollTop;
                this.onScrollLocked = true;
                this.onScroll(direction);
                this.onScrollLocked = false;
            } .aspxBind(this);
            this.lastScrollTop = div.scrollTop;
            var onscroll = nativeScrollSupported ? this.onScrollCore : this.onScrollByTimer;
            _aspxAttachEventToElement(div, "scroll", onscroll);
            if (__aspxWebKitTouchUI)
                this.scrollExtender = ASPxClientTouchUI.MakeScrollable(div, { showHorizontalScrollbar: false });
        },
        GetScrollLeft: function () { return -this.scrollableArea.parentNode.scrollLeft; },
        GetScrollTop: function () { return -this.scrollableArea.parentNode.scrollTop; },
        SetScrollLeft: function (value) {
            this.onScrollLocked = true;
            this.scrollableArea.parentNode.scrollLeft = -value;
            this.onScrollLocked = false;
        },
        SetScrollTop: function (value) {
            this.onScrollLocked = true;
            this.scrollableArea.parentNode.scrollTop = -value;
            this.onScrollLocked = false;
        }
    };
})();
var __aspxMIIdSuffix = "_DXI";
var __aspxMMIdSuffix = "_DXM";
var __aspxSBIdSuffix = "_DXSB";
var __aspxSBUIdEnd = "_U";
var __aspxSBDIdEnd = "_D";
ASPxClientMenuItemInfo = _aspxCreateClass(null, {
    constructor: function (menu, indexPath) {
        var itemElement = menu.GetItemElement(indexPath);
        this.clientHeight = itemElement.clientHeight;
        this.clientWidth = itemElement.clientWidth;
        this.clientTop = _aspxGetClientTop(itemElement);
        this.clientLeft = _aspxGetClientLeft(itemElement);
        this.offsetHeight = itemElement.offsetHeight;
        this.offsetWidth = itemElement.offsetWidth;
        this.offsetTop = 0;
        this.offsetLeft = 0;
    }
});
ASPxClientMenuCssClasses = {};
ASPxClientMenuCssClasses.Prefix = "dxm-";
ASPxClientMenuCssClasses.Menu = "dxmLite";
ASPxClientMenuCssClasses.BorderCorrector = "dxmBrdCor";
ASPxClientMenuCssClasses.Disabled = ASPxClientMenuCssClasses.Prefix + "disabled";
ASPxClientMenuCssClasses.MainMenu = ASPxClientMenuCssClasses.Prefix + "main";
ASPxClientMenuCssClasses.PopupMenu = ASPxClientMenuCssClasses.Prefix + "popup";
ASPxClientMenuCssClasses.IE7 = ASPxClientMenuCssClasses.Prefix + "ie7";
ASPxClientMenuCssClasses.HorizontalMenu = ASPxClientMenuCssClasses.Prefix + "horizontal";
ASPxClientMenuCssClasses.VerticalMenu = ASPxClientMenuCssClasses.Prefix + "vertical";
ASPxClientMenuCssClasses.NoWrapMenu = ASPxClientMenuCssClasses.Prefix + "noWrap";
ASPxClientMenuCssClasses.AutoWidthMenu = ASPxClientMenuCssClasses.Prefix + "autoWidth";
ASPxClientMenuCssClasses.DX = "dx";
ASPxClientMenuCssClasses.Separator = ASPxClientMenuCssClasses.Prefix + "separator";
ASPxClientMenuCssClasses.Spacing = ASPxClientMenuCssClasses.Prefix + "spacing";
ASPxClientMenuCssClasses.Gutter = ASPxClientMenuCssClasses.Prefix + "gutter";
ASPxClientMenuCssClasses.WithoutImages = ASPxClientMenuCssClasses.Prefix + "noImages";
ASPxClientMenuCssClasses.Item = ASPxClientMenuCssClasses.Prefix + "item";
ASPxClientMenuCssClasses.ItemHovered = ASPxClientMenuCssClasses.Prefix + "hovered";
ASPxClientMenuCssClasses.ItemSelected = ASPxClientMenuCssClasses.Prefix + "selected";
ASPxClientMenuCssClasses.ItemChecked = ASPxClientMenuCssClasses.Prefix + "checked";
ASPxClientMenuCssClasses.ItemWithoutImage = ASPxClientMenuCssClasses.Prefix + "noImage";
ASPxClientMenuCssClasses.ItemWithSubMenu = ASPxClientMenuCssClasses.Prefix + "subMenu";
ASPxClientMenuCssClasses.ItemDropDownMode = ASPxClientMenuCssClasses.Prefix + "dropDownMode";
ASPxClientMenuCssClasses.ItemWithoutSubMenu = ASPxClientMenuCssClasses.Prefix + "noPopOut";
ASPxClientMenuCssClasses.ContentContainer = ASPxClientMenuCssClasses.Prefix + "content";
ASPxClientMenuCssClasses.Image = ASPxClientMenuCssClasses.Prefix + "image";
ASPxClientMenuCssClasses.PopOutContainer = ASPxClientMenuCssClasses.Prefix + "popOut";
ASPxClientMenuCssClasses.PopOutImage = ASPxClientMenuCssClasses.Prefix + "pImage";
ASPxClientMenuCssClasses.ImageLeft = ASPxClientMenuCssClasses.Prefix + "image-l";
ASPxClientMenuCssClasses.ImageRight = ASPxClientMenuCssClasses.Prefix + "image-r";
ASPxClientMenuCssClasses.ImageTop = ASPxClientMenuCssClasses.Prefix + "image-t";
ASPxClientMenuCssClasses.ImageBottom = ASPxClientMenuCssClasses.Prefix + "image-b";
ASPxClientMenuCssClasses.ScrollArea = ASPxClientMenuCssClasses.Prefix + "scrollArea";
ASPxClientMenuCssClasses.ScrollUpButton = ASPxClientMenuCssClasses.Prefix + "scrollUpBtn";
ASPxClientMenuCssClasses.ScrollDownButton = ASPxClientMenuCssClasses.Prefix + "scrollDownBtn";
ASPxClientMenuLiteRenderHelper = {};
ASPxClientMenuLiteRenderHelper.InlineInitializeElements = function (menu) {
    if (!menu.isPopupMenu)
        this.InlineInitializeMainMenuElements(menu, menu.GetMainElement());
    var commonContainer = menu.GetMainElement().parentNode;
    var subMenuElements = this.GetNodesByTagName(commonContainer, "DIV");
    for (var i = 0; i < subMenuElements.length; i++) {
        if (!menu.isPopupMenu && subMenuElements[i] == menu.GetMainElement())
            continue;
        this.InlineInitializeSubMenuElements(menu, subMenuElements[i]);
    }
};
ASPxClientMenuLiteRenderHelper.FindNodes = function (node, match) {
    var result = [];
    for (var i = 0; i < node.childNodes.length; i++) {
        var childNode = node.childNodes[i];
        if (!childNode.tagName)
            continue;
        if (match(childNode))
            result.push(childNode);
    }
    return result;
};
ASPxClientMenuLiteRenderHelper.GetNodesByTagName = function (node, tagName) {
    return this.FindNodes(node, function (childNode) {
        return childNode.tagName == tagName;
    });
};
ASPxClientMenuLiteRenderHelper.GetNodesByClassName = function (node, className) {
    return this.FindNodes(node, function (childNode) {
        return _aspxElementCssClassContains(childNode, className);
    });
};
ASPxClientMenuLiteRenderHelper.GetNodeByClassName = function (node, childNodeClassName) {
    var nodes = this.GetNodesByClassName(node, childNodeClassName);
    return nodes.length > 0 ? nodes[0] : null;
};
ASPxClientMenuLiteRenderHelper.InlineInitializeScrollElements = function (menu, indexPath, menuElement) {
    var scrollArea = this.GetNodeByClassName(menuElement, ASPxClientMenuCssClasses.ScrollArea);
    if (scrollArea) scrollArea.id = menu.GetScrollAreaId(indexPath);
    var scrollUpButton = this.GetNodeByClassName(menuElement, ASPxClientMenuCssClasses.ScrollUpButton);
    if (scrollUpButton) scrollUpButton.id = menu.GetScrollUpButtonId(indexPath);
    var scrollDownButton = this.GetNodeByClassName(menuElement, ASPxClientMenuCssClasses.ScrollDownButton);
    if (scrollDownButton) scrollDownButton.id = menu.GetScrollDownButtonId(indexPath);
};
ASPxClientMenuLiteRenderHelper.InlineInitializeMainMenuElements = function (menu, menuElement) {
    var contentElement = _aspxGetChildByTagName(menuElement, "UL", 0);
    var itemElements = this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Item);
    for (var i = 0; i < itemElements.length; i++)
        this.InlineInitializeItemElement(menu, itemElements[i], "", i);
    this.InlineInitializeScrollElements(menu, "", menuElement);
};
ASPxClientMenuLiteRenderHelper.CalculateMenuElements = function (menu, menuElement) {
    var indexPath = menu.GetMenuIndexPathById(menuElement.id);
    var contentElement = _aspxGetChildByTagName(menuElement, "UL", 0);
    var itemElements = this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Item);
    if (!menu.IsVertical(indexPath)) {
        ASPxClientMenuLiteRenderHelper.CalculateMinSize(menuElement, contentElement, itemElements);
        ASPxClientMenuLiteRenderHelper.CalculateMenuItems(false, menuElement, contentElement, itemElements);
        ASPxClientMenuLiteRenderHelper.CalculateSeparatorsAndSpacers(menuElement, contentElement);
    }
    else
        ASPxClientMenuLiteRenderHelper.CalculateMenuItems(true, menuElement, contentElement, itemElements);
};
ASPxClientMenuLiteRenderHelper.CalculateMenuItems = function (isVertical, menuElement, contentElement, itemElements) {
    if (menuElement.offsetWidth === 0) return;
    var menuWidth = _aspxGetCurrentStyle(menuElement).width;
    var menuRequireItemCorrection = isVertical && menuWidth && menuWidth !== "auto";
    for (var i = 0; i < itemElements.length; i++) {
        if (!itemElements[i].style.width && !menuRequireItemCorrection) continue;
        var itemContentElement = itemElements[i].itemContentElement;
        if (!itemContentElement) {
            var children = _aspxGetChildNodesByClassName(itemElements[i], ASPxClientMenuCssClasses.ContentContainer);
            if (children.length > 0)
                itemContentElement = itemElements[i].itemContentElement = children[0];
        }
        if (!itemContentElement || itemElements[i].offsetWidth === 0) continue;
        if (__aspxIE && __aspxBrowserVersion < 8 && i == itemElements.length - 1)
            itemElements[i].style.width = "";
        itemContentElement.style.float = "none";
        itemContentElement.style.cssFloat = "none";
        if (!isVertical && !itemContentElement.originalPaddingLeft && !itemContentElement.originalPaddingRight) {
            var itemContentCurrentStyle = _aspxGetCurrentStyle(itemContentElement);
            itemContentElement.originalPaddingLeft = parseInt(itemContentCurrentStyle.paddingLeft);
            itemContentElement.originalPaddingRight = parseInt(itemContentCurrentStyle.paddingRight);
            var leftChildrenWidth = 0, rightChildrenWidth = 0;
            for (var j = 0; j < itemElements[i].childNodes.length; j++) {
                var child = itemElements[i].childNodes[j];
                if (!child.offsetWidth) continue;
                if (child !== itemContentElement) {
                    if (_aspxGetElementFloat(child) === "right")
                        rightChildrenWidth += child.offsetWidth + _aspxGetLeftRightMargins(child);
                    else if (_aspxGetElementFloat(child) === "left")
                        leftChildrenWidth += child.offsetWidth + _aspxGetLeftRightMargins(child);
                }
            }
            if (itemContentElement.style.paddingLeft === "")
                itemContentElement.style.paddingLeft = (leftChildrenWidth + itemContentElement.originalPaddingLeft) + "px";
            if (itemContentElement.style.paddingRight === "")
                itemContentElement.style.paddingRight = (rightChildrenWidth + itemContentElement.originalPaddingRight) + "px";
        }
        _aspxAdjustWrappedTextInContainer(itemContentElement);
        for (var j = 0; j < itemElements[i].childNodes.length; j++) {
            var child = itemElements[i].childNodes[j];
            if (!child.offsetWidth) continue;
            var contentHeight = itemContentElement.offsetHeight;
            if (child !== itemContentElement) {
                if (_aspxGetElementFloat(child) === "right") {
                    child.style.marginTop = "-" + contentHeight + "px";
                }
                else if (_aspxGetElementFloat(child) === "left") {
                    child.style.marginBottom = "-" + contentHeight + "px";
                }
            }
        }
    }
};
ASPxClientMenuLiteRenderHelper.CalculateMinSize = function (menuElement, contentElement, itemElements) {
    if (menuElement.isMinSizeCalculated) return;
    var isAutoWidth = menuElement.className.indexOf(ASPxClientMenuCssClasses.AutoWidthMenu) > -1;
    var noWrap = menuElement.className.indexOf(ASPxClientMenuCssClasses.NoWrapMenu) > -1;
    menuElement.className = menuElement.className.replace(ASPxClientMenuCssClasses.NoWrapMenu, "");
    menuElement.className = menuElement.className.replace(ASPxClientMenuCssClasses.AutoWidthMenu, "");
    _aspxChangeStyleAttribute(menuElement, "width", "0px");
    for (var i = 0; i < itemElements.length; i++) {
        var contentElements = _aspxGetChildNodesByClassName(itemElements[i], ASPxClientMenuCssClasses.ContentContainer);
        if (!contentElements || contentElements.length === 0 || itemElements[i].offsetWidth === 0) continue;
        var textContainer = _aspxGetChildByTagName(contentElements[0], "SPAN", 0);
        if (textContainer && _aspxGetCurrentStyle(textContainer).whiteSpace !== "nowrap")
            _aspxAdjustWrappedTextInContainer(contentElements[0]);
        var sizeCorrection = (__aspxIE && __aspxBrowserVersion > 8) ? 1 : 0;
        if (!_aspxIsPercentageSize(itemElements[i].style.width))
            itemElements[i].style.minWidth = (itemElements[i].offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(itemElements[i]) + sizeCorrection) + "px";
        else {
            var childrenWidth = 0;
            for (var j = 0; j < itemElements[i].childNodes.length; j++) {
                var child = itemElements[i].childNodes[j];
                if (!child.offsetWidth) continue;
                childrenWidth += child.offsetWidth;
            }
            itemElements[i].style.minWidth = (childrenWidth + sizeCorrection) + "px";
        }
    }
    if (isAutoWidth)
        menuElement.className += " " + ASPxClientMenuCssClasses.AutoWidthMenu;
    if (noWrap)
        menuElement.className += " " + ASPxClientMenuCssClasses.NoWrapMenu;
    if (isAutoWidth || noWrap)
        menuElement.style.minWidth = (contentElement.offsetWidth + _aspxGetLeftRightBordersAndPaddingsSummaryValue(menuElement)) + "px";
    _aspxRestoreStyleAttribute(menuElement, "width");
    menuElement.isMinSizeCalculated = true;
};
ASPxClientMenuLiteRenderHelper.CalculateSeparatorsAndSpacers = function (menuElement, contentElement) {
    var spacerElements = this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Spacing);
    var spacerAndSeparatorElements = spacerElements.concat(this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Separator));
    for (var i = 0; i < spacerAndSeparatorElements.length; i++)
        spacerAndSeparatorElements[i].style.height = "";
    var isAutoWidth = menuElement.className.indexOf(ASPxClientMenuCssClasses.AutoWidthMenu) > -1;
    var noWrap = menuElement.className.indexOf(ASPxClientMenuCssClasses.NoWrapMenu) > -1;
    var menuHeight = contentElement.clientHeight;
    if (!isAutoWidth && !noWrap) {
        _aspxChangeStyleAttribute(contentElement, "width", "10000px");
        menuHeight = contentElement.clientHeight;
        _aspxRestoreStyleAttribute(contentElement, "width");
    }
    for (var i = 0; i < spacerAndSeparatorElements.length; i++)
        spacerAndSeparatorElements[i].style.height = (menuHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(spacerAndSeparatorElements[i]) - _aspxGetTopBottomMargins(spacerAndSeparatorElements[i])) + "px";
    for (var i = 0; i < spacerElements.length; i++)
        spacerElements[i].style.minWidth = spacerElements[i].style.width;
};
ASPxClientMenuLiteRenderHelper.ProsessRightFloatElements = function (contentElement, action) {
    var raw = _aspxGetChildrenByPartialClassName(contentElement, ASPxClientMenuCssClasses.Prefix).concat([contentElement]);
    var list = [];
    for (var i = 0; i < raw.length; i++) {
        if (raw[i].offsetWidth < 1 || _aspxGetElementFloat(raw[i]) != "right")
            continue;
        list.push(raw[i]);
    }
    var directionChanged;
    if (contentElement.className == ASPxClientMenuCssClasses.DX &&
  contentElement.tagName.toUpperCase() == "DIV" && _aspxGetElementDirection(contentElement) == "rtl") {
        _aspxSetElementDirection(contentElement, "ltr");
        directionChanged = true;
    }
    for (var i = 0; i < list.length; i++)
        _aspxSetElementFloat(list[i], "left");
    action(list);
    for (var i = 0; i < list.length; i++)
        _aspxSetElementFloat(list[i], "");
    if (directionChanged)
        _aspxSetElementDirection(contentElement, "rtl");
};
ASPxClientMenuLiteRenderHelper.FreezeElementSizes = function (elements) {
    for (var i = 0; i < elements.length; i++)
        elements[i].style.width = elements[i].offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(elements[i]) + "px";
};
ASPxClientMenuLiteRenderHelper.InlineInitializeSubMenuElements = function (menu, parentElement) {
    parentElement.style.position = "absolute";
    var indexPath = menu.GetMenuIndexPathById(parentElement.id);
    var borderCorrectorElement = this.GetNodeByClassName(parentElement, ASPxClientMenuCssClasses.BorderCorrector);
    if (borderCorrectorElement != null) {
        borderCorrectorElement.id = menu.GetMenuBorderCorrectorElementId(indexPath);
        borderCorrectorElement.style.position = "absolute";
        parentElement.removeChild(borderCorrectorElement);
        parentElement.parentNode.appendChild(borderCorrectorElement);
    }
    this.InlineInitializeSubMenuMenuElement(menu, parentElement);
};
ASPxClientMenuLiteRenderHelper.InlineInitializeSubMenuMenuElement = function (menu, parentElement) {
    var menuElement = this.GetNodeByClassName(parentElement, ASPxClientMenuCssClasses.PopupMenu);
    var indexPath = menu.GetMenuIndexPathById(parentElement.id);
    menuElement.id = menu.GetMenuMainElementId(indexPath);
    var contentElement = _aspxGetChildByTagName(menuElement, "UL", 0);
    if (contentElement != null) {
        var itemElements = this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Item);
        var parentIndexPath = parentElement == menu.GetMainElement() ? "" : indexPath;
        for (var i = 0; i < itemElements.length; i++) {
            var itemElementId = itemElements[i].id;
            if (itemElementId && aspxGetMenuCollection().GetMenu(itemElementId) != menu)
                continue;
            this.InlineInitializeItemElement(menu, itemElements[i], parentIndexPath, i);
        }
    }
    this.InlineInitializeScrollElements(menu, indexPath, menuElement);
};
ASPxClientMenuLiteRenderHelper.HasSubMenuTemplate = function (menuElement) {
    var contentElement = this.GetContentElement(menuElement);
    return contentElement && (contentElement.tagName != "UL" || !_aspxGetChildrenByPartialClassName(contentElement, ASPxClientMenuCssClasses.ContentContainer).length);
};
ASPxClientMenuLiteRenderHelper.CalculateSubMenu = function (menu, parentElement) {
    var widthPrepared = _aspxGetAttribute(parentElement, "widthPrepared") == "true";
    var menuElement = menu.GetMenuMainCell(parentElement);
    var contentElement = this.GetContentElement(menuElement);
    parentElement.style.width = "";
    parentElement.style.height = "";
    if (widthPrepared)
        menuElement.style.width = "";
    var contentWidth;
    if (__aspxIE && __aspxBrowserVersion < 8) {
        this.ProsessRightFloatElements(contentElement, function (elements) {
            if (menu.rtl)
                ASPxClientMenuLiteRenderHelper.FreezeElementSizes(elements);
            contentWidth = contentElement.offsetWidth;
        });
        if (contentElement.tagName == "UL") {
            contentElement.style.height = "";
            contentElement.style.height = contentElement.offsetHeight + "px";
        }
    }
    if (__aspxIE && __aspxBrowserVersion > 8) {
        if (!this.HasSubMenuTemplate(menuElement))
            var contentWidth = ASPxClientMenuLiteRenderHelper.GetContentOffsetWidth(menuElement, contentElement);
    }
    menuElement.style.width = (contentWidth || contentElement.offsetWidth) + "px";
    if (contentElement.style.width !== "")
        contentElement.style.width = menuElement.style.width;
    if (!widthPrepared)
        _aspxSetAttribute(parentElement, "widthPrepared", "true");
    ASPxClientMenuLiteRenderHelper.CalculateSubMenuItems(menuElement, contentElement);
};
ASPxClientMenuLiteRenderHelper.CalculateSubMenuItems = function (menuElement, contentElement) {
    if (menuElement.isSubMenuItemsCalculated) return;
    var itemElements = this.GetNodesByClassName(contentElement, ASPxClientMenuCssClasses.Item);
    ASPxClientMenuLiteRenderHelper.CalculateMenuItems(true, menuElement, contentElement, itemElements);
    menuElement.isSubMenuItemsCalculated = true;
};
ASPxClientMenuLiteRenderHelper.GetContentOffsetWidth = function (menuElement, contentElement) {
    var contentWidth = 0;
    for (var item = contentElement.firstChild; item; item = item.nextSibling) {
        if (item.nodeType == 1 && _aspxElementCssClassContains(item, ASPxClientMenuCssClasses.Item)) {
            var itemWidth = 0;
            itemWidth += _aspxGetLeftRightBordersAndPaddingsSummaryValue(item);
            for (var child = item.firstChild; child; child = child.nextSibling) {
                if (child.offsetWidth) {
                    var curChildStyle = _aspxGetCurrentStyle(child);
                    itemWidth += child.offsetWidth + _aspxPxToInt(curChildStyle.marginLeft) + _aspxPxToInt(curChildStyle.marginRight);
                }
            }
            contentWidth = contentWidth > itemWidth ? contentWidth : itemWidth + 1;
        }
    }
    contentWidth += _aspxGetLeftRightBordersAndPaddingsSummaryValue(menuElement);
    return contentWidth;
};
ASPxClientMenuLiteRenderHelper.GetContentElement = function (menuElement) {
    var contentElement = _aspxGetChildByTagName(menuElement, "DIV", 0);
    if (contentElement &&
  contentElement.className == ASPxClientMenuCssClasses.DX &&
  contentElement.parentNode == menuElement)
        return contentElement;
    contentElement = _aspxGetChildByTagName(menuElement, "UL", 0);
    if (contentElement)
        return contentElement;
    return _aspxGetChildByTagName(menuElement, "TABLE", 0);
};
ASPxClientMenuLiteRenderHelper.InlineInitializeItemElement = function (menu, itemElement, parentIndexPath, visibleIndex) {
    function getItemIndex(visibleIndex) {
        var itemData = parentItemData[Math.max(visibleIndex, 0)];
        return itemData.constructor == Array
   ? itemData[0]
   : itemData;
    }
    var parentItemData = menu.renderData[parentIndexPath],
  prepareItemOnClick = parentItemData[visibleIndex].constructor == Array,
  indexPathPrefix = parentIndexPath + (parentIndexPath != "" ? __aspxItemIndexSeparator : ""),
  indexPath = indexPathPrefix + getItemIndex(visibleIndex),
  prevIndexPath = indexPathPrefix + getItemIndex(visibleIndex - 1);
    itemElement.id = menu.GetItemElementId(indexPath);
    aspxAssignAccessabilityEventsToChildrenLinks(itemElement);
    var separatorElement = itemElement.previousSibling;
    if (separatorElement && separatorElement.className) {
        if (_aspxElementCssClassContains(separatorElement, ASPxClientMenuCssClasses.Spacing))
            separatorElement.id = menu.GetItemIndentElementId(prevIndexPath);
        else if (_aspxElementCssClassContains(separatorElement, ASPxClientMenuCssClasses.Separator))
            separatorElement.id = menu.GetItemSeparatorElementId(indexPath);
    }
    var contentElementParent = itemElement;
    var contentElement = this.GetNodeByClassName(contentElementParent, ASPxClientMenuCssClasses.ContentContainer);
    if (contentElement != null) {
        contentElement.id = menu.GetItemContentElementId(indexPath);
        var imageElement = this.GetNodeByClassName(contentElement, ASPxClientMenuCssClasses.Image);
        if (imageElement == null) {
            var hyperLinkElement = this.GetNodeByClassName(contentElement, ASPxClientMenuCssClasses.DX);
            if (hyperLinkElement != null)
                imageElement = this.GetNodeByClassName(hyperLinkElement, ASPxClientMenuCssClasses.Image);
        }
        if (imageElement != null)
            imageElement.id = menu.GetItemImageId(indexPath);
    }
    else
        prepareItemOnClick = false;
    var popOutElement = this.GetNodeByClassName(itemElement, ASPxClientMenuCssClasses.PopOutContainer);
    if (popOutElement != null) {
        popOutElement.id = menu.GetItemPopOutElementId(indexPath);
        var popOutImageElement = this.GetNodeByClassName(popOutElement, ASPxClientMenuCssClasses.PopOutImage);
        if (popOutImageElement != null)
            popOutImageElement.id = menu.GetItemPopOutImageId(indexPath);
    }
    if (prepareItemOnClick)
        this.InlineInitializeItemOnClick(menu, itemElement, indexPath);
};
ASPxClientMenuLiteRenderHelper.InlineInitializeItemOnClick = function (menu, itemElement, indexPath) {
    var name = menu.name;
    var onclick = this.GetItemOnClick(menu, name, itemElement, indexPath);
    if (menu.IsDropDownItem(indexPath)) {
        var contentElement = menu.GetItemContentElement(indexPath);
        var dropDownElement = menu.GetItemPopOutElement(indexPath);
        var dropDownOnclick = this.GetItemDropdownOnClick(name, itemElement, indexPath);
        _aspxAttachEventToElement(contentElement, "click", onclick);
        _aspxAttachEventToElement(dropDownElement, "click", dropDownOnclick);
    }
    else
        _aspxAttachEventToElement(itemElement, "click", onclick);
    if (itemElement.style.cursor == "")
        itemElement.style.cursor = "pointer";
};
ASPxClientMenuLiteRenderHelper.GetItemOnClick = function (menu, name, itemElement, indexPath) {
    var sendPostBackHandler = function () {
        menu.SendPostBack("CLICK:" + indexPath);
    };
    var itemClickHandler = function (e) {
        aspxMIClick(e, name, indexPath);
    };
    var handler = menu.autoPostBack && !menu.IsClientSideEventsAssigned() && !_aspxGetChildByTagName(itemElement, "A", 0)
  ? sendPostBackHandler
  : itemClickHandler;
    return function (e) {
        if (!itemElement.clientDisabled)
            handler(e);
    };
};
ASPxClientMenuLiteRenderHelper.GetItemDropdownOnClick = function (name, itemElement, indexPath) {
    return function (e) {
        if (!itemElement.clientDisabled)
            aspxMIDDClick(e, name, indexPath);
    };
};
ASPxClientMenuLiteRenderHelper.ChangeItemEnabledAttributes = function (itemElement, enabled) {
    if (itemElement) {
        itemElement.clientDisabled = !enabled;
        _aspxChangeStyleAttributesMethod(enabled)(itemElement, "cursor");
        var hyperLink = _aspxGetChildByTagName(itemElement, "A", 0);
        if (hyperLink)
            _aspxChangeAttributesMethod(enabled)(hyperLink, "href");
    }
};
ASPxClientMenuScrollHelper = _aspxCreateClass(null, {
    constructor: function (menu, indexPath) {
        this.menu = menu;
        this.indexPath = indexPath;
        this.scrollingAreaElement = null;
        this.manager = null;
        this.initialized = false;
        this.visibleItems = [];
        this.itemsHeight = 0;
        this.scrollHeight = 0;
        this.scrollUpButtonHeight = 0;
        this.scrollDownButtonHeight = 0;
        this.scrollAreaHeight = null;
        this.scrollUpButtonVisible = false;
        this.scrollDownButtonVisible = false;
    },
    Initialize: function () {
        if (this.initialized) return;
        this.scrollingAreaElement = this.menu.GetScrollContentItemsOuterContainer(this.indexPath);
        var vector = [0, 1];
        this.manager = new ASPxScrollingManager(this, this.scrollingAreaElement, vector,
   function (manager, direction) {
       manager.owner.OnBeforeScrolling(direction);
   },
   function (manager, direction) {
       manager.owner.OnAfterScrolling(direction);
   }
  );
        this.ShowScrollButtons();
        var scrollUpButton = this.menu.GetScrollUpButtonElement(this.indexPath);
        if (scrollUpButton) {
            this.scrollUpButtonHeight = this.GetScrollButtonHeight(scrollUpButton)
            _aspxSetElementSelectionEnabled(scrollUpButton, false);
        }
        var scrollDownButton = this.menu.GetScrollDownButtonElement(this.indexPath);
        if (scrollDownButton) {
            this.scrollDownButtonHeight = this.GetScrollButtonHeight(scrollDownButton);
            _aspxSetElementSelectionEnabled(scrollDownButton, false);
        }
        if (__aspxWebKitTouchUI) {
            var preventDefault = function (event) { event.preventDefault(); };
            _aspxAttachEventToElement(scrollUpButton, "touchstart", preventDefault);
            _aspxAttachEventToElement(scrollDownButton, "touchstart", preventDefault);
        }
        this.HideScrollButtons();
        this.initialized = true;
    },
    GetScrollButtonHeight: function (button) {
        var style = _aspxGetCurrentStyle(button);
        return button.offsetHeight + _aspxPxToInt(style.marginTop) + _aspxPxToInt(style.marginBottom);
    },
    FillVisibleItemsList: function () {
        var index = 0;
        this.visibleItems = [];
        while (true) {
            var childIndexPath = (this.indexPath != "" ? this.indexPath + __aspxItemIndexSeparator : "") + index;
            var itemElement = this.menu.GetItemElement(childIndexPath);
            if (itemElement == null)
                break;
            if (_aspxGetElementDisplay(itemElement))
                this.visibleItems.push(itemElement);
            index++;
        }
    },
    CanCalculate: function () {
        return this.scrollingAreaElement && _aspxElementIsDisplayed(this.scrollingAreaElement);
    },
    Calculate: function (scrollHeight) {
        if (!this.CanCalculate()) return;
        this.FillVisibleItemsList();
        this.itemsHeight = 0;
        this.scrollHeight = scrollHeight;
        var itemsContainer = this.menu.GetScrollContentItemsContainer(this.indexPath);
        if (itemsContainer) this.itemsHeight = itemsContainer.offsetHeight;
        this.SetPosition(0);
        this.CalculateScrollingElements(-1);
    },
    GetPosition: function () {
        return -this.manager.GetScrolledAreaPosition();
    },
    SetPosition: function (pos) {
        this.manager.SetScrolledAreaPosition(-pos);
    },
    CalculateScrollingElements: function (direction) {
        if (this.itemsHeight <= this.scrollHeight) {
            this.scrollUpButtonVisible = false;
            this.scrollDownButtonVisible = false;
            this.scrollAreaHeight = null;
            this.SetPosition(0);
        }
        else {
            var scrollTop = this.GetPosition();
            this.scrollAreaHeight = this.scrollHeight;
            if (direction > 0) {
                var showScrollUpButton = !this.scrollUpButtonVisible;
                this.scrollUpButtonVisible = true;
                this.scrollAreaHeight -= this.scrollUpButtonHeight;
                this.scrollDownButtonVisible = this.itemsHeight - this.scrollAreaHeight - scrollTop > this.scrollDownButtonHeight;
                if (this.scrollDownButtonVisible) {
                    this.scrollAreaHeight -= this.scrollDownButtonHeight;
                    if (showScrollUpButton)
                        this.SetPosition(this.GetPosition() + this.scrollUpButtonHeight);
                }
                else {
                    this.SetPosition(this.itemsHeight - this.scrollAreaHeight);
                }
            }
            else {
                this.scrollDownButtonVisible = true;
                this.scrollAreaHeight -= this.scrollDownButtonHeight;
                this.scrollUpButtonVisible = scrollTop > this.scrollUpButtonHeight;
                if (this.scrollUpButtonVisible)
                    this.scrollAreaHeight -= this.scrollUpButtonHeight;
                else
                    this.SetPosition(0);
            }
            if (this.scrollAreaHeight < 1) this.scrollAreaHeight = 1;
        }
        this.UpdateScrollingElements();
    },
    UpdateScrollingElements: function () {
        this.UpdateScrollAreaHeight();
        this.UpdateScrollButtonsVisibility();
    },
    UpdateScrollAreaHeight: function () {
        var scrollAreaElement = this.menu.GetScrollAreaElement(this.indexPath);
        if (scrollAreaElement)
            scrollAreaElement.style.height = (this.scrollAreaHeight) ? (this.scrollAreaHeight + "px") : "";
    },
    UpdateScrollButtonsVisibility: function () {
        var scrollUpButton = this.menu.GetScrollUpButtonElement(this.indexPath);
        if (scrollUpButton) _aspxSetElementDisplay(scrollUpButton, this.scrollUpButtonVisible);
        var scrollDownButton = this.menu.GetScrollDownButtonElement(this.indexPath);
        if (scrollDownButton) _aspxSetElementDisplay(scrollDownButton, this.scrollDownButtonVisible);
    },
    ChangeScrollButtonsVisibility: function (visible) {
        this.scrollUpButtonVisible = visible;
        this.scrollDownButtonVisible = visible;
        this.UpdateScrollButtonsVisibility();
    },
    ShowScrollButtons: function () {
        this.ChangeScrollButtonsVisibility(true);
    },
    HideScrollButtons: function () {
        this.ChangeScrollButtonsVisibility(false);
    },
    ResetScrolling: function () {
        if (!this.initialized)
            return;
        this.HideScrollButtons();
        this.SetPosition(0);
        this.scrollAreaHeight = null;
        this.UpdateScrollAreaHeight();
    },
    GetScrollAreaHeight: function () {
        var scrollAreaElement = this.menu.GetScrollAreaElement(this.indexPath);
        if (scrollAreaElement)
            return scrollAreaElement.offsetHeight;
        return 0;
    },
    OnAfterScrolling: function (direction) {
        this.CalculateScrollingElements(direction);
    },
    OnBeforeScrolling: function (direction) {
        var scrollButton = (direction > 0) ? this.menu.GetScrollDownButtonElement(this.indexPath) :
   this.menu.GetScrollUpButtonElement(this.indexPath);
        if (!scrollButton || !_aspxGetElementDisplay(scrollButton))
            this.manager.StopScrolling();
    },
    StartScrolling: function (direction, delay, step) {
        this.manager.StartScrolling(direction, delay, step);
    },
    StopScrolling: function () {
        this.manager.StopScrolling();
    }
});
ASPxClientMenuScrollHelper.GetMenuByScrollButtonId = function (id) {
    var menuName = aspxGetMenuCollection().GetMenuNameBySuffixes(id, [__aspxSBIdSuffix]);
    return aspxGetMenuCollection().Get(menuName);
}
ASPxClientMenuBase = _aspxCreateClass(ASPxClientControl, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.createIFrames = false;
        this.renderData = null;
        this.allowSelectItem = false;
        this.allowCheckItems = false;
        this.allowMultipleCallbacks = false;
        this.appearAfter = 300;
        this.slideAnimationDuration = 60;
        this.disappearAfter = 500;
        this.enableAnimation = true;
        this.checkedItems = [];
        this.itemCheckedGroups = [];
        this.lockHoverEvents = false;
        this.popupToLeft = false;
        this.popupCount = 0;
        this.rootItem = null;
        this.showSubMenus = false;
        this.savedCallbackHoverItem = null;
        this.savedCallbackHoverElement = null;
        this.scrollInfo = [];
        this.scrollHelpers = {};
        this.scrollVertOffset = 1;
        this.rootSubMenuFIXOffset = 0;
        this.rootSubMenuFIYOffset = 0;
        this.rootSubMenuLIXOffset = 0;
        this.rootSubMenuLIYOffset = 0;
        this.rootSubMenuXOffset = 0;
        this.rootSubMenuYOffset = 0;
        this.subMenuFIXOffset = 0;
        this.subMenuFIYOffset = 0;
        this.subMenuLIXOffset = 0;
        this.subMenuLIYOffset = 0;
        this.subMenuXOffset = 0;
        this.subMenuYOffset = 0;
        this.maxHorizontalOverlap = -3;
        this.sizingConfig.allowSetHeight = false;
        this.shadowVisible = true;
        this.ItemClick = new ASPxClientEvent();
        this.ItemMouseOver = new ASPxClientEvent();
        this.ItemMouseOut = new ASPxClientEvent();
        this.PopUp = new ASPxClientEvent();
        this.CloseUp = new ASPxClientEvent();
        aspxGetMenuCollection().Add(this);
    },
    Initialize: function () {
        this.constructor.prototype.Initialize.call(this);
        var main = this.GetMainElement();
        if (__aspxIE && __aspxBrowserMajorVersion < 8 && this.rtl && _aspxElementCssClassContains(main, ASPxClientMenuCssClasses.HorizontalMenu))
            ASPxClientMenuLiteRenderHelper.ProsessRightFloatElements(main, ASPxClientMenuLiteRenderHelper.FreezeElementSizes);
    },
    InlineInitialize: function () {
        ASPxClientMenuLiteRenderHelper.InlineInitializeElements(this);
        if (__aspxIE && __aspxBrowserMajorVersion == 7) {
            var mainElement = this.GetMainElement();
            var width = _aspxPxToInt(mainElement.style.width);
            if (width > 0) {
                var currentStyle = _aspxGetCurrentStyle(mainElement);
                width -= _aspxPxToInt(currentStyle.paddingLeft) + _aspxPxToInt(currentStyle.paddingRight);
                width -= _aspxPxToInt(currentStyle.borderLeftWidth) + _aspxPxToInt(currentStyle.borderRightWidth);
                if (width > 0)
                    mainElement.style.width = width + "px";
            }
        }
        this.InitializeInternal(true);
        if (this.IsCallbacksEnabled()) {
            this.showSubMenus = this.GetLoadingPanelElement() != null;
            this.CreateCallback("DXMENUCONTENT");
        }
        else
            this.showSubMenus = true;
        this.popupToLeft = this.rtl;
    },
    InitializeInternal: function (inline) {
        this.InitializeCheckedItems();
        this.InitializeSelectedItem();
        this.InitializeEnabledAndVisible(!inline || !this.IsCallbacksEnabled());
        if (!this.IsCallbacksEnabled())
            this.InitializeScrollableMenus();
    },
    InitializeEnabledAndVisible: function (recursive) {
        if (this.rootItem == null) return;
        for (var i = 0; i < this.rootItem.items.length; i++)
            this.rootItem.items[i].InitializeEnabledAndVisible(recursive);
    },
    InitializeScrollableMenus: function () {
        var info = eval(this.scrollInfo);
        this.scrollHelpers = {};
        for (var i = 0; i < info.length; i++)
            this.scrollHelpers[info[i]] = new ASPxClientMenuScrollHelper(this, info[i]);
    },
    IsClientSideEventsAssigned: function () {
        return !this.ItemClick.IsEmpty()
   || !this.ItemMouseOver.IsEmpty()
   || !this.ItemMouseOut.IsEmpty()
   || !this.PopUp.IsEmpty()
   || !this.CloseUp.IsEmpty();
    },
    IsCallbacksEnabled: function () {
        return _aspxIsFunction(this.callBack);
    },
    ShouldHideExistingLoadingElements: function () {
        return false;
    },
    GetMenuElementId: function (indexPath) {
        return this.name + __aspxMMIdSuffix + indexPath + "_";
    },
    GetMenuMainElementId: function (indexPath) {
        return this.name + "_DXME" + indexPath + "_";
    },
    GetMenuBorderCorrectorElementId: function (indexPath) {
        return this.name + "_DXMBC" + indexPath + "_";
    },
    GetMenuIFrameElementId: function (indexPath) {
        return this.name + "_DXMIF" + this.GetMenuLevel(indexPath);
    },
    GetScrollAreaId: function (indexPath) {
        return this.name + "_DXSA" + indexPath;
    },
    GetMenuTemplateContainerID: function (indexPath) {
        return this.name + "_MTCNT" + indexPath;
    },
    GetScrollUpButtonId: function (indexPath) {
        return this.name + __aspxSBIdSuffix + indexPath + __aspxSBUIdEnd;
    },
    GetScrollDownButtonId: function (indexPath) {
        return this.name + __aspxSBIdSuffix + indexPath + __aspxSBDIdEnd;
    },
    GetItemElementId: function (indexPath) {
        return this.name + __aspxMIIdSuffix + indexPath + "_";
    },
    GetItemContentElementId: function (indexPath) {
        return this.GetItemElementId(indexPath) + "T";
    },
    GetItemPopOutElementId: function (indexPath) {
        return this.GetItemElementId(indexPath) + "P";
    },
    GetItemImageId: function (indexPath) {
        return this.GetItemElementId(indexPath) + "Img";
    },
    GetItemPopOutImageId: function (indexPath) {
        return this.GetItemElementId(indexPath) + "PImg";
    },
    GetItemIndentElementId: function (indexPath) {
        return this.GetItemElementId(indexPath) + "II";
    },
    GetItemSeparatorElementId: function (indexPath) {
        return this.GetItemElementId(indexPath) + "IS";
    },
    GetMenuElement: function (indexPath) {
        return _aspxGetElementById(this.GetMenuElementId(indexPath));
    },
    GetMenuIFrameElement: function (indexPath) {
        var elementId = this.GetMenuIFrameElementId(indexPath);
        var element = _aspxGetElementById(elementId);
        if (!element && this.createIFrames)
            return this.CreateIFrameElement(elementId);
        return element;
    },
    CreateIFrameElement: function (elementId) {
        var element = document.createElement("IFRAME");
        _aspxSetAttribute(element, "id", elementId);
        _aspxSetAttribute(element, "src", "javascript:false");
        _aspxSetAttribute(element, "scrolling", "no");
        _aspxSetAttribute(element, "frameborder", "0");
        element.style.position = "absolute";
        element.style.display = "none";
        element.style.zIndex = "19997";
        element.style.filter = "progid:DXImageTransform.Microsoft.Alpha(Style=0, Opacity=0)";
        _aspxInsertElementAfter(element, this.GetMainElement());
        return element;
    },
    GetMenuBorderCorrectorElement: function (indexPath) {
        return _aspxGetElementById(this.GetMenuBorderCorrectorElementId(indexPath));
    },
    GetMenuMainCell: function (element) {
        return this.GetMenuMainTable(element);
    },
    GetMenuMainTable: function (element) {
        var indexPath = this.GetIndexPathById(element.id, true);
        var shadowTable = _aspxGetElementById(this.GetMenuMainElementId(indexPath));
        return shadowTable != null ? shadowTable : element;
    },
    GetScrollAreaElement: function (indexPath) {
        return _aspxGetElementById(this.GetScrollAreaId(indexPath));
    },
    GetScrollContentItemsOuterContainer: function (indexPath) {
        return _aspxGetChildByTagName(this.GetScrollAreaElement(indexPath), "UL", 0);
    },
    GetScrollContentItemsContainer: function (indexPath) {
        return _aspxGetChildByTagName(this.GetScrollAreaElement(indexPath), "UL", 0);
    },
    GetScrollUpButtonElement: function (indexPath) {
        return _aspxGetElementById(this.GetScrollUpButtonId(indexPath));
    },
    GetScrollDownButtonElement: function (indexPath) {
        return _aspxGetElementById(this.GetScrollDownButtonId(indexPath));
    },
    GetItemElement: function (indexPath) {
        return _aspxGetElementById(this.GetItemElementId(indexPath));
    },
    GetItemTemplateElement: function (indexPath) {
        return this.GetItemTextTemplateContainer(indexPath);
    },
    GetItemTemplateContainer: function (indexPath) {
        return this.GetItemElement(indexPath);
    },
    GetItemTextTemplateContainer: function (indexPath) {
        return this.GetItemContentElement(indexPath);
    },
    GetItemContentElement: function (indexPath) {
        return _aspxGetElementById(this.GetItemContentElementId(indexPath));
    },
    GetItemPopOutElement: function (indexPath) {
        return _aspxGetElementById(this.GetItemPopOutElementId(indexPath));
    },
    GetSelectedItemInputElement: function () {
        return _aspxGetElementById(this.name + "SI");
    },
    GetCheckedItemsInputElement: function () {
        return _aspxGetElementById(this.name + "CI");
    },
    GetPopOutElements: function () {
        var elements = _aspxGetDescendantNodesByClassName(this.GetMainElement(), "dxm-popOut");
        for (var indexPath in this.renderData) {
            var menuElement = this.GetMenuElement(indexPath);
            if (menuElement)
                elements = elements.concat(_aspxGetDescendantNodesByClassName(menuElement, "dxm-popOut"));
        }
        return elements;
    },
    GetPopOutImages: function () {
        var elements = _aspxGetDescendantNodesByClassName(this.GetMainElement(), "dxm-pImage");
        for (var indexPath in this.renderData) {
            var menuElement = this.GetMenuElement(indexPath);
            if (menuElement)
                elements = elements.concat(_aspxGetDescendantNodesByClassName(menuElement, "dxm-pImage"));
        }
        return elements;
    },
    GetSubMenuXPosition: function (indexPath) {
        var pos = this.GetLiteSubMenuXPosition(indexPath);
        if (__aspxWebKitFamily && !this.IsParentElementPositionStatic(indexPath))
            pos -= document.body.offsetLeft;
        return pos;
    },
    GetLiteSubMenuXPosition: function (indexPath) {
        var itemElement = this.GetItemElement(indexPath);
        return _aspxGetAbsoluteX(itemElement)
   + (this.IsVertical(indexPath) ? itemElement.clientWidth + itemElement.clientLeft : 0);
    },
    GetSubMenuYPosition: function (indexPath) {
        var position = 0;
        var element = this.GetItemElement(indexPath);
        if (element != null) {
            if (this.IsVertical(indexPath)) {
                position = _aspxGetAbsoluteY(element);
            }
            else {
                if (__aspxNetscapeFamily || __aspxOpera && __aspxBrowserVersion >= 9 || __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome)
                    position = _aspxGetAbsoluteY(element) + element.offsetHeight - _aspxGetClientTop(element);
                else if (__aspxWebKitFamily)
                    position = _aspxGetAbsoluteY(element) + element.offsetHeight + element.offsetTop - _aspxGetClientTop(element);
                else
                    position = _aspxGetAbsoluteY(element) + element.clientHeight + _aspxGetClientTop(element);
            }
        }
        if (__aspxWebKitFamily && !this.IsParentElementPositionStatic(indexPath))
            position -= document.body.offsetTop;
        return position;
    },
    GetClientSubMenuXPosition: function (element, x, indexPath) {
        var itemInfo = new ASPxClientMenuItemInfo(this, indexPath);
        var itemWidth = itemInfo.clientWidth;
        var itemOffsetWidth = itemInfo.offsetWidth;
        var subMenuWidth = this.GetMenuMainCell(element).offsetWidth;
        var docClientWidth = _aspxGetDocumentClientWidth();
        if (this.IsVertical(indexPath)) {
            var left = x - _aspxGetDocumentScrollLeft();
            var right = left + subMenuWidth;
            var toLeftX = x - subMenuWidth - itemWidth;
            var toLeftLeft = left - subMenuWidth - itemWidth;
            var toLeftRight = right - subMenuWidth - itemWidth;
            if (this.IsCorrectionDisableMethodRequired(indexPath)) {
                return this.GetCorrectionDisabledResult(x, toLeftX);
            }
            if (this.popupToLeft) {
                if (toLeftLeft > this.maxHorizontalOverlap) {
                    return toLeftX;
                }
                if (docClientWidth - right > this.maxHorizontalOverlap || !this.rtl) {
                    this.popupToLeft = false;
                    return x;
                }
                return toLeftX;
            }
            else {
                if (docClientWidth - right > this.maxHorizontalOverlap) {
                    return x;
                }
                if (toLeftLeft > this.maxHorizontalOverlap || this.rtl) {
                    this.popupToLeft = true;
                    return toLeftX;
                }
                return x;
            }
        }
        else {
            var left = x - _aspxGetDocumentScrollLeft();
            var right = left + subMenuWidth + this.GetShadowWidth();
            var toLeftX = x - subMenuWidth + itemOffsetWidth;
            var toLeftLeft = left - subMenuWidth + itemOffsetWidth;
            var toLeftRight = right - subMenuWidth + itemOffsetWidth;
            if (this.popupToLeft) {
                if (toLeftLeft < 0 && toLeftLeft < docClientWidth - right) {
                    this.popupToLeft = false;
                    return x;
                }
                else
                    return toLeftX;
            }
            else {
                if (docClientWidth - right < 0 && docClientWidth - right < toLeftLeft) {
                    this.popupToLeft = true;
                    return toLeftX;
                }
                else
                    return x;
            }
        }
    },
    GetClientSubMenuYPosition: function (element, y, indexPath) {
        var itemInfo = new ASPxClientMenuItemInfo(this, indexPath);
        var itemHeight = itemInfo.offsetHeight;
        var itemOffsetHeight = itemInfo.offsetHeight;
        var subMenuHeight = this.GetMenuMainCell(element).offsetHeight;
        var menuItemTop = y - _aspxGetDocumentScrollTop();
        var subMenuBottom = menuItemTop + subMenuHeight;
        var docClientHeight = _aspxGetDocumentClientHeight();
        var clientSubMenuYPos = y;
        if (this.IsVertical(indexPath)) {
            var notEnoughSpaceToShowDown = subMenuBottom > docClientHeight;
            var menuItemBottom = menuItemTop + itemHeight;
            if (menuItemBottom > docClientHeight) {
                menuItemBottom = docClientHeight;
                itemHeight = menuItemBottom - menuItemTop;
            }
            var notEnoughSpaceToShowUp = menuItemBottom < subMenuHeight;
            var subMenuIsFitToDisplayFrames = docClientHeight >= subMenuHeight;
            if (!subMenuIsFitToDisplayFrames) clientSubMenuYPos = y - menuItemTop;
            else if (notEnoughSpaceToShowDown) {
                if (notEnoughSpaceToShowUp) {
                    var docClientBottom = _aspxGetDocumentScrollTop() + docClientHeight;
                    clientSubMenuYPos = docClientBottom - this.GetShadowHeight() - subMenuHeight;
                } else
                    clientSubMenuYPos = y + itemHeight - subMenuHeight;
            }
        }
        else {
            if (this.IsHorizontalSubmenuNeedInversion(subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight))
                clientSubMenuYPos = y - subMenuHeight - itemHeight;
        }
        return clientSubMenuYPos;
    },
    IsHorizontalSubmenuNeedInversion: function (subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight) {
        return subMenuBottom > docClientHeight && menuItemTop - subMenuHeight - itemHeight > docClientHeight - subMenuBottom;
    },
    IsCorrectionDisableMethodRequired: function (indexPath) {
        return false;
    },
    GetShadowWidth: function () {
        return this.shadowVisible ? __aspxPopupShadowWidth : 0;
    },
    GetShadowHeight: function () {
        return this.shadowVisible ? __aspxPopupShadowHeight : 0;
    },
    HasChildren: function (indexPath) {
        return (this.GetMenuElement(indexPath) != null);
    },
    IsVertical: function (indexPath) {
        return true;
    },
    IsRootItem: function (indexPath) {
        return this.GetMenuLevel(indexPath) <= 1;
    },
    IsParentElementPositionStatic: function (indexPath) {
        return this.IsRootItem(indexPath);
    },
    GetItemIndexPath: function (indexes) {
        return aspxGetMenuCollection().GetItemIndexPath(indexes);
    },
    GetItemIndexes: function (indexPath) {
        return aspxGetMenuCollection().GetItemIndexes(indexPath);
    },
    GetItemIndexPathById: function (id) {
        return aspxGetMenuCollection().GetIndexPathById(id, __aspxMIIdSuffix);
    },
    GetMenuIndexPathById: function (id) {
        return aspxGetMenuCollection().GetIndexPathById(id, __aspxMMIdSuffix);
    },
    GetScrollButtonIndexPathById: function (id) {
        return aspxGetMenuCollection().GetIndexPathById(id, __aspxSBIdSuffix);
    },
    GetIndexPathById: function (id, checkMenu) {
        var indexPath = this.GetItemIndexPathById(id);
        if (indexPath == "" && checkMenu)
            indexPath = this.GetMenuIndexPathById(id);
        return indexPath;
    },
    GetMenuLevel: function (indexPath) {
        return aspxGetMenuCollection().GetMenuLevel(indexPath);
    },
    GetParentIndexPath: function (indexPath) {
        var indexes = this.GetItemIndexes(indexPath);
        indexes.length--;
        return (indexes.length > 0) ? this.GetItemIndexPath(indexes) : "";
    },
    GetFirstChildIndexPath: function (indexPath) {
        var indexes = this.GetItemIndexes(indexPath);
        indexes[indexes.length] = 0;
        var newIndexPath = this.GetItemIndexPath(indexes);
        return this.GetFirstSiblingIndexPath(newIndexPath);
    },
    GetFirstSiblingIndexPath: function (indexPath) {
        var indexes = this.GetItemIndexes(indexPath);
        var i = 0;
        while (true) {
            indexes[indexes.length - 1] = i;
            var newIndexPath = this.GetItemIndexPath(indexes);
            if (!this.IsItemExist(newIndexPath))
                return null;
            if (this.IsItemExistAndEnabled(newIndexPath))
                return newIndexPath;
            i++;
        }
        return null;
    },
    GetLastSiblingIndexPath: function (indexPath) {
        var indexes = this.GetItemIndexes(indexPath);
        var newIndexPath = null;
        var i = indexes[indexes.length - 1] + 1;
        while (true) {
            indexes[indexes.length - 1] = i;
            var nextIndexPath = this.GetItemIndexPath(indexes);
            if (!this.IsItemExist(nextIndexPath))
                return newIndexPath;
            if (this.IsItemExistAndEnabled(nextIndexPath))
                newIndexPath = nextIndexPath;
            i++;
        }
        return null;
    },
    GetNextSiblingIndexPath: function (indexPath) {
        if (this.IsLastItem(indexPath)) return null;
        var indexes = this.GetItemIndexes(indexPath);
        var i = indexes[indexes.length - 1] + 1;
        while (true) {
            indexes[indexes.length - 1] = i;
            var newIndexPath = this.GetItemIndexPath(indexes);
            if (!this.IsItemExist(newIndexPath))
                return null;
            if (this.IsItemExistAndEnabled(newIndexPath))
                return newIndexPath;
            i++;
        }
        return null;
    },
    GetPrevSiblingIndexPath: function (indexPath) {
        if (this.IsFirstItem(indexPath)) return null;
        var indexes = this.GetItemIndexes(indexPath);
        var i = indexes[indexes.length - 1] - 1;
        while (true) {
            indexes[indexes.length - 1] = i;
            var newIndexPath = this.GetItemIndexPath(indexes);
            if (!this.IsItemExist(newIndexPath))
                return null;
            if (this.IsItemExistAndEnabled(newIndexPath))
                return newIndexPath;
            i--;
        }
        return null;
    },
    IsLastElement: function (element) {
        return element && (!element.nextSibling || !element.nextSibling.tagName);
    },
    IsLastItem: function (indexPath) {
        var itemElement = this.GetItemElement(indexPath);
        return this.IsLastElement(itemElement);
    },
    IsFirstElement: function (element) {
        return element && (!element.previousSibling || !element.previousSibling.tagName);
    },
    IsFirstItem: function (indexPath) {
        var itemElement = this.GetItemElement(indexPath);
        return this.IsFirstElement(itemElement);
    },
    IsItemExist: function (indexPath) {
        return !!this.GetItemContentElement(indexPath);
    },
    IsItemExistAndEnabled: function (indexPath) {
        var itemElement = this.GetItemElement(indexPath);
        return itemElement && !itemElement.clientDisabled;
    },
    GetClientSubMenuPos: function (element, indexPath, pos, isXPos) {
        if (!_aspxGetIsValidPosition(pos)) {
            pos = isXPos ? this.GetSubMenuXPosition(indexPath) :
    this.GetSubMenuYPosition(indexPath);
        }
        var clientPos = isXPos ? this.GetClientSubMenuXPosition(element, pos, indexPath) :
   this.GetClientSubMenuYPosition(element, pos, indexPath);
        var isInverted = pos != clientPos;
        var offset = isXPos ? this.GetSubMenuXOffset(indexPath) : this.GetSubMenuYOffset(indexPath);
        clientPos += isInverted ? -offset : offset;
        clientPos -= _aspxGetPositionElementOffset(this.GetMenuElement(indexPath), isXPos);
        return new _aspxPopupPosition(clientPos, isInverted);
    },
    GetSubMenuXOffset: function (indexPath) {
        if (indexPath == "")
            return 0;
        else if (this.IsRootItem(indexPath)) {
            if (this.IsFirstItem(indexPath))
                return this.rootSubMenuFIXOffset;
            else if (this.IsLastItem(indexPath))
                return this.rootSubMenuLIXOffset;
            else
                return this.rootSubMenuXOffset;
        }
        else {
            if (this.IsFirstItem(indexPath))
                return this.subMenuFIXOffset;
            else if (this.IsLastItem(indexPath))
                return this.subMenuLIXOffset;
            else
                return this.subMenuXOffset;
        }
    },
    GetSubMenuYOffset: function (indexPath) {
        if (indexPath == "")
            return 0;
        else if (this.IsRootItem(indexPath)) {
            if (this.IsFirstItem(indexPath))
                return this.rootSubMenuFIYOffset;
            else if (this.IsLastItem(indexPath))
                return this.rootSubMenuLIYOffset;
            else
                return this.rootSubMenuYOffset;
        }
        else {
            if (this.IsFirstItem(indexPath))
                return this.subMenuFIYOffset;
            else if (this.IsLastItem(indexPath))
                return this.subMenuLIYOffset;
            else
                return this.subMenuYOffset;
        }
    },
    StartScrolling: function (buttonId, delay, step) {
        var indexPath = this.GetScrollButtonIndexPathById(buttonId);
        var level = this.GetMenuLevel(indexPath);
        aspxGetMenuCollection().DoHidePopupMenus(null, level, this.name, false, "");
        var direction = (buttonId.lastIndexOf(__aspxSBDIdEnd) == buttonId.length - __aspxSBDIdEnd.length) ? 1 : -1;
        var scrollHelper = this.scrollHelpers[indexPath];
        if (scrollHelper) scrollHelper.StartScrolling(direction, delay, step);
    },
    StopScrolling: function (buttonId) {
        var indexPath = this.GetScrollButtonIndexPathById(buttonId);
        var scrollHelper = this.scrollHelpers[indexPath];
        if (scrollHelper) scrollHelper.StopScrolling();
    },
    ClearAppearTimer: function () {
        aspxGetMenuCollection().ClearAppearTimer();
    },
    ClearDisappearTimer: function () {
        aspxGetMenuCollection().ClearDisappearTimer();
    },
    IsAppearTimerActive: function () {
        return aspxGetMenuCollection().IsAppearTimerActive();
    },
    IsDisappearTimerActive: function () {
        return aspxGetMenuCollection().IsDisappearTimerActive();
    },
    SetAppearTimer: function (indexPath) {
        aspxGetMenuCollection().SetAppearTimer(this.name, indexPath, this.appearAfter);
    },
    SetDisappearTimer: function () {
        aspxGetMenuCollection().SetDisappearTimer(this.name, this.disappearAfter);
    },
    IsDropDownItem: function (indexPath) {
        return _aspxElementCssClassContains(this.GetItemElement(indexPath), ASPxClientMenuCssClasses.ItemDropDownMode);
    },
    DoItemClick: function (indexPath, hasItemLink, htmlEvent) {
        var processOnServer = this.RaiseItemClick(indexPath, htmlEvent);
        if (processOnServer && !hasItemLink)
            this.SendPostBack("CLICK:" + indexPath);
        else {
            this.ClearDisappearTimer();
            this.ClearAppearTimer();
            if (!this.HasChildren(indexPath) || this.IsDropDownItem(indexPath))
                aspxGetMenuCollection().DoHidePopupMenus(null, -1, this.name, false, "");
            else if (this.IsItemEnabled(indexPath) && !this.IsDropDownItem(indexPath))
                this.ShowSubMenu(indexPath);
        }
    },
    HasContent: function (mainCell) {
        for (var i = 0; i < mainCell.childNodes.length; i++)
            if (mainCell.childNodes[i].tagName)
                return true;
        return false;
    },
    DoShowPopupMenu: function (element, x, y, indexPath) {
        var parent = this.GetItemByIndexPath(indexPath);
        var menuElement = this.GetMenuMainCell(element);
        var popupMenuHasVisibleContent = menuElement && ASPxClientMenuLiteRenderHelper.HasSubMenuTemplate(menuElement) || parent && this.HasVisibleItems(parent);
        if (popupMenuHasVisibleContent === false)
            return;
        if (element && this.IsCallbacksEnabled())
            this.ShowLoadingPanelInMenu(element);
        _aspxSetStyles(element, { left: __aspxInvalidPosition, top: __aspxInvalidPosition });
        _aspxSetElementDisplay(element, true);
        if (parent) {
            for (var i = 0; i < parent.GetItemCount(); i++) {
                var item = parent.GetItem(i);
                this.SetPopOutElementVisible(item.indexPath, this.HasVisibleItems(item));
            }
        }
        ASPxClientMenuLiteRenderHelper.CalculateSubMenu(this, element);
        if (this.popupCount == 0) this.popupToLeft = this.rtl;
        var horizontalPopupPosition = this.GetClientSubMenuPos(element, indexPath, x, true);
        var verticalPopupPosition = this.GetClientSubMenuPos(element, indexPath, y, false);
        var clientX = horizontalPopupPosition.position;
        var clientY = verticalPopupPosition.position;
        var toTheLeft = horizontalPopupPosition.isInverted;
        var toTheTop = verticalPopupPosition.isInverted;
        var scrollHelper = this.scrollHelpers[indexPath];
        if (scrollHelper) {
            var yClientCorrection = this.GetScrollSubMenuYCorrection(element, scrollHelper, clientY);
            if (yClientCorrection > 0) {
                clientY += yClientCorrection;
                verticalPopupPosition.position = clientY;
            }
        }
        var parentElement = this.GetItemContentElement(indexPath);
        var prevParentPos = _aspxGetAbsoluteX(parentElement);
        _aspxSetStyles(element, {
            left: clientX, top: clientY
        });
        if (__aspxIE && __aspxBrowserMajorVersion > 7 && _aspxIsElementRightToLeft(document.body)) {
            _aspxSetElementDisplay(element, false);
            _aspxSetElementDisplay(element, true);
        }
        clientX += _aspxGetAbsoluteX(parentElement) - prevParentPos;
        if (this.enableAnimation) {
            this.StartAnimation(element, indexPath, horizontalPopupPosition, verticalPopupPosition);
        }
        else {
            _aspxSetStyles(element, { left: clientX, top: clientY });
            _aspxSetElementVisibility(element, true);
            this.DoShowPopupMenuIFrame(element, clientX, clientY, __aspxInvalidDimension, __aspxInvalidDimension, indexPath);
            this.DoShowPopupMenuBorderCorrector(element, clientX, clientY, indexPath, toTheLeft, toTheTop);
        }
        aspxGetMenuCollection().RegisterVisiblePopupMenu(this.name, element.id);
        this.popupCount++;
        aspxGetControlCollection().AdjustControls(element);
        this.CorrectVerticalAlignment(_aspxAdjustHeight, this.GetPopOutElements, "PopOut");
        this.CorrectVerticalAlignment(_aspxAdjustVerticalMargins, this.GetPopOutImages, "PopOutImg");
        this.RaisePopUp(indexPath);
    },
    ShowLoadingPanelInMenu: function (element) {
        var mainCell = this.GetMenuMainCell(element);
        if (mainCell && !this.HasContent(mainCell))
            this.CreateLoadingPanelInsideContainer(mainCell);
    },
    GetScrollSubMenuYCorrection: function (element, scrollHelper, clientY) {
        var absoluteClientY = clientY + _aspxGetPositionElementOffset(element);
        var excessTop = this.GetScrollExcessTop(absoluteClientY);
        var excessBottom = this.GetScrollExcessBottom(element, absoluteClientY);
        var correction = 0;
        if (excessTop > 0)
            correction += excessTop + this.scrollVertOffset;
        if (excessBottom > 0 && (absoluteClientY + correction == _aspxGetDocumentScrollTop())) {
            excessBottom += this.scrollVertOffset;
            correction += this.scrollVertOffset;
        }
        this.PrepareScrolling(element, scrollHelper, excessTop, excessBottom);
        return correction;
    },
    GetScrollExcessTop: function (clientY) {
        return _aspxGetDocumentScrollTop() - clientY;
    },
    GetScrollExcessBottom: function (element, clientY) {
        _aspxSetElementDisplay(element, false);
        var docHeight = _aspxGetDocumentClientHeight();
        _aspxSetElementDisplay(element, true);
        return clientY + element.offsetHeight - _aspxGetDocumentScrollTop() - docHeight;
    },
    PrepareScrolling: function (element, scrollHelper, excessTop, excessBottom) {
        scrollHelper.Initialize();
        var corrector = element.offsetHeight - scrollHelper.GetScrollAreaHeight() + this.scrollVertOffset;
        if (excessTop > 0)
            scrollHelper.Calculate(element.offsetHeight - excessTop - corrector);
        if (excessBottom > 0)
            scrollHelper.Calculate(element.offsetHeight - excessBottom - corrector);
    },
    DoShowPopupMenuIFrame: function (element, x, y, width, height, indexPath) {
        if (!this.renderIFrameForPopupElements) return;
        var iFrame = element.overflowElement;
        if (!iFrame) {
            iFrame = this.GetMenuIFrameElement(indexPath);
            element.overflowElement = iFrame;
        }
        if (iFrame) {
            var cell = this.GetMenuMainCell(element);
            if (width < 0)
                width = cell.offsetWidth;
            if (height < 0)
                height = cell.offsetHeight;
            _aspxSetStyles(iFrame, {
                width: width, height: height,
                left: x, top: y, display: ""
            });
        }
    },
    DoShowPopupMenuBorderCorrector: function (element, x, y, indexPath, toTheLeft, toTheTop) {
        var borderCorrectorElement = this.GetMenuBorderCorrectorElement(indexPath);
        if (borderCorrectorElement) {
            var params = this.GetPopupMenuBorderCorrectorPositionAndSize(element, x, y, indexPath, toTheLeft, toTheTop);
            var itemCell = this.GetItemContentElement(indexPath);
            var popOutImageCell = this.GetItemPopOutElement(indexPath);
            if (__aspxIE && __aspxBrowserMajorVersion == 9) {
                var isVertical = this.IsVertical(indexPath);
                var itemBoundCoord = itemCell.getBoundingClientRect()[isVertical ? 'bottom' : 'right'];
                var itemBorderWidth = _aspxPxToInt(_aspxGetCurrentStyle(itemCell)[isVertical ? 'borderBottomWidth' : 'borderRightWidth']);
                if (popOutImageCell != null) {
                    var popOutImageBoundCoord = popOutImageCell.getBoundingClientRect()[isVertical ? 'bottom' : 'right'];
                    if (popOutImageBoundCoord > itemBoundCoord) {
                        itemBoundCoord = popOutImageBoundCoord;
                        itemBorderWidth = _aspxPxToInt(_aspxGetCurrentStyle(popOutImageCell)[isVertical ? 'borderBottomWidth' : 'borderRightWidth']);
                    }
                }
                var menu = this.GetMainElement();
                itemBoundCoord -= Math.min(menu.getBoundingClientRect()[isVertical ? 'top' : 'left'], _aspxGetPositionElementOffset(menu, !isVertical));
                if (isVertical) {
                    var bottomsDifference = this.GetItemElement(indexPath).getBoundingClientRect().bottom -
      this.GetMenuElement(indexPath).getBoundingClientRect().bottom;
                    itemBoundCoord -= bottomsDifference > 0 && bottomsDifference;
                }
                var borderCorrectorBoundCoord = isVertical ? params.top + params.height : params.left + params.width;
                if (itemBoundCoord - borderCorrectorBoundCoord != itemBorderWidth) {
                    borderCorrectorBoundCoord = itemBoundCoord - itemBorderWidth;
                    if (isVertical)
                        params.height = borderCorrectorBoundCoord - params.top;
                    else
                        params.width = borderCorrectorBoundCoord - params.left;
                }
            }
            _aspxSetStyles(borderCorrectorElement, {
                width: params.width, height: params.height,
                left: params.left, top: params.top,
                display: "", visibility: "visible"
            });
            element.borderCorrectorElement = borderCorrectorElement;
        }
    },
    GetPopupMenuBorderCorrectorPositionAndSize: function (element, x, y, indexPath, toTheLeft, toTheTop) {
        var result = {};
        var itemInfo = new ASPxClientMenuItemInfo(this, indexPath);
        var menuXOffset = _aspxGetClientLeft(this.GetMenuMainCell(element));
        var menuYOffset = _aspxGetClientTop(this.GetMenuMainCell(element));
        var mainCell = this.GetMenuMainCell(element);
        var menuClientWidth = mainCell.clientWidth;
        var menuClientHeight = mainCell.clientHeight;
        if (this.IsVertical(indexPath)) {
            var commonClientHeight = itemInfo.clientHeight < menuClientHeight
    ? itemInfo.clientHeight
    : menuClientHeight;
            result.width = menuXOffset;
            result.height = commonClientHeight + itemInfo.clientTop - menuYOffset;
            result.left = x;
            if (toTheLeft)
                result.left += menuClientWidth + menuXOffset;
            result.top = y + menuYOffset;
            if (toTheTop)
                result.top += menuClientHeight - result.height;
        }
        else {
            var itemWidth = itemInfo.clientWidth;
            if (this.IsDropDownItem(indexPath))
                itemWidth = this.GetItemContentElement(indexPath).clientWidth;
            var commonClientWidth = itemWidth < menuClientWidth
    ? itemWidth
    : menuClientWidth;
            result.width = commonClientWidth + itemInfo.clientLeft - menuXOffset;
            result.height = menuYOffset;
            result.left = x + menuXOffset;
            if (toTheLeft)
                result.left += menuClientWidth - result.width;
            result.top = y;
            if (toTheTop)
                result.top += menuClientHeight + menuYOffset;
        }
        return result;
    },
    DoHidePopupMenu: function (evt, element) {
        this.DoHidePopupMenuBorderCorrector(element);
        this.DoHidePopupMenuIFrame(element);
        _aspxStopAnimation(element);
        _aspxSetElementVisibility(element, false);
        _aspxSetElementDisplay(element, false);
        this.CancelSubMenuItemHoverItem(element);
        aspxGetMenuCollection().UnregisterVisiblePopupMenu(this.name, element.id);
        this.popupCount--;
        var indexPath = this.GetIndexPathById(element.id, true);
        var scrollHelper = this.scrollHelpers[indexPath];
        if (scrollHelper) {
            element.style.height = "";
            scrollHelper.ResetScrolling();
        }
        this.RaiseCloseUp(indexPath);
    },
    DoHidePopupMenuIFrame: function (element) {
        if (!this.renderIFrameForPopupElements) return;
        var iFrame = element.overflowElement;
        if (iFrame)
            _aspxSetElementDisplay(iFrame, false);
    },
    DoHidePopupMenuBorderCorrector: function (element) {
        var borderCorrectorElement = element.borderCorrectorElement;
        if (borderCorrectorElement) {
            _aspxSetElementVisibility(borderCorrectorElement, false);
            _aspxSetElementDisplay(borderCorrectorElement, false);
            element.borderCorrectorElement = null;
        }
    },
    SetHoverElement: function (element) {
        if (!this.IsStateControllerEnabled()) return;
        this.lockHoverEvents = true;
        aspxGetStateController().SetCurrentHoverElementBySrcElement(element);
        this.lockHoverEvents = false;
    },
    ApplySubMenuItemHoverItem: function (element, hoverItem, hoverElement) {
        if (!element.hoverItem && _aspxGetElementDisplay(element)) {
            var newHoverItem = hoverItem.Clone();
            element.hoverItem = newHoverItem;
            element.hoverElement = hoverElement;
            newHoverItem.Apply(hoverElement);
        }
    },
    CancelSubMenuItemHoverItem: function (element) {
        if (element.hoverItem) {
            element.hoverItem.Cancel(element.hoverElement);
            element.hoverItem = null;
            element.hoverElement = null;
        }
    },
    ShowSubMenu: function (indexPath) {
        var element = this.GetMenuElement(indexPath);
        if (element != null) {
            var level = this.GetMenuLevel(indexPath);
            aspxGetMenuCollection().DoHidePopupMenus(null, level - 1, this.name, false, element.id);
            if (!_aspxGetElementDisplay(element))
                this.DoShowPopupMenu(element, __aspxInvalidPosition, __aspxInvalidPosition, indexPath);
        }
        this.ClearAppearTimer();
    },
    SelectItem: function (indexPath) {
        if (!this.IsStateControllerEnabled()) return;
        var element = this.GetItemContentElement(indexPath);
        if (element != null)
            aspxGetStateController().SelectElementBySrcElement(element);
    },
    DeselectItem: function (indexPath) {
        if (!this.IsStateControllerEnabled()) return;
        var element = this.GetItemContentElement(indexPath);
        if (element != null) {
            var hoverItem = null;
            var hoverElement = null;
            var menuElement = this.GetMenuElement(indexPath);
            if (menuElement && menuElement.hoverItem) {
                hoverItem = menuElement.hoverItem;
                hoverElement = menuElement.hoverElement;
                this.CancelSubMenuItemHoverItem(menuElement);
            }
            aspxGetStateController().DeselectElementBySrcElement(element);
            if (menuElement != null && hoverItem != null)
                this.ApplySubMenuItemHoverItem(menuElement, hoverItem, hoverElement);
        }
    },
    InitializeSelectedItem: function () {
        if (!this.allowSelectItem) return;
        this.SelectItem(this.GetSelectedItemIndexPath());
    },
    GetSelectedItemIndexPath: function () {
        var inputElement = this.GetSelectedItemInputElement();
        if (inputElement != null)
            return inputElement.value;
        return "";
    },
    SetSelectedItemInternal: function (indexPath, modifyHotTrackSelection) {
        if (modifyHotTrackSelection)
            this.SetHoverElement(null);
        var inputElement = this.GetSelectedItemInputElement();
        if (inputElement != null) {
            this.DeselectItem(inputElement.value);
            inputElement.value = indexPath;
            var item = this.GetItemByIndexPath(indexPath);
            if (item == null || item.GetEnabled())
                this.SelectItem(inputElement.value);
        }
        if (modifyHotTrackSelection) {
            var element = this.GetItemContentElement(indexPath);
            if (element != null)
                this.SetHoverElement(element);
        }
    },
    InitializeCheckedItems: function () {
        if (!this.allowCheckItems) return;
        var inputElement = this.GetCheckedItemsInputElement();
        if (inputElement != null) {
            var indexPathes = inputElement.value.split(";");
            for (var i = 0; i < indexPathes.length; i++) {
                if (indexPathes[i] != "") {
                    this.checkedItems.push(indexPathes[i]);
                    this.SelectItem(indexPathes[i]);
                }
            }
        }
    },
    ChangeCheckedItem: function (indexPath) {
        this.SetHoverElement(null);
        var inputElement = this.GetCheckedItemsInputElement();
        if (inputElement != null) {
            var itemsGroup = this.GetItemsGroup(indexPath);
            if (itemsGroup != null) {
                if (itemsGroup.length > 1) {
                    if (!this.IsCheckedItem(indexPath)) {
                        for (var i = 0; i < itemsGroup.length; i++) {
                            if (itemsGroup[i] == indexPath) continue;
                            if (this.IsCheckedItem(itemsGroup[i])) {
                                _aspxArrayRemove(this.checkedItems, itemsGroup[i]);
                                this.DeselectItem(itemsGroup[i]);
                            }
                        }
                        this.SelectItem(indexPath);
                        this.checkedItems.push(indexPath);
                    }
                }
                else {
                    if (this.IsCheckedItem(indexPath)) {
                        _aspxArrayRemove(this.checkedItems, indexPath);
                        this.DeselectItem(indexPath);
                    }
                    else {
                        this.SelectItem(indexPath);
                        this.checkedItems.push(indexPath);
                    }
                }
                this.UpdateCheckedInputElement(inputElement);
            }
        }
        var element = this.GetItemContentElement(indexPath);
        if (element != null)
            this.SetHoverElement(element);
    },
    GetItemsGroup: function (indexPath) {
        for (var i = 0; i < this.itemCheckedGroups.length; i++) {
            if (_aspxArrayIndexOf(this.itemCheckedGroups[i], indexPath) > -1)
                return this.itemCheckedGroups[i];
        }
        return null;
    },
    IsCheckedItem: function (indexPath) {
        return _aspxArrayIndexOf(this.checkedItems, indexPath) > -1;
    },
    UpdateCheckedInputElement: function (inputElement) {
        var state = "";
        for (var i = 0; i < this.checkedItems.length; i++) {
            state += this.checkedItems[i];
            if (i < this.checkedItems.length - 1)
                state += ";";
        }
        inputElement.value = state;
    },
    GetAnimationVerticalDirection: function (indexPath, popupPosition) {
        var verticalDirection = (this.IsRootItem(indexPath) && !this.IsVertical(indexPath)) ? -1 : 0;
        if (popupPosition.isInverted) verticalDirection *= -1;
        return verticalDirection;
    },
    GetAnimationHorizontalDirection: function (indexPath, popupPosition) {
        var horizontalDirection = (this.IsRootItem(indexPath) && !this.IsVertical(indexPath)) ? 0 : -1;
        if (popupPosition.isInverted) horizontalDirection *= -1;
        return horizontalDirection;
    },
    StartAnimation: function (animationDivElement, indexPath, horizontalPopupPosition, verticalPopupPosition) {
        var element = this.GetMenuMainTable(animationDivElement);
        var clientX = horizontalPopupPosition.position;
        var clientY = verticalPopupPosition.position;
        _aspxInitAnimationDiv(animationDivElement, clientX, clientY);
        var verticalDirection = this.GetAnimationVerticalDirection(indexPath, verticalPopupPosition);
        var horizontalDirection = this.GetAnimationHorizontalDirection(indexPath, horizontalPopupPosition);
        var yPos = verticalDirection * element.offsetHeight;
        var xPos = horizontalDirection * element.offsetWidth;
        _aspxSetStyles(element, { left: xPos, top: yPos });
        _aspxSetElementVisibility(animationDivElement, true);
        this.DoShowPopupMenuIFrame(animationDivElement, clientX, clientY, 0, 0, indexPath);
        this.DoShowPopupMenuBorderCorrector(animationDivElement, clientX, clientY, indexPath,
   horizontalPopupPosition.isInverted, verticalPopupPosition.isInverted);
        _aspxStartSlideAnimation(animationDivElement, element, this.GetMenuIFrameElement(indexPath), this.slideAnimationDuration);
    },
    OnItemClick: function (indexPath, evt) {
        var sourceElement = _aspxGetEventSource(evt);
        var clickedLinkElement = _aspxGetParentByTagName(sourceElement, "A");
        var isLinkClicked = (clickedLinkElement != null && clickedLinkElement.href != __aspxAccessibilityEmptyUrl);
        var element = this.GetItemContentElement(indexPath);
        var linkElement = (element != null) ? (element.tagName === "A" ? element : _aspxGetChildByTagName(element, "A", 0)) : null;
        if (linkElement != null && linkElement.href == __aspxAccessibilityEmptyUrl)
            linkElement = null;
        if (this.allowSelectItem)
            this.SetSelectedItemInternal(indexPath, true);
        if (this.allowCheckItems)
            this.ChangeCheckedItem(indexPath);
        this.DoItemClick(indexPath, isLinkClicked || (linkElement != null), evt);
        if (!isLinkClicked && linkElement != null && !(__aspxWebKitTouchUI && this.HasChildren(indexPath)))
            _aspxNavigateByLink(linkElement);
    },
    OnItemDropDownClick: function (indexPath, evt) {
        if (this.IsItemEnabled(indexPath))
            this.ShowSubMenu(indexPath);
    },
    AfterItemOverAllowed: function (hoverItem) {
        return hoverItem.name != "" && !this.lockHoverEvents;
    },
    OnAfterItemOver: function (hoverItem, hoverElement) {
        if (!this.AfterItemOverAllowed(hoverItem)) return;
        if (!this.showSubMenus) {
            this.savedCallbackHoverItem = hoverItem;
            this.savedCallbackHoverElement = hoverElement;
            return;
        }
        this.ClearDisappearTimer();
        this.ClearAppearTimer();
        var indexPath = this.GetMenuIndexPathById(hoverItem.name);
        if (indexPath == "") {
            indexPath = this.GetItemIndexPathById(hoverItem.name);
            var canShowSubMenu = true;
            if (this.IsDropDownItem(indexPath)) {
                var popOutImageElement = this.GetItemPopOutElement(indexPath);
                if (popOutImageElement != null && popOutImageElement != hoverElement) {
                    hoverItem.needRefreshBetweenElements = true;
                    canShowSubMenu = false;
                }
            }
            if (canShowSubMenu) {
                if (hoverItem.enabled && hoverItem.kind == __aspxHoverItemKind) {
                    this.SetAppearTimer(indexPath);
                    this.RaiseItemMouseOver(indexPath);
                }
            }
        }
    },
    OnBeforeItemOver: function (hoverItem, hoverElement) {
        if (__aspxNetscapeFamily && _aspxIsExists(hoverElement.offsetParent) &&
    hoverElement.offsetParent.style.borderCollapse == "collapse") {
            hoverElement.offsetParent.style.borderCollapse = "separate";
            hoverElement.offsetParent.style.borderCollapse = "collapse";
        }
        var indexPath = this.GetItemIndexPathById(hoverItem.name);
        var element = this.GetMenuElement(indexPath);
        if (element) this.CancelSubMenuItemHoverItem(element);
    },
    OnItemOverTimer: function (indexPath) {
        var element = this.GetMenuElement(indexPath);
        if (element == null) {
            var level = this.GetMenuLevel(indexPath);
            aspxGetMenuCollection().DoHidePopupMenus(null, level - 1, this.name, false, "");
        }
        if (this.IsAppearTimerActive()) {
            this.ClearAppearTimer();
            if (this.GetItemContentElement(indexPath) != null || this.GetItemPopOutElement(indexPath) != null) {
                this.ShowSubMenu(indexPath);
            }
        }
    },
    OnBeforeItemDisabled: function (disabledItem, disabledElement) {
        this.ClearAppearTimer();
        var indexPath = this.GetItemIndexPathById(disabledElement.id);
        if (indexPath != "") {
            var element = this.GetMenuElement(indexPath);
            if (element != null) this.DoHidePopupMenu(null, element);
        }
    },
    OnAfterItemOut: function (hoverItem, hoverElement, newHoverElement) {
        if (!this.showSubMenus) {
            this.savedCallbackHoverItem = null;
            this.savedCallbackHoverElement = null;
        }
        if (hoverItem.name == "" || this.lockHoverEvents) return;
        if (hoverItem.IsChildElement(newHoverElement)) return;
        var indexPath = this.GetItemIndexPathById(hoverItem.name);
        var element = this.GetMenuElement(indexPath);
        this.ClearDisappearTimer();
        this.ClearAppearTimer();
        if (element == null || !_aspxGetIsParent(element, newHoverElement))
            this.SetDisappearTimer();
        if (element != null)
            this.ApplySubMenuItemHoverItem(element, hoverItem, hoverElement);
        if (indexPath != "")
            this.RaiseItemMouseOut(indexPath);
    },
    OnItemOutTimer: function () {
        if (this.IsDisappearTimerActive()) {
            this.ClearDisappearTimer();
            if (aspxGetMenuCollection().CheckFocusedElement())
                this.SetDisappearTimer();
            else
                this.OnHideByItemOut();
        }
    },
    OnHideByItemOut: function () {
        aspxGetMenuCollection().DoHidePopupMenus(null, 0, this.name, true, "");
    },
    OnFocusedItemKeyDown: function (evt, focusedItem, focusedElement) {
        var handled = false;
        var indexPath = this.GetItemIndexPathById(focusedItem.name);
        switch (evt.keyCode) {
            case ASPxKey.Tab: 
                {
                    handled = this.FocusNextTabItem(indexPath, evt.shiftKey);
                    break;
                }
            case ASPxKey.Down: 
                {
                    if (this.IsVertical(indexPath)) {
                        this.FocusNextItem(indexPath);
                    }
                    else {
                        this.ShowSubMenu(indexPath);
                        this.FocusItemByIndexPath(this.GetFirstChildIndexPath(indexPath));
                    }
                    handled = true;
                    break;
                }
            case ASPxKey.Up: 
                {
                    if (this.IsVertical(indexPath)) {
                        this.FocusPrevItem(indexPath);
                    }
                    else {
                        this.ShowSubMenu(indexPath);
                        this.FocusItemByIndexPath(this.GetFirstChildIndexPath(indexPath));
                    }
                    handled = true;
                    break;
                }
            case ASPxKey.Left: 
                {
                    if (this.IsVertical(indexPath)) {
                        var parentIndexPath = this.GetParentIndexPath(indexPath);
                        if (this.IsVertical(parentIndexPath)) {
                            this.FocusItemByIndexPath(parentIndexPath);
                        }
                        else {
                            this.FocusPrevItem(parentIndexPath);
                        }
                    }
                    else {
                        this.FocusPrevItem(indexPath);
                    }
                    handled = true;
                    break;
                }
            case ASPxKey.Right: 
                {
                    if (this.IsVertical(indexPath)) {
                        if (this.HasChildren(indexPath)) {
                            this.ShowSubMenu(indexPath);
                            this.FocusItemByIndexPath(this.GetFirstChildIndexPath(indexPath));
                        }
                        else {
                            while (!this.IsRootItem(indexPath))
                                indexPath = this.GetParentIndexPath(indexPath);
                            this.FocusNextItem(indexPath);
                        }
                    }
                    else {
                        this.FocusNextItem(indexPath);
                    }
                    handled = true;
                    break;
                }
            case ASPxKey.Esc: 
                {
                    var parentIndexPath = this.GetParentIndexPath(indexPath);
                    this.FocusItemByIndexPath(parentIndexPath);
                    var element = this.GetMenuElement(parentIndexPath);
                    if (element != null) {
                        this.DoHidePopupMenu(null, element);
                        handled = true;
                    }
                }
        }
        if (handled)
            _aspxPreventEventAndBubble(evt);
    },
    FocusItemByIndexPath: function (indexPath) {
        var element = this.GetItemElement(indexPath);
        var link = _aspxGetChildByTagName(element, "A", 0);
        if (link != null) _aspxSetFocus(link);
    },
    FocusNextTabItem: function (indexPath, shiftKey) {
        if (this.IsRootItem(indexPath)) return false;
        while (true) {
            if (this.IsRootItem(indexPath)) {
                if (!shiftKey) {
                    if (this.GetNextSiblingIndexPath(indexPath) != null) {
                        this.FocusNextItem(indexPath);
                        return true;
                    }
                }
                else {
                    if (this.GetPrevSiblingIndexPath(indexPath) != null) {
                        this.FocusPrevItem(indexPath);
                        return true;
                    }
                }
                break;
            }
            else {
                if (!shiftKey) {
                    if (this.GetNextSiblingIndexPath(indexPath) == null)
                        indexPath = this.GetParentIndexPath(indexPath);
                    else {
                        this.FocusNextItem(indexPath);
                        return true;
                    }
                }
                else {
                    if (this.GetPrevSiblingIndexPath(indexPath) == null)
                        indexPath = this.GetParentIndexPath(indexPath);
                    else {
                        this.FocusPrevItem(indexPath);
                        return true;
                    }
                }
            }
        }
        return false;
    },
    FocusNextItem: function (indexPath) {
        var newIndexPath = this.GetNextSiblingIndexPath(indexPath);
        if (newIndexPath == null)
            newIndexPath = this.GetFirstSiblingIndexPath(indexPath);
        if (indexPath != newIndexPath)
            this.FocusItemByIndexPath(newIndexPath);
    },
    FocusPrevItem: function (indexPath) {
        var newIndexPath = this.GetPrevSiblingIndexPath(indexPath);
        if (newIndexPath == null)
            newIndexPath = this.GetLastSiblingIndexPath(indexPath);
        if (indexPath != newIndexPath)
            this.FocusItemByIndexPath(newIndexPath);
    },
    TryFocusItem: function (itemIndex) {
        var item = this.GetItem(itemIndex);
        if (item.GetVisible()) {
            this.FocusItemByIndexPath(item.GetIndexPath());
            return true;
        }
        return false;
    },
    Focus: function () {
        if (this.rootItem != null) {
            for (var i = 0; i < this.GetItemCount(); i++) {
                if (this.TryFocusItem(i))
                    return true;
            }
        }
        else
            this.FocusNextItem("-1");
    },
    FocusLastItem: function () {
        if (this.rootItem != null) {
            for (var i = this.GetItemCount() - 1; i >= 0; i--) {
                if (this.TryFocusItem(i))
                    return true;
            }
        }
        else
            this.FocusPrevItem(this.GetItemCount() - 1);
    },
    OnCallback: function (result) {
        _aspxInitializeScripts();
        this.InitializeScrollableMenus();
        for (var indexPath in result) {
            var menuElement = this.GetMenuElement(indexPath);
            if (menuElement) {
                if (aspxGetMenuCollection().IsSubMenuVisible(menuElement.id)) {
                    this.ShowPopupSubMenuAfterCallback(menuElement, result[indexPath]);
                } else {
                    this.SetSubMenuInnerHtml(menuElement, result[indexPath]);
                }
            }
        }
        this.ClearVerticalAlignedElementsCache("PopOut");
        this.ClearVerticalAlignedElementsCache("PopOutImg");
        this.CorrectVerticalAlignment(_aspxAdjustHeight, this.GetPopOutElements, "PopOut");
        this.CorrectVerticalAlignment(_aspxAdjustVerticalMargins, this.GetPopOutImages, "PopOutImg");
        this.InitializeInternal(false);
        if (!this.showSubMenus) {
            this.showSubMenus = true;
            if (this.savedCallbackHoverItem != null && this.savedCallbackHoverElement != null)
                this.OnAfterItemOver(this.savedCallbackHoverItem, this.savedCallbackHoverElement);
            this.savedCallbackHoverItem = null;
            this.savedCallbackHoverElement = null;
        }
    },
    SetSubMenuInnerHtml: function (menuElement, html) {
        _aspxSetInnerHtml(this.GetMenuMainCell(menuElement), html);
        ASPxClientMenuLiteRenderHelper.InlineInitializeSubMenuMenuElement(this, menuElement);
        ASPxClientMenuLiteRenderHelper.CalculateSubMenu(this, menuElement);
    },
    ShowPopupSubMenuAfterCallback: function (element, callbackResult) {
        var indexPath = this.GetIndexPathById(element.id, true);
        var currentX = _aspxPxToInt(element.style.left);
        var currentY = _aspxPxToInt(element.style.top);
        var showedToTheTop = this.ShowedToTheTop(element, indexPath);
        var showedToTheLeft = this.ShowedToTheLeft(element, indexPath);
        _aspxSetStyles(element, {
            left: __aspxInvalidPosition, top: __aspxInvalidPosition
        });
        this.SetSubMenuInnerHtml(element, callbackResult);
        var vertPos = this.GetClientSubMenuPos(element, indexPath, __aspxInvalidPosition, false);
        var clientY = vertPos.position;
        var toTheTop = vertPos.isInverted;
        if (!this.IsVertical(indexPath) && showedToTheTop != toTheTop) {
            clientY = currentY;
            toTheTop = showedToTheTop;
        }
        var scrollHelper = this.scrollHelpers[indexPath];
        if (scrollHelper) {
            var yClientCorrection = this.GetScrollSubMenuYCorrection(element, scrollHelper, clientY);
            if (yClientCorrection > 0)
                clientY += yClientCorrection;
        }
        _aspxSetStyles(element, {
            left: currentX, top: clientY
        });
        this.DoShowPopupMenuIFrame(element, currentX, clientY, __aspxInvalidDimension, __aspxInvalidDimension, indexPath);
        this.DoShowPopupMenuBorderCorrector(element, currentX, clientY, indexPath, showedToTheLeft, toTheTop);
        aspxGetControlCollection().AdjustControls(element);
    },
    ShowedToTheTop: function (element, indexPath) {
        var currentY = _aspxPxToInt(element.style.top);
        var parentBottomY = this.GetSubMenuYPosition(indexPath);
        return currentY < parentBottomY;
    },
    ShowedToTheLeft: function (element, indexPath) {
        var currentX = _aspxPxToInt(element.style.left);
        var parentX = this.GetSubMenuXPosition(indexPath);
        return currentX < parentX;
    },
    CreateItems: function (itemsProperties) {
        var itemType = this.GetClientItemType();
        this.rootItem = new itemType(this, null, 0, "");
        this.rootItem.CreateItems(itemsProperties);
    },
    GetClientItemType: function () {
        return ASPxClientMenuItem;
    },
    GetItemByIndexPath: function (indexPath) {
        var item = this.rootItem;
        if (indexPath != "" && item != null) {
            var indexes = this.GetItemIndexes(indexPath);
            for (var i = 0; i < indexes.length; i++)
                item = item.GetItem(indexes[i]);
        }
        return item;
    },
    SetItemChecked: function (indexPath, checked) {
        var inputElement = this.GetCheckedItemsInputElement();
        if (inputElement != null) {
            var itemsGroup = this.GetItemsGroup(indexPath);
            if (itemsGroup != null) {
                if (!checked && this.IsCheckedItem(indexPath)) {
                    _aspxArrayRemove(this.checkedItems, indexPath);
                    this.DeselectItem(indexPath);
                }
                else if (checked && !this.IsCheckedItem(indexPath)) {
                    if (itemsGroup.length > 1) {
                        for (var i = 0; i < itemsGroup.length; i++) {
                            if (itemsGroup[i] == indexPath) continue;
                            if (this.IsCheckedItem(itemsGroup[i])) {
                                _aspxArrayRemove(this.checkedItems, itemsGroup[i]);
                                this.DeselectItem(itemsGroup[i]);
                            }
                        }
                    }
                    this.SelectItem(indexPath);
                    this.checkedItems.push(indexPath);
                }
                this.UpdateCheckedInputElement(inputElement);
            }
        }
    },
    ChangeItemEnabledAttributes: function (indexPath, enabled) {
        ASPxClientMenuLiteRenderHelper.ChangeItemEnabledAttributes(this.GetItemElement(indexPath), enabled);
    },
    IsItemEnabled: function (indexPath) {
        var item = this.GetItemByIndexPath(indexPath);
        return (item != null) ? item.GetEnabled() : true;
    },
    SetItemEnabled: function (indexPath, enabled, initialization) {
        if (indexPath == "" || !this.GetItemByIndexPath(indexPath).enabled) return;
        if (!enabled) {
            if (this.GetSelectedItemIndexPath() == indexPath)
                this.DeselectItem(indexPath);
        }
        if (!initialization || !enabled)
            this.ChangeItemEnabledStateItems(indexPath, enabled);
        this.ChangeItemEnabledAttributes(indexPath, enabled);
        if (enabled) {
            if (this.GetSelectedItemIndexPath() == indexPath)
                this.SelectItem(indexPath);
        }
    },
    ChangeItemEnabledStateItems: function (indexPath, enabled) {
        if (!this.IsStateControllerEnabled()) return;
        var element = this.GetItemElement(indexPath);
        if (element)
            aspxGetStateController().SetElementEnabled(element, enabled);
    },
    GetItemImageUrl: function (indexPath) {
        var image = this.GetItemImage(indexPath);
        if (image)
            return image.src;
        return "";
    },
    SetItemImageUrl: function (indexPath, url) {
        var image = this.GetItemImage(indexPath);
        if (image)
            image.src = url;
    },
    GetItemImage: function (indexPath) {
        var element = this.GetItemContentElement(indexPath);
        if (element != null) {
            var img = _aspxGetChildByTagName(element, "IMG", 0);
            if (img != null)
                return img;
        }
    },
    GetItemNavigateUrl: function (indexPath) {
        var element = this.GetItemContentElement(indexPath);
        if (element != null && element.tagName === "A")
            return element.href;
        if (element != null) {
            var link = _aspxGetChildByTagName(element, "A", 0);
            if (link != null)
                return link.href;
        }
        return "";
    },
    SetItemNavigateUrl: function (indexPath, url) {
        var element = this.GetItemContentElement(indexPath);
        if (element != null && element.tagName === "A")
            element.href = url;
        else if (element != null) {
            var link = _aspxGetChildByTagName(element, "A", 0);
            if (link != null)
                link.href = url;
            link = _aspxGetChildByTagName(element, "A", 1);
            if (link != null)
                link.href = url;
        }
    },
    FindTextNode: function (indexPath) {
        var element = this.GetItemContentElement(indexPath);
        if (element) {
            var link = _aspxGetChildByTagName(element, "A", 0);
            if (link)
                return _aspxGetChildTextNode(link, 0);
            var titleSpan = _aspxGetChildByTagName(element, "SPAN", 0);
            if (titleSpan)
                return _aspxGetChildTextNode(titleSpan, 0);
            for (var i = 0; i < element.childNodes.length; i++) {
                var child = element.childNodes[i];
                if (child.nodeValue && (_aspxTrim(child.nodeValue) != ""))
                    return child;
            }
            return _aspxGetChildTextNode(element, 0);
        }
        return null;
    },
    GetItemText: function (indexPath) {
        var textNode = this.FindTextNode(indexPath);
        return textNode
   ? _aspxTrim(textNode.nodeValue)
   : "";
    },
    SetItemText: function (indexPath, text) {
        var textNode = this.FindTextNode(indexPath);
        if (textNode) {
            textNode.nodeValue = text;
            var menuElement = this.GetMenuElement(this.GetParentIndexPath(indexPath));
            ASPxClientMenuLiteRenderHelper.CalculateSubMenu(this, menuElement);
        }
    },
    SetItemVisible: function (indexPath, visible, initialization) {
        if (indexPath == "" || !this.GetItemByIndexPath(indexPath).visible) return;
        if (visible && initialization) return;
        var element = this.GetItemElement(indexPath);
        if (element != null)
            _aspxSetElementDisplay(element, visible);
        this.SetIndentsVisiblility(indexPath);
        this.SetSeparatorsVisiblility(indexPath);
        var parent = this.GetItemByIndexPath(indexPath).parent;
        var parentHasVisibleItems = this.HasVisibleItems(parent);
        if (this.IsRootItem(indexPath) && !this.isPopupMenu)
            this.SetVisible(parentHasVisibleItems);
        else
            this.SetPopOutElementVisible(parent.indexPath, parentHasVisibleItems);
    },
    SetIndentsVisiblility: function (indexPath) {
        var parent = this.GetItemByIndexPath(indexPath).parent;
        for (var i = 0; i < parent.GetItemCount(); i++) {
            var item = parent.GetItem(i);
            var separatorVisible = item.GetVisible() && this.HasNextVisibleItems(parent, i);
            var element = this.GetItemIndentElement(item.GetIndexPath());
            if (element != null) _aspxSetElementDisplay(element, separatorVisible);
        }
    },
    SetSeparatorsVisiblility: function (indexPath) {
        var parent = this.GetItemByIndexPath(indexPath).parent;
        for (var i = 0; i < parent.GetItemCount(); i++) {
            var item = parent.GetItem(i);
            var separatorVisible = this.HasPrevVisibleItems(parent, i) && (item.GetVisible() || this.HasNextVisibleItemInGroup(parent, i));
            var element = this.GetItemSeparatorElement(item.GetIndexPath());
            if (element != null) _aspxSetElementDisplay(element, separatorVisible);
            element = this.GetItemSeparatorIndentElement(item.GetIndexPath());
            if (element != null) _aspxSetElementDisplay(element, separatorVisible);
        }
    },
    SetPopOutElementVisible: function (indexPath, visible) {
        var popOutElement = this.GetItemPopOutElement(indexPath);
        if (popOutElement)
            _aspxSetElementDisplay(popOutElement, visible);
    },
    HasNextVisibleItemInGroup: function (parent, index) {
        for (var i = index + 1; i < parent.GetItemCount(); i++) {
            var item = parent.GetItem(i);
            if (this.IsItemBeginsGroup(item))
                return false;
            if (item.GetVisible())
                return true;
        }
        return false;
    },
    IsItemBeginsGroup: function (item) {
        var itemSeparator = this.GetItemSeparatorElement(item.GetIndexPath());
        return itemSeparator && _aspxElementCssClassContains(itemSeparator, ASPxClientMenuCssClasses.Separator);
    },
    HasVisibleItems: function (parent) {
        for (var i = 0; i < parent.GetItemCount(); i++) {
            if (parent.GetItem(i).GetVisible())
                return true;
        }
        return false;
    },
    HasNextVisibleItems: function (parent, index) {
        for (var i = index + 1; i < parent.GetItemCount(); i++) {
            if (parent.GetItem(i).GetVisible())
                return true;
        }
        return false;
    },
    HasPrevVisibleItems: function (parent, index) {
        for (var i = index - 1; i >= 0; i--) {
            if (parent.GetItem(i).GetVisible())
                return true;
        }
        return false;
    },
    GetItemIndentElement: function (indexPath) {
        return _aspxGetElementById(this.GetItemIndentElementId(indexPath));
    },
    GetItemSeparatorElement: function (indexPath) {
        return _aspxGetElementById(this.GetItemSeparatorElementId(indexPath));
    },
    GetItemSeparatorIndentElement: function (indexPath) {
        return _aspxGetElementById(this.name + __aspxMIIdSuffix + indexPath + "_ISI");
    },
    RaiseItemClick: function (indexPath, htmlEvent) {
        var processOnServer = this.autoPostBack || this.IsServerEventAssigned("ItemClick");
        if (!this.ItemClick.IsEmpty()) {
            var item = this.GetItemByIndexPath(indexPath);
            var htmlElement = this.GetItemContentElement(indexPath);
            var args = new ASPxClientMenuItemClickEventArgs(processOnServer, item, htmlElement, htmlEvent);
            this.ItemClick.FireEvent(this, args);
            processOnServer = args.processOnServer;
        }
        return processOnServer;
    },
    RaiseItemMouseOver: function (indexPath) {
        if (!this.ItemMouseOver.IsEmpty()) {
            var item = this.GetItemByIndexPath(indexPath);
            var htmlElement = this.GetItemContentElement(indexPath);
            var args = new ASPxClientMenuItemMouseEventArgs(item, htmlElement);
            this.ItemMouseOver.FireEvent(this, args);
        }
    },
    RaiseItemMouseOut: function (indexPath) {
        if (!this.ItemMouseOut.IsEmpty()) {
            var item = this.GetItemByIndexPath(indexPath);
            var htmlElement = this.GetItemContentElement(indexPath);
            var args = new ASPxClientMenuItemMouseEventArgs(item, htmlElement);
            this.ItemMouseOut.FireEvent(this, args);
        }
    },
    RaisePopUp: function (indexPath) {
        var item = this.GetItemByIndexPath(indexPath);
        if (!this.PopUp.IsEmpty()) {
            var args = new ASPxClientMenuItemEventArgs(item);
            this.PopUp.FireEvent(this, args);
        }
    },
    RaiseCloseUp: function (indexPath) {
        var item = this.GetItemByIndexPath(indexPath);
        if (!this.CloseUp.IsEmpty()) {
            var args = new ASPxClientMenuItemEventArgs(item);
            this.CloseUp.FireEvent(this, args);
        }
    },
    SetEnabled: function (enabled) {
        for (var i = this.GetItemCount() - 1; i >= 0; i--) {
            var item = this.GetItem(i);
            item.SetEnabled(enabled);
        }
    },
    SetVisible: function (visible) {
        if (visible && !this.HasVisibleItems(this))
            return;
        ASPxClientControl.prototype.SetVisible.call(this, visible);
    },
    GetItemCount: function () {
        return (this.rootItem != null) ? this.rootItem.GetItemCount() : 0;
    },
    GetItem: function (index) {
        return (this.rootItem != null) ? this.rootItem.GetItem(index) : null;
    },
    GetItemByName: function (name) {
        return (this.rootItem != null) ? this.rootItem.GetItemByName(name) : null;
    },
    GetSelectedItem: function () {
        var indexPath = this.GetSelectedItemIndexPath();
        if (indexPath != "")
            return this.GetItemByIndexPath(indexPath);
        return null;
    },
    SetSelectedItem: function (item) {
        var indexPath = (item != null) ? item.GetIndexPath() : "";
        this.SetSelectedItemInternal(indexPath, false);
    },
    GetRootItem: function () {
        return this.rootItem;
    }
});
ASPxClientMenuBase.GetMenuCollection = function () {
    return aspxGetMenuCollection();
}
ASPxClientMenuCollection = _aspxCreateClass(ASPxClientControlCollection, {
    constructor: function () {
        this.constructor.prototype.constructor.call(this);
        this.appearTimerID = -1;
        this.disappearTimerID = -1;
        this.currentShowingPopupMenuName = null;
        this.visibleSubMenusMenuName = "";
        this.visibleSubMenuIds = [];
        this.overXPos = -1;
        this.overYPos = -1;
    },
    RegisterVisiblePopupMenu: function (name, id) {
        this.visibleSubMenuIds.push(id);
        this.visibleSubMenusMenuName = name;
    },
    UnregisterVisiblePopupMenu: function (name, id) {
        _aspxArrayRemove(this.visibleSubMenuIds, id);
        if (this.visibleSubMenuIds.length == 0)
            this.visibleSubMenusMenuName = "";
    },
    IsSubMenuVisible: function (subMenuId) {
        for (var i = 0; i < this.visibleSubMenuIds.length; i++) {
            if (this.visibleSubMenuIds[i] == subMenuId)
                return true;
        }
        return false;
    },
    GetMenu: function (id) {
        return this.Get(this.GetMenuName(id));
    },
    GetMenuName: function (id) {
        return this.GetMenuNameBySuffixes(id, [__aspxMMIdSuffix, __aspxMIIdSuffix]);
    },
    GetMenuNameBySuffixes: function (id, idSuffixes) {
        for (var i = 0; i < idSuffixes.length; i++) {
            var pos = id.lastIndexOf(idSuffixes[i]);
            if (pos > -1)
                return id.substring(0, pos);
        }
        return id;
    },
    ClearCurrentShowingPopupMenuName: function () {
        this.SetCurrentShowingPopupMenuName(null);
    },
    SetCurrentShowingPopupMenuName: function (value) {
        this.currentShowingPopupMenuName = value;
    },
    NowPopupMenuIsShowing: function () {
        return this.currentShowingPopupMenuName != null;
    },
    GetMenuLevel: function (indexPath) {
        if (indexPath == "")
            return 0;
        else {
            var indexes = this.GetItemIndexes(indexPath);
            return indexes.length;
        }
    },
    GetMenuLevelById: function (id) {
        var indexPath = this.GetIndexPathById(id, __aspxMMIdSuffix);
        return this.GetMenuLevel(indexPath);
    },
    GetIndexPathById: function (id, idSuffix) {
        var pos = id.lastIndexOf(idSuffix);
        if (pos > -1) {
            id = id.substring(pos + idSuffix.length);
            pos = id.lastIndexOf("_");
            if (pos > -1)
                return id.substring(0, pos);
        }
        return "";
    },
    GetItemIndexPath: function (indexes) {
        var indexPath = "";
        for (var i = 0; i < indexes.length; i++) {
            indexPath += indexes[i];
            if (i < indexes.length - 1)
                indexPath += __aspxItemIndexSeparator;
        }
        return indexPath;
    },
    GetItemIndexes: function (indexPath) {
        var indexes = indexPath.split(__aspxItemIndexSeparator);
        for (var i = 0; i < indexes.length; i++)
            indexes[i] = parseInt(indexes[i]);
        return indexes;
    },
    ClearAppearTimer: function () {
        this.appearTimerID = _aspxClearTimer(this.appearTimerID);
    },
    ClearDisappearTimer: function () {
        this.disappearTimerID = _aspxClearTimer(this.disappearTimerID);
    },
    IsAppearTimerActive: function () {
        return this.appearTimerID > -1;
    },
    IsDisappearTimerActive: function () {
        return this.disappearTimerID > -1;
    },
    SetAppearTimer: function (name, indexPath, timeout) {
        this.appearTimerID = _aspxSetTimeout("aspxMIMOverTimer(\"" + name + "\", \"" + indexPath + "\")", timeout);
    },
    SetDisappearTimer: function (name, timeout) {
        this.disappearTimerID = _aspxSetTimeout("aspxMIMOutTimer(\"" + name + "\")", timeout);
    },
    GetMouseDownMenuLevel: function (evt) {
        var srcElement = _aspxGetEventSource(evt);
        if (this.visibleSubMenusMenuName != "") {
            var element = _aspxGetParentById(srcElement, this.visibleSubMenusMenuName);
            if (element != null) return 1;
        }
        for (var i = 0; i < this.visibleSubMenuIds.length; i++) {
            var element = _aspxGetParentById(srcElement, this.visibleSubMenuIds[i]);
            if (element != null)
                return this.GetMenuLevelById(this.visibleSubMenuIds[i]) + 1;
        }
        return -1;
    },
    CheckFocusedElement: function () {
        try {
            if (document.activeElement != null) {
                for (var i = 0; i < this.visibleSubMenuIds.length; i++) {
                    var menuElement = _aspxGetElementById(this.visibleSubMenuIds[i]);
                    if (menuElement != null && _aspxGetIsParent(menuElement, document.activeElement)) {
                        var tagName = document.activeElement.tagName;
                        if (!__aspxIE || tagName == "INPUT" || tagName == "TEXTAREA" || tagName == "SELECT")
                            return true;
                    }
                }
            }
        } catch (e) {
        }
        return false;
    },
    DoHidePopupMenus: function (evt, level, name, leavePopups, exceptId) {
        for (var i = this.visibleSubMenuIds.length - 1; i >= 0; i--) {
            var menu = this.GetMenu(this.visibleSubMenuIds[i]);
            if (menu != null) {
                var menuLevel = this.GetMenuLevelById(this.visibleSubMenuIds[i]);
                if ((!leavePopups || menuLevel > 0) && exceptId != this.visibleSubMenuIds[i]) {
                    if (menuLevel > level || (menu.name != name && name != "")) {
                        var element = _aspxGetElementById(this.visibleSubMenuIds[i]);
                        if (element != null)
                            menu.DoHidePopupMenu(evt, element);
                    }
                }
            }
        }
    },
    DoShowAtCurrentPos: function (name, indexPath) {
        var pc = this.Get(name);
        var element = pc.GetMainElement();
        if (pc != null && !_aspxGetElementDisplay(element))
            pc.DoShowPopupMenu(element, this.overXPos, this.overYPos, indexPath);
    },
    SaveCurrentMouseOverPos: function (evt, popupElement) {
        if (!this.NowPopupMenuIsShowing()) return;
        var currentShowingPopupMenu = this.Get(this.currentShowingPopupMenuName);
        if (currentShowingPopupMenu.popupElement == popupElement)
            if (!currentShowingPopupMenu.IsMenuVisible()) {
                this.overXPos = _aspxGetEventX(evt);
                this.overYPos = _aspxGetEventY(evt);
            }
    },
    OnMouseDown: function (evt) {
        var menuLevel = this.GetMouseDownMenuLevel(evt);
        this.DoHidePopupMenus(evt, menuLevel, "", false, "");
    },
    HideAll: function () {
        this.DoHidePopupMenus(null, -1, "", false, "");
    },
    IsAnyMenuVisible: function () {
        return this.visibleSubMenuIds.length != 0;
    }
});
var __aspxMCollection = null;
function aspxGetMenuCollection() {
    if (__aspxMCollection == null)
        __aspxMCollection = new ASPxClientMenuCollection();
    return __aspxMCollection;
}
ASPxClientMenuItem = _aspxCreateClass(null, {
    constructor: function (menu, parent, index, name) {
        this.menu = menu;
        this.parent = parent;
        this.index = index;
        this.name = name;
        this.indexPath = "";
        if (parent) {
            this.indexPath = parent.indexPath
    ? parent.indexPath + __aspxItemIndexSeparator + this.index.toString()
    : this.index.toString();
        }
        this.enabled = true;
        this.clientEnabled = true;
        this.visible = true;
        this.clientVisible = true;
        this.items = [];
    },
    CreateItems: function (itemsProperties) {
        var itemType = this.menu.GetClientItemType();
        for (var i = 0; i < itemsProperties.length; i++) {
            var itemName = itemsProperties[i][0] || "";
            var item = new itemType(this.menu, this, i, itemName);
            if (_aspxIsExists(itemsProperties[i][1]))
                item.enabled = itemsProperties[i][1];
            if (_aspxIsExists(itemsProperties[i][2]))
                item.clientEnabled = itemsProperties[i][2];
            if (_aspxIsExists(itemsProperties[i][3]))
                item.visible = itemsProperties[i][3];
            if (_aspxIsExists(itemsProperties[i][4]))
                item.clientVisible = itemsProperties[i][4];
            this.items.push(item);
            item.CreateItems(itemsProperties[i][5]);
        }
    },
    GetIndexPath: function () {
        return this.indexPath;
    },
    GetItemCount: function () {
        return this.items.length;
    },
    GetItem: function (index) {
        return (0 <= index && index < this.items.length) ? this.items[index] : null;
    },
    GetItemByName: function (name) {
        for (var i = 0; i < this.items.length; i++)
            if (this.items[i].name == name) return this.items[i];
        for (var i = 0; i < this.items.length; i++) {
            var item = this.items[i].GetItemByName(name);
            if (item != null) return item;
        }
        return null;
    },
    GetChecked: function () {
        var indexPath = this.GetIndexPath();
        return this.menu.IsCheckedItem(indexPath);
    },
    SetChecked: function (value) {
        var indexPath = this.GetIndexPath();
        this.menu.SetItemChecked(indexPath, value);
    },
    GetEnabled: function () {
        return this.enabled && this.clientEnabled;
    },
    SetEnabled: function (value) {
        if (this.clientEnabled != value) {
            this.clientEnabled = value;
            this.menu.SetItemEnabled(this.GetIndexPath(), value, false);
        }
    },
    GetImage: function () {
        return this.menu.GetItemImage(this.GetIndexPath());
    },
    GetImageUrl: function () {
        return this.menu.GetItemImageUrl(this.GetIndexPath());
    },
    SetImageUrl: function (value) {
        var indexPath = this.GetIndexPath();
        this.menu.SetItemImageUrl(indexPath, value);
    },
    GetNavigateUrl: function () {
        var indexPath = this.GetIndexPath();
        return this.menu.GetItemNavigateUrl(indexPath);
    },
    SetNavigateUrl: function (value) {
        var indexPath = this.GetIndexPath();
        this.menu.SetItemNavigateUrl(indexPath, value);
    },
    GetText: function () {
        var indexPath = this.GetIndexPath();
        return this.menu.GetItemText(indexPath);
    },
    SetText: function (value) {
        var indexPath = this.GetIndexPath();
        this.menu.SetItemText(indexPath, value);
    },
    GetVisible: function () {
        return this.visible && this.clientVisible;
    },
    SetVisible: function (value) {
        if (this.clientVisible != value) {
            this.clientVisible = value;
            this.menu.SetItemVisible(this.GetIndexPath(), value, false);
        }
    },
    InitializeEnabledAndVisible: function (recursive) {
        this.menu.SetItemEnabled(this.GetIndexPath(), this.clientEnabled, true);
        this.menu.SetItemVisible(this.GetIndexPath(), this.clientVisible, true);
        if (recursive) {
            for (var i = 0; i < this.items.length; i++)
                this.items[i].InitializeEnabledAndVisible(recursive);
        }
    }
});
ASPxClientMenu = _aspxCreateClass(ASPxClientMenuBase, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.isVertical = false;
        this.firstSubMenuDirection = "Auto";
    },
    IsVertical: function (indexPath) {
        return this.isVertical || (indexPath.indexOf(__aspxItemIndexSeparator) > -1);
    },
    IsCorrectionDisableMethodRequired: function (indexPath) {
        return (indexPath.indexOf("i") == -1) && (this.firstSubMenuDirection == "RightOrBottom" || this.firstSubMenuDirection == "LeftOrTop");
    },
    AdjustControlCore: function () {
        this.CorrectVerticalAlignment(_aspxClearHeight, this.GetPopOutElements, "PopOut", true);
        this.CorrectVerticalAlignment(_aspxClearVerticalMargins, this.GetPopOutImages, "PopOutImg", true);
        ASPxClientMenuLiteRenderHelper.CalculateMenuElements(this, this.GetMainElement());
        this.CorrectVerticalAlignment(_aspxAdjustHeight, this.GetPopOutElements, "PopOut", true);
        this.CorrectVerticalAlignment(_aspxAdjustVerticalMargins, this.GetPopOutImages, "PopOutImg", true);
        this.SetLightweightMenuHeightInIE7IfDisplayed(true);
    },
    OnBrowserWindowResize: function (evt) {
        this.AdjustControl();
    },
    GetCorrectionDisabledResult: function (x, toLeftX) {
        switch (this.firstSubMenuDirection) {
            case "RightOrBottom": 
                {
                    this.popupToLeft = false;
                    return x;
                }
            case "LeftOrTop": 
                {
                    this.popupToLeft = true;
                    return toLeftX;
                }
        }
    },
    IsHorizontalSubmenuNeedInversion: function (subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight) {
        if (this.firstSubMenuDirection == "Auto")
            return ASPxClientMenuBase.prototype.IsHorizontalSubmenuNeedInversion.call(this, subMenuBottom, docClientHeight, menuItemTop, subMenuHeight, itemHeight);
        return this.firstSubMenuDirection == "LeftOrTop"
    },
    SetLightweightMenuHeightInIE7IfDisplayed: function (force) {
        if (!__aspxIE || __aspxBrowserMajorVersion != 7)
            return;
        if (force)
            this.lightweightMenuHeightIE7Set = false;
        if (this.lightweightMenuHeightIE7Set || !this.IsDisplayed())
            return;
        var mainElement = this.GetMainElement();
        var commonContainer = mainElement.parentNode;
        var _this = this;
        window.setTimeout(function () {
            if (mainElement.offsetHeight != 0)
                commonContainer.style.height = mainElement.offsetHeight + "px";
            else
                _this.lightweightMenuHeightIE7Set = false;
        }, 0);
        this.lightweightMenuHeightIE7Set = true;
    }
});
ASPxClientMenu.Cast = ASPxClientControl.Cast;
ASPxClientMenuItemEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
    constructor: function (item) {
        this.constructor.prototype.constructor.call(this);
        this.item = item;
    }
});
ASPxClientMenuItemMouseEventArgs = _aspxCreateClass(ASPxClientMenuItemEventArgs, {
    constructor: function (item, htmlElement) {
        this.constructor.prototype.constructor.call(this, item);
        this.htmlElement = htmlElement;
    }
});
ASPxClientMenuItemClickEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
    constructor: function (processOnServer, item, htmlElement, htmlEvent) {
        this.constructor.prototype.constructor.call(this, processOnServer);
        this.item = item;
        this.htmlElement = htmlElement;
        this.htmlEvent = htmlEvent;
    }
});
function aspxMIClick(evt, name, indexPath) {
    if (ASPxClientTouchUI.isMouseEventFromScrolling) return;
    var menu = aspxGetMenuCollection().Get(name);
    if (menu != null) menu.OnItemClick(indexPath, evt);
    if (!__aspxNetscapeFamily)
        evt.cancelBubble = true;
}
function aspxMIDDClick(evt, name, indexPath) {
    var menu = aspxGetMenuCollection().Get(name);
    if (menu != null) menu.OnItemDropDownClick(indexPath, evt);
    if (!__aspxNetscapeFamily)
        evt.cancelBubble = true;
}
function aspxAMIMOver(source, args) {
    var menu = aspxGetMenuCollection().GetMenu(args.item.name);
    if (menu != null) menu.OnAfterItemOver(args.item, args.element);
}
function aspxBMIMOver(source, args) {
    var menu = aspxGetMenuCollection().GetMenu(args.item.name);
    if (menu != null) menu.OnBeforeItemOver(args.item, args.element);
}
function aspxMIMOverTimer(name, indexPath) {
    var menu = aspxGetMenuCollection().Get(name);
    if (menu != null) menu.OnItemOverTimer(indexPath);
}
function aspxBIDisabled(source, args) {
    var menu = aspxGetMenuCollection().GetMenu(args.item.name);
    if (menu != null) menu.OnBeforeItemDisabled(args.item, args.element);
}
function aspxFIKeyDown(source, args) {
    var menu = aspxGetMenuCollection().GetMenu(args.item.name);
    if (menu != null) menu.OnFocusedItemKeyDown(args.htmlEvent, args.item, args.element);
}
function aspxAMIMOut(source, args) {
    var menu = aspxGetMenuCollection().GetMenu(args.item.name);
    if (menu != null) menu.OnAfterItemOut(args.item, args.element, args.toElement);
}
function aspxMIMOutTimer(name) {
    var menu = aspxGetMenuCollection().Get(name);
    if (menu != null) menu.OnItemOutTimer();
}
function aspxMContextMenu(evt) {
    return _aspxCancelBubble(evt);
}
function aspxMSBOver(source, args) {
    var menu = ASPxClientMenuScrollHelper.GetMenuByScrollButtonId(args.element.id)
    if (menu != null) menu.ClearDisappearTimer();
}
function aspxMSBOut(source, args) {
    var menu = ASPxClientMenuScrollHelper.GetMenuByScrollButtonId(args.element.id)
    if (menu != null) menu.SetDisappearTimer();
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseDownEventName, aspxMenuDocumentMouseDown);
function aspxMenuDocumentMouseDown(evt) {
    return aspxGetMenuCollection().OnMouseDown(evt);
}
(function () {
    aspxAddAfterSetFocusedState(aspxAMIMOver);
    aspxAddAfterClearFocusedState(aspxAMIMOut);
    aspxAddAfterSetHoverState(aspxAMIMOver);
    aspxAddAfterClearHoverState(aspxAMIMOut);
    aspxAddBeforeSetFocusedState(aspxBMIMOver);
    aspxAddBeforeSetHoverState(aspxBMIMOver);
    aspxAddBeforeDisabled(aspxBIDisabled);
    aspxAddFocusedItemKeyDown(aspxFIKeyDown);
    aspxAddAfterSetHoverState(aspxMSBOver);
    aspxAddAfterSetPressedState(aspxMSBOver);
    aspxAddAfterClearHoverState(aspxMSBOut);
    aspxAddAfterSetPressedState(function (source, args) {
        var menu = ASPxClientMenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
        if (menu) menu.StartScrolling(args.element.id, 1, 4);
    });
    aspxAddAfterClearPressedState(function (source, args) {
        var menu = ASPxClientMenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
        if (menu) menu.StopScrolling(args.element.id);
    });
    if (!__aspxTouchUI) {
        aspxAddAfterSetHoverState(function (source, args) {
            var menu = ASPxClientMenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
            if (menu) menu.StartScrolling(args.element.id, 15, 1);
        });
        aspxAddAfterClearHoverState(function (source, args) {
            var menu = ASPxClientMenuScrollHelper.GetMenuByScrollButtonId(args.element.id);
            if (menu) menu.StopScrolling(args.element.id);
        });
    }
})();

var __aspxClientValidationStateNameSuffix = "$CVS";
ASPxClientEditBase = _aspxCreateClass(ASPxClientControl, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.EnabledChanged = new ASPxClientEvent();
    },
    InlineInitialize: function () {
        ASPxClientControl.prototype.InlineInitialize.call(this);
        this.InitializeEnabled();
    },
    InitializeEnabled: function () {
        this.SetEnabledInternal(this.clientEnabled, true);
    },
    GetValue: function () {
        var element = this.GetMainElement();
        if (_aspxIsExistsElement(element))
            return element.innerHTML;
        return "";
    },
    GetValueString: function () {
        var value = this.GetValue();
        return (value == null) ? null : value.toString();
    },
    SetValue: function (value) {
        if (value == null)
            value = "";
        var element = this.GetMainElement();
        if (_aspxIsExistsElement(element))
            element.innerHTML = value;
    },
    GetEnabled: function () {
        return this.enabled && this.clientEnabled;
    },
    SetEnabled: function (enabled) {
        if (this.clientEnabled != enabled) {
            var errorFrameRequiresUpdate = this.GetIsValid && !this.GetIsValid();
            if (errorFrameRequiresUpdate && !enabled)
                this.UpdateErrorFrameAndFocus(false, null, true);
            this.clientEnabled = enabled;
            this.SetEnabledInternal(enabled, false);
            if (errorFrameRequiresUpdate && enabled)
                this.UpdateErrorFrameAndFocus(false);
            this.RaiseEnabledChangedEvent();
        }
    },
    SetEnabledInternal: function (enabled, initialization) {
        if (!this.enabled) return;
        if (!initialization || !enabled)
            this.ChangeEnabledStateItems(enabled);
        this.ChangeEnabledAttributes(enabled);
        if (__aspxChrome) {
            var mainElement = this.GetMainElement();
            if (mainElement)
                mainElement.className = mainElement.className;
        }
    },
    ChangeEnabledAttributes: function (enabled) {
    },
    ChangeEnabledStateItems: function (enabled) {
    },
    RaiseEnabledChangedEvent: function () {
        if (!this.EnabledChanged.IsEmpty()) {
            var args = new ASPxClientEventArgs();
            this.EnabledChanged.FireEvent(this, args);
        }
    },
    GetDecodeValue: function (value) {
        if (typeof (value) == "string" && value.length > 1)
            value = this.SimpleDecodeHtml(value);
        return value;
    },
    SimpleDecodeHtml: function (html) {
        return _aspxApplyReplacement(html, [
   [/&lt;/g, '<'],
   [/&amp;/g, '&'],
   [/&quot;/g, '"'],
   [/&#39;/g, '\'']
  ]);
    }
});
ASPxValidationPattern = _aspxCreateClass(null, {
    constructor: function (errorText) {
        this.errorText = errorText;
    }
});
ASPxRequiredFieldValidationPattern = _aspxCreateClass(ASPxValidationPattern, {
    constructor: function (errorText) {
        this.constructor.prototype.constructor.call(this, errorText);
    },
    EvaluateIsValid: function (value) {
        return value != null && (value.constructor == Array || _aspxTrim(value.toString()) != "");
    }
});
ASPxRegularExpressionValidationPattern = _aspxCreateClass(ASPxValidationPattern, {
    constructor: function (errorText, pattern) {
        this.constructor.prototype.constructor.call(this, errorText);
        this.pattern = pattern;
    },
    EvaluateIsValid: function (value) {
        if (value == null)
            return true;
        var strValue = value.toString();
        if (_aspxTrim(strValue).length == 0)
            return true;
        var regEx = new RegExp(this.pattern);
        var matches = regEx.exec(strValue);
        return matches != null && strValue == matches[0];
    }
});
function _aspxIsEditorFocusable(inputElement) {
    return _aspxIsFocusableCore(inputElement, function (container) {
        return container.getAttribute("errorFrame") == "errorFrame";
    });
}
var __aspxInvalidEditorToBeFocused = null;
ASPxValidationType = {
    PersonalOnValueChanged: "ValueChanged",
    PersonalViaScript: "CalledViaScript",
    MassValidation: "MassValidation"
};
ASPxErrorFrameDisplay = {
    None: "None",
    Static: "Static",
    Dynamic: "Dynamic"
};
ASPxEditElementSuffix = {
    ExternalTable: "_ET",
    ControlCell: "_CC",
    ErrorCell: "_EC",
    ErrorTextCell: "_ETC",
    ErrorImage: "_EI"
};
ASPxClientEdit = _aspxCreateClass(ASPxClientEditBase, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.isASPxClientEdit = true;
        this.inputElement = null;
        this.elementCache = {};
        this.convertEmptyStringToNull = true;
        this.readOnly = false;
        this.focused = false;
        this.focusEventsLocked = false;
        this.receiveGlobalMouseWheel = true;
        this.styleDecoration = null;
        this.widthCorrectionRequired = false;
        this.heightCorrectionRequired = false;
        this.customValidationEnabled = false;
        this.display = ASPxErrorFrameDisplay.Static;
        this.initialErrorText = "";
        this.causesValidation = false;
        this.validateOnLeave = true;
        this.validationGroup = "";
        this.sendPostBackWithValidation = null;
        this.validationPatterns = [];
        this.setFocusOnError = false;
        this.errorDisplayMode = "it";
        this.errorText = "";
        this.isValid = true;
        this.errorImageIsAssigned = false;
        this.clientValidationStateElement = null;
        this.notifyValidationSummariesToAcceptNewError = false;
        this.enterProcessed = false;
        this.keyDownHandlers = {};
        this.keyPressHandlers = {};
        this.keyUpHandlers = {};
        this.specialKeyboardHandlingUsed = false;
        this.onKeyDownHandler = null;
        this.onKeyPressHandler = null;
        this.onKeyUpHandler = null;
        this.onGotFocusHandler = null;
        this.onLostFocusHandler = null;
        this.GotFocus = new ASPxClientEvent();
        this.LostFocus = new ASPxClientEvent();
        this.Validation = new ASPxClientEvent();
        this.ValueChanged = new ASPxClientEvent();
        this.KeyDown = new ASPxClientEvent();
        this.KeyPress = new ASPxClientEvent();
        this.KeyUp = new ASPxClientEvent();
    },
    Initialize: function () {
        this.initialErrorText = this.errorText;
        ASPxClientEditBase.prototype.Initialize.call(this);
        this.InitializeKeyHandlers();
        this.UpdateClientValidationState();
        this.UpdateValidationSummaries(null, true);
    },
    InlineInitialize: function () {
        ASPxClientEditBase.prototype.InlineInitialize.call(this);
        if (this.styleDecoration)
            this.styleDecoration.Update();
    },
    InitSpecialKeyboardHandling: function () {
        this.onKeyDownHandler = _aspxCreateEventHandlerFunction("aspxKBSIKeyDown", this.name, true);
        this.onKeyPressHandler = _aspxCreateEventHandlerFunction("aspxKBSIKeyPress", this.name, true);
        this.onKeyUpHandler = _aspxCreateEventHandlerFunction("aspxKBSIKeyUp", this.name, true);
        this.onGotFocusHandler = _aspxCreateEventHandlerFunction("aspxESGotFocus", this.name, false);
        this.onLostFocusHandler = _aspxCreateEventHandlerFunction("aspxESLostFocus", this.name, false);
        this.specialKeyboardHandlingUsed = true;
        this.InitializeDelayedSpecialFocus();
    },
    InitializeKeyHandlers: function () {
    },
    AddKeyDownHandler: function (key, handler) {
        this.keyDownHandlers[key] = handler;
    },
    AddKeyPressHandler: function (key, handler) {
        this.keyPressHandlers[key] = handler;
    },
    ChangeSpecialInputEnabledAttributes: function (element, method) {
        element.autocomplete = "off";
        if (this.onKeyDownHandler != null)
            method(element, "keydown", this.onKeyDownHandler);
        if (this.onKeyPressHandler != null)
            method(element, "keypress", this.onKeyPressHandler);
        if (this.onKeyUpHandler != null)
            method(element, "keyup", this.onKeyUpHandler);
        if (this.onGotFocusHandler != null)
            method(element, "focus", this.onGotFocusHandler);
        if (this.onLostFocusHandler != null)
            method(element, "blur", this.onLostFocusHandler);
    },
    UpdateClientValidationState: function () {
        if (!this.customValidationEnabled)
            return;
        var mainElement = this.GetMainElement();
        if (mainElement) {
            var hiddenField = this.GetClientValidationStateHiddenField();
            if (hiddenField)
                hiddenField.value = _aspxEncodeHtml(!this.GetIsValid() ? ("-" + this.GetErrorText()) : "");
        }
    },
    UpdateValidationSummaries: function (validationType, initializing) {
        if (typeof (ASPxClientValidationSummary) != "undefined") {
            var summaryCollection = aspxGetClientValidationSummaryCollection();
            summaryCollection.OnEditorIsValidStateChanged(this, validationType, initializing && this.notifyValidationSummariesToAcceptNewError);
        }
    },
    GetCachedElementByIdSuffix: function (idSuffix) {
        var element = this.elementCache[idSuffix];
        if (!_aspxIsExistsElement(element)) {
            element = _aspxGetElementById(this.name + idSuffix);
            this.elementCache[idSuffix] = element;
        }
        return element;
    },
    FindInputElement: function () {
        return null;
    },
    GetInputElement: function () {
        if (!_aspxIsExistsElement(this.inputElement))
            this.inputElement = this.FindInputElement();
        return this.inputElement;
    },
    GetFocusableInputElement: function () {
        return this.GetInputElement();
    },
    GetErrorImage: function () {
        return this.GetCachedElementByIdSuffix(ASPxEditElementSuffix.ErrorImage);
    },
    GetExternalTable: function () {
        return this.GetCachedElementByIdSuffix(ASPxEditElementSuffix.ExternalTable);
    },
    GetControlCell: function () {
        return this.GetCachedElementByIdSuffix(ASPxEditElementSuffix.ControlCell);
    },
    GetErrorCell: function () {
        return this.GetCachedElementByIdSuffix(ASPxEditElementSuffix.ErrorCell);
    },
    GetErrorTextCell: function () {
        return this.GetCachedElementByIdSuffix(this.errorImageIsAssigned ?
   ASPxEditElementSuffix.ErrorTextCell : ASPxEditElementSuffix.ErrorCell);
    },
    GetClientValidationStateHiddenField: function () {
        if (!this.clientValidationStateElement)
            this.clientValidationStateElement = this.CreateClientValidationStateHiddenField();
        return this.clientValidationStateElement;
    },
    CreateClientValidationStateHiddenField: function () {
        var mainElement = this.GetMainElement();
        var hiddenField = _aspxCreateHiddenField(this.uniqueID + __aspxClientValidationStateNameSuffix);
        mainElement.parentNode.appendChild(hiddenField);
        return hiddenField;
    },
    SetVisible: function (isVisible) {
        if (this.clientVisible == isVisible)
            return;
        if (this.customValidationEnabled) {
            var errorFrame = this.GetExternalTable();
            if (errorFrame) {
                _aspxSetElementDisplay(errorFrame, isVisible);
                var isValid = !isVisible ? true : void (0);
                this.UpdateErrorFrameAndFocus(false, true, isValid);
            }
        }
        ASPxClientControl.prototype.SetVisible.call(this, isVisible);
    },
    GetValueInputToValidate: function () {
        return this.GetInputElement();
    },
    IsVisible: function () {
        if (!this.clientVisible)
            return false;
        var element = this.GetMainElement();
        if (!element)
            return false;
        while (element && element.tagName != "BODY") {
            if (element.getAttribute("errorFrame") != "errorFrame" && (!_aspxGetElementVisibility(element) || !_aspxGetElementDisplay(element)))
                return false;
            element = element.parentNode;
        }
        return true;
    },
    AdjustControlCore: function () {
        this.CollapseControl();
        if (this.WidthCorrectionRequired())
            this.CorrectEditorWidth();
        else
            this.UnstretchInputElement();
        if (this.heightCorrectionRequired)
            this.CorrectEditorHeight();
    },
    WidthCorrectionRequired: function () {
        var mainElement = this.GetMainElement();
        if (_aspxIsExistsElement(mainElement)) {
            var mainElementCurStyle = _aspxGetCurrentStyle(mainElement);
            return this.widthCorrectionRequired && mainElementCurStyle.width != "" && mainElementCurStyle.width != "auto";
        }
        return false;
    },
    CorrectEditorWidth: function () {
    },
    CorrectEditorHeight: function () {
    },
    UnstretchInputElement: function () {
    },
    UseDelayedSpecialFocus: function () {
        return false;
    },
    GetDelayedSpecialFocusTriggers: function () {
        return [this.GetMainElement()];
    },
    InitializeDelayedSpecialFocus: function () {
        if (!this.UseDelayedSpecialFocus())
            return;
        this.specialFocusTimer = -1;
        var handler = function (evt) { this.OnDelayedSpecialFocusMouseDown(evt); } .aspxBind(this);
        var triggers = this.GetDelayedSpecialFocusTriggers();
        for (var i = 0; i < triggers.length; i++)
            _aspxAttachEventToElement(triggers[i], "mousedown", handler);
    },
    OnDelayedSpecialFocusMouseDown: function (evt) {
        window.setTimeout(function () { this.SetFocus(); } .aspxBind(this), 0);
    },
    IsFocusEventsLocked: function () {
        return this.focusEventsLocked;
    },
    LockFocusEvents: function () {
        if (!this.focused) return;
        this.focusEventsLocked = true;
    },
    UnlockFocusEvents: function () {
        this.focusEventsLocked = false;
    },
    ForceRefocusEditor: function () {
        this.LockFocusEvents();
        var inputElement = this.GetFocusableInputElement();
        if (inputElement && inputElement.blur)
            inputElement.blur();
        window.setTimeout("aspxGetControlCollection().Get('" + this.name + "').SetFocus();", 0);
    },
    IsEditorElement: function (element) {
        return this.GetMainElement() == element || _aspxGetIsParent(this.GetMainElement(), element);
    },
    IsElementBelongToInputElement: function (element) {
        return this.GetInputElement() == element;
    },
    OnFocusCore: function () {
        if (this.UseDelayedSpecialFocus())
            window.clearTimeout(this.specialFocusTimer);
        if (!this.IsFocusEventsLocked()) {
            this.focused = true;
            ASPxClientEdit.SetFocusedEditor(this);
            if (this.styleDecoration)
                this.styleDecoration.Update();
            if (this.isInitialized)
                this.RaiseFocus();
        }
        else
            this.UnlockFocusEvents();
    },
    OnLostFocusCore: function () {
        if (!this.IsFocusEventsLocked()) {
            this.focused = false;
            ASPxClientEdit.SetFocusedEditor(null);
            if (this.styleDecoration)
                this.styleDecoration.Update();
            this.RaiseLostFocus();
        }
    },
    OnFocus: function () {
        if (!this.specialKeyboardHandlingUsed)
            this.OnFocusCore();
    },
    OnLostFocus: function () {
        if (this.isInitialized && !this.specialKeyboardHandlingUsed)
            this.OnLostFocusCore();
    },
    OnSpecialFocus: function () {
        if (this.isInitialized)
            this.OnFocusCore();
    },
    OnSpecialLostFocus: function () {
        if (this.isInitialized)
            this.OnLostFocusCore();
    },
    OnMouseWheel: function (evt) {
    },
    OnValidation: function (validationType) {
        if (this.customValidationEnabled && this.isInitialized && _aspxIsExistsElement(this.GetMainElement()) &&
   (this.display == ASPxErrorFrameDisplay.None || this.GetExternalTable())) {
            this.BeginErrorFrameUpdate();
            try {
                this.SetIsValid(true, true);
                this.SetErrorText(this.initialErrorText, true);
                if (this.validateOnLeave || validationType != ASPxValidationType.PersonalOnValueChanged) {
                    this.ValidateWithPatterns();
                    this.RaiseValidation();
                }
                this.UpdateErrorFrameAndFocus(validationType == ASPxValidationType.PersonalOnValueChanged && this.validateOnLeave && !this.GetIsValid());
            } finally {
                this.EndErrorFrameUpdate();
            }
            this.UpdateValidationSummaries(validationType);
        }
    },
    OnValueChanged: function () {
        var processOnServer = this.RaiseValidationInternal();
        processOnServer = this.RaiseValueChangedEvent() && processOnServer;
        if (processOnServer)
            this.SendPostBackInternal("");
    },
    ParseValue: function () {
    },
    RaisePersonalStandardValidation: function () {
        if (_aspxIsFunction(window.ValidatorOnChange)) {
            var inputElement = this.GetValueInputToValidate();
            if (inputElement && inputElement.Validators)
                window.ValidatorOnChange({ srcElement: inputElement });
        }
    },
    RaiseValidationInternal: function () {
        if (this.isPostBackAllowed() && this.causesValidation && this.validateOnLeave)
            return ASPxClientEdit.ValidateGroup(this.validationGroup);
        else {
            this.OnValidation(ASPxValidationType.PersonalOnValueChanged);
            return this.GetIsValid();
        }
    },
    RaiseValueChangedEvent: function () {
        return this.RaiseValueChanged();
    },
    SendPostBackInternal: function (postBackArg) {
        if (_aspxIsFunction(this.sendPostBackWithValidation))
            this.sendPostBackWithValidation(postBackArg);
        else
            this.SendPostBack(postBackArg);
    },
    SetElementToBeFocused: function () {
        if (this.IsVisible())
            __aspxInvalidEditorToBeFocused = this;
    },
    GetFocusSelectAction: function () {
        return null;
    },
    SetFocus: function () {
        var inputElement = this.GetFocusableInputElement();
        if (!inputElement) return;
        var isIE9 = __aspxIE && __aspxBrowserVersion >= 9;
        if ((_aspxGetActiveElement() != inputElement || isIE9) && _aspxIsEditorFocusable(inputElement)) {
            _aspxSetFocus(inputElement, this.GetFocusSelectAction());
            if (_aspxGetActiveElement() == inputElement && isIE9)
                window.setTimeout(function () { _aspxClearInputSelection(inputElement); }, 100);
        }
    },
    SetFocusOnError: function () {
        if (__aspxInvalidEditorToBeFocused == this) {
            this.SetFocus();
            __aspxInvalidEditorToBeFocused = null;
        }
    },
    BeginErrorFrameUpdate: function () {
        if (!this.errorFrameUpdateLocked)
            this.errorFrameUpdateLocked = true;
    },
    EndErrorFrameUpdate: function () {
        this.errorFrameUpdateLocked = false;
        var args = this.updateErrorFrameAndFocusLastCallArgs;
        if (args) {
            this.UpdateErrorFrameAndFocus(args[0], args[1]);
            delete this.updateErrorFrameAndFocusLastCallArgs;
        }
    },
    UpdateErrorFrameAndFocus: function (setFocusOnError, ignoreVisibilityCheck, isValid) {
        if (!this.GetEnabled() || !ignoreVisibilityCheck && !this.GetVisible())
            return;
        if (this.errorFrameUpdateLocked) {
            this.updateErrorFrameAndFocusLastCallArgs = [setFocusOnError, ignoreVisibilityCheck];
            return;
        }
        if (this.styleDecoration)
            this.styleDecoration.Update();
        if (typeof (isValid) == "undefined")
            isValid = this.GetIsValid();
        var externalTable = this.GetExternalTable();
        var isStaticDisplay = this.display == ASPxErrorFrameDisplay.Static;
        var isErrorFrameDisplayed = this.display != ASPxErrorFrameDisplay.None;
        if (isValid && isErrorFrameDisplayed) {
            if (isStaticDisplay) {
                externalTable.style.visibility = "hidden";
            } else {
                this.HideErrorCell();
                this.SaveErrorFrameStyles();
                this.ClearErrorFrameElementsStyles();
            }
        } else {
            var editorLocatedWithinVisibleContainer = this.IsVisible();
            if (isErrorFrameDisplayed) {
                if (this.widthCorrectionRequired) {
                    if (editorLocatedWithinVisibleContainer)
                        this.CollapseControl();
                    else
                        this.ResetControlAdjustment();
                }
                this.UpdateErrorCellContent();
                if (isStaticDisplay) {
                    externalTable.style.visibility = "visible";
                } else {
                    this.EnsureErrorFrameStylesLoaded();
                    this.RestoreErrorFrameElementsStyles();
                    this.ShowErrorCell();
                }
            }
            if (editorLocatedWithinVisibleContainer) {
                if (isErrorFrameDisplayed && this.widthCorrectionRequired)
                    this.AdjustControl();
                if (setFocusOnError && this.setFocusOnError && __aspxInvalidEditorToBeFocused == null)
                    this.SetElementToBeFocused();
            }
        }
    },
    ShowErrorCell: function () {
        var errorCell = this.GetErrorCell();
        if (errorCell)
            _aspxSetElementDisplay(errorCell, true);
    },
    HideErrorCell: function () {
        var errorCell = this.GetErrorCell();
        if (errorCell)
            _aspxSetElementDisplay(errorCell, false);
    },
    SaveErrorFrameStyles: function () {
        this.EnsureErrorFrameStylesLoaded();
    },
    EnsureErrorFrameStylesLoaded: function () {
        if (typeof (this.errorFrameStyles) == "undefined") {
            var externalTable = this.GetExternalTable();
            var controlCell = this.GetControlCell();
            this.errorFrameStyles = {
                errorFrame: {
                    cssClass: externalTable.className,
                    style: this.ExtractElementStyleStringIgnoringVisibilityProps(externalTable)
                },
                controlCell: {
                    cssClass: controlCell.className,
                    style: this.ExtractElementStyleStringIgnoringVisibilityProps(controlCell)
                }
            };
        }
    },
    ClearErrorFrameElementsStyles: function () {
        this.ClearElementStyle(this.GetExternalTable());
        this.ClearElementStyle(this.GetControlCell());
    },
    RestoreErrorFrameElementsStyles: function () {
        var externalTable = this.GetExternalTable();
        externalTable.className = this.errorFrameStyles.errorFrame.cssClass;
        externalTable.style.cssText = this.errorFrameStyles.errorFrame.style;
        var controlCell = this.GetControlCell();
        controlCell.className = this.errorFrameStyles.controlCell.cssClass;
        controlCell.style.cssText = this.errorFrameStyles.controlCell.style;
    },
    ExtractElementStyleStringIgnoringVisibilityProps: function (element) {
        var savedVisibility = element.style.visibility;
        var savedDisplay = element.style.display;
        element.style.visibility = "";
        element.style.display = "";
        var styleStr = element.style.cssText;
        element.style.visibility = savedVisibility;
        element.style.display = savedDisplay;
        return styleStr;
    },
    ClearElementStyle: function (element) {
        if (!element)
            return;
        element.className = "";
        var excludedAttrNames = [
   "width", "display", "visibility",
   "position", "left", "top", "z-index",
   "margin", "margin-top", "margin-right", "margin-bottom", "margin-left",
   "float", "clear"
  ];
        var savedAttrValues = {};
        for (var i = 0; i < excludedAttrNames.length; i++) {
            var attrName = excludedAttrNames[i];
            var attrValue = element.style[attrName];
            if (attrValue)
                savedAttrValues[attrName] = attrValue;
        }
        element.style.cssText = "";
        for (var styleAttrName in savedAttrValues)
            element.style[styleAttrName] = savedAttrValues[styleAttrName];
    },
    UpdateErrorCellContent: function () {
        if (this.errorDisplayMode.indexOf("t") > -1)
            this.UpdateErrorText();
        if (this.errorDisplayMode == "i")
            this.UpdateErrorImage();
    },
    UpdateErrorImage: function () {
        var image = this.GetErrorImage();
        if (_aspxIsExistsElement(image)) {
            image.alt = this.errorText;
            image.title = this.errorText;
        } else {
            this.UpdateErrorText();
        }
    },
    UpdateErrorText: function () {
        var errorTextCell = this.GetErrorTextCell();
        if (_aspxIsExistsElement(errorTextCell))
            errorTextCell.innerHTML = _aspxEncodeHtml(this.errorText);
    },
    ValidateWithPatterns: function () {
        if (this.validationPatterns.length > 0) {
            var value = this.GetValue();
            for (var i = 0; i < this.validationPatterns.length; i++) {
                var validator = this.validationPatterns[i];
                if (!validator.EvaluateIsValid(value)) {
                    this.SetIsValid(false, true);
                    this.SetErrorText(validator.errorText, true);
                    return;
                }
            }
        }
    },
    OnSpecialKeyDown: function (evt) {
        this.RaiseKeyDown(evt);
        var handler = this.keyDownHandlers[evt.keyCode];
        if (handler)
            return this[handler](evt);
        return false;
    },
    OnSpecialKeyPress: function (evt) {
        this.RaiseKeyPress(evt);
        var handler = this.keyPressHandlers[evt.keyCode];
        if (handler)
            return this[handler](evt);
        if (__aspxNetscapeFamily || __aspxOpera) {
            if (evt.keyCode == ASPxKey.Enter)
                return this.enterProcessed;
        }
        return false;
    },
    OnSpecialKeyUp: function (evt) {
        this.RaiseKeyUp(evt);
        var handler = this.keyUpHandlers[evt.keyCode];
        if (handler)
            return this[handler](evt);
        return false;
    },
    OnKeyDown: function (evt) {
        if (!this.specialKeyboardHandlingUsed)
            this.RaiseKeyDown(evt);
    },
    OnKeyPress: function (evt) {
        if (!this.specialKeyboardHandlingUsed)
            this.RaiseKeyPress(evt);
    },
    OnKeyUp: function (evt) {
        if (!this.specialKeyboardHandlingUsed)
            this.RaiseKeyUp(evt);
    },
    RaiseKeyDown: function (evt) {
        if (!this.KeyDown.IsEmpty()) {
            var args = new ASPxClientEditKeyEventArgs(evt);
            this.KeyDown.FireEvent(this, args);
        }
    },
    RaiseKeyPress: function (evt) {
        if (!this.KeyPress.IsEmpty()) {
            var args = new ASPxClientEditKeyEventArgs(evt);
            this.KeyPress.FireEvent(this, args);
        }
    },
    RaiseKeyUp: function (evt) {
        if (!this.KeyUp.IsEmpty()) {
            var args = new ASPxClientEditKeyEventArgs(evt);
            this.KeyUp.FireEvent(this, args);
        }
    },
    RaiseFocus: function () {
        if (!this.GotFocus.IsEmpty()) {
            var args = new ASPxClientEventArgs();
            this.GotFocus.FireEvent(this, args);
        }
    },
    RaiseLostFocus: function () {
        if (!this.LostFocus.IsEmpty()) {
            var args = new ASPxClientEventArgs();
            this.LostFocus.FireEvent(this, args);
        }
    },
    RaiseValidation: function () {
        if (this.customValidationEnabled && !this.Validation.IsEmpty()) {
            var currentValue = this.GetValue();
            var args = new ASPxClientEditValidationEventArgs(currentValue, this.errorText, this.GetIsValid());
            this.Validation.FireEvent(this, args);
            this.SetErrorText(args.errorText, true);
            this.SetIsValid(args.isValid, true);
            if (args.value != currentValue)
                this.SetValue(args.value);
        }
    },
    RaiseValueChanged: function () {
        var processOnServer = this.isPostBackAllowed();
        if (!this.ValueChanged.IsEmpty()) {
            var args = new ASPxClientProcessingModeEventArgs(processOnServer);
            this.ValueChanged.FireEvent(this, args);
            processOnServer = args.processOnServer;
        }
        return processOnServer;
    },
    isPostBackAllowed: function () {
        return this.autoPostBack;
    },
    RequireStyleDecoration: function () {
        this.styleDecoration = new ASPxClientEditStyleDecoration(this);
        this.PopulateStyleDecorationPostfixes();
    },
    PopulateStyleDecorationPostfixes: function () {
        this.styleDecoration.AddPostfix("");
    },
    Focus: function () {
        this.SetFocus();
    },
    GetIsValid: function () {
        if ((ASPxIdent.IsASPxClientRadioButtonList(this) || _aspxIsExistsElement(this.GetInputElement())) &&
   (this.display == ASPxErrorFrameDisplay.None || _aspxIsExistsElement(this.GetExternalTable())))
            return this.isValid;
        else
            return true;
    },
    GetErrorText: function () {
        return this.errorText;
    },
    SetIsValid: function (isValid, validating) {
        if (this.customValidationEnabled) {
            this.isValid = isValid;
            this.UpdateErrorFrameAndFocus(false);
            this.UpdateClientValidationState();
            if (!validating)
                this.UpdateValidationSummaries(ASPxValidationType.PersonalViaScript);
        }
    },
    SetErrorText: function (errorText, validating) {
        if (this.customValidationEnabled) {
            this.errorText = errorText;
            this.UpdateErrorFrameAndFocus(false);
            this.UpdateClientValidationState();
            if (!validating)
                this.UpdateValidationSummaries(ASPxValidationType.PersonalViaScript);
        }
    },
    Validate: function () {
        this.ParseValue();
        this.OnValidation(ASPxValidationType.PersonalViaScript);
    }
});
ASPxClientEdit.focusedEditorName = "";
ASPxClientEdit.GetFocusedEditor = function () {
    var focusedEditor = aspxGetControlCollection().Get(ASPxClientEdit.focusedEditorName);
    if (focusedEditor && !focusedEditor.focused) {
        ASPxClientEdit.SetFocusedEditor(null);
        focusedEditor = null;
    }
    return focusedEditor;
}
ASPxClientEdit.SetFocusedEditor = function (editor) {
    ASPxClientEdit.focusedEditorName = editor ? editor.name : "";
}
ASPxClientEdit.ClearEditorsInContainer = function (container, validationGroup, clearInvisibleEditors) {
    __aspxInvalidEditorToBeFocused = null;
    _aspxProcessEditorsInContainer(container, _aspxClearProcessingProc, _aspxClearChoiceCondition, validationGroup, clearInvisibleEditors, true);
    ASPxClientEdit.ClearExternalControlsInContainer(container, validationGroup, clearInvisibleEditors);
}
ASPxClientEdit.ClearEditorsInContainerById = function (containerId, validationGroup, clearInvisibleEditors) {
    var container = document.getElementById(containerId);
    this.ClearEditorsInContainer(container, validationGroup, clearInvisibleEditors);
}
ASPxClientEdit.ClearGroup = function (validationGroup, clearInvisibleEditors) {
    return this.ClearEditorsInContainer(null, validationGroup, clearInvisibleEditors);
}
ASPxClientEdit.ValidateEditorsInContainer = function (container, validationGroup, validateInvisibleEditors) {
    var summaryCollection;
    if (typeof (ASPxClientValidationSummary) != "undefined") {
        summaryCollection = aspxGetClientValidationSummaryCollection();
        summaryCollection.AllowNewErrorsAccepting(validationGroup);
    }
    var validationResult = _aspxProcessEditorsInContainer(container, _aspxValidateProcessingProc, _aspxValidateChoiceCondition, validationGroup, validateInvisibleEditors,
  false);
    validationResult.isValid = ASPxClientEdit.ValidateExternalControlsInContainer(container, validationGroup, validateInvisibleEditors) && validationResult.isValid;
    if (typeof (aspxGetGlobalEvents) != "undefined") {
        if (typeof (validateInvisibleEditors) == "undefined")
            validateInvisibleEditors = false;
        if (typeof (validationGroup) == "undefined")
            validationGroup = null;
        validationResult.isValid = aspxGetGlobalEvents().OnValidationCompleted(container, validationGroup,
   validateInvisibleEditors, validationResult.isValid, validationResult.firstInvalid, validationResult.firstVisibleInvalid);
    }
    if (summaryCollection)
        summaryCollection.ForbidNewErrorsAccepting(validationGroup);
    return validationResult.isValid;
}
ASPxClientEdit.ValidateEditorsInContainerById = function (containerId, validationGroup, validateInvisibleEditors) {
    var container = document.getElementById(containerId);
    return this.ValidateEditorsInContainer(container, validationGroup, validateInvisibleEditors);
}
ASPxClientEdit.ValidateGroup = function (validationGroup, validateInvisibleEditors) {
    return this.ValidateEditorsInContainer(null, validationGroup, validateInvisibleEditors);
}
ASPxClientEdit.AreEditorsValid = function (containerOrContainerId, validationGroup, checkInvisibleEditors) {
    var container = typeof (containerOrContainerId) == "string" ? document.getElementById(containerOrContainerId) : containerOrContainerId;
    var checkResult = _aspxProcessEditorsInContainer(container, _aspxEditorsValidProcessingProc, _aspxEditorsValidChoiceCondition, validationGroup,
  checkInvisibleEditors, false);
    checkResult.isValid = ASPxClientEdit.AreExternalControlsValidInContainer(containerOrContainerId, validationGroup, checkInvisibleEditors) && checkResult.isValid;
    return checkResult.isValid;
}
ASPxClientEdit.AreExternalControlsValidInContainer = function (containerId, validationGroup, validateInvisibleEditors) {
    if (typeof (ASPxClientHtmlEditor) != "undefined")
        return ASPxClientHtmlEditor.AreEditorsValidInContainer(containerId, validationGroup, validateInvisibleEditors);
    return true;
}
ASPxClientEdit.ClearExternalControlsInContainer = function (containerId, validationGroup, validateInvisibleEditors) {
    if (typeof (ASPxClientHtmlEditor) != "undefined")
        return ASPxClientHtmlEditor.ClearEditorsInContainer(containerId, validationGroup, validateInvisibleEditors);
    return true;
}
ASPxClientEdit.ValidateExternalControlsInContainer = function (containerId, validationGroup, validateInvisibleEditors) {
    if (typeof (ASPxClientHtmlEditor) != "undefined")
        return ASPxClientHtmlEditor.ValidateEditorsInContainer(containerId, validationGroup, validateInvisibleEditors);
    return true;
}
ASPxClientEditKeyEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
    constructor: function (htmlEvent) {
        this.constructor.prototype.constructor.call(this);
        this.htmlEvent = htmlEvent;
    }
});
ASPxClientEditValidationEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
    constructor: function (value, errorText, isValid) {
        this.constructor.prototype.constructor.call(this);
        this.errorText = errorText;
        this.isValid = isValid;
        this.value = value;
    }
});
function aspxEGotFocus(name) {
    var edit = aspxGetControlCollection().Get(name);
    if (!edit) return;
    if (!edit.isInitialized) {
        var inputElement = edit.GetFocusableInputElement();
        if (inputElement && inputElement == document.activeElement)
            document.activeElement.blur();
        return;
    }
    edit.OnFocus();
}
function aspxELostFocus(name) {
    var edit = aspxGetControlCollection().Get(name);
    if (edit != null)
        edit.OnLostFocus();
}
function aspxESGotFocus(name) {
    var edit = aspxGetControlCollection().Get(name);
    if (edit != null)
        edit.OnSpecialFocus();
}
function aspxESLostFocus(name) {
    var edit = aspxGetControlCollection().Get(name);
    if (edit == null)
        return;
    if (edit.UseDelayedSpecialFocus())
        edit.specialFocusTimer = window.setTimeout(function () { edit.OnSpecialLostFocus(); }, 30);
    else
        edit.OnSpecialLostFocus();
}
function aspxEValueChanged(name) {
    var edit = aspxGetControlCollection().Get(name);
    if (edit != null)
        edit.OnValueChanged();
}
_aspxAttachEventToDocument("mousedown", aspxEMouseDown);
function aspxEMouseDown(evt) {
    var editor = ASPxClientEdit.GetFocusedEditor();
    if (!editor)
        return;
    var evtSource = _aspxGetEventSource(evt);
    if (editor.OwnerDateEdit && editor.OwnerDateEdit.GetShowTimeSection()) {
        editor.OwnerDateEdit.ForceRefocusTimeSectionTimeEdit(evtSource);
        return;
    }
    if (editor.IsEditorElement(evtSource) && !editor.IsElementBelongToInputElement(evtSource))
        editor.ForceRefocusEditor();
}
_aspxAttachEventToDocument(__aspxNetscapeFamily ? "DOMMouseScroll" : "mousewheel", aspxEMouseWheel);
function aspxEMouseWheel(evt) {
    var editor = ASPxClientEdit.GetFocusedEditor();
    if (editor != null && _aspxIsExistsElement(editor.GetMainElement()) && editor.focused && editor.receiveGlobalMouseWheel)
        editor.OnMouseWheel(evt);
}
function aspxKBSIKeyDown(name, evt) {
    var control = aspxGetControlCollection().Get(name);
    if (control != null) {
        var isProcessed = control.OnSpecialKeyDown(evt);
        if (isProcessed)
            return _aspxPreventEventAndBubble(evt);
    }
}
function aspxKBSIKeyPress(name, evt) {
    var control = aspxGetControlCollection().Get(name);
    if (control != null) {
        var isProcessed = control.OnSpecialKeyPress(evt);
        if (isProcessed)
            return _aspxPreventEventAndBubble(evt);
    }
}
function aspxKBSIKeyUp(name, evt) {
    var control = aspxGetControlCollection().Get(name);
    if (control != null) {
        var isProcessed = control.OnSpecialKeyUp(evt);
        if (isProcessed)
            return _aspxPreventEventAndBubble(evt);
    }
}
function aspxEKeyDown(name, evt) {
    var edit = aspxGetControlCollection().Get(name);
    if (edit != null)
        edit.OnKeyDown(evt);
    if (__aspxAndroidMobilePlatform && __aspxChrome)
        aspxEKeyPress(name, evt);
}
function aspxEKeyPress(name, evt) {
    var edit = aspxGetControlCollection().Get(name);
    if (edit != null)
        edit.OnKeyPress(evt);
}
function aspxEKeyUp(name, evt) {
    var edit = aspxGetControlCollection().Get(name);
    if (edit != null)
        edit.OnKeyUp(evt);
}
ASPxValidationResult = _aspxCreateClass(null, {
    constructor: function (isValid, firstInvalid, firstVisibleInvalid) {
        this.isValid = isValid;
        this.firstInvalid = firstInvalid;
        this.firstVisibleInvalid = firstVisibleInvalid;
    }
});
function _aspxProcessEditorsInContainer(container, processingProc, choiceCondition, validationGroup, processInvisibleEditors, processDisabledEditors) {
    var allProcessedSuccessfull = true;
    var firstInvalid = null;
    var firstVisibleInvalid = null;
    var invalidEditorToBeFocused = null;
    aspxGetControlCollection().ForEachControl(function (control) {
        if (ASPxIdent.IsASPxClientEdit(control) && (processDisabledEditors || control.GetEnabled())) {
            var mainElement = control.GetMainElement();
            if (mainElement &&
    (container == null || _aspxGetIsParent(container, mainElement)) &&
    (processInvisibleEditors || control.IsVisible()) &&
    choiceCondition(control, validationGroup)) {
                var isSuccess = processingProc(control);
                if (!isSuccess) {
                    allProcessedSuccessfull = false;
                    if (firstInvalid == null)
                        firstInvalid = control;
                    var isVisible = control.IsVisible();
                    if (isVisible && firstVisibleInvalid == null)
                        firstVisibleInvalid = control;
                    if (control.setFocusOnError && invalidEditorToBeFocused == null && isVisible)
                        invalidEditorToBeFocused = control;
                }
            }
        }
    }, this);
    if (invalidEditorToBeFocused != null)
        invalidEditorToBeFocused.SetFocus();
    return new ASPxValidationResult(allProcessedSuccessfull, firstInvalid, firstVisibleInvalid);
}
function _aspxClearChoiceCondition(edit, validationGroup) {
    return !_aspxIsExists(validationGroup) || (edit.validationGroup == validationGroup);
}
function _aspxValidateChoiceCondition(edit, validationGroup) {
    return _aspxClearChoiceCondition(edit, validationGroup) && edit.customValidationEnabled;
}
function _aspxEditorsValidChoiceCondition(edit, validationGroup) {
    return _aspxValidateChoiceCondition(edit, validationGroup);
}
function _aspxClearProcessingProc(edit) {
    edit.SetValue(null);
    edit.SetIsValid(true);
    return true;
}
function _aspxValidateProcessingProc(edit) {
    edit.OnValidation(ASPxValidationType.MassValidation);
    return edit.GetIsValid();
}
function _aspxEditorsValidProcessingProc(edit) {
    return edit.GetIsValid();
}
ASPxCheckEditElementHelper = _aspxCreateClass(ASPxCheckableElementHelper, {
    AttachToMainElement: function (internalCheckBox) {
        ASPxCheckableElementHelper.prototype.AttachToMainElement.call(this, internalCheckBox);
        this.AttachToLabelElement(this.GetLabelElement(internalCheckBox.container), internalCheckBox);
    },
    AttachToLabelElement: function (labelElement, internalCheckBox) {
        var _this = this;
        if (labelElement) {
            _aspxAttachEventToElement(labelElement, "click",
    function (evt) {
        _this.InvokeClick(internalCheckBox, evt);
    }
   );
            _aspxAttachEventToElement(labelElement, "mousedown",
    function (evt) {
        internalCheckBox.Refocus();
    }
   );
        }
    },
    GetLabelElement: function (container) {
        return _aspxGetChildByTagName(container, "LABEL", 0);
    }
});
ASPxCheckEditElementHelper.Instance = new ASPxCheckEditElementHelper();

var __aspxTEInputSuffix = "_I";
var __aspxTERawInputSuffix = "_Raw";
var __aspxPasteCheckInterval = 50;
ASPxEditorStretchedInputElementsManager = _aspxCreateClass(null, {
    constructor: function () {
        this.targetEditorNames = {};
    },
    Initialize: function () {
        this.InitializeTargetEditorsList();
    },
    InitializeTargetEditorsList: function () {
        aspxGetControlCollection().ForEachControl(function (control) {
            if (this.targetEditorNames[control.name])
                return;
            if (ASPxIdent.IsASPxClientTextEdit(control) && control.WidthCorrectionRequired()) {
                var inputElement = control.GetInputElement();
                if (inputElement && _aspxIsPercentageSize(inputElement.style.width))
                    this.targetEditorNames[control.name] = true;
            }
        }, this);
    },
    HideInputElementsExceptOf: function (exceptedEditor) {
        var collection = aspxGetControlCollection();
        for (var editorName in this.targetEditorNames) {
            if (typeof (editorName) != "string")
                continue;
            var editor = collection.Get(editorName);
            if (!ASPxIdent.IsASPxClientEdit(editor)) continue;
            if (editor && editor != exceptedEditor) {
                var input = editor.GetInputElement();
                if (input) {
                    var existentSavedDisplay = input._dxSavedDisplayAttr;
                    if (!_aspxIsExists(existentSavedDisplay)) {
                        input._dxSavedDisplayAttr = input.style.display;
                        input.style.display = "none";
                    }
                }
            }
        }
    },
    ShowInputElements: function () {
        var collection = aspxGetControlCollection();
        for (var editorName in this.targetEditorNames) {
            if (typeof (editorName) != "string")
                continue;
            var editor = collection.Get(editorName);
            if (!ASPxIdent.IsASPxClientEdit(editor)) continue;
            if (editor) {
                var input = editor.GetInputElement();
                if (input) {
                    var savedDisplay = input._dxSavedDisplayAttr;
                    if (_aspxIsExists(savedDisplay)) {
                        input.style.display = savedDisplay;
                        _aspxRemoveAttribute(input, "_dxSavedDisplayAttr");
                    }
                }
            }
        }
    }
});
var __aspxEditorStretchedInputElementsManager = null;
function _aspxGetEditorStretchedInputElementsManager() {
    if (!__aspxEditorStretchedInputElementsManager)
        __aspxEditorStretchedInputElementsManager = new ASPxEditorStretchedInputElementsManager();
    return __aspxEditorStretchedInputElementsManager;
}
ASPxClientBrowserHelper = {
    SAFARI_SYSTEM_CLASS_NAME: "dxeSafariSys",
    MOBILE_SAFARI_SYSTEM_CLASS_NAME: "dxeIPadSys",
    GetBrowserSpecificSystemClassName: function () {
        if (__aspxSafari)
            return __aspxMacOSMobilePlatform ? this.MOBILE_SAFARI_SYSTEM_CLASS_NAME : this.SAFARI_SYSTEM_CLASS_NAME;
        return "";
    }
},
ASPxClientTextEdit = _aspxCreateClass(ASPxClientEdit, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.isASPxClientTextEdit = true;
        this.nullText = "";
        this.escCount = 0;
        this.raiseValueChangedOnEnter = true;
        this.autoResizeWithContainer = false;
        this.lastChangedValue = null;
        this.helpText = "";
        this.helpTextObj = null;
        this.helpTextStyle = [];
        this.helpTextPosition = ASPxClientTextEditHelpTextPosition.Right;
        this.helpTextMargins = null;
        this.helpTextHAlign = ASPxClientTextEditHelpTextHAlign.Left;
        this.helpTextVAlign = ASPxClientTextEditHelpTextVAlign.Top;
        this.enableHelpTextPopupAnimation = true;
        this.helpTextDisplayMode = ASPxClientTextEditHelpTextDisplayMode.Inline;
        this.maskInfo = null;
        this.maskValueBeforeUserInput = "";
        this.maskPasteTimerID = -1;
        this.maskPasteLock = false;
        this.maskPasteCounter = 0;
        this.maskTextBeforePaste = "";
        this.maskHintHtml = "";
        this.maskHintTimerID = -1;
        this.displayFormat = null;
        this.TextChanged = new ASPxClientEvent();
    },
    Initialize: function () {
        this.SaveChangedValue();
        ASPxClientEdit.prototype.Initialize.call(this);
        this.CorrectInputMaxLength();
        if (__aspxWebKitFamily)
            this.CorrectMainElementWhiteSpaceStyle();
    },
    InlineInitialize: function () {
        ASPxClientEdit.prototype.InlineInitialize.call(this);
        if (this.maskInfo != null)
            this.InitMask();
        this.ApplyBrowserSpecificClassName();
        this.helpTextInitialize();
        if (__aspxIE && __aspxBrowserVersion > 8 && !this.isNative)
            this.correctInputElementHeight();
    },
    correctInputElementHeight: function () {
        var mainElement = this.GetMainElement();
        var inputElement = this.GetInputElement();
        if (mainElement) {
            var mainElementHeight = mainElement.style.height;
            var mainElementHeightSpecified = mainElementHeight && mainElementHeight.indexOf('px') !== -1;
            if (mainElementHeightSpecified) {
                var inputElementHeight = mainElement.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(mainElement);
                var inputElementContainer = inputElement.parentNode;
                inputElementHeight -= _aspxGetTopBottomBordersAndPaddingsSummaryValue(inputElementContainer);
                var mainElementCellspacing = _aspxGetCellSpacing(mainElement);
                if (mainElementCellspacing)
                    inputElementHeight -= mainElementCellspacing * 2;
                inputElement.style.height = inputElementHeight + "px";
                if (!ASPxIdent.IsASPxClientMemo(this))
                    inputElement.style.lineHeight = inputElementHeight + "px";
            }
        }
    },
    helpTextInitialize: function () {
        if (this.helpText) {
            this.helpTextObj = new ASPxClientTextEditHelpText(this, this.helpTextStyle, this.helpText, this.helpTextPosition,
    this.helpTextHAlign, this.helpTextVAlign, this.helpTextMargins, this.enableHelpTextPopupAnimation, this.helpTextDisplayMode);
        }
    },
    showHelpText: function () {
        if (this.helpTextObj)
            this.helpTextObj.show();
    },
    hideHelpText: function () {
        if (this.helpTextObj)
            this.helpTextObj.hide();
    },
    ApplyBrowserSpecificClassName: function () {
        var mainElement = this.GetMainElement();
        if (_aspxIsExistsElement(mainElement)) {
            var className = ASPxClientBrowserHelper.GetBrowserSpecificSystemClassName();
            if (className)
                mainElement.className += " " + className;
        }
    },
    CorrectMainElementWhiteSpaceStyle: function () {
        var inputElement = this.GetInputElement();
        if (inputElement && inputElement.parentNode) {
            if (this.IsElementHasWhiteSpaceStyle(inputElement.parentNode))
                inputElement.parentNode.style.whiteSpace = "normal";
        }
    },
    IsElementHasWhiteSpaceStyle: function (element) {
        var currentStyle = _aspxGetCurrentStyle(element);
        return currentStyle.whiteSpace == "nowrap" || currentStyle.whiteSpace == "pre";
    },
    FindInputElement: function () {
        return this.isNative ? this.GetMainElement() : _aspxGetElementById(this.name + __aspxTEInputSuffix);
    },
    GetRawInputElement: function () {
        return _aspxGetElementById(this.name + __aspxTERawInputSuffix);
    },
    DecodeRawInputValue: function (value) {
        return value;
    },
    SetRawInputValue: function (value) {
        this.GetRawInputElement().value = value;
    },
    SyncRawInputValue: function () {
        if (this.maskInfo != null)
            this.SetRawInputValue(this.maskInfo.GetValue());
        else
            this.SetRawInputValue(this.GetInputElement().value);
    },
    HasTextDecorators: function () {
        return this.nullText != "" || this.displayFormat != null;
    },
    CanApplyTextDecorators: function () {
        return !this.focused;
    },
    GetDecoratedText: function (value) {
        var isNull = value == null || value === "";
        if (isNull && this.nullText != "") {
            if (this.CanApplyNullTextDecoration) {
                if (this.CanApplyNullTextDecoration())
                    return this.nullText;
            } else {
                return this.nullText;
            }
        }
        if (this.displayFormat != null)
            return ASPxFormatter.Format(this.displayFormat, value);
        if (this.maskInfo != null)
            return this.maskInfo.GetText();
        if (value == null)
            return "";
        return value;
    },
    ToggleTextDecoration: function () {
        if (this.HasTextDecorators()) {
            if (this.focused) {
                var input = this.GetInputElement();
                var oldValue = input.value;
                this.ToggleTextDecorationCore();
                var sel = _aspxGetSelectionInfo(input);
                if (oldValue != input.value) {
                    if (sel.startPos == 0 && sel.endPos == oldValue.length)
                        sel.endPos = input.value.length;
                    else
                        sel.endPos = sel.startPos;
                    _aspxSetInputSelection(input, sel.startPos, sel.endPos);
                }
            } else
                this.ToggleTextDecorationCore();
        }
    },
    ToggleTextDecorationCore: function () {
        if (this.maskInfo != null) {
            this.ApplyMaskInfo(false);
        } else {
            var input = this.GetInputElement();
            var rawValue = this.GetRawInputElement().value;
            var value = this.CanApplyTextDecorators() ? this.GetDecoratedText(rawValue) : rawValue;
            if (input.value != value)
                input.value = value;
        }
    },
    GetFormattedText: function () {
        var value = this.GetValue();
        var isNull = value == null || value === "";
        if (isNull && this.nullText != "")
            return this.GetText();
        return this.GetDecoratedText(value);
    },
    PopulateStyleDecorationPostfixes: function () {
        ASPxClientEdit.prototype.PopulateStyleDecorationPostfixes.call(this);
        this.styleDecoration.AddPostfix(__aspxTEInputSuffix);
    },
    GetValue: function () {
        var value = null;
        if (this.maskInfo != null)
            value = this.maskInfo.GetValue();
        else if (this.HasTextDecorators())
            value = this.GetRawInputElement().value;
        else
            value = this.GetInputElement().value;
        return (value == "" && this.convertEmptyStringToNull) ? null : value;
    },
    SetValue: function (value) {
        if (value == null) value = "";
        if (this.maskInfo != null) {
            this.maskInfo.SetValue(value);
            this.ApplyMaskInfo(false);
            this.SavePrevMaskValue();
        }
        else if (this.HasTextDecorators()) {
            this.SetRawInputValue(value);
            this.GetInputElement().value = this.CanApplyTextDecorators() ? this.GetDecoratedText(value) : value;
        }
        else
            this.GetInputElement().value = value;
        if (this.styleDecoration)
            this.styleDecoration.Update();
        this.SaveChangedValue();
    },
    SetVisible: function (visible) {
        ASPxClientEdit.prototype.SetVisible.call(this, visible);
        if (this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Inline) {
            if (visible)
                this.showHelpText();
            else
                this.hideHelpText();
        }
    },
    CollapseControl: function () {
        if (!this.IsAdjustmentRequired()) return;
        var mainElement = this.GetMainElement();
        if (!_aspxIsExistsElement(mainElement))
            return;
        if (this.WidthCorrectionRequired())
            this.GetInputElement().style.width = "0";
    },
    CorrectEditorWidth: function () {
        var inputElement = this.GetInputElement();
        var stretchedInputsManager = _aspxGetEditorStretchedInputElementsManager();
        var currentAciveElement = null;
        if (this.IsRestoreActiveElementAfterWidthCorrection())
            currentAciveElement = _aspxGetActiveElement();
        try {
            stretchedInputsManager.HideInputElementsExceptOf(this);
            _aspxSetOffsetWidth(inputElement, _aspxGetClearClientWidth(_aspxFindOffsetParent(inputElement)) - this.GetInputWidthCorrection());
        } finally {
            stretchedInputsManager.ShowInputElements();
        }
        if (this.IsRestoreActiveElementAfterWidthCorrection())
            this.RestoreActiveElement(currentAciveElement);
    },
    UnstretchInputElement: function () {
        var inputElement = this.GetInputElement();
        var mainElement = this.GetMainElement();
        var mainElementCurStyle = _aspxGetCurrentStyle(mainElement);
        if (_aspxIsExistsElement(mainElement) && _aspxIsExistsElement(inputElement) && _aspxIsExists(mainElementCurStyle) &&
   inputElement.style.width == "100%" &&
   (mainElementCurStyle.width == "" || mainElementCurStyle.width == "auto"))
            inputElement.style.width = "";
    },
    RestoreActiveElement: function (activeElement) {
        if (activeElement && activeElement.setActive && activeElement.tagName != "IFRAME")
            activeElement.setActive();
    },
    IsRestoreActiveElementAfterWidthCorrection: function () {
        return __aspxIE && __aspxBrowserVersion <= 7;
    },
    RaiseValueChangedEvent: function () {
        var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
        processOnServer = this.RaiseTextChanged(processOnServer);
        return processOnServer;
    },
    GetInputWidthCorrection: function () {
        return 0;
    },
    InitMask: function () {
        var raw = String(this.GetRawInputElement().value);
        this.SetValue(raw.length ? this.DecodeRawInputValue(raw) : this.maskInfo.GetValue());
        this.validationPatterns.unshift(new ASPxMaskValidationPattern(this.maskInfo.errorText, this.maskInfo));
    },
    SetMaskPasteTimer: function () {
        this.ClearMaskPasteTimer();
        this.maskPasteTimerID = _aspxSetInterval("aspxMaskPasteTimerProc('" + this.name + "')", __aspxPasteCheckInterval);
    },
    ClearMaskPasteTimer: function () {
        this.maskPasteTimerID = _aspxClearInterval(this.maskPasteTimerID);
    },
    SavePrevMaskValue: function () {
        this.maskValueBeforeUserInput = this.maskInfo.GetValue();
    },
    FillMaskInfo: function () {
        var input = this.GetInputElement();
        if (!input) return;
        var sel = _aspxGetSelectionInfo(input);
        this.maskInfo.SetCaret(sel.startPos, sel.endPos - sel.startPos);
    },
    ApplyMaskInfo: function (applyCaret) {
        this.SyncRawInputValue();
        var input = this.GetInputElement();
        var text = this.GetMaskDisplayText();
        this.maskTextBeforePaste = text;
        if (input.value != text)
            input.value = text;
        if (applyCaret)
            _aspxSetInputSelection(input, this.maskInfo.caretPos, this.maskInfo.caretPos + this.maskInfo.selectionLength);
    },
    GetMaskDisplayText: function () {
        if (!this.focused && this.HasTextDecorators())
            return this.GetDecoratedText(this.maskInfo.GetValue());
        return this.maskInfo.GetText();
    },
    ShouldCancelMaskKeyProcessing: function (htmlEvent, keyDownInfo) {
        return htmlEvent.returnValue === false;
    },
    HandleMaskKeyDown: function (evt) {
        var keyInfo = _aspxMaskManager.CreateKeyInfoByEvent(evt);
        _aspxMaskManager.keyCancelled = this.ShouldCancelMaskKeyProcessing(evt, keyInfo);
        if (_aspxMaskManager.keyCancelled) {
            _aspxPreventEvent(evt);
            return;
        }
        this.maskPasteLock = true;
        this.FillMaskInfo();
        var canHandle = _aspxMaskManager.CanHandleControlKey(keyInfo);
        _aspxMaskManager.savedKeyDownKeyInfo = keyInfo;
        if (canHandle) {
            _aspxMaskManager.OnKeyDown(this.maskInfo, keyInfo);
            this.ApplyMaskInfo(true);
            _aspxPreventEvent(evt);
        }
        _aspxMaskManager.keyDownHandled = canHandle;
        this.maskPasteLock = false;
        this.UpdateMaskHintHtml();
    },
    HandleMaskKeyPress: function (evt) {
        var keyInfo = _aspxMaskManager.CreateKeyInfoByEvent(evt);
        _aspxMaskManager.keyCancelled = _aspxMaskManager.keyCancelled || this.ShouldCancelMaskKeyProcessing(evt, _aspxMaskManager.savedKeyDownKeyInfo);
        if (_aspxMaskManager.keyCancelled) {
            _aspxPreventEvent(evt);
            return;
        }
        this.maskPasteLock = true;
        var printable = _aspxMaskManager.savedKeyDownKeyInfo != null && _aspxMaskManager.IsPrintableKeyCode(_aspxMaskManager.savedKeyDownKeyInfo);
        if (printable) {
            _aspxMaskManager.OnKeyPress(this.maskInfo, keyInfo);
            this.ApplyMaskInfo(true);
        }
        if (printable || _aspxMaskManager.keyDownHandled)
            _aspxPreventEvent(evt);
        this.maskPasteLock = false;
        this.UpdateMaskHintHtml();
    },
    MaskPasteTimerProc: function () {
        if (this.maskPasteLock) return;
        this.maskPasteCounter++;
        var inputElement = this.inputElement;
        if (!inputElement || this.maskPasteCounter > 40) {
            this.maskPasteCounter = 0;
            inputElement = this.GetInputElement();
            if (!_aspxIsExistsElement(inputElement)) {
                this.ClearMaskPasteTimer();
                return;
            }
        }
        if (this.maskTextBeforePaste != inputElement.value && this.maskInfo != null) {
            this.maskInfo.ProcessPaste(inputElement.value, _aspxGetSelectionInfo(inputElement).endPos);
            this.ApplyMaskInfo(true);
        }
        if (!this.focused)
            this.ClearMaskPasteTimer();
    },
    BeginShowMaskHint: function () {
        if (!this.readOnly && this.maskHintTimerID == -1)
            this.maskHintTimerID = window.setInterval(aspxMaskHintTimerProc, 500);
    },
    EndShowMaskHint: function () {
        window.clearInterval(this.maskHintTimerID);
        this.maskHintTimerID = -1;
    },
    MaskHintTimerProc: function () {
        if (this.maskInfo) {
            this.FillMaskInfo();
            this.UpdateMaskHintHtml();
        } else {
            this.EndShowMaskHint();
        }
    },
    UpdateMaskHintHtml: function () {
        var hint = this.GetMaskHintElement();
        if (!_aspxIsExistsElement(hint))
            return;
        var html = _aspxMaskManager.GetHintHtml(this.maskInfo);
        if (html == this.maskHintHtml)
            return;
        if (html != "") {
            var mainElement = this.GetMainElement();
            if (_aspxIsExistsElement(mainElement)) {
                hint.innerHTML = html;
                hint.style.position = "absolute";
                hint.style.left = _aspxPrepareClientPosForElement(_aspxGetAbsoluteX(mainElement), mainElement, true) + "px";
                hint.style.top = (_aspxPrepareClientPosForElement(_aspxGetAbsoluteY(mainElement), mainElement, false) + mainElement.offsetHeight + 2) + "px";
                hint.style.display = "block";
            }
        } else {
            hint.style.display = "none";
        }
        this.maskHintHtml = html;
    },
    HideMaskHint: function () {
        var hint = this.GetMaskHintElement();
        if (_aspxIsExistsElement(hint))
            hint.style.display = "none";
        this.maskHintHtml = "";
    },
    GetMaskHintElement: function () {
        return _aspxGetElementById(this.name + "_MaskHint");
    },
    OnFocus: function () {
        if (this.maskInfo != null)
            this.SetMaskPasteTimer();
        ASPxClientEdit.prototype.OnFocus.call(this);
    },
    OnMouseWheel: function (evt) {
        if (this.readOnly || this.maskInfo == null) return;
        this.FillMaskInfo();
        _aspxMaskManager.OnMouseWheel(this.maskInfo, _aspxGetWheelDelta(evt) < 0 ? -1 : 1);
        this.ApplyMaskInfo(true);
        _aspxPreventEvent(evt);
        this.UpdateMaskHintHtml();
    },
    OnBrowserWindowResize: function (evt) {
        if (!this.autoResizeWithContainer)
            this.AdjustControl();
    },
    IsValueChanged: function () {
        return this.GetValue() != this.lastChangedValue;
    },
    OnKeyDown: function (evt) {
        if (__aspxIE && _aspxGetKeyCode(evt) == ASPxKey.Esc) {
            if (++this.escCount > 1) {
                _aspxPreventEvent(evt);
                return;
            }
        } else
            this.escCount = 0;
        ASPxClientEdit.prototype.OnKeyDown.call(this, evt);
        if (!this.IsRaiseStandardOnChange(evt)) {
            if (!this.readOnly && this.maskInfo != null)
                this.HandleMaskKeyDown(evt);
        }
    },
    OnKeyPress: function (evt) {
        ASPxClientEdit.prototype.OnKeyPress.call(this, evt);
        if (!this.readOnly && this.maskInfo != null && !this.IsRaiseStandardOnChange(evt))
            this.HandleMaskKeyPress(evt);
        if (this.NeedOnKeyEventEnd(evt, true))
            this.OnKeyEventEnd(evt);
    },
    OnKeyUp: function (evt) {
        if (__aspxFirefox && !this.focused && _aspxGetKeyCode(evt) === ASPxKey.Tab)
            return;
        if (this.NeedOnKeyEventEnd(evt, false))
            this.OnKeyEventEnd(evt);
        ASPxClientEdit.prototype.OnKeyUp.call(this, evt);
    },
    NeedOnKeyEventEnd: function (evt, isKeyPress) {
        var handleKeyPress = this.maskInfo != null && evt.keyCode == ASPxKey.Enter;
        return handleKeyPress == isKeyPress;
    },
    OnKeyEventEnd: function (evt) {
        if (!this.readOnly) {
            if (this.IsRaiseStandardOnChange(evt))
                this.RaiseStandardOnChange();
            if (this.HasTextDecorators())
                this.SyncRawInputValue();
        }
    },
    IsRaiseStandardOnChange: function (evt) {
        return !this.specialKeyboardHandlingUsed && this.raiseValueChangedOnEnter && evt.keyCode == ASPxKey.Enter;
    },
    GetFocusSelectAction: function () {
        if (this.maskInfo)
            return "start";
        return "all";
    },
    OnFocusCore: function () {
        var wasLocked = this.IsFocusEventsLocked();
        ASPxClientEdit.prototype.OnFocusCore.call(this);
        this.CorrectInputMaxLength(true);
        if (this.maskInfo != null) {
            this.SavePrevMaskValue();
            this.BeginShowMaskHint();
        }
        if (!wasLocked)
            this.ToggleTextDecoration();
        if (this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Popup)
            this.showHelpText();
    },
    OnLostFocusCore: function () {
        var wasLocked = this.IsFocusEventsLocked();
        ASPxClientEdit.prototype.OnLostFocusCore.call(this);
        this.CorrectInputMaxLength();
        if (this.maskInfo != null) {
            this.EndShowMaskHint();
            this.HideMaskHint();
            if (this.maskInfo.ApplyFixes(null))
                this.ApplyMaskInfo(false);
            this.RaiseStandardOnChange();
        }
        if (!wasLocked)
            this.ToggleTextDecoration();
        this.escCount = 0;
        if (this.helpTextDisplayMode === ASPxClientTextEditHelpTextDisplayMode.Popup)
            this.hideHelpText();
    },
    CorrectInputMaxLength: function (onFocus) {
        if (__aspxIE && __aspxBrowserVersion >= 10 && !this.isNative) {
            var input = this.GetInputElement();
            if (!_aspxIsExists(this.inputMaxLength))
                this.inputMaxLength = input.maxLength;
            input.maxLength = onFocus ? this.inputMaxLength : -1;
        }
    },
    OnValueChanged: function () {
        if (this.maskInfo != null) {
            if (this.maskInfo.GetValue() == this.maskValueBeforeUserInput)
                return;
            this.SavePrevMaskValue();
        }
        if (this.HasTextDecorators())
            this.SyncRawInputValue();
        if (!this.IsValueChanged()) return;
        this.SaveChangedValue();
        ASPxClientEdit.prototype.OnValueChanged.call(this);
    },
    OnTextChanged: function () {
    },
    SaveChangedValue: function () {
        this.lastChangedValue = this.GetValue();
    },
    RaiseStandardOnChange: function () {
        var element = this.GetInputElement();
        if (element && element.onchange) {
            element.onchange({ target: this.GetInputElement() });
        }
    },
    RaiseTextChanged: function (processOnServer) {
        if (!this.TextChanged.IsEmpty()) {
            var args = new ASPxClientProcessingModeEventArgs(processOnServer);
            this.TextChanged.FireEvent(this, args);
            processOnServer = args.processOnServer;
        }
        return processOnServer;
    },
    GetText: function () {
        if (this.maskInfo != null) {
            return this.maskInfo.GetText();
        } else {
            var value = this.GetValue();
            return value != null ? value : "";
        }
    },
    SetText: function (value) {
        if (this.maskInfo != null) {
            this.maskInfo.SetText(value);
            this.ApplyMaskInfo(false);
            this.SavePrevMaskValue();
        } else {
            this.SetValue(value);
        }
    },
    SelectAll: function () {
        this.SetSelection(0, -1, false);
    },
    SetCaretPosition: function (pos) {
        var inputElement = this.GetInputElement();
        _aspxSetCaretPosition(inputElement, pos);
    },
    SetSelection: function (startPos, endPos, scrollToSelection) {
        var inputElement = this.GetInputElement();
        _aspxSetSelection(inputElement, startPos, endPos, scrollToSelection);
    },
    ChangeEnabledAttributes: function (enabled) {
        var inputElement = this.GetInputElement();
        if (inputElement) {
            this.ChangeInputEnabledAttributes(inputElement, _aspxChangeAttributesMethod(enabled), enabled);
            if (this.specialKeyboardHandlingUsed)
                this.ChangeSpecialInputEnabledAttributes(inputElement, _aspxChangeEventsMethod(enabled));
            this.ChangeInputEnabled(inputElement, enabled);
        }
    },
    ChangeEnabledStateItems: function (enabled) {
        if (!this.isNative) {
            var sc = aspxGetStateController();
            sc.SetElementEnabled(this.GetMainElement(), enabled);
            sc.SetElementEnabled(this.GetInputElement(), enabled);
        }
    },
    ChangeInputEnabled: function (element, enabled) {
        element.disabled = !enabled;
    },
    ChangeInputEnabledAttributes: function (element, method, enabled) {
        if (enabled && __aspxWebKitFamily && element.tabIndex == -1)
            element.tabIndex = null;
        method(element, "tabIndex");
        if (!enabled) element.tabIndex = -1;
        method(element, "onclick");
        method(element, "onfocus");
        method(element, "onblur");
        method(element, "onkeydown");
        method(element, "onkeypress");
        method(element, "onkeyup");
    }
});
ASPxIdent.IsASPxClientTextEdit = function (obj) {
    return !!obj.isASPxClientTextEdit;
};
ASPxMaskValidationPattern = _aspxCreateClass(ASPxValidationPattern, {
    constructor: function (errorText, maskInfo) {
        this.constructor.prototype.constructor.call(this, errorText);
        this.maskInfo = maskInfo;
    },
    EvaluateIsValid: function (value) {
        return this.maskInfo.IsValid();
    }
});
ASPxClientTextBoxBase = _aspxCreateClass(ASPxClientTextEdit, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.sizingConfig.allowSetHeight = false;
        this.sizingConfig.adjustControl = true;
    }
});
ASPxClientTextBox = _aspxCreateClass(ASPxClientTextBoxBase, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.isASPxClientTextBox = true;
    }
});
ASPxClientTextBox.Cast = ASPxClientControl.Cast;
ASPxIdent.IsASPxClientTextBox = function (obj) {
    return !!obj.isASPxClientTextBox;
};
var __aspxMMinHeight = 34;
ASPxClientMemo = _aspxCreateClass(ASPxClientTextEdit, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.isASPxClientMemo = true;
        this.raiseValueChangedOnEnter = false;
        this.maxLength = 0;
        this.pasteTimerID = -1;
        this.pasteTimerActivatorCount = 0;
    },
    Initialize: function () {
        this.SaveChangedValue();
        this.maxLengthRestricted = this.maxLength > 0;
    },
    CutString: function () {
        var text = this.GetText();
        if (text.length > this.maxLength) {
            text = text.substring(0, this.maxLength);
            this.SetText(text);
        }
    },
    EventKeyCodeChangesTheInput: function (evt) {
        if (_aspxIsPasteShortcut(evt))
            return true;
        else if (evt.ctrlKey)
            return false;
        var keyCode = _aspxGetKeyCode(evt);
        var isSystemKey = ASPxKey.Windows <= keyCode && keyCode <= ASPxKey.ContextMenu;
        var isFKey = ASPxKey.F1 <= keyCode && keyCode <= 127;
        return ASPxKey.Delete < keyCode && !isSystemKey && !isFKey || keyCode == ASPxKey.Enter || keyCode == ASPxKey.Space;
    },
    OnTextChangingCheck: function () {
        if (this.maxLengthRestricted)
            this.CutString();
    },
    StartTextChangingTimer: function () {
        if (this.maxLengthRestricted) {
            if (this.pasteTimerActivatorCount == 0)
                this.SetTextChangingTimer();
            this.pasteTimerActivatorCount++;
        }
    },
    EndTextChangingTimer: function () {
        if (this.maxLengthRestricted) {
            this.pasteTimerActivatorCount--;
            if (this.pasteTimerActivatorCount == 0)
                this.ClearTextChangingTimer();
        }
    },
    CollapseControl: function () {
        if (!this.IsAdjustmentRequired()) return;
        var mainElement = this.GetMainElement();
        var inputElement = this.GetInputElement();
        if (!_aspxIsExistsElement(mainElement) || !_aspxIsExistsElement(inputElement))
            return;
        ASPxClientTextEdit.prototype.CollapseControl.call(this);
        var mainElementCurStyle = _aspxGetCurrentStyle(mainElement);
        if (this.heightCorrectionRequired && mainElement && inputElement) {
            if (mainElement.style.height == "100%" || mainElementCurStyle.height == "100%") {
                mainElement.style.height = "0";
                mainElement.wasCollapsed = true;
            }
            inputElement.style.height = "0";
        }
    },
    CorrectEditorHeight: function () {
        var mainElement = this.GetMainElement();
        if (mainElement.wasCollapsed) {
            mainElement.wasCollapsed = null;
            _aspxSetOffsetHeight(mainElement, _aspxGetClearClientHeight(_aspxFindOffsetParent(mainElement)));
        }
        if (!this.isNative) {
            var inputElement = this.GetInputElement();
            var inputClearClientHeight = _aspxGetClearClientHeight(_aspxFindOffsetParent(inputElement));
            if (__aspxIE) {
                inputClearClientHeight -= 2;
                var calculatedMainElementStyle = _aspxGetCurrentStyle(mainElement);
                inputClearClientHeight += _aspxPxToInt(calculatedMainElementStyle.borderTopWidth) + _aspxPxToInt(calculatedMainElementStyle.borderBottomWidth);
            }
            if (inputClearClientHeight < __aspxMMinHeight)
                inputClearClientHeight = __aspxMMinHeight;
            _aspxSetOffsetHeight(inputElement, inputClearClientHeight);
            mainElement.style.height = "100%";
        }
    },
    SetWidth: function (width) {
        this.constructor.prototype.SetWidth.call(this, width);
        if (__aspxIE)
            this.AdjustControl();
    },
    SetHeight: function (height) {
        this.GetInputElement().style.height = "1px";
        this.constructor.prototype.SetHeight.call(this, height);
        this.GetInputElement().style.height = this.GetMainElement().clientHeight + "px";
    },
    ClearErrorFrameElementsStyles: function () {
        var textarea = this.GetInputElement();
        if (!textarea)
            return;
        var scrollBarPosition = textarea.scrollTop;
        ASPxClientTextEdit.prototype.ClearErrorFrameElementsStyles.call(this);
        if (__aspxFirefox)
            textarea.scrollTop = scrollBarPosition;
    },
    AllowPreventingDefaultEnterBehavior: function () {
        return false;
    },
    OnMouseOver: function () {
        this.StartTextChangingTimer();
    },
    OnMouseOut: function () {
        this.EndTextChangingTimer();
    },
    OnFocus: function () {
        this.StartTextChangingTimer();
        ASPxClientEdit.prototype.OnFocus.call(this);
    },
    OnLostFocus: function () {
        this.EndTextChangingTimer();
        ASPxClientEdit.prototype.OnLostFocus.call(this);
    },
    OnKeyDown: function (evt) {
        if (this.maxLengthRestricted) {
            var selection = _aspxGetSelectionInfo(this.GetInputElement());
            var noCharToReplace = selection.startPos == selection.endPos;
            if (this.GetText().length >= this.maxLength && noCharToReplace && this.EventKeyCodeChangesTheInput(evt)) {
                return _aspxPreventEvent(evt);
            }
        }
        ASPxClientEdit.prototype.OnKeyDown.call(this, evt);
    },
    SetTextChangingTimer: function () {
        this.pasteTimerID = _aspxSetInterval(function () { this.OnTextChangingCheck(); } .aspxBind(this), __aspxPasteCheckInterval);
    },
    ClearTextChangingTimer: function () {
        this.pasteTimerID = _aspxClearInterval(this.pasteTimerID);
    }
});
function aspxMMMouseOut(name, evt) {
    var edit = aspxGetControlCollection().Get(name);
    if (edit != null) edit.OnMouseOut(evt);
}
function aspxMMMouseOver(name, evt) {
    var edit = aspxGetControlCollection().Get(name);
    if (edit != null) edit.OnMouseOver(evt);
}
ASPxClientMemo.Cast = ASPxClientControl.Cast;
ASPxIdent.IsASPxClientMemo = function (obj) {
    return !!obj.isASPxClientMemo;
};
ASPxClientButtonEditBase = _aspxCreateClass(ASPxClientTextBoxBase, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.allowUserInput = true;
        this.allowMouseWheel = true;
        this.buttonCount = 0;
        this.ButtonClick = new ASPxClientEvent();
    },
    GetInputWidthCorrection: function () {
        if (__aspxIE && __aspxBrowserVersion <= 7) {
            var mainElement = this.GetMainElement();
            var cellSpacing = _aspxGetAttribute(mainElement, "cellSpacing");
            if (cellSpacing === "0")
                return 1;
        }
        return 0;
    },
    GetButton: function (number) {
        return this.GetChild("_B" + number);
    },
    ProcessInternalButtonClick: function (buttonIndex) {
        return false;
    },
    OnButtonClick: function (number) {
        var processOnServer = this.RaiseButtonClick(number);
        if (!this.ProcessInternalButtonClick(number) && processOnServer)
            this.SendPostBack('BC:' + number);
    },
    OnKeyPress: function (evt) {
        if (this.allowUserInput)
            ASPxClientTextBoxBase.prototype.OnKeyPress.call(this, evt);
    },
    RaiseButtonClick: function (number) {
        var processOnServer = this.autoPostBack || this.IsServerEventAssigned("ButtonClick");
        if (!this.ButtonClick.IsEmpty()) {
            var args = new ASPxClientButtonEditClickEventArgs(processOnServer, number);
            this.ButtonClick.FireEvent(this, args);
            processOnServer = args.processOnServer;
        }
        return processOnServer;
    },
    ChangeEnabledAttributes: function (enabled) {
        ASPxClientTextEdit.prototype.ChangeEnabledAttributes.call(this, enabled);
        for (var i = 0; i < this.buttonCount; i++) {
            var element = this.GetButton(i);
            if (element)
                this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
        }
    },
    ChangeEnabledStateItems: function (enabled) {
        ASPxClientTextEdit.prototype.ChangeEnabledStateItems.call(this, enabled);
        for (var i = 0; i < this.buttonCount; i++) {
            var element = this.GetButton(i);
            if (element)
                aspxGetStateController().SetElementEnabled(element, enabled);
        }
    },
    ChangeButtonEnabledAttributes: function (element, method) {
        method(element, "onclick");
        method(element, "ondblclick");
        method(element, "on" + ASPxClientTouchUI.touchMouseDownEventName);
        method(element, "on" + ASPxClientTouchUI.touchMouseUpEventName);
    },
    ChangeInputEnabled: function (element, enabled) {
        ASPxClientTextEdit.prototype.ChangeInputEnabled.call(this, element, enabled);
    }
});
ASPxClientButtonEdit = _aspxCreateClass(ASPxClientButtonEditBase, {
});
ASPxClientButtonEdit.Cast = ASPxClientControl.Cast;
ASPxClientButtonEditClickEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
    constructor: function (processOnServer, buttonIndex) {
        this.constructor.prototype.constructor.call(this, processOnServer);
        this.buttonIndex = buttonIndex;
    }
});
function aspxETextChanged(name) {
    var edit = aspxGetControlCollection().Get(name);
    if (edit != null) edit.OnTextChanged();
}
function aspxBEClick(name, number) {
    var edit = aspxGetControlCollection().Get(name);
    if (edit != null) edit.OnButtonClick(number);
}
function aspxMaskPasteTimerProc(name) {
    var edit = aspxGetControlCollection().Get(name);
    if (edit != null && edit.maskInfo)
        edit.MaskPasteTimerProc();
}
function aspxMaskHintTimerProc() {
    var focusedEditor = ASPxClientEdit.GetFocusedEditor();
    if (focusedEditor != null && _aspxIsFunction(focusedEditor.MaskHintTimerProc))
        focusedEditor.MaskHintTimerProc();
}
function _aspxSetFocusToTextEditWithDelay(name) {
    _aspxSetTimeout(function () {
        var edit = aspxGetControlCollection().Get(name);
        if (!edit)
            return;
        __aspxIE ? edit.SetCaretPosition(0) : edit.SetFocus();
    }, 500);
}
ASPxClientTextEditHelpTextPosition = {
    Left: "Left",
    Right: "Right",
    Top: "Top",
    Bottom: "Bottom"
}
ASPxClientTextEditHelpTextHAlign = {
    Left: "Left",
    Right: "Right",
    Center: "Center"
}
ASPxClientTextEditHelpTextVAlign = {
    Top: "Top",
    Bottom: "Bottom",
    Middle: "Middle"
}
ASPxClientTextEditHelpTextDisplayMode = {
    Inline: "Inline",
    Popup: "Popup"
}
ASPxClientTextEditHelpTextConsts = {
    VERTICAL_ORIENTATION_CLASS_NAME: "dxeVHelpTextSys",
    HORIZONTAL_ORIENTATION_CLASS_NAME: "dxeHHelpTextSys"
}
ASPxClientTextEditHelpText = _aspxCreateClass(null, {
    constructor: function (editor, helpTextStyle, helpText, position, hAlign, vAlign, margins, animationEnabled, helpTextDisplayMode) {
        this.hAlign = hAlign;
        this.vAlign = vAlign;
        this.animationEnabled = animationEnabled;
        this.displayMode = helpTextDisplayMode;
        this.editor = editor;
        this.editorMainElement = editor.GetMainElement();
        this.margins = margins ? { Top: margins[0], Right: margins[1], Bottom: margins[2], Left: margins[3]} : null;
        this.defaultMargins = { Top: 10, Right: 10, Bottom: 10, Left: 10 };
        this.position = position;
        this.helpTextElement = this.createHelpTextElement();
        this.setHelpTextZIndex(true);
        this.prepareHelpTextElement(helpTextStyle, helpText);
    },
    addHelpTextCellToExternalTable: function (errorTable, helpTextCell) {
        var getRows = function (table) { return _aspxGetChildNodesByTagName(table, "TR"); };
        var getCells = function (row) { return _aspxGetChildNodesByTagName(row, "TD"); };
        var errorTableBody = _aspxGetChildByTagName(errorTable, "TBODY", 0);
        var tableRows = getRows(errorTableBody);
        var rowCount = tableRows.length;
        var colCount = getCells(tableRows[0]).length;
        if (this.position === ASPxClientTextEditHelpTextPosition.Top || this.position === ASPxClientTextEditHelpTextPosition.Bottom) {
            var helpTextElement = document.createElement("TR");
            if (this.position === ASPxClientTextEditHelpTextPosition.Top)
                errorTableBody.insertBefore(helpTextElement, errorTableBody.childNodes[0]);
            else
                errorTableBody.appendChild(helpTextElement);
            helpTextElement.appendChild(helpTextCell);
            if (colCount > 1)
                _aspxSetAttribute(helpTextCell, "ColSpan", colCount);
        } else {
            var helpTextElement = tableRows[0];
            if ((this.position === ASPxClientTextEditHelpTextPosition.Left && !this.editor.rtl) ||
    (this.position === ASPxClientTextEditHelpTextPosition.Right && this.editor.rtl))
                helpTextElement.insertBefore(helpTextCell, helpTextElement.childNodes[0]);
            else
                helpTextElement.appendChild(helpTextCell);
            if (rowCount > 1)
                _aspxSetAttribute(helpTextCell, "RowSpan", rowCount);
        }
    },
    createExternalTable: function () {
        var externalTable = document.createElement("TABLE");
        externalTable.cellPadding = 0;
        externalTable.cellSpacing = 0;
        var editorWidth = this.editorMainElement.style.width;
        if (_aspxIsPercentageSize(editorWidth))
            externalTable.style.width = editorWidth;
        var externalTableBody = document.createElement("TBODY");
        var externalTableRow = document.createElement("TR");
        var externalTableCell = document.createElement("TD");
        externalTable.appendChild(externalTableBody);
        externalTableBody.appendChild(externalTableRow);
        externalTableRow.appendChild(externalTableCell);
        this.editorMainElement.parentNode.appendChild(externalTable);
        _aspxChangeElementContainer(this.editorMainElement, externalTableCell, true);
        return externalTable;
    },
    createInlineHelpTextElement: function () {
        var helpTextElement = document.createElement("TD");
        var externalTable = this.editor.GetExternalTable();
        if (!externalTable)
            externalTable = this.createExternalTable();
        this.addHelpTextCellToExternalTable(externalTable, helpTextElement);
        return helpTextElement;
    },
    createPopupHelpTextElement: function () {
        var helpTextElement = document.createElement("DIV");
        document.body.appendChild(helpTextElement);
        ASPxAnimationHelper.setOpacity(helpTextElement, 0);
        return helpTextElement;
    },
    createHelpTextElement: function () {
        return this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Popup ?
   this.createPopupHelpTextElement() : this.createInlineHelpTextElement();
    },
    prepareHelpTextElement: function (helpTextStyle, helpText) {
        this.helpTextElement.className = helpTextStyle[0];
        if (helpTextStyle[1]) {
            var styleSheet = _aspxGetCurrentStyleSheet();
            this.helpTextElement.className += " " + _aspxCreateImportantStyleRule(styleSheet, helpTextStyle[1]);
        }
        _aspxSetInnerHtml(this.helpTextElement, helpText);
        if (this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Popup)
            this.updatePopupHelpTextPosition();
        else {
            var isVerticalOrientation = this.position === ASPxClientTextEditHelpTextPosition.Top || this.position === ASPxClientTextEditHelpTextPosition.Bottom;
            var orientationClassName = isVerticalOrientation ? ASPxClientTextEditHelpTextConsts.VERTICAL_ORIENTATION_CLASS_NAME :
    ASPxClientTextEditHelpTextConsts.HORIZONTAL_ORIENTATION_CLASS_NAME;
            this.helpTextElement.className += " " + orientationClassName;
            this.setInlineHelpTextElementAlign();
            _aspxSetElementDisplay(this.helpTextElement, this.editor.clientVisible);
        }
    },
    setInlineHelpTextElementAlign: function () {
        var hAlignValue = "", vAlignValue = "";
        switch (this.hAlign) {
            case ASPxClientTextEditHelpTextHAlign.Left: hAlignValue = "left"; break;
            case ASPxClientTextEditHelpTextHAlign.Right: hAlignValue = "right"; break;
            case ASPxClientTextEditHelpTextHAlign.Center: hAlignValue = "center"; break;
        }
        switch (this.vAlign) {
            case ASPxClientTextEditHelpTextVAlign.Top: vAlignValue = "top"; break;
            case ASPxClientTextEditHelpTextVAlign.Bottom: vAlignValue = "bottom"; break;
            case ASPxClientTextEditHelpTextVAlign.Middle: vAlignValue = "middle"; break;
        }
        this.helpTextElement.style.textAlign = hAlignValue;
        this.helpTextElement.style.verticalAlign = vAlignValue;
    },
    getHelpTextMargins: function () {
        if (this.margins)
            return this.margins;
        var result = this.defaultMargins;
        if (this.position === ASPxClientTextEditHelpTextPosition.Top || this.position === ASPxClientTextEditHelpTextPosition.Bottom)
            result.Left = result.Right = 0;
        else
            result.Top = result.Bottom = 0;
        return result;
    },
    updatePopupHelpTextPosition: function (editorMainElement) {
        var editorWidth = this.editorMainElement.offsetWidth;
        var editorHeight = this.editorMainElement.offsetHeight;
        var helpTextWidth = this.helpTextElement.offsetWidth;
        var helpTextHeight = this.helpTextElement.offsetHeight;
        var editorX = _aspxGetAbsoluteX(this.editorMainElement);
        var editorY = _aspxGetAbsoluteY(this.editorMainElement);
        var helpTextX = 0, helpTextY = 0;
        var margins = this.getHelpTextMargins();
        if (this.position === ASPxClientTextEditHelpTextPosition.Top || this.position === ASPxClientTextEditHelpTextPosition.Bottom) {
            if (this.position === ASPxClientTextEditHelpTextPosition.Top)
                helpTextY = editorY - margins.Bottom - helpTextHeight;
            else if (this.position === ASPxClientTextEditHelpTextPosition.Bottom)
                helpTextY = editorY + editorHeight + margins.Top;
            if (this.hAlign === ASPxClientTextEditHelpTextHAlign.Left)
                helpTextX = editorX + margins.Left;
            else if (this.hAlign === ASPxClientTextEditHelpTextHAlign.Right)
                helpTextX = editorX + editorWidth - helpTextWidth - margins.Right;
            else if (this.hAlign === ASPxClientTextEditHelpTextHAlign.Center) {
                var editorCenterX = editorX + editorWidth / 2;
                var helpTextWidthWithMargins = helpTextWidth + margins.Left + margins.Right;
                helpTextX = editorCenterX - helpTextWidthWithMargins / 2 + margins.Left;
            }
        } else {
            if (this.position === ASPxClientTextEditHelpTextPosition.Left)
                helpTextX = editorX - margins.Right - helpTextWidth;
            else if (this.position === ASPxClientTextEditHelpTextPosition.Right)
                helpTextX = editorX + editorWidth + margins.Left;
            if (this.vAlign === ASPxClientTextEditHelpTextVAlign.Top)
                helpTextY = editorY + margins.Top;
            else if (this.vAlign === ASPxClientTextEditHelpTextVAlign.Bottom)
                helpTextY = editorY + editorHeight - helpTextHeight - margins.Bottom;
            else if (this.vAlign === ASPxClientTextEditHelpTextVAlign.Middle) {
                var editorCenterY = editorY + editorHeight / 2;
                var helpTextHeightWithMargins = helpTextHeight + margins.Top + margins.Bottom;
                helpTextY = editorCenterY - helpTextHeightWithMargins / 2 + margins.Top;
            }
        }
        helpTextX = helpTextX < 0 ? 0 : helpTextX;
        helpTextY = helpTextY < 0 ? 0 : helpTextY;
        _aspxSetAbsoluteX(this.helpTextElement, helpTextX);
        _aspxSetAbsoluteY(this.helpTextElement, helpTextY);
    },
    setHelpTextZIndex: function (hide) {
        var newZIndex = 41998 * (hide ? -1 : 1);
        if (this.helpTextElement.style.zIndex != newZIndex)
            this.helpTextElement.style.zIndex = newZIndex;
    },
    hide: function () {
        if (this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Inline) {
            _aspxSetElementDisplay(this.helpTextElement, false);
        }
        else {
            this.animationEnabled ? ASPxAnimationHelper.fadeOut(this.helpTextElement) :
    ASPxAnimationHelper.setOpacity(this.helpTextElement, 0);
            this.setHelpTextZIndex(true);
        }
    },
    show: function () {
        if (this.displayMode === ASPxClientTextEditHelpTextDisplayMode.Inline) {
            _aspxSetElementDisplay(this.helpTextElement, true);
        }
        else {
            this.updatePopupHelpTextPosition();
            this.animationEnabled ? ASPxAnimationHelper.fadeIn(this.helpTextElement) :
    ASPxAnimationHelper.setOpacity(this.helpTextElement, 1);
            this.setHelpTextZIndex(false);
        }
    }
});

var __aspxLoadFilteredItemsCallbackPrefix = "CBLF";
var __aspxCorrectFilterCallbackPrefix = "CBCF";
var __aspxtCurrentSelectedItemCallbackPrefix = "CBSI";
var __aspxLoadDropDownOnDemandCallbackPrefix = "CBLD";
var __aspxDropDownNameSuffix = "_DDD";
var __aspxCalendarNameSuffix = "_C";
var __aspxTimeEditNameSiffix = __aspxCalendarNameSuffix + "_TE";
var __aspxClockNameSiffix = __aspxCalendarNameSuffix + "_CL";
var __aspxListBoxNameSuffix = "_L";
var __aspxItemImageCellClassName = "dxeIIC";
var __aspxTokensHiddenFieldSuffix = "TK";
var __aspxTokenBoxTokenSuffix = "Token";
var __aspxTokenBoxTokenTextSuffix = "TokenT";
var __aspxTokenBoxTokenRemoveButtonSuffix = "TokenRB";
var __aspxTokenBoxInputMinWidth = 30;
ASPxClientDropDownEditBase = _aspxCreateClass(ASPxClientButtonEditBase, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.DropDown = new ASPxClientEvent();
        this.CloseUp = new ASPxClientEvent();
        this.ddHeightCache = __aspxInvalidDimension;
        this.ddWidthCache = __aspxInvalidDimension;
        this.mainElementWidthCache = __aspxInvalidDimension;
        this.dropDownButtonIndex = -1;
        this.droppedDown = false;
        this.ddButtonPushed = false;
        this.lastSuccessText = "";
        this.isToolbarItem = false;
        this.allowFocusDropDownWindow = false;
        this.pcIsShowingNow = false;
        this.needTimeoutForInputElementFocusEvent = false;
        aspxGetDropDownCollection().Add(this);
    },
    Initialize: function () {
        var pc = this.GetPopupControl();
        if (pc) {
            pc.allowCorrectYOffsetPosition = false;
            pc.dropDownEditName = this.name;
        }
        this.AssignClientAttributes();
        this.InitLastSuccessText();
        if (this.RefocusOnClickRequired()) {
            var clickFunc = new Function("aspxDDRefocusClick('" + this.name + "', event);");
            _aspxAttachEventToElement(this.GetMainElement(), "click", clickFunc);
        }
        ASPxClientButtonEditBase.prototype.Initialize.call(this);
    },
    InitLastSuccessText: function () {
        var rawText = this.GetTextInternal();
        this.SetLastSuccessTest(rawText);
    },
    AssignClientAttributes: function () {
        var element = this.GetDropDownButton();
        if (_aspxIsExistsElement(element))
            _aspxPreventElementDragAndSelect(element, true);
    },
    RefocusOnClickRequired: function () {
        return false;
    },
    GetDropDownButton: function () {
        return this.GetButton(this.dropDownButtonIndex);
    },
    GetPopupControl: function () {
        var pc = aspxGetControlCollection().Get(this.name + __aspxDropDownNameSuffix);
        if (pc && pc.GetWindowElement(-1))
            return pc;
        else
            return null;
    },
    GetDropDownInnerControlName: function (suffix) {
        var pc = this.GetPopupControl();
        if (pc)
            return this.GetPopupControl().name + suffix;
        return "";
    },
    GetDropDownItemImageCell: function () {
        return _aspxGetChildrenByPartialClassName(this.GetMainElement(), __aspxItemImageCellClassName)[0];
    },
    GetIsControlWidthWasChanged: function () {
        return this.mainElementWidthCache == __aspxInvalidDimension || this.mainElementWidthCache != this.GetMainElement().clientWidth;
    },
    GetDropDownHeight: function () {
        return 0;
    },
    GetDropDownWidth: function () {
        return 0;
    },
    GetDropDownIsWindowElement: function (id, pcPostfix) {
        var pos = id.lastIndexOf(pcPostfix);
        if (pos != -1) {
            var name = id.substring(0, pos);
            var pc = aspxGetPopupControlCollection().Get(name);
            if (pc && pc.dropDownEditName)
                return aspxGetDropDownCollection().Get(pc.dropDownEditName);
        }
        return null;
    },
    GetDropDownParents: function () {
        var parents = [];
        var mainElement = this.GetMainElement();
        var pcPostfix = __aspxPCWIdSuffix + "-1";
        var element = mainElement.parentNode;
        while (element != null) {
            if (element.tagName == "BODY")
                break;
            if (element.id) {
                var dropDown = this.GetDropDownIsWindowElement(element.id, pcPostfix);
                if (dropDown != null)
                    parents.push(dropDown);
            }
            element = element.parentNode;
        }
        return parents.reverse();
    },
    BeforePopupControlResizing: function () {
    },
    AfterPopupControlResizing: function () {
    },
    ShowDropDownArea: function (isRaiseEvent) {
        this.SetPCIsShowingNow(true);
        aspxGetDropDownCollection().RegisterDroppedDownControl(this, this.GetDropDownParents());
        if (!this.droppedDown)
            this.lockListBoxClick = true;
        this.lockClosing = true;
        var pc = this.GetPopupControl();
        var element = this.GetMainElement();
        var pcwElement = pc.GetWindowElement(-1);
        if (!_aspxGetElementDisplay(pcwElement))
            pcwElement.style.visibility = "hidden";
        _aspxSetElementDisplay(pcwElement, true);
        var height = this.GetDropDownHeight();
        var width = this.GetDropDownWidth();
        this.BeforePopupControlResizing();
        if (this.ddHeightCache != height || this.ddWidthCache != width) {
            pc.SetSize(width, height);
            this.ddHeightCache = height;
            this.ddWidthCache = width;
        }
        this.AfterPopupControlResizing();
        pc.popupVerticalOffset = -_aspxGetClientTop(element);
        this.RaiseDropDownEventRequired = isRaiseEvent;
        if (pcwElement.style.display == "table")
            pcwElement.style.borderSpacing = "0px";
        pc.ShowAtElement(element);
        this.droppedDown = true;
        this.lockClosing = false;
    },
    HideDropDownArea: function (isRaiseEvent) {
        if (this.lockClosing || !this.droppedDown) return;
        this.DropDownButtonPop();
        var pc = this.GetPopupControl();
        if (pc) {
            aspxGetDropDownCollection().UnregisterDroppedDownControl(this);
            pc.Hide();
            if (isRaiseEvent)
                this.RaiseCloseUp();
            this.droppedDown = false;
        }
    },
    ProcessInternalButtonClick: function (buttonIndex) {
        return this.dropDownButtonIndex == buttonIndex;
    },
    ToggleDropDown: function () {
        this.OnApplyChanges();
        if (this.droppedDown)
            this.HideDropDownArea(true);
        else
            this.ShowDropDownArea(true);
    },
    GetTextInternal: function () {
        var text = ASPxClientButtonEditBase.prototype.GetValue.call(this);
        return text != null ? text : "";
    },
    SetTextInternal: function (text) {
        if (!this.readOnly)
            this.SetTextBase(text);
    },
    SetTextBase: function (text) {
        ASPxClientButtonEditBase.prototype.SetValue.call(this, text);
    },
    SetLastSuccessTest: function (text) {
        if (text == null) text = "";
        this.lastSuccessText = text;
    },
    RollbackTextInputValue: function () {
        this.SetTextBase(this.lastSuccessText);
    },
    SetPCIsShowingNow: function (value) {
        this.pcIsShowingNow = value;
    },
    OnValueChanged: function () {
        this.SetLastSuccessTest(this.GetTextInternal());
        ASPxClientEdit.prototype.OnValueChanged.call(this);
    },
    OnApplyChanges: function () {
    },
    OnCancelChanges: function () {
        var isCancelProcessed = (this.GetTextInternal() != this.lastSuccessText);
        this.SetTextInternal(this.lastSuccessText);
        return isCancelProcessed;
    },
    OnFocus: function () {
        if (__aspxIE && this.needTimeoutForInputElementFocusEvent) {
            setTimeout(function () {
                this.OnSetFocus(true);
                ASPxClientButtonEditBase.prototype.OnFocus.call(this);
                this.needTimeoutForInputElementFocusEvent = false;
            } .aspxBind(this), 0);
        } else {
            this.OnSetFocus(true);
            ASPxClientButtonEditBase.prototype.OnFocus.call(this);
        }
    },
    OnLostFocus: function () {
        this.OnSetFocus(false);
        ASPxClientButtonEditBase.prototype.OnLostFocus.call(this);
    },
    OnSetFocus: function (isFocused) {
        aspxGetDropDownCollection().SetFocusedDropDownName(isFocused ? this.name : "");
    },
    IsEditorElement: function (element) {
        if (ASPxClientButtonEditBase.prototype.IsEditorElement.call(this, element))
            return true;
        if (this.allowFocusDropDownWindow)
            return false;
        var pc = this.GetPopupControl();
        if (pc != null) {
            var windowElement = pc.GetWindowElement(-1);
            return windowElement == element || _aspxGetIsParent(windowElement, element);
        }
        return false;
    },
    OnPopupControlShown: function () {
        this.SetPCIsShowingNow(false);
        if (this.RaiseDropDownEventRequired) {
            this.RaiseDropDownEventRequired = false;
            _aspxSetTimeout("aspxDDBRaiseDropDownByTimer(\"" + this.name + "\")", 0);
        }
    },
    IsCanToDropDown: function () {
        return true;
    },
    OnDropDown: function (evt) {
        if (!this.isInitialized)
            return true;
        if (!this.IsCanToDropDown()) {
            this.ForceRefocusEditor();
            return true;
        }
        if (__aspxIE || __aspxOpera) {
            if (!this.droppedDown) {
                _aspxEmulateOnMouseDown(this.GetMainElement(), evt);
                aspxGetStateController().ClearSavedCurrentPressedElement();
            }
        }
        this.OnDropDownCore(evt);
        return _aspxCancelBubble(evt);
    },
    OnDropDownCore: function (evt) {
        if (!this.droppedDown)
            this.DropDownButtonPush();
        this.ToggleDropDown();
        this.ForceRefocusEditor();
    },
    DropDownButtonPush: function () {
        if (this.droppedDown || this.ddButtonPushed) return;
        this.ddButtonPushed = true;
        if (__aspxIE || __aspxOpera)
            this.DropDownButtonPushPop(true);
        else
            this.DropDownButtonPushMozilla();
    },
    DropDownButtonPop: function (force) {
        if ((!this.droppedDown || !this.ddButtonPushed) && !force) return;
        this.ddButtonPushed = false;
        if (__aspxIE || __aspxOpera)
            this.DropDownButtonPushPop(false);
        else
            this.DropDownButtonPopMozilla();
    },
    DropDownButtonPushPop: function (isPush) {
        var buttonElement = this.GetDropDownButton();
        if (buttonElement) {
            var controller = aspxGetStateController();
            var element = controller.GetPressedElement(buttonElement);
            if (element) {
                if (isPush) {
                    controller.SetCurrentHoverElement(null);
                    controller.DoSetPressedState(element);
                } else {
                    controller.DoClearPressedState(element);
                    controller.SetCurrentPressedElement(null);
                    controller.SetCurrentHoverElement(element);
                }
            }
        }
    },
    DropDownButtonPushMozilla: function () {
        this.DisableStyleControllerForDDButton();
        var controller = aspxGetStateController();
        controller.savedCurrentPressedElement = null;
    },
    DropDownButtonPopMozilla: function () {
        this.EnableStyleControllerForDDButton();
        var controller = aspxGetStateController();
        var buttonElement = this.GetDropDownButton();
        if (buttonElement) {
            var element = controller.GetPressedElement(buttonElement);
            if (element)
                controller.DoClearPressedState(element);
            controller.currentPressedElement = null;
            element = controller.GetHoverElement(buttonElement);
            if (element)
                controller.SetCurrentHoverElement(element);
        }
    },
    EnableStyleControllerForDDButton: function () {
        var element = this.GetDropDownButton();
        if (element) {
            var controller = aspxGetStateController();
            this.ReplaceElementControlStyleItem(controller.hoverItems, __aspxHoverItemKind, element, this.ddButtonHoverStyle);
            this.ReplaceElementControlStyleItem(controller.pressedItems, __aspxPressedItemKind, element, this.ddButtonPressedStyle);
            this.ReplaceElementControlStyleItem(controller.selectedItems, __aspxSelectedItemKind, element, this.ddButtonSelectedStyle);
        }
    },
    DisableStyleControllerForDDButton: function () {
        var element = this.GetDropDownButton();
        if (element) {
            var controller = aspxGetStateController();
            this.ddButtonHoverStyle = this.ReplaceElementControlStyleItem(controller.hoverItems, __aspxHoverItemKind, element, null);
            this.ddButtonPressedStyle = this.ReplaceElementControlStyleItem(controller.pressedItems, __aspxPressedItemKind, element, null);
            this.ddButtonSelectedStyle = this.ReplaceElementControlStyleItem(controller.selectedItems, __aspxSelectedItemKind, element, null);
        }
    },
    ReplaceElementControlStyleItem: function (items, kind, element, newStyleItem) {
        var styleItem = items[element.id];
        items[element.id] = newStyleItem;
        element[kind] = newStyleItem;
        return styleItem;
    },
    CloseDropDownByDocumentOrWindowEvent: function (causedByWindowResizing) {
        if (!causedByWindowResizing || !this.pcIsShowingNow)
            this.HideDropDownArea(true);
    },
    OnDocumentMouseUp: function () {
        this.DropDownButtonPop();
    },
    OnDDButtonMouseMove: function (evt) {
    },
    ShouldCloseOnMCMouseDown: function () {
        return true;
    },
    OnMainCellMouseDown: function (evt) {
        if (this.ShouldCloseOnMCMouseDown())
            this.OnCloseUp(evt);
    },
    OnCloseUp: function (evt) {
        if (__aspxIE) {
            this.needTimeoutForInputElementFocusEvent = true;
            setTimeout(function () { this.HideDropDownArea(true); } .aspxBind(this), 0);
        } else {
            this.HideDropDownArea(true);
        }
    },
    OnOpenAnotherDropDown: function () {
        this.HideDropDownArea(true);
    },
    OnTextChanged: function () {
        if (!this.ChangedByEnterKeyPress())
            this.OnTextChangedInternal();
    },
    OnTextChangedInternal: function () {
        this.ParseValue();
    },
    ChangedByEnterKeyPress: function () {
        if (__aspxFirefox || __aspxWebKitFamily)
            if (this.enterKeyPressed) {
                this.enterKeyPressed = false;
                return true;
            }
        return false;
    },
    ChangeEnabledAttributes: function (enabled) {
        ASPxClientButtonEditBase.prototype.ChangeEnabledAttributes.call(this, enabled);
        var btnElement = this.GetDropDownButton();
        if (btnElement)
            this.ChangeButtonEnabledAttributes(btnElement, _aspxChangeAttributesMethod(enabled));
        var inputElement = this.GetInputElement();
        if (inputElement)
            this.ChangeInputCellEnabledAttributes(inputElement.parentNode, _aspxChangeAttributesMethod(enabled));
        var imageCell = this.GetDropDownItemImageCell();
        if (_aspxIsExists(imageCell))
            this.ChangeImageCellEnabledAttributes(imageCell, _aspxChangeAttributesMethod(enabled));
    },
    ChangeEnabledStateItems: function (enabled) {
        ASPxClientButtonEditBase.prototype.ChangeEnabledStateItems.call(this, enabled);
        var btnElement = this.GetDropDownButton();
        if (btnElement)
            aspxGetStateController().SetElementEnabled(btnElement, enabled);
    },
    ChangeInputCellEnabledAttributes: function (element, method) {
        method(element, "onclick");
        method(element, "onkeyup");
        method(element, "onmousedown");
        method(element, "onmouseup");
    },
    ChangeImageCellEnabledAttributes: function (imageCell, method) {
        method(imageCell, "onmousedown");
    },
    InitializeKeyHandlers: function () {
        this.AddKeyDownHandler(ASPxKey.Enter, "OnEnter");
        this.AddKeyDownHandler(ASPxKey.Esc, "OnEscape");
        this.AddKeyDownHandler(ASPxKey.PageUp, "OnPageUp");
        this.AddKeyDownHandler(ASPxKey.PageDown, "OnPageDown");
        this.AddKeyDownHandler(ASPxKey.End, "OnEndKeyDown");
        this.AddKeyDownHandler(ASPxKey.Home, "OnHomeKeyDown");
        this.AddKeyDownHandler(ASPxKey.Left, "OnArrowLeft");
        this.AddKeyDownHandler(ASPxKey.Right, "OnArrowRight");
        this.AddKeyDownHandler(ASPxKey.Up, "OnArrowUp");
        this.AddKeyDownHandler(ASPxKey.Down, "OnArrowDown");
        this.AddKeyDownHandler(ASPxKey.Tab, "OnTab");
    },
    OnArrowUp: function (evt) {
        if (evt.altKey) {
            this.ToggleDropDown();
            return true;
        }
        return false;
    },
    OnArrowDown: function (evt) {
        if (evt.altKey) {
            this.ToggleDropDown();
            return true;
        }
        return false;
    },
    OnPageUp: function (evt) {
        return false;
    },
    OnPageDown: function (evt) {
        return false;
    },
    OnEndKeyDown: function (evt) {
        return false;
    },
    OnHomeKeyDown: function (evt) {
        return false;
    },
    OnArrowLeft: function (evt) {
        return false;
    },
    OnArrowRight: function (evt) {
        return false;
    },
    OnEscape: function (evt) {
        if (__aspxFirefox && __aspxBrowserVersion >= 4) {
            var instance = this;
            window.setTimeout(function () { instance.OnEscapeInternal(); }, 0);
        }
        else
            this.OnEscapeInternal();
    },
    OnEscapeInternal: function () {
        var isCancelProcessed = this.OnCancelChanges() || this.droppedDown;
        this.HideDropDownArea(true);
        return isCancelProcessed;
    },
    OnEnter: function (evt) {
        return false;
    },
    OnTab: function (evt) {
        return false;
    },
    RaiseCloseUp: function () {
        if (!this.CloseUp.IsEmpty()) {
            var args = new ASPxClientEventArgs();
            this.CloseUp.FireEvent(this, args);
        }
    },
    RaiseDropDown: function () {
        if (!this.DropDown.IsEmpty() && this.isInitialized) {
            var args = new ASPxClientEventArgs();
            this.DropDown.FireEvent(this, args);
        }
    },
    AdjustDropDownWindow: function () {
        var pc = this.GetPopupControl();
        if (pc) {
            if (__aspxIE && __aspxBrowserVersion >= 8)
                aspxGetPopupControlCollection().LockWindowResizeByBodyScrollVisibilityChanging();
            pc.AdjustSize();
            pc.UpdatePositionAtElement(this.GetMainElement());
            if (__aspxIE && __aspxBrowserVersion >= 8)
                aspxGetPopupControlCollection().UnlockWindowResizeByBodyScrollVisibilityChanging();
        }
    },
    ResetDropDownSizeCache: function () {
        this.ddHeightCache = __aspxInvalidDimension;
        this.ddWidthCache = __aspxInvalidDimension;
    },
    ShowDropDown: function () {
        this.ShowDropDownArea(false);
    },
    HideDropDown: function () {
        this.HideDropDownArea(false);
    }
});
ASPxClientDropDownEdit = _aspxCreateClass(ASPxClientDropDownEditBase, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.dropDownWindowHeight = "";
        this.dropDownWindowWidth = "";
        this.allowFocusDropDownWindow = true;
        this.needAdjustControlsInDropDownWindow = true;
    },
    InlineInitialize: function () {
        this.InitSpecialKeyboardHandling();
        ASPxClientDropDownEditBase.prototype.InlineInitialize.call(this);
    },
    RefocusOnClickRequired: function () {
        return __aspxIE;
    },
    BeforePopupControlResizing: function () {
        var divContainer = this.GetDropDownDivContainer();
        if (divContainer && this.needAdjustControlsInDropDownWindow) {
            this.AdjustControlsInDropDownWindow();
            _aspxSetElementDisplay(divContainer, false);
        }
    },
    AfterPopupControlResizing: function () {
        var divContainer = this.GetDropDownDivContainer();
        if (divContainer && this.needAdjustControlsInDropDownWindow) {
            _aspxSetElementDisplay(divContainer, true);
            this.AdjustControlsInDropDownWindow();
            this.needAdjustControlsInDropDownWindow = false;
        }
    },
    AdjustControlsInDropDownWindow: function () {
        var pc = this.GetPopupControl();
        var pcwElement = pc.GetWindowElement(-1);
        aspxGetControlCollection().ProcessControlsInContainer(pcwElement, function (control) {
            control.AdjustControl(false);
        });
    },
    GetDropDownDivContainer: function () {
        return _aspxGetElementById(this.name + __aspxDropDownNameSuffix + "_DDDC");
    },
    GetKeyValueInputElement: function () {
        return _aspxGetElementById(this.name + "KV");
    },
    GetDropDownHeight: function () {
        if (this.dropDownWindowHeight != "")
            return this.dropDownWindowHeight;
        return ASPxClientDropDownEditBase.prototype.GetDropDownHeight.call(this);
    },
    GetDropDownWidth: function () {
        if (this.dropDownWindowWidth != "")
            return this.dropDownWindowWidth;
        return this.GetMainElement().offsetWidth;
    },
    CloseDropDownByDocumentOrWindowEvent: function (causedByWindowResizing) {
        if (!aspxGetPopupControlCollection().WindowResizeByBodyScrollVisibilityChangingLocked())
            ASPxClientDropDownEditBase.prototype.CloseDropDownByDocumentOrWindowEvent.call(this, causedByWindowResizing);
    },
    OnBrowserWindowResize: function (evt) {
        this.needAdjustControlsInDropDownWindow = true;
    },
    OnEnter: function (evt) {
        return this.droppedDown;
    },
    OnEscape: function (evt) {
        this.HideDropDownArea(true);
        return this.droppedDown;
    },
    OnTextChanged: function () {
        this.OnValueChanged();
    },
    GetKeyValueInternal: function () {
        var element = this.GetKeyValueInputElement();
        if (element != null && element.value != "")
            return element.value;
        else
            return null;
    },
    SetKeyValueInternal: function (keyValue) {
        var element = this.GetKeyValueInputElement();
        if (element != null) element.value = keyValue == null ? "" : keyValue;
    },
    GetKeyValue: function () {
        return this.GetKeyValueInternal();
    },
    SetKeyValue: function (keyValue) {
        this.SetKeyValueInternal(keyValue);
    }
});
ASPxClientDropDownEdit.Cast = ASPxClientControl.Cast;
ASPxClientDropDownCollection = _aspxCreateClass(ASPxClientControlCollection, {
    constructor: function () {
        this.constructor.prototype.constructor.call(this);
        this.droppedControlName = "";
        this.droppedParentNames = [];
        this.focusedControlName = "";
    },
    SetFocusedDropDownName: function (name) {
        this.focusedControlName = name;
    },
    ResetDroppedDownControl: function () {
        this.droppedControlName = "";
    },
    ResetDroppedDownParentCollection: function (startDroppedDownControlName) {
        var regArray = [];
        for (var i = 0; i < this.droppedParentNames.length; i++) {
            if (this.droppedParentNames[i] == startDroppedDownControlName)
                break;
            regArray.push(this.droppedParentNames[i]);
        }
        this.droppedParentNames = regArray;
        if (this.droppedParentNames.length > 0) {
            this.droppedControlName = this.droppedParentNames[this.droppedParentNames.length - 1];
            _aspxArrayRemoveAt(this.droppedParentNames, this.droppedParentNames.length - 1);
        }
    },
    ResetFocusedControl: function () {
        this.focusedControlName = "";
    },
    GetFocusedDropDown: function () {
        var control = this.GetDropDownControlInternal(this.focusedControlName);
        if (control == null) this.ResetFocusedControl();
        return control;
    },
    GetDroppedDropDown: function () {
        var control = this.GetDropDownControlInternal(this.droppedControlName);
        if (control == null) this.ResetDroppedDownControl();
        return control;
    },
    GetDroppedDropDownParents: function (startDroppedDownControlName) {
        var dropDownArray = [];
        var isNeedGetControl = false;
        for (var i = 0; i < this.droppedParentNames.length; i++) {
            if (this.droppedParentNames[i] == startDroppedDownControlName) isNeedGetControl = true;
            if (isNeedGetControl)
                var control = this.GetDropDownControlInternal(this.droppedParentNames[i]);
            if (control != null)
                dropDownArray.push(control);
        }
        return dropDownArray;
    },
    FindFirstNameForClose: function (newDroppedDownParentArray) {
        var firstNameToClose = newDroppedDownParentArray.length > 0 ? "" : this.droppedParentNames[i];
        for (var i = 0; i < this.droppedParentNames.length; i++) {
            if (_aspxArrayIndexOf(newDroppedDownParentArray, this.Get(this.droppedParentNames[i])) == -1) {
                firstNameToClose = this.droppedParentNames[i];
                break;
            }
        }
        return firstNameToClose;
    },
    GetDropDownControlInternal: function (name) {
        var control = this.Get(name);
        var isControlExists = control && control.RenderExistsOnPage();
        if (!isControlExists)
            control = null;
        return control;
    },
    IsDroppedDropDownParentExist: function (name) {
        for (var i = 0; i < this.droppedParentNames.length; i++) {
            if (this.droppedParentNames[i] == name)
                return true;
        }
        return false;
    },
    OnDDButtonMouseMove: function (evt) {
        var dropDownControl = this.GetDroppedDropDown();
        if (dropDownControl != null)
            dropDownControl.OnDDButtonMouseMove(evt);
    },
    OnDocumentMouseDown: function (evt) {
        this.CloseDropDownByDocumentOrWindowEvent(evt, false);
        this.ClearFocusedDropDownByDocumentEvent(evt);
    },
    OnDocumentMouseUp: function (evt) {
        var dropDownControl = this.GetDroppedDropDown();
        if (dropDownControl != null)
            dropDownControl.OnDocumentMouseUp();
    },
    OnBrowserWindowResize: function (evt) {
        if (typeof (aspxGetPopupControlCollection) != "undefined" && !aspxGetPopupControlCollection().WindowResizeByBodyScrollVisibilityChangingLocked()) {
            this.CloseDropDownByDocumentOrWindowEvent(evt, true);
            this.AdjustControls();
        }
    },
    CloseDropDownByDocumentOrWindowEvent: function (evt, causedByWindowResizing) {
        var dropDownControl = this.GetDroppedDropDown();
        if (dropDownControl != null && (this.IsEventNotFromControlSelf(evt, dropDownControl) || causedByWindowResizing))
            dropDownControl.CloseDropDownByDocumentOrWindowEvent(causedByWindowResizing);
        var childrenDropDownsToClose = this.GetDroppedDropDownParents(this.droppedParentNames[0]);
        if (childrenDropDownsToClose.length != 0) {
            childrenDropDownsToClose = childrenDropDownsToClose.reverse();
            this.ResetDroppedDownParentCollection(this.droppedParentNames[0]);
            var rollbackDroppedDownNames = [];
            for (var c = 0; c < childrenDropDownsToClose.length; c++) {
                if (this.IsEventNotFromControlSelf(evt, childrenDropDownsToClose[c]))
                    childrenDropDownsToClose[c].CloseDropDownByDocumentOrWindowEvent(causedByWindowResizing);
                else
                    rollbackDroppedDownNames.push(childrenDropDownsToClose[c].name);
            }
            if (rollbackDroppedDownNames != 0) {
                rollbackDroppedDownNames = rollbackDroppedDownNames.reverse();
                this.droppedParentNames = rollbackDroppedDownNames;
            }
        }
    },
    ClearFocusedDropDownByDocumentEvent: function (evt) {
        var focusedDropDown = this.GetFocusedDropDown();
        if (focusedDropDown != null && this.IsEventNotFromControlSelf(evt, focusedDropDown)) {
            this.SetFocusedDropDownName("");
            if (__aspxFirefox) {
                window.setTimeout(function () { focusedDropDown.GetInputElement().blur(); }, 0);
            }
        }
    },
    AdjustControls: function () {
        this.ForEachControl(function (control) {
            control.AdjustControl(false);
        });
    },
    IsEventNotFromControlSelf: function (evt, control) {
        var srcElement = _aspxGetEventSource(evt);
        var mainElement = control.GetMainElement();
        var popupControl = control.GetPopupControl();
        if (!srcElement || !mainElement || !popupControl) return true;
        return (!_aspxGetIsParent(mainElement, srcElement) &&
   !_aspxGetIsParent(popupControl.GetWindowElement(-1), srcElement));
    },
    RegisterDroppedDownControl: function (dropDownControl, droppedDownParentArray) {
        var prevDropDownControl = this.GetDroppedDropDown();
        var areDroppedDownsCollectionParents = _aspxArrayIndexOf(droppedDownParentArray, prevDropDownControl) != -1;
        if (prevDropDownControl != null && prevDropDownControl != dropDownControl && !areDroppedDownsCollectionParents)
            prevDropDownControl.OnOpenAnotherDropDown();
        if (this.droppedParentNames.length > 0) {
            var firstDropDownsNameToClose = this.FindFirstNameForClose(droppedDownParentArray);
            if (firstDropDownsNameToClose != "") {
                var childrenDropDownsToClose = this.GetDroppedDropDownParents(firstDropDownsNameToClose);
                this.ResetDroppedDownParentCollection(firstDropDownsNameToClose);
                this.CloseDroppedDownCollection(childrenDropDownsToClose.reverse());
            }
        }
        this.droppedControlName = dropDownControl.name;
        this.droppedParentNames = [];
        for (var i = 0; i < droppedDownParentArray.length; i++)
            this.droppedParentNames.push(droppedDownParentArray[i].name);
    },
    UnregisterDroppedDownControl: function (dropDownControl) {
        if (this.droppedControlName == dropDownControl.name)
            this.ResetDroppedDownControl();
        if (this.IsDroppedDropDownParentExist(dropDownControl.name)) {
            var prevDropDownControl = this.GetDroppedDropDown();
            if (prevDropDownControl != null)
                prevDropDownControl.OnOpenAnotherDropDown();
            var childrenDropDownsToClose = this.GetDroppedDropDownParents(dropDownControl.name);
            this.ResetDroppedDownParentCollection(dropDownControl.name);
            _aspxArrayRemoveAt(childrenDropDownsToClose, 0);
            this.CloseDroppedDownCollection(childrenDropDownsToClose.reverse());
        }
    },
    CloseDroppedDownCollection: function (dropDownParentArray) {
        for (var c = 0; c < dropDownParentArray.length; c++)
            dropDownParentArray[c].OnOpenAnotherDropDown();
    }
});
ASPxClientDateEdit = _aspxCreateClass(ASPxClientDropDownEditBase, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.dateFormatter = null;
        this.date = null;
        this.dateOnError = "u";
        this.allowNull = true;
        this.calendarOwnerName = null;
        this.calendarConsumerName = null;
        this.textWasLastTemporaryChanged = false;
        this.showTimeSection = false;
        this.adjustInnerControls = true;
        this.DateChanged = new ASPxClientEvent();
        this.ParseDate = new ASPxClientEvent();
    },
    Initialize: function () {
        if (this.calendarOwnerName == null) {
            var calendar = this.GetCalendar();
            if (calendar) {
                calendar.SelectionChanging.AddHandler(ASPxClientDateEdit.HandleCalendarSelectionChanging);
                calendar.MainElementClick.AddHandler(ASPxClientDateEdit.HandleCalendarMainElementClick);
                var calendarMainElement = calendar.GetMainElement();
                if (__aspxNetscapeFamily && _aspxIsExistsElement(calendarMainElement))
                    calendarMainElement.style.borderCollapse = "separate";
            }
            var timeEdit = this.GetTimeEdit();
            if (timeEdit) {
                timeEdit.InternalValueChanging.AddHandler(ASPxClientDateEdit.HandleTimeEditInternalValueChanging);
                timeEdit.OwnerDateEdit = this;
            }
        }
        ASPxClientDropDownEditBase.prototype.Initialize.call(this);
    },
    InlineInitialize: function () {
        this.InitSpecialKeyboardHandling();
        ASPxClientDropDownEditBase.prototype.InlineInitialize.call(this);
    },
    CloseDropDownByDocumentOrWindowEvent: function (causedByWindowResizing) {
        if ((!causedByWindowResizing || !this.pcIsShowingNow) && this.GetShowTimeSection())
            this.ApplyTimeSectionDateChanges();
        ASPxClientDropDownEditBase.prototype.CloseDropDownByDocumentOrWindowEvent.call(this, causedByWindowResizing);
    },
    OnDropDownCore: function (evt) {
        ASPxClientDropDownEditBase.prototype.OnDropDownCore.call(this, evt);
        if (this.droppedDown) {
            var cal = this.GetCalendar();
            if (cal)
                cal.forceMouseDown = true;
        }
    },
    ShowDropDownArea: function (isRaiseEvent) {
        var cal = this.GetCalendar();
        if (cal) {
            if (!this.date) {
                var currentDate = new Date();
                cal.SetVisibleDate(new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate()));
            }
            cal.SetValue(this.date);
        }
        __aspxActiveCalendar = cal;
        ASPxClientDateEdit.active = this;
        var timeEdit = this.GetTimeEdit();
        if (timeEdit)
            timeEdit.SetValue(this.date);
        ASPxClientDropDownEditBase.prototype.ShowDropDownArea.call(this, isRaiseEvent);
        var calendarOwner = this.GetCalendarOwner();
        if (calendarOwner != null)
            calendarOwner.calendarConsumerName = this.name;
        this.calendarConsumerName = null;
    },
    BeforePopupControlResizing: function () {
        var calendarOwner = this;
        if (this.calendarOwnerName)
            calendarOwner = this.GetCalendarOwner();
        if (calendarOwner.adjustInnerControls && calendarOwner.GetTimeEdit()) {
            calendarOwner.GetClock().AdjustControl();
            calendarOwner.GetTimeEdit().AdjustControl();
            calendarOwner.adjustInnerControls = false;
        }
    },
    GetPopupControl: function () {
        var calendarOwner = this.GetCalendarOwner();
        if (calendarOwner != null)
            return calendarOwner.GetPopupControl();
        return ASPxClientDropDownEditBase.prototype.GetPopupControl.call(this);
    },
    OnPopupControlShown: function () {
        if (this.calendarConsumerName != null)
            aspxGetControlCollection().Get(this.calendarConsumerName).OnPopupControlShown();
        else
            ASPxClientDropDownEditBase.prototype.OnPopupControlShown.call(this);
    },
    GetCalendar: function () {
        var name = this.GetDropDownInnerControlName(__aspxCalendarNameSuffix);
        return aspxGetControlCollection().Get(name);
    },
    GetTimeEdit: function () {
        var name = this.GetDropDownInnerControlName(__aspxTimeEditNameSiffix);
        return aspxGetControlCollection().Get(name);
    },
    GetClock: function () {
        var name = this.GetDropDownInnerControlName(__aspxClockNameSiffix);
        return aspxGetControlCollection().Get(name);
    },
    GetCalendarOwner: function () {
        if (!this.calendarOwnerName)
            return null;
        return aspxGetControlCollection().Get(this.calendarOwnerName);
    },
    GetShowTimeSection: function () {
        var calendarOwner = this.GetCalendarOwner();
        if (calendarOwner)
            return calendarOwner.showTimeSection;
        return this.showTimeSection;
    },
    GetFormattedDate: function () {
        if (this.maskInfo != null)
            return this.maskInfo.GetValue();
        if (this.date == null)
            return this.focused ? "" : this.nullText;
        return this.dateFormatter.Format(this.date);
    },
    SetTextWasLastTemporaryChanged: function (value) {
        this.textWasLastTemporaryChanged = value;
    },
    GetTextWasLastTemporaryChanged: function () {
        return this.textWasLastTemporaryChanged;
    },
    RaiseValueChangedEvent: function () {
        if (!this.isInitialized) return false;
        var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
        processOnServer = this.RaiseDateChanged(processOnServer);
        return processOnServer;
    },
    OnApplyChanges: function () {
        if (this.focused)
            this.OnTextChanged();
    },
    OnCalendarSelectionChanging: function (date, select) {
        if (this.GetShowTimeSection())
            return;
        if (!this.GetCalendar().isDateChangingByKeyboard) {
            this.HideDropDownArea(true);
            if (date != null)
                this.ApplyExistingTime(date);
            this.ChangeDate(date);
            if (select)
                _aspxSetSelection(this.GetInputElement());
        }
    },
    ForceRefocusTimeSectionTimeEdit: function (mouseDownSource) {
        var dateEdit = this;
        if (this.calendarConsumerName)
            dateEdit = aspxGetControlCollection().Get(this.calendarConsumerName);
        var timeEdit = dateEdit.GetTimeEdit();
        if (timeEdit.IsEditorElement(mouseDownSource) && !timeEdit.IsElementBelongToInputElement(mouseDownSource)) {
            timeEdit.ForceRefocusEditor();
            return;
        }
        if (!dateEdit.IsEditorElement(mouseDownSource))
            return;
        dateEdit.ForceRefocusEditor();
        var input = timeEdit.GetInputElement();
        if (input)
            input.blur();
        window.setTimeout(function () { ASPxClientEdit.SetFocusedEditor(dateEdit); }, 0);
    },
    ApplyTimeSectionDateChanges: function () {
        var hours = 0, minutes = 0, seconds = 0, milliseconds = 0;
        var date = this.GetCalendar().GetSelectedDate();
        this.GetTimeEdit().ParseValue();
        var timeEditDate = this.GetTimeEdit().GetDate();
        if (timeEditDate) {
            hours = timeEditDate.getHours();
            minutes = timeEditDate.getMinutes();
            seconds = timeEditDate.getSeconds();
            milliseconds = timeEditDate.getMilliseconds();
        }
        if (date) {
            date.setHours(hours);
            date.setMinutes(minutes);
            date.setSeconds(seconds);
            date.setMilliseconds(milliseconds);
        }
        this.ApplyParsedDate(date, true);
    },
    IsEditorElement: function (element) {
        if (this.GetShowTimeSection() && _aspxGetIsParent(this.GetTimeEdit().GetMainElement(), element)) {
            this.lockLostFocus = true;
            return false;
        }
        return ASPxClientDropDownEditBase.prototype.IsEditorElement.call(this, element);
    },
    OnLostFocusCore: function () {
        if (this.GetShowTimeSection() && this.lockLostFocus) {
            this.lockLostFocus = false;
            return;
        }
        ASPxClientDropDownEditBase.prototype.OnLostFocusCore.call(this);
    },
    OnTimeEditLostFocus: function () {
        this.OnLostFocusCore();
    },
    OnTimeEditEnter: function () {
        this.ForceRefocusEditor();
        this.ApplyTimeSectionDateChanges();
        this.HideDropDownArea(true);
        _aspxSetSelection(this.GetInputElement());
    },
    OnTimeEditEsc: function () {
        this.ForceRefocusEditor();
        this.HideDropDownArea(true);
    },
    OnTimeEditTab: function (shiftKey) {
        if (shiftKey && !this.GetCalendarOwner())
            this.ForceRefocusEditor();
        this.ApplyTimeSectionDateChanges();
        this.HideDropDownArea(true);
    },
    OnTimeSectionOkClick: function () {
        this.ApplyTimeSectionDateChanges();
        this.HideDropDownArea(true);
    },
    OnTimeSectionCancelClick: function () {
        this.HideDropDownArea(true);
    },
    OnTimeSectionClearClick: function () {
        this.ChangeDate(null);
        this.HideDropDownArea(true);
    },
    OnTimeEditInternalValueChanging: function (date) {
        var clock = this.GetClock();
        if (clock)
            clock.SetDate(date);
    },
    OnArrowUp: function (evt) {
        var isProcessed = ASPxClientDropDownEditBase.prototype.OnArrowUp.call(this, evt);
        if (!isProcessed && this.droppedDown)
            return this.OnCalendarMethod("OnArrowUp", evt);
        return false;
    },
    OnArrowDown: function (evt) {
        var isProcessed = ASPxClientDropDownEditBase.prototype.OnArrowDown.call(this, evt);
        if (!isProcessed && this.droppedDown)
            return this.OnCalendarMethod("OnArrowDown", evt);
        return false;
    },
    OnArrowLeft: function (evt) {
        if (this.droppedDown) {
            this.OnCalendarMethod("OnArrowLeft", evt);
            return true;
        }
        return false;
    },
    OnArrowRight: function (evt) {
        if (this.droppedDown) {
            this.OnCalendarMethod("OnArrowRight", evt);
            return true;
        }
        return false;
    },
    OnPageUp: function (evt) {
        if (this.droppedDown) {
            this.OnCalendarMethod("OnPageUp", evt);
            return true;
        }
        return false;
    },
    OnPageDown: function (evt) {
        if (this.droppedDown) {
            this.OnCalendarMethod("OnPageDown", evt);
            return true;
        }
        return false;
    },
    OnEndKeyDown: function (evt) {
        if (this.droppedDown) {
            this.OnCalendarMethod("OnEndKeyDown", evt);
            return true;
        }
        return false;
    },
    OnHomeKeyDown: function (evt) {
        if (this.droppedDown) {
            this.OnCalendarMethod("OnHomeKeyDown", evt);
            return true;
        }
        return false;
    },
    OnCalendarMethod: function (methodName, evt) {
        var calendar = this.GetCalendar();
        if (!calendar.IsFastNavigationActive())
            this.SetTextWasLastTemporaryChanged(false);
        return calendar[methodName](evt);
    },
    OnKeyUp: function (evt) {
        if (ASPxFilteringUtils.EventKeyCodeChangesTheInput(evt)) {
            this.SetTextWasLastTemporaryChanged(true);
        }
    },
    OnEnter: function () {
        this.enterProcessed = false;
        if (this.droppedDown) {
            var calendar = this.GetCalendar();
            if (calendar.IsFastNavigationActive())
                calendar.GetFastNavigation().OnEnter();
            else if (this.GetTextWasLastTemporaryChanged()) {
                this.ParseValue();
                this.HideDropDownArea(true);
            } else {
                var calendarSelection = this.GetCalendar().GetValue();
                if (this.GetShowTimeSection()) {
                    if (calendarSelection) {
                        this.ApplyTimeSectionDateChanges();
                        _aspxSetSelection(this.GetInputElement());
                    }
                    this.HideDropDownArea(true);
                } else
                    this.OnCalendarSelectionChanging(calendarSelection, true);
            }
            this.enterProcessed = true;
        }
        else
            this.OnApplyChanges();
        this.SetTextWasLastTemporaryChanged(false);
        return this.enterProcessed;
    },
    OnEscape: function () {
        if (this.droppedDown) {
            if (this.GetCalendar().IsFastNavigationActive())
                this.GetCalendar().OnEscape();
            else
                this.HideDropDownArea(true);
        } else {
            this.ChangeDate(this.date);
        }
        this.SetTextWasLastTemporaryChanged(false);
        return true;
    },
    OnTab: function (evt) {
        if (!this.droppedDown) return;
        var calendar = this.GetCalendar();
        if (calendar.IsFastNavigationActive())
            calendar.GetFastNavigation().Hide();
        if (this.GetShowTimeSection()) {
            this.lockLostFocus = true;
            if (this.GetCalendarOwner()) {
                _aspxPreventEvent(evt);
                this.GetTimeEdit().SetFocus();
            }
            return;
        }
        if (this.GetTextWasLastTemporaryChanged()) {
            this.ParseValue();
            this.HideDropDownArea(true);
        } else
            this.OnCalendarSelectionChanging(this.GetCalendar().GetValue(), false);
        this.SetTextWasLastTemporaryChanged(false);
    },
    ParseValue: function () {
        this.ParseValueCore(true);
    },
    ParseValueCore: function (raiseChangedEvent) {
        var date;
        if (this.maskInfo != null) {
            date = _aspxMaskDateTimeHelper.GetDate(this.maskInfo);
        } else {
            var text = this.GetInputElement().value;
            var userParseResult = this.GetUserParsedDate(text);
            if (userParseResult !== false) {
                date = userParseResult;
            } else {
                if (text == null || text == "")
                    date = null;
                else
                    date = this.dateFormatter.Parse(text);
            }
        }
        if (this.GetShowTimeSection() && !this.HasTimeInEditFormat() && date)
            this.ApplyExistingTime(date);
        this.ApplyParsedDate(date, raiseChangedEvent);
    },
    GetUserParsedDate: function (text) {
        if (!this.ParseDate.IsEmpty()) {
            var args = new ASPxClientParseDateEventArgs(text);
            this.ParseDate.FireEvent(this, args);
            if (args.handled)
                return args.date;
        }
        return false;
    },
    ApplyParsedDate: function (date, raiseChangedEvent) {
        if (date === false || !this.GetCalendar().IsDateInRange(date)) {
            switch (this.dateOnError) {
                case "n":
                    date = null;
                    break;
                case "t":
                    date = new Date();
                    break;
                default:
                    date = this.date;
                    break;
            }
        }
        if (!this.allowNull && date == null)
            date = this.date;
        if (raiseChangedEvent)
            this.ChangeDate(date);
        else
            this.SetValue(date);
    },
    HasTimeInEditFormat: function () {
        if (this.maskInfo) {
            for (var i = 0; i < this.maskInfo.parts.length; i++) {
                var part = this.maskInfo.parts[i];
                if (part.dateTimeRole && part.dateTimeRole.toLowerCase() == "h")
                    return true;
            }
            return false;
        }
        return this.dateFormatter.mask.toLowerCase().indexOf("h") != -1;
    },
    ApplyExistingTime: function (date) {
        if (this.date == null) return;
        var savedDay = date.getDate();
        date.setHours(this.date.getHours());
        var diff = date.getDate() - savedDay;
        if (diff != 0) {
            var sign = (diff == 1 || date.getDate() == 1) ? -1 : 1;
            date.setTime(date.getTime() + sign * 3600000);
        }
        date.setMinutes(this.date.getMinutes());
        date.setSeconds(this.date.getSeconds());
        date.setMilliseconds(this.date.getMilliseconds());
    },
    GetValue: function () {
        return this.date;
    },
    GetValueString: function () {
        return this.date != null ? _aspxGetInvariantDateTimeString(this.date) : null;
    },
    SetValue: function (date) {
        this.date = date;
        if (this.maskInfo != null) {
            _aspxMaskDateTimeHelper.SetDate(this.maskInfo, date);
            this.ApplyMaskInfo(false);
            this.SavePrevMaskValue();
        } else {
            this.GetInputElement().value = this.GetFormattedDate();
            this.SyncRawInputValue();
            if (this.CanApplyTextDecorators())
                this.ToggleTextDecoration();
        }
        if (this.styleDecoration)
            this.styleDecoration.Update();
    },
    ChangeDate: function (date) {
        var changed = !_aspxAreDatesEqualExact(this.date, date);
        this.SetValue(date);
        if (changed) {
            this.RaisePersonalStandardValidation();
            this.OnValueChanged();
        }
    },
    GetText: function () {
        return this.GetFormattedDate();
    },
    SetText: function (value) {
        ASPxClientTextEdit.prototype.SetValue.call(this, value);
        if (this.maskInfo == null)
            this.ParseValueCore(false);
    },
    GetFormattedText: function () {
        if (this.maskInfo != null)
            return this.GetMaskDisplayText();
        if (this.date == null)
            return this.nullText;
        if (this.displayFormat != null)
            return ASPxFormatter.Format(this.displayFormat, this.date);
        return this.GetFormattedDate();
    },
    ShouldCancelMaskKeyProcessing: function (htmlEvent, keyDownInfo) {
        if (htmlEvent.altKey)
            return true;
        if (ASPxClientDropDownEditBase.prototype.ShouldCancelMaskKeyProcessing.call(this, htmlEvent, keyDownInfo))
            return true;
        if (!this.droppedDown)
            return false;
        if (this.GetShowTimeSection() && htmlEvent.keyCode == ASPxKey.Tab)
            return false;
        return !_aspxMaskManager.IsPrintableKeyCode(keyDownInfo)
   && keyDownInfo.keyCode != ASPxKey.Backspace
   && keyDownInfo.keyCode != ASPxKey.Delete;
    },
    DecodeRawInputValue: function (value) {
        if (value == "N") return null;
        var date = new Date();
        date.setTime(Number(value));
        return _aspxToUtcTime(date);
    },
    SyncRawInputValue: function () {
        this.GetRawInputElement().value = this.date == null ? "N" : _aspxToLocalTime(this.date).valueOf();
    },
    HasTextDecorators: function () {
        return (this.maskInfo != null && this.date == null) || ASPxClientDropDownEditBase.prototype.HasTextDecorators.call(this);
    },
    GetMaskDisplayText: function () {
        if (!this.focused) {
            if (this.date == null)
                return this.nullText;
            if (this.HasTextDecorators())
                return this.GetDecoratedText(this.date);
        }
        return this.maskInfo.GetText();
    },
    ToggleTextDecorationCore: function () {
        if (this.maskInfo != null) {
            this.ApplyMaskInfo(false);
        } else {
            var text = this.focused ? this.GetFormattedDate() : this.GetFormattedText();
            var input = this.GetInputElement();
            if (input.value != text)
                input.value = text;
        }
    },
    BeginShowMaskHint: function () {
    },
    RaiseDateChanged: function (processOnServer) {
        if (!this.DateChanged.IsEmpty()) {
            var args = new ASPxClientProcessingModeEventArgs(processOnServer);
            this.DateChanged.FireEvent(this, args);
            processOnServer = args.processOnServer;
        }
        return processOnServer;
    },
    SetDate: function (date) {
        this.SetValue(date);
    },
    GetDate: function () {
        return this.date ? new Date(this.date.valueOf()) : null;
    },
    GetMinDate: function () {
        var cal = this.GetCalendar();
        if (cal)
            return cal.GetMinDate();
        return null;
    },
    SetMinDate: function (date) {
        var cal = this.GetCalendar();
        if (cal)
            cal.SetMinDate(date);
    },
    GetMaxDate: function () {
        var cal = this.GetCalendar();
        if (cal)
            return cal.GetMaxDate();
        return null;
    },
    SetMaxDate: function (date) {
        var cal = this.GetCalendar();
        if (cal)
            cal.SetMaxDate(date);
    }
});
ASPxClientDateEdit.Cast = ASPxClientControl.Cast;
ASPxClientDateEdit.active = null;
ASPxClientDateEdit.HandleCalendarSelectionChanging = function (s, e) {
    if (ASPxClientDateEdit.active == null) return;
    ASPxClientDateEdit.active.OnCalendarSelectionChanging(e.selection.GetFirstDate(), true);
};
ASPxClientDateEdit.HandleTimeEditInternalValueChanging = function (s, date) {
    if (ASPxClientDateEdit.active == null) return;
    ASPxClientDateEdit.active.OnTimeEditInternalValueChanging(date);
};
ASPxClientDateEdit.HandleCalendarMainElementClick = function (s, e) {
    var dateEdit = ASPxClientDateEdit.active;
    if (dateEdit == null)
        return;
    var focusEditor = true;
    if (dateEdit.GetShowTimeSection())
        focusEditor = !_aspxGetIsParent(dateEdit.GetTimeEdit().GetMainElement(), _aspxGetEventSource(e));
    if (focusEditor)
        dateEdit.SetFocus();
};
ASPxClientParseDateEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
    constructor: function (value) {
        this.constructor.prototype.constructor.call(this);
        this.value = value;
        this.date = null;
        this.handled = false;
    }
});
__aspxCCValueInputSuffix = "VI";
ASPxClientComboBoxBase = _aspxCreateClass(ASPxClientDropDownEditBase, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.lbEventLockCount = 0;
        this.receiveGlobalMouseWheel = false;
        this.listBox = null;
        this.lastSuccessValue = "";
        this.islastSuccessValueInit = false;
        this.SelectedIndexChanged = new ASPxClientEvent();
    },
    Initialize: function () {
        this.InitializeListBoxOwnerName();
        ASPxClientDropDownEditBase.prototype.Initialize.call(this);
        this.InitLastSuccessValue();
    },
    InitializeListBoxOwnerName: function () {
        var lb = this.GetListBoxControl();
        if (lb)
            lb.ownerName = this.name;
    },
    InitLastSuccessValue: function () {
        this.SetLastSuccessValue(this.GetValue());
    },
    SetLastSuccessValue: function (value) {
        if (this.convertEmptyStringToNull && value === "")
            value = null;
        this.lastSuccessValue = value;
        this.islastSuccessValueInit = true;
    },
    GetDropDownInnerControlName: function (suffix) {
        return "";
    },
    GetListBoxControl: function () {
        if (!_aspxIsExists(this.listBox)) {
            var name = this.GetDropDownInnerControlName(__aspxListBoxNameSuffix);
            this.listBox = aspxGetControlCollection().Get(name);
        }
        if (this.isNative || (this.listBox && !!this.listBox.GetMainElement()))
            return this.listBox;
        return null;
    },
    GetCallbackArguments: function () {
        return this.GetListBoxCallbackArguments();
    },
    GetListBoxCallbackArguments: function () {
        var lb = this.GetListBoxControl();
        return lb.GetCallbackArguments();
    },
    SendCallback: function () {
        this.CreateCallback(this.GetCallbackArguments());
    },
    SendSpecialCallback: function (args) {
        this.CreateCallback(args);
    },
    SetText: function (text) {
        var lb = this.GetListBoxControl();
        var index = this.GetAdjustedSelectedIndexByText(lb, text);
        this.SelectIndex(index, false);
        this.SetTextBase(text);
        this.SetLastSuccessTest(text);
        this.SetLastSuccessValue(index >= 0 ? lb.GetValue() : text);
    },
    GetValue: function () {
        var value = this.islastSuccessValueInit ? this.lastSuccessValue : this.GetValueInternal();
        if (this.convertEmptyStringToNull && value === "")
            value = null;
        return value;
    },
    GetValueInternal: function () {
        var text = this.GetTextInternal();
        var textChanges = text != this.lastSuccessText;
        if (textChanges) {
            var lb = this.GetListBoxControl();
            if (lb) {
                var index = this.GetAdjustedSelectedIndexByText(lb, text);
                this.SelectIndexSilent(lb, index);
                if (index != -1)
                    return lb.GetValue();
            }
        }
        return ASPxClientDropDownEditBase.prototype.GetValue.call(this);
    },
    SetValue: function (value) {
        var lb = this.GetListBoxControl();
        if (lb) {
            lb.SetValue(value);
            var item = lb.GetSelectedItem();
            var text = item ? item.text : value;
            this.OnSelectionChangedCore(text, item, false);
            this.UpdateValueInput();
        }
    },
    GetFormattedText: function () {
        return this.GetText();
    },
    GetAdjustedSelectedIndexByText: function (lb, text) {
        var lbSelectedItem = lb.GetSelectedItem();
        if (lbSelectedItem != null && lbSelectedItem.text == text)
            return lbSelectedItem.index;
        return this.FindItemIndexByText(lb, text);
    },
    FindItemIndexByText: function (lb, text) {
        if (lb)
            return lb.FindItemIndexByText(text);
    },
    CollectionChanged: function () {
    },
    SelectIndex: function (index, initialize) {
        var lb = this.GetListBoxControl();
        var isSelectionChanged = lb.SelectIndexSilentAndMakeVisible(index, initialize);
        var item = lb.GetSelectedItem();
        var text = item != null ? item.text : "";
        if (isSelectionChanged)
            this.OnSelectionChangedCore(text, item, false);
        this.UpdateValueInput();
        return isSelectionChanged;
    },
    OnSelectChanged: function () {
        if (this.lbEventLockCount > 0) return;
        var lb = this.GetListBoxControl();
        var item = lb.GetSelectedItem();
        var text = item != null ? item.text : "";
        this.OnSelectionChangedCore(text, item, false);
        this.OnChange();
    },
    OnSelectionChangedCore: function (text, item, canBeRolledBack) {
        this.SetTextBase(text);
        this.ShowItemImage(item);
        if (!canBeRolledBack) {
            this.SetLastSuccessTest(text);
            this.SetLastSuccessValue(item != null ? item.value : text);
        }
        if (this.filterStrategy) {
            if (!canBeRolledBack)
                this.filterStrategy.OnSelectionChanged();
            if (__aspxIE) {
                var inputElement = this.GetInputElement();
                if (_aspxGetActiveElement() == inputElement)
                    _aspxSetInputSelection(inputElement, inputElement.value.length, inputElement.value.length);
            }
        }
    },
    ShowItemImageByIndex: function (index) {
        var item = this.GetItem(index);
        this.ShowItemImage(item);
    },
    ShowItemImage: function (item) {
        var imageUrl = item != null ? item.imageUrl : "";
        this.SetSelectedImage(imageUrl);
    },
    GetDropDownImageElement: function () {
        var itemImageCell = this.GetDropDownItemImageCell();
        if (itemImageCell != null)
            return _aspxGetChildByTagName(itemImageCell, "IMG", 0);
        return null;
    },
    SetSelectedImage: function (imageUrl) {
        var imgElement = this.GetDropDownImageElement();
        if (imgElement != null) {
            var imageExists = imageUrl != "";
            imageUrl = imageExists ? imageUrl : ASPx.EmptyImageUrl;
            imgElement.src = imageUrl;
            var itemImageCell = this.GetDropDownItemImageCell();
            if (_aspxGetElementDisplay(itemImageCell) != imageExists)
                _aspxSetElementDisplay(itemImageCell, imageExists);
            if (__aspxIE) {
                this.AdjustControl();
            }
        }
    },
    OnCallback: function (result) {
    },
    OnChange: function () {
        this.UpdateValueInput();
        this.RaisePersonalStandardValidation();
        this.OnValueChanged();
    },
    UpdateValueInput: function () {
    },
    RaiseValueChangedEvent: function () {
        if (!this.isInitialized) return;
        var processOnServer = ASPxClientTextEdit.prototype.RaiseValueChangedEvent.call(this);
        processOnServer = this.RaiseSelectedIndexChanged(processOnServer);
        return processOnServer;
    },
    RaiseSelectedIndexChanged: function (processOnServer) {
        if (!this.SelectedIndexChanged.IsEmpty()) {
            var args = new ASPxClientProcessingModeEventArgs(processOnServer);
            this.SelectedIndexChanged.FireEvent(this, args);
            processOnServer = args.processOnServer;
        }
        return processOnServer;
    },
    AddItem: function (text, value, imageUrl) {
        var index = this.GetListBoxControl().AddItem(text, value, imageUrl);
        this.CollectionChanged();
        return index;
    },
    InsertItem: function (index, text, value, imageUrl) {
        this.GetListBoxControl().InsertItem(index, text, value, imageUrl);
        this.CollectionChanged();
    },
    RemoveItem: function (index) {
        this.GetListBoxControl().RemoveItem(index);
        this.CollectionChanged();
    },
    ClearItems: function () {
        this.GetListBoxControl().ClearItems();
        this.ClearItemsInternal();
    },
    BeginUpdate: function () {
        this.GetListBoxControl().BeginUpdate();
    },
    EndUpdate: function () {
        this.GetListBoxControl().EndUpdate();
        this.CollectionChanged();
    },
    MakeItemVisible: function (index) {
    },
    GetItem: function (index) {
        var lb = this.GetListBoxControl();
        if (lb)
            return this.GetListBoxControl().GetItem(index);
        else
            return null;
    },
    FindItemByText: function (text) {
        return this.GetListBoxControl().FindItemByText(text);
    },
    FindItemByValue: function (value) {
        return this.GetListBoxControl().FindItemByValue(value);
    },
    GetItemCount: function () {
        return this.GetListBoxControl().GetItemCount();
    },
    GetSelectedIndex: function () {
        var lb = this.GetListBoxControl();
        if (lb)
            return lb.GetSelectedIndex();
        else
            return -1;
    },
    SetSelectedIndex: function (index) {
        this.SelectIndex(index, false);
    },
    GetSelectedItem: function () {
        var lb = this.GetListBoxControl();
        var index = lb.GetSelectedIndex();
        return lb.GetItem(index);
    },
    SetSelectedItem: function (item) {
        var index = (item != null) ? item.index : -1;
        this.SelectIndex(index, false);
    },
    GetText: function () {
        return this.lastSuccessText;
    },
    PerformCallback: function (arg) {
    },
    ClearItemsInternal: function () {
        this.SetValue(null);
        this.CollectionChanged();
    }
});
ASPxClientComboBox = _aspxCreateClass(ASPxClientComboBoxBase, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.allowMultipleCallbacks = false;
        this.isCallbackMode = false;
        this.loadDropDownOnDemand = false;
        this.needToLoadDropDown = false;
        this.isPerformCallback = false;
        this.changeSelectAfterCallback = 0;
        this.incrementalFilteringMode = "None";
        this.filterStrategy = null;
        this.filterTimer = __aspxWebKitTouchUI ? 300 : 100;
        this.filterMinLength = 0;
        this.initTextCorrectionRequired = false;
        this.isDropDownListStyle = true;
        this.defaultDropDownHeight = "";
        this.dropDownHeight = "";
        this.dropDownWidth = "";
        this.dropDownRows = 7;
        this.enterKeyPressed = false;
        this.onLoadDropDownOnDemandCallbackFinalizedEventHandler = null;
        this.callBackCoreComplete = false;
    },
    Initialize: function () {
        this.needToLoadDropDown = this.loadDropDownOnDemand;
        var lb = this.GetListBoxControl();
        this.InitializeListBoxOwnerName();
        this.FilterStrategyInitialize();
        var mainElement = this.GetMainElement();
        var input = this.GetInputElement();
        var ddbutton = this.GetDropDownButton();
        if (this.isDropDownListStyle && __aspxIE) {
            _aspxPreventElementDragAndSelect(mainElement, true, true);
            _aspxPreventElementDragAndSelect(input, true, true);
            if (ddbutton)
                _aspxPreventElementDragAndSelect(ddbutton, true);
        }
        if (this.isToolbarItem) {
            if (__aspxIE && __aspxBrowserVersion == 9)
                input.onmousedown = function (evt) { _aspxPreventEvent(evt); };
            else {
                mainElement.unselectable = "on";
                input.unselectable = "on";
                if (input.offsetParent)
                    input.offsetParent.unselectable = "on";
                if (ddbutton)
                    ddbutton.unselectable = "on";
                if (lb) {
                    var table = lb.GetListTable();
                    for (var i = 0; i < table.rows.length; i++) {
                        for (var j = 0; j < table.rows[i].cells.length; j++)
                            _aspxSetElementAsUnselectable(table.rows[i].cells[j], true);
                    }
                }
            }
        }
        this.RemoveRaisePSValidationFromListBox();
        this.RedirectStandardValidators();
        this.InitListBoxScrollStyle();
        ASPxClientComboBoxBase.prototype.Initialize.call(this);
    },
    FilterStrategyInitialize: function () {
        if (this.incrementalFilteringMode == "Contains")
            this.filterStrategy = new ASPxContainsFilteringStrategy(this);
        else if (this.incrementalFilteringMode == "StartsWith")
            this.filterStrategy = new ASPxStartsWithFilteringStrategy(this);
        else if (this.incrementalFilteringMode == "None")
            this.filterStrategy = new ASPxComboBoxDisableFilteringStrategy(this);
        this.filterStrategy.Initialize();
    },
    InlineInitialize: function () {
        this.lastSuccessValue = this.GetDecodeValue(this.lastSuccessValue);
        this.InsureInputValueCorrect();
        this.InitSpecialKeyboardHandling();
        ASPxClientComboBoxBase.prototype.InlineInitialize.call(this);
    },
    InsureInputValueCorrect: function () {
        if (this.initTextCorrectionRequired) {
            var lb = this.GetListBoxControl();
            if (lb) {
                var initSelectedIndex = lb.GetSelectedIndexInternal();
                if (initSelectedIndex >= 0) {
                    var initSelectedText = lb.GetItem(initSelectedIndex).text;
                    var input = this.GetInputElement();
                    var rawInput = this.GetRawInputElement();
                    if (rawInput && rawInput.value != initSelectedText) {
                        rawInput.value = initSelectedText;
                        input.value = this.GetDecoratedText(initSelectedText);
                    } else if (input.value != initSelectedText)
                        input.value = initSelectedText;
                }
            }
        }
    },
    ChangeEnabledAttributes: function (enabled) {
        ASPxClientComboBoxBase.prototype.ChangeEnabledAttributes.call(this, enabled);
        var changeEventsMethod = _aspxChangeEventsMethod(enabled);
        var mainElement = this.GetMainElement();
        if (mainElement)
            changeEventsMethod(mainElement, _aspxGetMouseWheelEventName(), aspxCBMouseWheel);
        var btnElement = this.GetDropDownButton();
        if (btnElement)
            changeEventsMethod(btnElement, "onmousemove", aspxCBDDButtonMMove);
    },
    GetDropDownInnerControlName: function (suffix) {
        return ASPxClientDropDownEditBase.prototype.GetDropDownInnerControlName.call(this, suffix);
    },
    AdjustControlCore: function () {
        ASPxClientEdit.prototype.AdjustControlCore.call(this);
        this.ResetDropDownSizeCache();
    },
    RemoveRaisePSValidationFromListBox: function () {
        var listBox = this.GetListBoxControl();
        if (listBox)
            listBox.RaisePersonalStandardValidation = function () { };
    },
    RedirectStandardValidators: function () {
        var valueInput = this.GetValueInput();
        if (_aspxIsExistsElement(valueInput) && valueInput.Validators) {
            for (var i = 0; i < valueInput.Validators.length; i++)
                valueInput.Validators[i].controltovalidate = valueInput.id;
        }
    },
    GetValueInputToValidate: function () {
        return this.GetValueInput();
    },
    GetValueInput: function () {
        return document.getElementById(this.name + "_" + __aspxCCValueInputSuffix);
    },
    GetListBoxScrollDivElement: function () {
        return this.GetListBoxControl().GetScrollDivElement();
    },
    RollbackValueInputValue: function () {
        var inputElement = this.GetValueInput();
        if (inputElement) {
            inputElement.value = this.lastSuccessValue;
        }
    },
    UpdateValueInput: function () {
        var inputElement = this.GetValueInput();
        if (inputElement) {
            var value = this.GetValue();
            inputElement.value = value != null ? value : "";
        }
    },
    VisibleCollectionChanged: function () {
        this.CollectionChangedCore();
    },
    CollectionChanged: function () {
        this.CollectionChangedCore();
    },
    CollectionChangedCore: function (byTimer) {
        if (this.GetListBoxControl().APILockCount == 0) {
            this.UpdateDropDownPositionAndSize();
            if (__aspxIE) {
                var lb = this.GetListBoxControl();
                var selectedIndex = lb.GetSelectedIndex();
                if (selectedIndex > -1) {
                    var selectedItemTextCell = lb.GetItemFirstTextCell(selectedIndex);
                    var controller = aspxGetStateController();
                    controller.DeselectElementBySrcElement(selectedItemTextCell);
                    controller.SelectElementBySrcElement(selectedItemTextCell);
                }
            }
        }
    },
    UpdateDropDownPositionAndSize: function () {
        this.InitDropDownSize();
        if (this.droppedDown) {
            var pc = this.GetPopupControl();
            var element = this.GetMainElement();
            pc.UpdatePositionAtElement(element);
        }
        if (!this.clientVisible)
            this.ResetControlAdjustment();
    },
    InitListBoxScrollStyle: function () {
        this.PreventScrollSpoilDDShowing();
    },
    GetDropDownHeight: function () {
        return (this.ddHeightCache != __aspxInvalidDimension) ? this.ddHeightCache : this.InitListBoxHeight();
    },
    GetDropDownWidth: function () {
        return (this.ddWidthCache != __aspxInvalidDimension && !this.GetIsControlWidthWasChanged()) ? this.ddWidthCache : this.InitListBoxWidth();
    },
    InitDropDownSize: function () {
        if (!this.enabled || this.GetItemCount() == 0) return;
        var pc = this.GetPopupControl();
        if (pc && this.IsDisplayed()) {
            var pcwElement = pc.GetWindowElement(-1);
            if (_aspxIsExistsElement(pcwElement)) {
                var isPcwDisplayed = _aspxGetElementDisplay(pcwElement);
                if (!isPcwDisplayed)
                    pc.SetWindowDisplay(-1, true);
                var listBoxHeight = this.InitListBoxHeight();
                var listBoxWidth = this.InitListBoxWidth();
                if (listBoxHeight != this.ddHeightCache || listBoxWidth != this.ddWidthCache) {
                    this.ddHeightCache = listBoxHeight;
                    this.ddWidthCache = listBoxWidth;
                    pc.SetSize(this.ddWidthCache, this.ddHeightCache);
                }
                if (!isPcwDisplayed)
                    pc.SetWindowDisplay(-1, false);
            }
        }
    },
    InitMainElementCache: function () {
        this.mainElementWidthCache = this.GetMainElement().clientWidth;
    },
    GetVisibleItemCount: function (lb) {
        var lbTable = lb.GetListTable();
        var count = this.GetItemCount();
        var visibleItemCount = 0;
        for (var i = 0; i < count; i++) {
            if (_aspxGetElementDisplay(lbTable.rows[i]))
                visibleItemCount++;
        }
        return visibleItemCount;
    },
    GetDefaultDropDownHeight: function (listHeight, count) {
        if (this.defaultDropDownHeight == "") {
            this.defaultDropDownHeight = ((listHeight / count) * this.dropDownRows) + "px";
        }
        return this.defaultDropDownHeight;
    },
    InitListBoxHeight: function () {
        var lbScrollDiv = this.GetListBoxScrollDivElement();
        var height = this.dropDownHeight;
        var lb = this.GetListBoxControl();
        lb.GetMainElement().style.height = "0px";
        var lbHeight = 0;
        if (height == "") {
            var listHeight = lb.GetListTableHeight();
            var count = this.GetVisibleItemCount(lb);
            if (count > this.dropDownRows)
                height = this.GetDefaultDropDownHeight(listHeight, count);
            else
                height = count == 0 ? "0px" : listHeight + "px";
            lbScrollDiv.style.height = height;
            lbHeight = lbScrollDiv.offsetHeight;
        } else {
            var lbMainElement = lb.GetMainElement();
            lbMainElement.style.height = "0px";
            lbScrollDiv.style.height = "0px";
            lbMainElement.style.height = height;
            var trueLbOffsetHeight = lbMainElement.offsetHeight;
            var trueLbClientHeight = lbMainElement.clientHeight;
            lbScrollDiv.style.height = lbMainElement.clientHeight + "px";
            lbHeightCorrection = lbMainElement.offsetHeight - trueLbOffsetHeight;
            lbScrollDiv.style.height = (trueLbClientHeight - lbHeightCorrection) + "px";
            lbHeight = lbMainElement.offsetHeight;
        }
        lb.InitializePageSize();
        return lbHeight;
    },
    InitListBoxWidth: function () {
        this.InitMainElementCache();
        var mainElement = this.GetMainElement();
        var lbScrollDiv = this.GetListBoxScrollDivElement();
        var lb = this.GetListBoxControl();
        var lbMainElement = lb.GetMainElement();
        var lbTable = lb.GetListTable();
        var scrollWidth = 0;
        lbMainElement.style.width = "";
        lbScrollDiv.style.paddingRight = "0px";
        lbScrollDiv.style.width = "100%";
        if (this.dropDownWidth != "") {
            lbMainElement.style.width = this.dropDownWidth;
            var width = lbMainElement.clientWidth;
            var scrollInfo = this.SetLbScrollDivAndCorrectionForScroll(lb, width, false);
            width = scrollInfo.scrollDivWidth;
            scrollWidth = scrollInfo.scrollWidth;
            if (!__aspxIE) {
                var difference = lbTable.offsetWidth - lbScrollDiv.clientWidth;
                if (difference > 0) {
                    lbMainElement.style.width = (lbMainElement.offsetWidth + difference) + "px";
                    lbScrollDiv.style.width = (lbMainElement.clientWidth) + "px";
                }
            }
        } else {
            var width = lbTable.offsetWidth;
            var scrollInfo = this.SetLbScrollDivAndCorrectionForScroll(lb, width, true);
            width = scrollInfo.scrollDivWidth;
            scrollWidth = scrollInfo.scrollWidth;
            if (__aspxFirefox && lbMainElement.offsetWidth < lbScrollDiv.offsetWidth)
                lbMainElement.style.width = "0%";
            var widthDifference = mainElement.offsetWidth - lbMainElement.offsetWidth;
            if (widthDifference > 0) {
                lbScrollDiv.style.width = (width + widthDifference) + "px";
                var twoBorderSize = (lbMainElement.offsetWidth - lbMainElement.clientWidth);
                lbMainElement.style.width = (width + widthDifference + twoBorderSize) + "px";
            }
        }
        if (lb.IsMultiColumn())
            lb.CorrectMultiColumnHeaderWidth(scrollWidth);
        return lbScrollDiv.offsetWidth;
    },
    SetLbScrollDivAndCorrectionForScroll: function (lb, width, widthByContent) {
        var lbScrollDiv = this.GetListBoxScrollDivElement();
        var scrollWidth = lb.GetVerticalScrollBarWidth();
        var browserPutsScrollBarOnContent = __aspxIE && __aspxBrowserVersion > 5.5 && __aspxBrowserVersion < 8;
        var browserCanHaveScroll = lb.GetVerticalOverflow(lbScrollDiv) == "auto" || this.IsScrollSpoilDDShowing();
        if (browserPutsScrollBarOnContent) {
            width -= scrollWidth;
            lbScrollDiv.style.paddingRight = scrollWidth + "px";
        } else if (widthByContent && browserCanHaveScroll)
            width += scrollWidth;
        lbScrollDiv.style.width = width + "px";
        return { scrollDivWidth: width, scrollWidth: scrollWidth };
    },
    SelectIndexSilent: function (lb, index) {
        this.lbEventLockCount++;
        lb.SelectIndexSilentAndMakeVisible(index);
        this.ShowItemImageByIndex(index);
        this.lbEventLockCount--;
    },
    GetDecoratedText: function (text) {
        var lb = this.GetListBoxControl();
        var selectedItem = this.GetSelectedItem();
        var decoratedText = text;
        if (this.displayFormat != null && lb.IsMultiColumn() && selectedItem != null) {
            var textColumnCount = lb.GetItemTextCellCount();
            var texts = [textColumnCount];
            for (var i = 0; i < textColumnCount; i++) {
                texts[i] = selectedItem.GetColumnTextByIndex(i)
            }
            decoratedText = ASPxFormatter.Format(this.displayFormat, texts);
        } else
            decoratedText = ASPxClientComboBoxBase.prototype.GetDecoratedText.call(this, text);
        return (selectedItem != null && decoratedText === this.nullText) ? "" : decoratedText;
    },
    CanApplyNullTextDecoration: function () {
        if (this.listBox || !this.loadDropDownOnDemand) {
            var value = this.GetRawInputElement().value;
            var isValueNull = this.convertEmptyStringToNull && value === "" ? true : value === null;
            return (this.GetSelectedIndex() == -1 && isValueNull);
        } else
            return (this.GetValue() != null || this.GetText() != "");
    },
    ShowDropDownArea: function (isRaiseEvent) {
        if (this.needToLoadDropDown) {
            this.EnsureDropDownLoaded();
            return;
        }
        var lb = this.GetListBoxControl();
        if (!lb || lb.GetItemCount() == 0)
            return;
        if (!this.filterStrategy.IsShowDropDownAllowed()) {
            this.DropDownButtonPop(true);
            return;
        }
        ASPxClientDropDownEditBase.prototype.ShowDropDownArea.call(this, isRaiseEvent);
        var rawText = this.GetTextInternal();
        var lbItem = lb.GetSelectedItem();
        var lbText = lbItem != null ? lbItem.text : "";
        if (rawText != lbText && rawText != null && lbText != "") {
            var newSelectedIndex = this.GetAdjustedSelectedIndexByText(lb, rawText);
            lb.SelectIndexSilent(newSelectedIndex, false);
        }
        this.EnsureSelectedItemVisibleOnShow(lb);
        lb.CallbackSpaceInit();
    },
    FireFoxRequiresCacheScrollBar: function () {
        return __aspxFirefox && __aspxBrowserVersion >= 3.6;
    },
    BrowserRequiresCacheScrollBar: function () {
        return __aspxWebKitFamily || __aspxOpera || this.FireFoxRequiresCacheScrollBar();
    },
    HideDropDownArea: function (isRaiseEvent) {
        if (this.filterStrategy)
            this.filterStrategy.OnBeforeHideDropDownArea();
        if (this.BrowserRequiresCacheScrollBar())
            this.CachedScrollTop();
        ASPxClientDropDownEditBase.prototype.HideDropDownArea.call(this, isRaiseEvent);
        this.PreventScrollSpoilDDShowing();
    },
    EnsureSelectedItemVisibleOnShow: function (listBox) {
        if (this.BrowserRequiresCacheScrollBar())
            listBox.RestoreScrollTopFromCache();
        listBox.EnsureSelectedItemVisible();
    },
    CachedScrollTop: function () {
        this.GetListBoxControl().CachedScrollTop();
        if (this.BrowserRequiresCacheScrollBar()) {
            var scrollDiv = this.GetListBoxScrollDivElement();
            if (scrollDiv != null)
                scrollDiv.scrollTop = 0;
        }
    },
    IsScrollSpoilDDShowing: function () {
        var pc = this.GetPopupControl();
        if (pc)
            return (__aspxNetscapeFamily && pc.enableAnimation);
    },
    EnableLBDivOverflow: function () {
        var divElement = this.GetListBoxScrollDivElement();
        divElement.style.overflow = "auto";
    },
    DisableLBDivOverflow: function () {
        var divElement = this.GetListBoxScrollDivElement();
        if (divElement)
            divElement.style.overflow = "hidden";
    },
    PreventScrollSpoilDDShowing: function () {
        if (this.IsScrollSpoilDDShowing())
            this.DisableLBDivOverflow();
    },
    IsFilterEnabled: function () {
        return this.incrementalFilteringMode != "None";
    },
    ChangeInputEnabled: function (element, enabled, readOnly) {
        ASPxClientTextEdit.prototype.ChangeInputEnabled.call(this, element, enabled, readOnly || (this.isDropDownListStyle && !this.IsFilterEnabled()));
    },
    GetCallbackArguments: function () {
        var args = ASPxClientComboBoxBase.prototype.GetCallbackArguments.call(this);
        args += this.GetCallbackArgumentsInternal();
        return args;
    },
    GetCallbackArgumentsInternal: function () {
        var args = "";
        args = this.filterStrategy.GetCallbackArguments();
        return args;
    },
    ShowLoadingPanel: function () {
        var lb = this.GetListBoxControl();
        var loadingParentElement = lb.GetScrollDivElement().parentNode;
        if (!this.loadingPanelElement)
            this.CreateLoadingPanelWithAbsolutePosition(loadingParentElement, loadingParentElement);
    },
    ShowLoadingDiv: function () {
        var lb = this.GetListBoxControl();
        var loadingParentElement = lb.GetScrollDivElement().parentNode;
        if (!this.loadingDivElement)
            this.CreateLoadingDiv(loadingParentElement);
    },
    HideLoadingPanelOnCallback: function () {
        return false;
    },
    OnCallback: function (result) {
        if (__aspxWebKitTouchUI)
            window.setTimeout(function () {
                this.OnCallbackCore(result);
                this.DoEndCallback();
            } .aspxBind(this), 0);
        else
            this.OnCallbackCore(result);
    },
    OnCallbackCore: function (result) {
        if (this.needToLoadDropDown)
            this.OnLoadDropDownOnDemandCallback(result);
        else if (this.filterStrategy.IsCallbackResultNotDiscarded()) {
            this.OnCallbackBeforeListBox();
            this.GetListBoxControl().OnCallback(result);
            this.OnCallbackInternal(result);
            this.OnCallbackFinally(true);
        }
        this.callBackCoreComplete = true;
    },
    OnLoadDropDownOnDemandCallbackFinalized: function () {
        this.DoReInitializeAfterLoadDropDownOnDemand();
        this.HideLoadingPanel();
        this.HideLoadingDiv();
        var isCallbackForShowDropDownArea = !this.onLoadDropDownOnDemandCallbackFinalizedEventHandler;
        if (isCallbackForShowDropDownArea) {
            if (this.filterStrategy.IsShowDropDownAllowed())
                this.ShowDropDown();
        } else
            this.onLoadDropDownOnDemandCallbackFinalizedEventHandler();
    },
    OnCallbackFinalized: function () {
        if (this.needToLoadDropDown)
            this.OnLoadDropDownOnDemandCallbackFinalized();
    },
    OnLoadDropDownOnDemandCallback: function (result) {
        var node = this.GetMainElement();
        var tempDiv = node.ownerDocument.createElement('div');
        tempDiv.innerHTML = eval(result);
        var len = tempDiv.childNodes.length;
        for (ind = 0; ind < len; ind++) {
            _aspxInsertElementAfter(tempDiv.childNodes.item(0), node);
        }
    },
    ProcessCallbackError: function (errorObj) {
        this.callBackCoreComplete = true;
        ASPxClientDropDownEditBase.prototype.ProcessCallbackError.call(this, errorObj);
    },
    DoEndCallback: function () {
        if (!this.callBackCoreComplete && __aspxWebKitTouchUI) return;
        this.filterStrategy.BeforeDoEndCallback();
        ASPxClientDropDownEditBase.prototype.DoEndCallback.call(this);
        this.filterStrategy.AfterDoEndCallback();
        this.callBackCoreComplete = false;
    },
    RaiseEndCallback: function () {
        if (this.preventEndCallbackRising)
            this.preventEndCallbackRising = false;
        else
            ASPxClientDropDownEditBase.prototype.RaiseEndCallback.call(this);
    },
    OnCallbackError: function (result, data) {
        this.GetListBoxControl().OnCallbackError(result);
        this.OnCallbackFinally(false);
    },
    OnCallbackFinally: function (isSuccessful) {
        this.filterStrategy.OnBeforeCallbackFinally();
        this.CollectionChanged();
        this.HideLoadingElements();
        this.isPerformCallback = false;
        this.changeSelectAfterCallback = 0;
        if (isSuccessful)
            this.filterStrategy.OnAfterCallbackFinally();
    },
    OnCallbackBeforeListBox: function () {
        var lb = this.GetListBoxControl();
        this.changeSelectAfterCallback = lb.changeSelectAfterCallback;
    },
    OnCallbackCorrectSelectedIndex: function () {
        var lb = this.GetListBoxControl();
        if (this.changeSelectAfterCallback != 0)
            this.SetTextInternal(lb.GetSelectedItem().text);
    },
    OnCallbackInternal: function (result) {
        this.OnCallbackCorrectSelectedIndex();
        if (this.isPerformCallback) {
            var lb = this.GetListBoxControl();
            var resultIsEmpty = lb.GetItemCount() == 0;
            if (resultIsEmpty)
                this.HideDropDownArea(true);
        }
        this.filterStrategy.OnCallbackInternal(result);
    },
    DoReInitializeAfterLoadDropDownOnDemand: function () {
        this.InitializeListBoxOwnerName();
        this.needToLoadDropDown = false;
    },
    EnsureDropDownLoaded: function (callbackFunction) {
        if (this.needToLoadDropDown) {
            this.onLoadDropDownOnDemandCallbackFinalizedEventHandler = function () {
                if (callbackFunction) {
                    callbackFunction();
                }
            };
            var args = this.FormatLoadDropDownOnDemandCallbackArguments();
            this.SendLoadDropDownOnDemandCallback(args);
        }
    },
    IsDropDownButtonClick: function (evt) {
        return _aspxGetIsParent(this.GetDropDownButton(), _aspxGetEventSource(evt));
    },
    OnDropDown: function (evt) {
        var returnValue = ASPxClientDropDownEditBase.prototype.OnDropDown.call(this, evt);
        if (this.IsDropDownButtonClick(evt) && this.IsCanToDropDown()) {
            this.OnDropDownButtonClick();
            return returnValue;
        }
        return true;
    },
    OnDropDownButtonClick: function () {
        if (this.filterStrategy != null)
            this.filterStrategy.OnDropDownButtonClick();
        this.ForceRefocusEditor();
    },
    SendCallback: function () {
        if (!this.pcIsShowingNow)
            this.ShowLoadingElements();
        ASPxClientComboBoxBase.prototype.SendCallback.call(this);
    },
    SelectNeighbour: function (step) {
        if ((this.isToolBarItem && !this.droppedDown) || this.readOnly) return;
        var lb = this.GetListBoxControl();
        var step = this.filterStrategy.GetStepForClientFiltrationEnabled(lb, step);
        this.SelectNeighbourInternal(lb, step);
    },
    SelectNeighbourInternal: function (lb, step) {
        if (this.droppedDown)
            this.lbEventLockCount++;
        lb.SelectNeighbour(step);
        if (this.droppedDown) {
            var selectedItem = lb.GetSelectedItem();
            this.OnSelectionChangedCore(selectedItem.text, selectedItem, true);
            this.lbEventLockCount--;
        }
    },
    GetFocusSelectAction: function () {
        return this.isToolbarItem ? null : "all";
    },
    OnSpecialKeyDown: function (evt) {
        if (this.filterStrategy)
            this.filterStrategy.OnSpecialKeyDown(evt);
        return ASPxClientEdit.prototype.OnSpecialKeyDown.call(this, evt);
    },
    OnArrowUp: function (evt) {
        if (!this.isInitialized) return true;
        var isProcessed = ASPxClientDropDownEditBase.prototype.OnArrowUp.call(this, evt);
        if (!isProcessed && this.filterStrategy.IsFilterMeetRequirementForMinLength())
            this.SelectNeighbour(-1);
        return true;
    },
    OnTextChanged: function () {
        if (!this.IsFocusEventsLocked())
            ASPxClientComboBoxBase.prototype.OnTextChanged.call(this);
    },
    OnTextChangedInternal: function () {
        ASPxClientComboBoxBase.prototype.OnTextChangedInternal.call(this);
        this.filterStrategy.OnTextChanged();
    },
    OnArrowDown: function (evt) {
        if (!this.isInitialized) return true;
        var isProcessed = ASPxClientDropDownEditBase.prototype.OnArrowDown.call(this, evt);
        if (!isProcessed && this.filterStrategy.IsFilterMeetRequirementForMinLength())
            this.SelectNeighbour(1);
        return true;
    },
    OnPageUp: function () {
        if (!this.isInitialized || !this.filterStrategy.IsFilterMeetRequirementForMinLength()) return true;
        return this.OnPageButtonDown(false);
    },
    OnPageDown: function () {
        if (!this.isInitialized || !this.filterStrategy.IsFilterMeetRequirementForMinLength()) return true;
        return this.OnPageButtonDown(true);
    },
    OnPageButtonDown: function (isDown) {
        if (!this.isInitialized) return true;
        var lb = this.GetListBoxControl();
        if (lb) {
            var direction = isDown ? 1 : -1;
            this.SelectNeighbour(lb.scrollPageSize * direction);
        }
        return true;
    },
    OnHomeKeyDown: function (evt) {
        if (!this.isInitialized) return true;
        return this.OnHomeEndKeyDown(evt, true);
    },
    OnEndKeyDown: function (evt) {
        if (!this.isInitialized) return true;
        return this.OnHomeEndKeyDown(evt, false);
    },
    OnHomeEndKeyDown: function (evt, isHome) {
        if (!this.isInitialized) return true;
        var input = this.GetValueInput();
        if (input.readOnly || evt.ctrlKey) {
            var lb = this.GetListBoxControl();
            var count = lb.GetItemCount();
            this.SelectNeighbour(isHome ? -count : count);
            return true;
        }
        return false;
    },
    OnEscape: function () {
        this.filterStrategy.OnEscape();
        ASPxClientComboBoxBase.prototype.OnEscape.call(this);
    },
    OnEnter: function () {
        if (!this.isInitialized) return true;
        if (this.isDropDownListStyle) this.enterKeyPressed = true;
        if (this.filterStrategy.IsCloseByEnterLocked()) return;
        this.enterProcessed = this.droppedDown;
        if (!this.isEnterLocked) {
            this.OnApplyChangesAndCloseWithEvents(false);
            this.filterStrategy.OnAfterEnter();
        }
        return this.enterProcessed;
    },
    OnTab: function (evt) {
        if (!this.isInitialized)
            return true;
        this.filterStrategy.OnTab();
    },
    OnApplyChanges: function () {
        if (!this.focused || (this.isDropDownListStyle && !this.IsFilterEnabled())) return;
        this.OnApplyChangesInternal();
    },
    OnApplyChangesAndCloseWithEvents: function (withoutCallback) {
        this.OnApplyChangesInternal(withoutCallback);
        this.HideDropDownArea(true);
    },
    OnApplyChangesInternal: function (withoutCallback) {
        var inCallback = this.InCallback();
        var lb = this.GetListBoxControl();
        var text = this.GetInputElement().value;
        var value = this.listBox.GetSelectedItem() ? this.listBox.GetSelectedItem().value : this.GetValue();
        var isChanged = this.lastSuccessText != text || this.lastSuccessValue != value;
        var isRollback = false;
        if (isChanged) {
            var rollbackRequired = this.isDropDownListStyle && this.GetAdjustedSelectedIndexByText(lb, text) < 0;
            if (rollbackRequired) {
                var rollbackToItem = lb.GetSelectedItem();
                isRollback = rollbackToItem == null && this.isCallbackMode;
                if (isRollback) {
                    this.RollbackValueInputValue();
                    this.RollbackTextInputValue();
                }
                text = rollbackToItem != null ? rollbackToItem.text : this.lastSuccessText;
            }
            if (!isRollback)
                this.SetText(text);
            this.OnChange();
            this.filterStrategy.OnApplyChanges(withoutCallback);
        }
    },
    OnButtonClick: function (number) {
        if (number != this.dropDownButtonIndex) {
            this.HideDropDownArea(true);
        }
        ASPxClientButtonEditBase.prototype.OnButtonClick.call(this, number);
    },
    OnCancelChanges: function () {
        var isCancelProcessed = ASPxClientDropDownEditBase.prototype.OnCancelChanges.call(this);
        this.filterStrategy.OnCancelChanges();
        var lb = this.GetListBoxControl();
        var index = this.GetAdjustedSelectedIndexByText(lb, this.lastSuccessText);
        this.SelectIndexSilent(lb, index);
        return isCancelProcessed;
    },
    ShouldCloseOnMCMouseDown: function () {
        return this.GetInputElement().readOnly;
    },
    OnCloseUp: function (evt) {
        var evt = _aspxGetEvent(evt);
        if (__aspxFirefox && evt.type == "mouseup" && _aspxGetEventSource(evt).tagName == "DIV") {
            var scrollDiv = this.GetListBoxControl().GetScrollDivElement();
            var scrollDivID = scrollDiv ? scrollDiv.id : "";
            if (scrollDivID == _aspxGetEventSource(evt).id)
                return;
        }
        ASPxClientDropDownEditBase.prototype.OnCloseUp.call(this, evt);
    },
    OnDDButtonMouseMove: function (evt) {
        return (this.droppedDown ? _aspxCancelBubble(evt) : true);
    },
    CloseDropDownByDocumentOrWindowEvent: function (causedByWindowResizing) {
        this.OnApplyChangesInternal();
        ASPxClientDropDownEditBase.prototype.CloseDropDownByDocumentOrWindowEvent.call(this, causedByWindowResizing);
    },
    IsCanToDropDown: function () {
        var lb = this.GetListBoxControl();
        if (lb && lb.GetItemCount() > 0)
            if (this.loadDropDownOnDemand)
                return !this.needToLoadDropDown;
            else
                return ASPxClientDropDownEditBase.prototype.IsCanToDropDown.call(this);
        else
            return false;
    },
    OnPopupControlShown: function () {
        if (!this.isInitialized) return;
        if (__aspxOpera)
            this.GetListBoxControl().RestoreScrollTopFromCache();
        if (this.IsScrollSpoilDDShowing())
            _aspxSetTimeout("aspxCBMozillaOverflowOn(\"" + this.name + "\")", 100);
        if (this.lockListBoxClick)
            delete this.lockListBoxClick;
        if (this.InCallback())
            this.ShowLoadingDivAndPanel();
        ASPxClientDropDownEditBase.prototype.OnPopupControlShown.call(this);
    },
    OnLBSelectedIndexChanged: function () {
        if (!this.lockListBoxClick) {
            this.OnSelectChanged();
            if (this.IsNavigationOnKeyPress()) {
                if (!this.droppedDown) {
                    _aspxSetSelection(this.GetInputElement());
                }
            } else
                this.ForceRefocusEditor();
        }
    },
    IsNavigationOnKeyPress: function () {
        var lb = this.GetListBoxControl();
        return lb.IsScrollOnKBNavigationLocked();
    },
    OnListBoxItemMouseUp: function (evt) {
        if (!this.lockListBoxClick && !this.InCallback()) {
            this.OnApplyChangesInternal();
            this.OnCloseUp(evt);
        }
    },
    OnMouseWheel: function (evt) {
        if (this.allowMouseWheel && !this.droppedDown && this.filterStrategy.IsFilterMeetRequirementForMinLength()) {
            var wheelDelta = _aspxGetWheelDelta(evt);
            if (wheelDelta > 0)
                this.SelectNeighbour(-1);
            else if (wheelDelta < 0)
                this.SelectNeighbour(1);
            return _aspxPreventEvent(evt);
        }
    },
    OnOpenAnotherDropDown: function () {
        this.OnApplyChangesAndCloseWithEvents();
    },
    ParseValue: function () {
        var newText = this.GetInputElement().value;
        var oldText = this.GetText();
        var oldValue = this.GetValue();
        var isNeedToParseValue = oldText != newText;
        if (isNeedToParseValue) {
            if (this.CanTextBeAccepted(newText, oldText)) {
                this.SetText(newText);
                this.OnChange();
            } else
                this.SetTextInternal(oldText);
        }
    },
    CanTextBeAccepted: function (newText, oldText) {
        var notAnyTextCanBeAccepted = this.isDropDownListStyle;
        if (notAnyTextCanBeAccepted) {
            var lb = this.GetListBoxControl();
            var newTextPresentInItemCollection = this.GetAdjustedSelectedIndexByText(lb, newText) != -1;
            return newTextPresentInItemCollection;
        }
        var wasTextErased = !newText && oldText;
        if ((!wasTextErased) && this.nullText && this.CanApplyNullTextDecoration()) {
            return false;
        }
        return true;
    },
    MakeItemVisible: function (index) {
        var lb = this.GetListBoxControl();
        lb.MakeItemVisible(index);
    },
    PerformCallback: function (arg) {
        this.isPerformCallback = true;
        this.filterStrategy.PerformCallback();
        if (this.needToLoadDropDown) {
            this.onLoadDropDownOnDemandCallbackFinalizedEventHandler = function () {
                var selectedItem = this.listBox.GetSelectedItem();
                if (selectedItem != null)
                    this.SetTextInternal(selectedItem.text);
            };
            var formatCallbackArg = function (prefix, arg) {
                arg = arg.toString();
                return (_aspxIsExists(arg) ? prefix + "|" + arg.length + ';' + arg + ';' : "");
            };
            if (arg === undefined || arg == null)
                arg = "";
            var performArgs = formatCallbackArg("LECC", arg);
            var loadItemsRangeArgs = formatCallbackArg("LBCRI", "0:-2");
            var args = this.FormatLoadDropDownOnDemandCallbackArguments(performArgs + loadItemsRangeArgs);
            this.SendLoadDropDownOnDemandCallback(args);
        } else {
            this.ClearItemsInternal();
            this.GetListBoxControl().PerformCallback(arg);
        }
    },
    ClearItemsInternal: function () {
        ASPxClientComboBoxBase.prototype.ClearItemsInternal.call(this);
        var lbScrollDiv = this.GetListBoxScrollDivElement();
        if (lbScrollDiv)
            lbScrollDiv.scrollTop = "0px";
    },
    SendLoadDropDownOnDemandCallback: function (args) {
        this.ShowInputLoadingPanel();
        this.SendSpecialCallback(args);
    },
    ShowInputLoadingPanel: function () {
        var inputElement = this.GetInputElement();
        var parentElement = inputElement.parentNode;
        this.CreateLoadingDiv(parentElement, inputElement);
        this.CreateLoadingPanelWithAbsolutePosition(parentElement, inputElement);
    },
    FormatLoadDropDownOnDemandCallbackArguments: function (arguments) {
        var internalArgs = _aspxIsExists(arguments) ? arguments.toString() : "";
        var resultArgs = __aspxLoadDropDownOnDemandCallbackPrefix + "|0;;";
        return resultArgs + internalArgs;
    },
    CorrectCaretPositionInChrome: function () {
        if (__aspxChrome) _aspxSetCaretPosition(this.GetInputElement(), 0);
    },
    ForceRefocusEditor: function () {
        this.CorrectCaretPositionInChrome();
        ASPxClientEdit.prototype.ForceRefocusEditor.call(this);
    },
    OnFocus: function () {
        if (this.needToLoadDropDown) {
            var args = this.FormatLoadDropDownOnDemandCallbackArguments();
            this.SendLoadDropDownOnDemandCallback(args);
        }
        ASPxClientDropDownEditBase.prototype.OnFocus.call(this);
    }
});
ASPxClientComboBox.Cast = ASPxClientControl.Cast;
ASPxComboBoxDisableFilteringStrategy = _aspxCreateClass(null, {
    constructor: function (comboBox) {
        this.comboBox = comboBox;
        this.isDropDownListStyle = this.comboBox.isDropDownListStyle;
        this.isApplyAndCloseAfterFiltration = false;
    },
    Initialize: function () { },
    AfterDoEndCallback: function () { },
    BeforeDoEndCallback: function () { },
    IsCallbackResultNotDiscarded: function () { return true; },
    IsCloseByEnterLocked: function () { return false; },
    OnAfterCallbackFinally: function () {
        if (this.isApplyAndCloseAfterFiltration) {
            this.comboBox.OnApplyChangesAndCloseWithEvents();
            this.isApplyAndCloseAfterFiltration = false;
        }
    },
    OnAfterEnter: function () { },
    OnApplyChanges: function () { },
    OnBeforeCallbackFinally: function () { },
    OnBeforeHideDropDownArea: function () { },
    OnCallbackInternal: function (result) { },
    OnCancelChanges: function () {
        this.OnFilterRollback();
    },
    OnFilterRollback: function () { },
    OnDropDownButtonClick: function () { },
    OnEscape: function () { },
    OnFilteringKeyUp: function (evt) { },
    OnFilterRollback: function (withoutCallback) { },
    SetFilter: function (value) { },
    Filtering: function () { },
    OnSelectionChanged: function () { },
    OnSpecialKeyDown: function (evt) { },
    OnTab: function () {
        if (this.comboBox.InCallback())
            this.isApplyAndCloseAfterFiltration = true;
        else
            this.comboBox.OnApplyChangesAndCloseWithEvents();
    },
    OnTextChanged: function () { },
    PerformCallback: function () { },
    GetCallbackArguments: function () { return ""; },
    GetInputElement: function () {
        return this.comboBox.GetInputElement();
    },
    GetListBoxControl: function () {
        return this.comboBox.GetListBoxControl();
    },
    GetCurrentSelectedItemCallbackArguments: function () {
        return ASPxFilteringUtils.FormatCallbackArg(__aspxtCurrentSelectedItemCallbackPrefix, "");
    },
    GetStepForClientFiltrationEnabled: function (lb, step) {
        return step;
    },
    IsFilterMeetRequirementForMinLength: function () {
        return true;
    },
    IsShowDropDownAllowed: function () {
        return this.IsFilterMeetRequirementForMinLength();
    }
});
ASPxComboBoxIncrementalFilteringStrategy = _aspxCreateClass(ASPxComboBoxDisableFilteringStrategy, {
    constructor: function (comboBox) {
        this.constructor.prototype.constructor.call(this, comboBox);
        this.currentCallbackIsFiltration = false;
        this.refiltrationRequired = false;
        this.isEnterLocked = false;
        this.isLastFilteredKeyWasTab = false;
        this.filter = "";
        this.filterInitialized = false;
        this.filterTimerId = -1;
        this.filterTimer = comboBox.filterTimer;
        this.hasInputBeenChanged = false;
    },
    Initialize: function () {
        var input = this.GetInputElement();
        _aspxAttachEventToElement(input, "keyup", aspxCBKeyUp);
    },
    ClearFilter: function () {
        this.filter = "";
        this.filterInitialized = false;
    },
    ClearFilterApplied: function () {
        this.filterInitialized = false;
    },
    FilterApplied: function () {
        return this.filterInitialized;
    },
    SetFilter: function (value) {
        this.filter = value;
        this.filterInitialized = true;
    },
    FilterCompare: function (value) {
        if (!this.filterInitialized && this.hasInputBeenChanged)
            return false;
        return this.filter == value;
    },
    FilterCompareLower: function (value) {
        if (!this.filterInitialized)
            return false;
        return this.filter.toLowerCase() == value;
    },
    OnCallbackInternal: function (result) {
        if (!this.currentCallbackIsFiltration)
            return;
        var lb = this.GetListBoxControl();
        if (lb.GetItemCount() == 0)
            this.comboBox.HideDropDownArea(true);
        else
            this.OnFilterCallbackWithResult(lb);
        this.isEnterLocked = false;
    },
    OnBeforeCallbackFinally: function () {
        this.currentCallbackIsFiltration = false;
    },
    OnEndFiltering: function (visibleCollectionChanged) {
        if (visibleCollectionChanged)
            this.comboBox.VisibleCollectionChanged();
    },
    OnFilteringKeyUp: function (evt) {
        if (this.comboBox.InCallback() || !this.comboBox.GetEnabled()) return;
        if (ASPxFilteringUtils.EventKeyCodeChangesTheInput(evt)) {
            this.FilterStopTimer();
            var input = this.GetInputElement();
            var newFilter = input.value.toLowerCase();
            if (evt.keyCode == ASPxKey.Backspace && this.FilterCompareLower(newFilter))
                this.FilteringBackspace();
            else
                this.FilterStartTimer();
        }
    },
    OnFilterCallbackHighlightAndSelect: function (lb) {
        var firstItemText = lb.GetItem(0).text;
        var isTextClearing = !this.isDropDownListStyle && this.FilterCompare("") && !this.FilterCompare(firstItemText);
        if (!isTextClearing) {
            var isFilterRollBack = this.CheckForFilterRollback(lb, firstItemText);
            var isNonFilterChangingCallback = (lb.GetSelectedItem() == null);
            if (isFilterRollBack || isNonFilterChangingCallback) {
                if (this.isLastFilteredKeyWasTab) {
                    this.isLastFilteredKeyWasTab = false;
                    this.comboBox.SelectIndex(0);
                    this.comboBox.OnChange();
                } else
                    this.HighlightTextAfterCallback(firstItemText);
            }
        }
    },
    OnFilterCallbackWithResult: function (lb) {
        this.OnFilterCallbackHighlightAndSelect(lb);
        var isNeedToKeepDropDownVisible = !this.comboBox.isPerformCallback && !this.isLastFilteredKeyWasTab;
        if (isNeedToKeepDropDownVisible)
            this.EnsureShowDropDownArea();
        this.OnEndFiltering();
    },
    OnSpecialKeyDown: function (evt) {
        if (ASPxFilteringUtils.EventKeyCodeChangesTheInput(evt)) {
            this.FilterStopTimer();
            this.hasInputBeenChanged = true;
        }
    },
    OnFilterRollback: function (withoutCallback) {
        if (this.comboBox.InCallback() && this.currentCallbackIsFiltration)
            return;
        if (this.comboBox.isCallbackMode && this.FilterApplied()) {
            if (!withoutCallback) {
                this.isApplyAndCloseAfterFiltration = true;
                if (this.comboBox.GetText() != "" && this.isDropDownListStyle) {
                    this.comboBox.GetListBoxControl().ClearItems();
                    this.comboBox.SendSpecialCallback(this.GetCurrentSelectedItemCallbackArguments());
                } else
                    this.Filtering();
            }
            this.SetFilter(this.comboBox.GetText());
            this.ClearFilterApplied();
        }
    },
    AfterDoEndCallback: function () {
        if (this.refiltrationRequired) {
            this.refiltrationRequired = false;
            _aspxSetTimeout("aspxCBFilterByTimer('" + this.comboBox.name + "')", 0);
        }
    },
    BeforeDoEndCallback: function () {
        if (this.refiltrationRequired)
            this.comboBox.preventEndCallbackRising = true;
    },
    GetCallbackArguments: function () {
        var args = "";
        if (!this.FilterCompare(""))
            args = this.GetCallbackArgumentFilter(this.filter);
        return args;
    },
    GetCallbackArgumentFilter: function (value) {
        var callbackPrefix = this.isDropDownListStyle ? __aspxCorrectFilterCallbackPrefix : __aspxLoadFilteredItemsCallbackPrefix;
        return ASPxFilteringUtils.FormatCallbackArg(callbackPrefix, value);
    },
    PerformCallback: function () {
        this.ClearFilter();
    },
    SendFilteringCallback: function () {
        this.currentCallbackIsFiltration = true;
        this.comboBox.SendCallback();
    },
    IsCallbackResultNotDiscarded: function () {
        var result = !this.FilterChanged() || !this.currentCallbackIsFiltration;
        if (!result)
            this.refiltrationRequired = true;
        return result;
    },
    IsFilterTimerActive: function () {
        return (this.filterTimerId != -1);
    },
    FilterStopTimer: function () {
        this.filterTimerId = _aspxClearTimer(this.filterTimerId);
    },
    FilterStartTimer: function () {
        this.isEnterLocked = true;
        this.filterTimerId = _aspxSetTimeout("aspxCBFilterByTimer('" + this.comboBox.name + "')", this.filterTimer);
    },
    CheckForFilterRollback: function (lb, firstItemText) {
        var isHasCorrection = false;
        var filter = this.filter.toLowerCase();
        firstItemText = firstItemText.toLowerCase();
        while (!this.IsSatisfy(firstItemText.toLowerCase(), filter)) {
            filter = filter.slice(0, -1);
            isHasCorrection = true;
        }
        if (isHasCorrection) {
            this.SetFilter(this.filter.substring(0, filter.length));
            this.GetInputElement().value = this.filter;
        }
        return isHasCorrection;
    },
    EnsureShowDropDownArea: function () {
        if (!this.comboBox.droppedDown && !this.isApplyAndCloseAfterFiltration)
            this.comboBox.ShowDropDownArea(true);
    },
    FilterChanged: function () {
        return !this.FilterCompareLower(this.GetInputElement().value.toLowerCase());
    },
    FilteringStop: function () {
        this.isEnterLocked = false;
        if (!this.comboBox.isCallbackMode)
            this.FilteringStopClient();
    },
    FilteringStopClient: function () {
        var lb = this.GetListBoxControl();
        var listTable = lb.GetListTable();
        var count = lb.GetItemCount();
        for (var i = 0; i < count; i++)
            _aspxSetElementDisplay(listTable.rows[i], true);
        this.comboBox.VisibleCollectionChanged();
        this.ClearFilter();
    },
    FilteringBackspace: function () {
        var input = this.GetInputElement();
        ASPxStartWithFilteringUtils.RollbackOneSuggestedChar(input);
        this.FilterStartTimer();
    },
    CheckFilterLength: function () {
        if (!this.IsFilterMeetRequirementForMinLength()) {
            this.comboBox.HideDropDownArea(true);
            var lb = this.GetListBoxControl();
            this.isApplyAndCloseAfterFiltration = false;
            lb.SelectIndexSilent(-1, false);
            return true;
        }
        return false;
    },
    Filtering: function () {
        this.FilterStopTimer();
        var input = this.GetInputElement();
        if (!input) return;
        var newFilter = input.value;
        if (!this.FilterCompare(newFilter)) {
            this.SetFilter(newFilter);
            if (this.CheckFilterLength())
                return;
            this.EnsureShowDropDownArea();
            if (this.comboBox.isCallbackMode)
                this.FilteringOnServer();
            else {
                this.FilteringOnClient(input);
                this.isApplyAndCloseAfterFiltration = false;
            }
        } else {
            this.isEnterLocked = false;
            this.isApplyAndCloseAfterFiltration = false;
        }
    },
    FilteringOnServer: function () {
        if (!this.comboBox.InCallback()) {
            var listBox = this.GetListBoxControl();
            listBox.ClearItems();
            listBox.serverIndexOfFirstItem = 0;
            listBox.SetScrollSpacerVisibility(true, false);
            listBox.SetScrollSpacerVisibility(false, false);
            this.SendFilteringCallback();
        }
    },
    FilteringOnClient: function (input) {
        var filter = this.filter.toLowerCase();
        var lb = this.GetListBoxControl();
        var listTable = lb.GetListTable();
        var count = lb.GetItemCount();
        var text = "";
        var isSatisfy = false;
        var firstSatisfyItemIndex = -1;
        if (this.isDropDownListStyle) {
            var coincide = new Array(count);
            var maxCoincide = 0;
            for (var i = count - 1; i >= 0; i--) {
                coincide[i] = this.GetCoincideCharCount(lb.GetItem(i).text.toLowerCase(), filter);
                if (coincide[i] > maxCoincide)
                    maxCoincide = coincide[i];
            }
            filter = this.filter.substr(0, maxCoincide);
            input.value = filter;
        }
        for (var i = 0; i < count; i++) {
            text = lb.GetItem(i).text;
            if (this.isDropDownListStyle) isSatisfy = coincide[i] == maxCoincide;
            else isSatisfy = this.IsSatisfy(text, filter);
            _aspxSetElementDisplay(listTable.rows[i], isSatisfy);
            if (firstSatisfyItemIndex == -1 && isSatisfy) {
                var isTextClearing = !this.isDropDownListStyle && this.FilterCompare("") && this.filter != text;
                this.OnFirstSatisfiedItemFound(i, text, isTextClearing);
                firstSatisfyItemIndex = i;
            }
        }
        if (this.isDropDownListStyle)
            this.SetFilter(filter);
        var visibleCollectionChanged = firstSatisfyItemIndex != -1;
        if (visibleCollectionChanged)
            lb.CopyCellWidths(0, firstSatisfyItemIndex);
        else
            this.comboBox.HideDropDownArea(true);
        this.isEnterLocked = false;
        this.OnEndFiltering(visibleCollectionChanged);
    },
    GetFirstVisibleItem: function (lb, listTable) {
        var itemCount = lb.GetItemCount();
        for (var i = 0; i < itemCount; i++)
            if (_aspxGetElementDisplay(listTable.rows[i]))
                return i;
        return -1;
    },
    GetVisibleItemsCount: function () {
        var lb = this.GetListBoxControl();
        var listTable = lb.GetListTable();
        var itemCount = lb.GetItemCount();
        var visibleItemCount = 0;
        for (var i = 0; i < itemCount; i++)
            if (_aspxGetElementDisplay(listTable.rows[i]))
                visibleItemCount++;
        return visibleItemCount;
    },
    IsSelectedElementVisible: function (listTable, selectedIndex) {
        return _aspxGetElementDisplay(listTable.rows[selectedIndex]);
    },
    GetStepForClientFiltrationEnabled: function (lb, step) {
        if (this.comboBox.isCallbackMode) return step;
        var listTable = lb.GetListTable();
        var startIndex = this.comboBox.GetSelectedIndex();
        var firstVisibleElementIndex = this.GetFirstVisibleItem(lb, listTable);
        if (startIndex > -1) {
            if (!this.IsSelectedElementVisible(listTable, startIndex))
                return firstVisibleElementIndex - startIndex;
        } else return firstVisibleElementIndex + 1;
        var stepDirection = step > 0 ? 1 : -1;
        var count = lb.GetItemCount();
        var needVisibleItemCount = Math.abs(step);
        var outermostVisibleIndex = startIndex;
        for (var index = startIndex + stepDirection; needVisibleItemCount > 0; index += stepDirection) {
            if (index < 0 || count <= index) break;
            if (_aspxGetElementDisplay(listTable.rows[index])) {
                outermostVisibleIndex = index;
                needVisibleItemCount--;
            }
        }
        step = outermostVisibleIndex - this.comboBox.GetSelectedIndex();
        return step;
    },
    GetCoincideCharCount: function (text, filter) {
        while (filter != "" && !this.IsSatisfy(text, filter)) {
            filter = filter.slice(0, -1);
        }
        return filter.length;
    },
    OnSelectionChanged: function () {
    },
    IsFilterMeetRequirementForMinLength: function () {
        var inputElement = this.GetInputElement();
        var isFilterExists = inputElement && (inputElement.value || inputElement.value == "");
        return isFilterExists ? inputElement.value.length >= this.comboBox.filterMinLength : true;
    },
    IsSatisfy: function (text, filter) { },
    OnFirstSatisfiedItemFound: function (index, text, isTextClearing) { },
    HighlightTextAfterCallback: function () { }
});
ASPxContainsFilteringStrategy = _aspxCreateClass(ASPxComboBoxIncrementalFilteringStrategy, {
    constructor: function (comboBox) {
        this.constructor.prototype.constructor.call(this, comboBox);
    },
    IsSatisfy: function (text, filter) {
        return text.toLowerCase().indexOf(filter) != -1;
    },
    IsCloseByEnterLocked: function () {
        if (this.isDropDownListStyle) {
            if (this.GetVisibleItemsCount() == 1) return false;
            var selectedItem = this.comboBox.GetSelectedItem();
            if (selectedItem)
                if (this.GetInputElement().value == selectedItem.text)
                    return false;
            return true;
        }
        return false;
    },
    FilteringOnClient: function (input) {
        this.UnselectContainsTextInItems();
        ASPxComboBoxIncrementalFilteringStrategy.prototype.FilteringOnClient.call(this, input);
    },
    OnApplyChanges: function (withoutCallback) {
        this.OnFilterRollback(withoutCallback);
    },
    OnBeforeCallbackFinally: function () {
        ASPxComboBoxIncrementalFilteringStrategy.prototype.OnBeforeCallbackFinally.call(this);
        this.ReselectContainsTextInItems();
        this.SetDefautSelection();
    },
    OnDropDownButtonClick: function () {
        if (this.GetVisibleItemsCount() == 0 && this.isDropDownListStyle)
            this.comboBox.OnCancelChanges();
    },
    OnTextChanged: function () {
        if (!this.comboBox.IsFocusEventsLocked())
            if (!this.comboBox.ChangedByEnterKeyPress())
                this.OnFilterRollback();
    },
    OnEndFiltering: function (visibleCollectionChanged) {
        this.SelectContainsTextInItems();
        this.SetDefautSelection();
        ASPxComboBoxIncrementalFilteringStrategy.prototype.OnEndFiltering.call(this, visibleCollectionChanged);
    },
    OnBeforeHideDropDownArea: function () {
        if (!this.comboBox.isCallbackMode)
            this.FilteringStopClient();
    },
    FilteringStopClient: function () {
        ASPxComboBoxIncrementalFilteringStrategy.prototype.FilteringStopClient.call(this);
        this.UnselectContainsTextInItems();
    },
    OnCallbackInternal: function () {
        if (!this.comboBox.isPerformCallback)
            this.ReselectContainsTextInItems();
        ASPxComboBoxIncrementalFilteringStrategy.prototype.OnCallbackInternal.call(this);
    },
    OnFirstSatisfiedItemFound: function () {
    },
    SetDefautSelection: function () {
        var visibleItemsCount = this.GetVisibleItemsCount();
        if (this.isDropDownListStyle && visibleItemsCount == 1) {
            var lb = this.GetListBoxControl();
            var listTable = lb.GetListTable();
            this.comboBox.SelectIndexSilent(lb, this.GetFirstVisibleItem(lb, listTable));
        }
    },
    UnselectContainsTextInItems: function () {
        this.ApplySelectionFunctionToItems(ASPxContainsFilteringUtils.UnselectContainsTextInElement, true);
    },
    ReselectContainsTextInItems: function () {
        if (this.filter != "")
            this.ApplySelectionFunctionToItems(ASPxContainsFilteringUtils.ReselectContainsTextInElement, false);
    },
    SelectContainsTextInItems: function () {
        if (this.filter != "")
            this.ApplySelectionFunctionToItems(ASPxContainsFilteringUtils.SelectContainsTextInElement, false);
    },
    ApplySelectionFunctionToItems: function (selectionFunction, applyToAllColumns) {
        var lb = this.GetListBoxControl();
        var count = lb.GetItemCount();
        for (var i = 0; i < count; i++) {
            var item = lb.GetItemRow(i);
            if (applyToAllColumns || (!applyToAllColumns && _aspxGetElementDisplay(item)))
                this.ApplySelectionFunctionToItem(item, selectionFunction, applyToAllColumns);
        }
    },
    GetFirstTextCellIndex: function () {
        return this.GetListBoxControl().GetItemFirstTextCellIndex();
    },
    ApplySelectionFunctionToItem: function (item, selectionFunction, applyToAllColumns) {
        var itemValues = this.GetItemValuesByItem(item);
        var itemSelection = ASPxContainsFilteringUtils.GetColumnSelectionsForItem(itemValues, this.GetListBoxControl().textFormatString, this.filter);
        var firstTextCellIndex = this.GetFirstTextCellIndex();
        if (applyToAllColumns) {
            for (var i = 0; i < item.cells.length; i++)
                selectionFunction(item.cells[i], itemSelection[i]);
        } else {
            for (var i = 0; i < itemSelection.length; i++)
                selectionFunction(item.cells[itemSelection[i].index + firstTextCellIndex], itemSelection[i]);
        }
    },
    GetItemValuesByItem: function (item) {
        var result = [];
        for (var i = this.GetFirstTextCellIndex(); i < item.cells.length; i++)
            result.push(_aspxGetInnerText(item.cells[i]));
        return result;
    }
});
ASPxFilteringUtils = {
    EventKeyCodeChangesTheInput: function (evt) {
        if (_aspxIsPasteShortcut(evt))
            return true;
        else if (evt.ctrlKey && !evt.altKey)
            return false;
        if (__aspxAndroidMobilePlatform) return true;
        var keyCode = _aspxGetKeyCode(evt);
        var isSystemKey = ASPxKey.Windows <= keyCode && keyCode <= ASPxKey.ContextMenu;
        var isFKey = ASPxKey.F1 <= keyCode && keyCode <= 127;
        return ASPxKey.Delete <= keyCode && !isSystemKey && !isFKey || keyCode == ASPxKey.Backspace || keyCode == ASPxKey.Space;
    },
    FormatCallbackArg: function (prefix, arg) {
        return (_aspxIsExists(arg) ? prefix + "|" + arg.length + ';' + arg + ';' : "");
    }
};
ASPxFormatStringHelper = {
    PlaceHolderTemplateStruct: function (startIndex, length, index, placeHolderString) {
        this.startIndex = startIndex;
        this.realStartIndex = 0;
        this.length = length;
        this.realLength = 0;
        this.index = index;
        this.placeHolderString = placeHolderString;
    },
    GetPlaceHolderTemplates: function (formatString) {
        formatString = this.CollapseDoubleBrackets(formatString);
        var templates = this.CreatePlaceHolderTemplates(formatString);
        return templates;
    },
    CreatePlaceHolderTemplates: function (formatString) {
        var templates = [];
        var templateStrings = formatString.match(/{[^}]+}/g);
        if (templateStrings != null) {
            var pos = 0;
            for (var i = 0; i < templateStrings.length; i++) {
                var tempString = templateStrings[i];
                var startIndex = formatString.indexOf(tempString, pos);
                var length = tempString.length;
                var indexString = tempString.slice(1).match(/^[0-9]+/);
                var index = parseInt(indexString);
                templates.push(new this.PlaceHolderTemplateStruct(startIndex, length, index, tempString));
                pos = startIndex + length;
            }
        }
        return templates;
    },
    CollapseDoubleBrackets: function (formatString) {
        formatString = this.CollapseOpenDoubleBrackets(formatString);
        formatString = this.CollapseCloseDoubleBrackets(formatString);
        return formatString;
    },
    CollapseOpenDoubleBrackets: function (formatString) {
        return formatString.replace(/{{/g, "_");
    },
    CollapseCloseDoubleBrackets: function (formatString) {
        while (true) {
            var index = formatString.lastIndexOf("}}");
            if (index == -1)
                break;
            else
                formatString = formatString.substr(0, index) + "_" + formatString.substr(index + 2);
        }
        return formatString;
    }
};
ASPxStartWithFilteringUtils = {
    HighlightSuggestedText: function (input, suggestedText) {
        var currentTextLenght = input.value.length;
        var suggestedTextLenght = suggestedText.length;
        input.value = suggestedText;
        if (currentTextLenght < suggestedTextLenght)
            _aspxSetInputSelection(input, currentTextLenght, suggestedTextLenght);
    },
    RollbackOneSuggestedChar: function (input) {
        var currentText = input.value;
        var cutText = currentText.slice(0, -1);
        if (cutText != currentText)
            input.value = cutText;
    }
};
ASPxContainsFilteringUtils = {
    ColumnSelectionStruct: function (index, startIndex, length) {
        this.index = index;
        this.length = length;
        this.startIndex = startIndex;
    },
    IsFilterCrossPlaseHolder: function (filterStartIndex, filterEndIndex, template) {
        var left = Math.max(filterStartIndex, template.realStartIndex);
        var right = Math.min(filterEndIndex, template.realStartIndex + template.realLength);
        return left < right;
    },
    GetColumnSelectionsForItem: function (itemValues, formatString, filterString) {
        if (formatString == "")
            return this.GetSelectionForSingleColumnItem(itemValues, filterString);
        var result = [];
        var formatedString = ASPxFormatter.Format(formatString, itemValues);
        var filterStartIndex = formatedString.toLowerCase().indexOf(filterString.toLowerCase());
        if (filterStartIndex == -1) return result;
        var filterEndIndex = filterStartIndex + filterString.length;
        var templates = ASPxFormatStringHelper.GetPlaceHolderTemplates(formatString);
        this.SupplyTemplatesWithRealValues(itemValues, templates);
        for (var i = 0; i < templates.length; i++) {
            if (this.IsFilterCrossPlaseHolder(filterStartIndex, filterEndIndex, templates[i]))
                result.push(this.GetColumnSelectionsForItemValue(templates[i], filterStartIndex, filterEndIndex));
        }
        return result;
    },
    GetColumnSelectionsForItemValue: function (template, filterStartIndex, filterEndIndex) {
        var selectedTextStartIndex = filterStartIndex < template.realStartIndex ? 0 :
   filterStartIndex - template.realStartIndex;
        var selectedTextEndIndex = filterEndIndex > template.realStartIndex + template.realLength ? template.realLength :
   filterEndIndex - template.realStartIndex;
        var selectedTextLength = selectedTextEndIndex - selectedTextStartIndex;
        return new this.ColumnSelectionStruct(template.index, selectedTextStartIndex, selectedTextLength);
    },
    GetSelectionForSingleColumnItem: function (itemValues, filterString) {
        var selectedTextStartIndex = itemValues[0].toLowerCase().indexOf(filterString.toLowerCase());
        var selectedTextLength = filterString.length;
        return [new this.ColumnSelectionStruct(0, selectedTextStartIndex, selectedTextLength)];
    },
    ResetFormatStringIndex: function (formatString, index) {
        if (index != 0)
            return formatString.replace(index.toString(), "0");
        return formatString;
    },
    SupplyTemplatesWithRealValues: function (itemValues, templates) {
        var shift = 0;
        for (var i = 0; i < templates.length; i++) {
            var formatString = this.ResetFormatStringIndex(templates[i].placeHolderString, templates[i].index);
            var currentItemValue = itemValues[templates[i].index];
            templates[i].realLength = ASPxFormatter.Format(formatString, currentItemValue).length;
            templates[i].realStartIndex += templates[i].startIndex + shift;
            shift += templates[i].realLength - templates[i].placeHolderString.length;
        }
    },
    PrepareElementText: function (itemText) {
        return itemText ? itemText.replace(/\&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;") : '';
    },
    UnselectContainsTextInElement: function (element, selection) {
        var currentText = _aspxGetAttribute(element, "DXText");
        if (_aspxIsExists(currentText)) {
            currentText = ASPxContainsFilteringUtils.PrepareElementText(currentText);
            _aspxSetInnerHtml(element, currentText === "" ? "&nbsp;" : currentText);
        }
    },
    ReselectContainsTextInElement: function (element, selection) {
        var currentText = _aspxGetInnerText(element);
        if (currentText.indexOf("</em>") != -1)
            ASPxContainsFilteringUtils.UnselectContainsTextInElement(element, selection);
        return ASPxContainsFilteringUtils.SelectContainsTextInElement(element, selection);
    },
    SelectContainsTextInElement: function (element, selection) {
        if (selection.startIndex == -1) return;
        var currentText = _aspxGetAttribute(element, "DXText");
        if (!_aspxIsExists(currentText)) _aspxSetAttribute(element, "DXText", _aspxGetInnerText(element));
        var oldInnerText = _aspxGetInnerText(element);
        var newInnerText = ASPxContainsFilteringUtils.PrepareElementText(oldInnerText.substr(0, selection.startIndex)) + "<em>" +
         oldInnerText.substr(selection.startIndex, selection.length) + "</em>" +
         ASPxContainsFilteringUtils.PrepareElementText(oldInnerText.substr(selection.startIndex + selection.length));
        _aspxSetInnerHtml(element, newInnerText);
    }
};
ASPxStartsWithFilteringStrategy = _aspxCreateClass(ASPxComboBoxIncrementalFilteringStrategy, {
    constructor: function (comboBox) {
        this.constructor.prototype.constructor.call(this, comboBox);
    },
    IsSatisfy: function (text, filter) {
        return text.toLowerCase().indexOf(filter) == 0;
    },
    FilteringHighlightCompletedText: function (filterItemText) {
        var input = this.GetInputElement();
        ASPxStartWithFilteringUtils.HighlightSuggestedText(input, filterItemText);
    },
    HighlightTextAfterCallback: function (firstItemText) {
        var lb = this.GetListBoxControl();
        this.FilteringHighlightCompletedText(firstItemText);
        if (!this.comboBox.isPerformCallback)
            this.comboBox.SelectIndexSilent(lb, 0);
    },
    OnAfterEnter: function () {
        this.ClearInputSelection();
    },
    OnBeforeHideDropDownArea: function () {
        this.FilteringStop();
    },
    OnFirstSatisfiedItemFound: function (index, text, isTextClearing) {
        var lb = this.GetListBoxControl();
        if (!isTextClearing)
            this.FilteringHighlightCompletedText(text);
        this.comboBox.SelectIndexSilent(lb, isTextClearing ? -1 : index);
    },
    OnTab: function () {
        if (this.IsFilterTimerActive() || this.currentCallbackIsFiltration) {
            this.isLastFilteredKeyWasTab = true;
            this.Filtering();
        }
        ASPxComboBoxDisableFilteringStrategy.prototype.OnTab.call(this);
    },
    ClearInputSelection: function () {
        var inputElement = this.comboBox.GetInputElement();
        _aspxClearInputSelection(inputElement);
    }
});
ASPxClientNativeComboBox = _aspxCreateClass(ASPxClientComboBoxBase, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.initSelectedIndex = -1;
        this.raiseValueChangedOnEnter = false;
    },
    Initialize: function () {
        var lb = this.GetListBoxControl();
        if (lb != null) lb.SetMainElement(this.GetMainElement());
        ASPxClientComboBoxBase.prototype.Initialize.call(this);
    },
    InitLastSuccessText: function () {
        this.SelectIndex(this.initSelectedIndex, true);
    },
    FindInputElement: function () {
        return this.GetMainElement();
    },
    GetDropDownInnerControlName: function (suffix) {
        return this.name + suffix;
    },
    PerformCallback: function (arg) {
        this.GetListBoxControl().PerformCallback(arg);
    },
    GetTextInternal: function () {
        var selectedItem = this.GetSelectedItem();
        return (selectedItem != null) ? selectedItem.text : "";
    },
    HasTextDecorators: function () {
        return false;
    },
    SetText: function (text) {
        var lb = this.GetListBoxControl();
        var index = this.FindItemIndexByText(lb, text);
        this.SelectIndex(index, false);
        this.SetLastSuccessTest((index > -1) ? text : "");
        this.SetLastSuccessValue((index > -1) ? lb.GetValue() : null);
    },
    GetValue: function () {
        var selectedItem = this.GetSelectedItem();
        return (selectedItem != null) ? selectedItem.value : null;
    },
    SetValue: function (value) {
        var lb = this.GetListBoxControl();
        if (lb) {
            lb.SetValue(value);
            var item = lb.GetSelectedItem();
            var text = item ? item.text : value;
            this.SetLastSuccessTest((item != null) ? text : "");
            this.SetLastSuccessValue(item != null) ? item.value : null;
        }
    },
    ForceRefocusEditor: function () {
    },
    OnCallback: function (result) {
        this.GetListBoxControl().OnCallback(result);
        if (this.GetItemCount() > 0)
            this.SetSelectedIndex(0);
    },
    OnTextChanged: function () {
        this.OnChange();
    },
    SetTextInternal: function (text) {
    },
    SetTextBase: function (text) {
    },
    ChangeEnabledAttributes: function (enabled) {
        this.GetMainElement().disabled = !enabled;
    }
});
ASPxClientTokenBox = _aspxCreateClass(ASPxClientComboBox, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.hoverTokenClasses = [""];
        this.hoverTokenCssArray = [""];
        this.hoverTokenRemoveButtonClasses = [""];
        this.hoverTokenRemoveButtonCssArray = [""];
        this.valueSeparator = ',';
        this.textSeparator = ',';
        this.showDropDownOnFocus = "Auto";
        this.allowDuplicateTokens = false;
        this.editorTimer = null;
        this.encodeHtml = true;
        this.TokensChanged = new ASPxClientEvent();
    },
    Initialize: function () {
        this.InitializeSampleToken();
        this.InitializeTokens();
        this.AdjustInput(false);
        ASPxClientComboBox.prototype.Initialize.call(this);
    },
    InlineInitialize: function () {
        this.initSelectedIndex = -1;
        this.initTextCorrectionRequired = false;
        ASPxClientComboBox.prototype.InlineInitialize.call(this);
    },
    InitializeSampleToken: function () {
        var sizes = this.GetTokenAndTokenTextMaxWidth();
        var sampleToken = this.GetSampleTokenElement();
        this.SetTokenElementStylesInternal(sampleToken, sizes);
    },
    InitializeTokens: function () {
        var sizes = this.GetTokenAndTokenTextMaxWidth();
        var tokens = this.GetTokenCollection();
        for (var i = 0; i < tokens.length; i++) {
            var tokenElement = this.GetTokenHtmlElement(i);
            this.SetTokenElementStylesInternal(tokenElement, sizes);
            this.SetTokenHover(tokenElement, true);
        }
    },
    SetTokenElementStylesInternal: function (tokenElement, sizes) {
        tokenElement.childNodes[0].style.maxWidth = sizes.tokenTextMaxWidth + "px";
        tokenElement.style.maxWidth = sizes.tokenMaxWidth + "px";
        _aspxSetStyles(tokenElement.childNodes[0], {
            textOverflow: "ellipsis",
            whiteSpace: "nowrap",
            overflow: "hidden"
        });
    },
    SetTokenHover: function (tokenElement, state) {
        var controller = aspxGetStateController();
        if (state) {
            controller.AddHoverItem(tokenElement.id, this.hoverTokenClasses, this.hoverTokenCssArray, "", null, null, true);
            controller.AddHoverItem(tokenElement.childNodes[1].id, this.hoverTokenRemoveButtonClasses, this.hoverTokenRemoveButtonCssArray, "", null, null, true);
        } else {
            controller.RemoveHoverItem(tokenElement.id);
            controller.RemoveHoverItem(tokenElement.childNodes[1].id);
        }
    },
    GetTokenHtmlElement: function (index) {
        return document.getElementById(this.name + "_" + __aspxTokenBoxTokenSuffix + index);
    },
    GetTokenTextHtmlElement: function (index) {
        return document.getElementById(this.name + "_" + __aspxTokenBoxTokenTextSuffix + index)
    },
    GetTokenRemoveButtonHtmlElement: function (index) {
        return document.getElementById(this.name + "_" + __aspxTokenBoxTokenRemoveButtonSuffix + index)
    },
    GetTokenAndTokenTextMaxWidth: function () {
        var sampleToken = this.GetSampleTokenElement();
        var input = this.GetInputElement();
        var inputParenWidth = _aspxGetClearClientWidth(input.parentElement) - (input.offsetWidth - _aspxGetClearClientWidth(input) - _aspxGetLeftRightMargins(input));
        var testSampleToken = sampleToken.cloneNode(true);
        testSampleToken.style.position = "absolute";
        testSampleToken.style.top = __aspxInvalidPosition + "px";
        testSampleToken.style.left = __aspxInvalidPosition + "px";
        testSampleToken.childNodes[0].innerHTML = "";
        testSampleToken.id += "_testSampleToken";
        document.body.appendChild(testSampleToken);
        testSampleToken.style.display = "";
        var testSampleTokenLRMPBSV = _aspxGetLeftRightBordersAndPaddingsSummaryValue(testSampleToken) + _aspxGetLeftRightMargins(testSampleToken);
        var testSampleTokenTextSpanLRMPBSV = _aspxGetLeftRightBordersAndPaddingsSummaryValue(testSampleToken.childNodes[0]) + _aspxGetLeftRightMargins(testSampleToken.childNodes[0]);
        var testSampleTokenRBFW = testSampleToken.childNodes[1].offsetWidth + _aspxGetLeftRightMargins(testSampleToken.childNodes[1]);
        var tokenTextMaxWidth = inputParenWidth - (testSampleTokenLRMPBSV + testSampleTokenTextSpanLRMPBSV + testSampleTokenRBFW);
        var tokenMaxWidth = inputParenWidth - testSampleTokenLRMPBSV;
        document.body.removeChild(testSampleToken);
        return { "tokenMaxWidth": tokenMaxWidth, "tokenTextMaxWidth": tokenTextMaxWidth };
    },
    GetTokensHiddenField: function () {
        return document.getElementById(this.name + "_" + __aspxTokensHiddenFieldSuffix);
    },
    GetTokenCollection: function () {
        var tokensHiddenField = this.GetTokensHiddenField();
        return _aspxEvalJSON(tokensHiddenField.value.toString(), this.name);
    },
    SetTokenCollection: function (collection) {
        this.ClearTokenCollection();
        for (var i = 0; i < collection.length; i++) {
            this.AddTokenInternal(collection[i], true);
        }
    },
    SetTokenCollectionInternal: function (collection, callByApi) {
        var tokenCollectionString = _aspxToJson(_aspxGetDistinctArray(collection));
        var tokensHiddenField = this.GetTokensHiddenField();
        tokensHiddenField.value = tokenCollectionString;
        if (!callByApi)
            this.OnTokensChanged()
    },
    ClearTokenCollection: function () {
        var count = this.GetTokenCollection().length;
        for (var i = 0; i < count; i++) {
            this.RemoveToken(0, true);
        }
    },
    AddToken: function (text) {
        this.AddTokenInternal(text, true);
    },
    AddTokenInternal: function (text, callByApi) {
        var input = this.GetTokensHiddenField();
        var tokens = this.GetTokenCollection();
        if (this.incrementalFilteringMode != "None") {
            this.ClearFilterInternal();
            if (!(callByApi || this.AllowCustomToken())) {
                var lb = this.GetListBoxControl();
                var selectedItem = lb != null ? lb.GetSelectedItem() : null;
                if (selectedItem != null && !lb.FindItemByText(text) && selectedItem.text.indexOf(text) != -1)
                    text = selectedItem.text;
            }
        }
        var allowAddToken = !this.IsCustomToken(text) || this.AllowCustomToken();
        if ((allowAddToken || callByApi) && tokens.indexOf(text) == -1 && text != "") {
            var tokenText = _aspxEncodeHtml(text);
            var tokenElement = this.GetNewHtmlTokenItem(tokenText);
            tokens.push(tokenText);
            this.ResetInputSize();
            input.parentNode.insertBefore(tokenElement, input);
            this.SetTokenHover(tokenElement, true);
            this.SetTokenCollectionInternal(tokens, !!callByApi);
        }
        this.GetListBoxControl().SetSelectedIndex(-1);
        if (this.IsCanToDropDown() && !callByApi) {
            if (!this.droppedDown && this.IsFocusEventsLocked())
                this.ShowDropDownArea();
        } else
            this.HideDropDownArea();
    },
    IsCustomToken: function (text) {
        return !this.GetListBoxControl().FindItemByText(text);
    },
    AllowCustomToken: function () {
        return !this.isDropDownListStyle;
    },
    GetTokenIndexByText: function (text) {
        var tokens = this.GetTokenCollection();
        for (var i = 0; i < tokens.length; i++) {
            if (tokens[i].toString() == text)
                return i;
        }
        return -1;
    },
    OnTokensChanged: function () {
        return this.RaiseTokensChanged();
    },
    RaiseTokensChanged: function () {
        if (!this.TokensChanged.IsEmpty()) {
            var args = new ASPxClientEventArgs();
            this.TokensChanged.FireEvent(this, args);
        }
        return this.autoPostBack;
    },
    OnListBoxItemMouseUp: function (evt) {
        var index = this.GetSelectedIndex();
        this.GetInputElement().value = "";
        this.AddTokenInternal(this.GetItem(index).text);
        return false;
    },
    ShouldCloseOnMCMouseDown: function (evt) {
        return false;
    },
    OnFocus: function () {
        if (this.editorTimer)
            clearTimeout(this.editorTimer);
        this.editorTimer = setTimeout(function () { this.AdjustInput(true); } .aspxBind(this), 0);
        if (this.IsCanToDropDown() && !this.droppedDown)
            this.ShowDropDownArea();
        ASPxClientComboBox.prototype.OnFocus.call(this);
    },
    IsCanToDropDown: function () {
        return this.showDropDownOnFocus == "Always" || (this.showDropDownOnFocus == "Auto" && this.incrementalFilteringMode == "None");
    },
    RemoveTokenByText: function (text) {
        var index = this.GetTokenIndexByText(text);
        if (index != -1)
            this.RemoveToken(index, true);
    },
    RemoveToken: function (index, callByApi) {
        var tokens = this.GetTokenCollection();
        if (tokens.length > 0) {
            tokens.splice(index, 1);
            this.SetTokenCollectionInternal(tokens, !!callByApi);
            var tokenElement = this.GetTokenHtmlElement(index);
            var tokensParent = tokenElement.parentNode;
            this.SetTokenHover(tokenElement, false);
            tokensParent.removeChild(tokenElement);
            this.RefreshHtmlTokenIndices();
        }
    },
    RefreshHtmlTokenIndices: function () {
        var parent = this.GetTokensHiddenField().parentNode;
        var ind = 0;
        for (var i = 0; i < parent.childNodes.length; i++) {
            var tokenElement = parent.childNodes[i];
            var indexOfTokenId = tokenElement.id.indexOf(this.name + "_" + __aspxTokenBoxTokenSuffix);
            if (indexOfTokenId >= 0) {
                this.SetTokenHover(tokenElement, false);
                tokenElement.id = this.name + "_" + __aspxTokenBoxTokenSuffix + ind.toString();
                this.SetTokenHover(tokenElement, true);
                ind++;
            }
        }
    },
    GetNewHtmlTokenItem: function (text) {
        var tokenElement = this.GetSampleTokenElement().cloneNode(true);
        var newTokenIndex = this.GetTokenCollection().length.toString();
        tokenElement.childNodes[0].innerHTML = text;
        tokenElement.childNodes[0].id = this.name + "_" + __aspxTokenBoxTokenTextSuffix + newTokenIndex;
        tokenElement.childNodes[1].id = this.name + "_" + __aspxTokenBoxTokenRemoveButtonSuffix + newTokenIndex;
        tokenElement.id = this.name + "_" + __aspxTokenBoxTokenSuffix + newTokenIndex;
        tokenElement.style.display = "";
        return tokenElement;
    },
    GetSampleTokenElement: function () {
        return document.getElementById(this.name + "_" + __aspxTokenBoxTokenSuffix + "-1");
    },
    GetText: function () {
        var tokens = this.GetTokenCollection();
        return tokens.join(this.textSeparator);
    },
    SetText: function (text) {
        this.ClearTokenCollection();
        if (text != null && text != "") {
            var tokens = text.split(this.textSeparator);
            if (tokens.length > 0) {
                for (var i = 0; i < tokens.length; i++) {
                    this.AddTokenInternal(tokens[i], true);
                }
            }
        }
    },
    GetValue: function () {
        var tokens = this.GetTokenCollection();
        var values = [];
        for (var i = 0; i < tokens.length; i++) {
            var item = this.FindItemByText(tokens[i]);
            var value = item != null && item.value != null ? item.value.toString() : tokens[i];
            values.push(value);
        }
        return values.join(this.valueSeparator);
    },
    SetValue: function (value) {
        this.ClearTokenCollection();
        if (value != null && value != "") {
            var values = value.split(this.valueSeparator);
            for (var i = 0; i < values.length; i++) {
                var item = this.FindItemByValue(values[i]);
                this.AddTokenInternal(item != null ? item.text : values[i].toString(), true);
            }
        }
    },
    OnTextChanged: function () { },
    OnApplyChangesInternal: function () { },
    ParseValue: function () { },
    CanApplyNullTextDecoration: function () { return this.GetTokenCollection().length == 0; },
    ToggleTextDecorationCore: function () {
        var input = this.GetInputElement();
        var value = this.CanApplyTextDecorators() && (this.GetTokenCollection().length == 0) ? this.nullText : "";
        if (input.value != value)
            input.value = value;
    },
    ClearFilterInternal: function () {
        if (this.isCallbackMode)
            this.GetListBoxControl().ClearItems();
        this.filterStrategy.ClearFilter();
        this.filterStrategy.FilteringStop();
    },
    OnEnter: function () {
        var inputValue = this.GetInputElement().value;
        if (inputValue) {
            this.GetInputElement().value = "";
            this.AddTokenInternal(inputValue);
        }
        if (this.autoPostBack)
            this.SendPostBackInternal("");
        return true;
    },
    EnsureSelectedItemVisibleOnShow: function () { },
    RaiseValueChangedEvent: function () { return false; },
    OnSpecialKeyDown: function (evt) {
        if (_aspxGetKeyCode(evt) == ASPxKey.Backspace && this.GetInputElement().value == "") {
            var tokens = this.GetTokenCollection()
            if (tokens.length > 0) {
                var index = tokens.length - 1;
                var text = tokens[index];
                this.RemoveToken(index, false);
                this.GetInputElement().value = text;
                _aspxSetSelection(this.GetInputElement());
            }
            return true;
        } else
            return ASPxClientComboBox.prototype.OnSpecialKeyDown.call(this, evt);
    },
    ContainsSeparator: function (text) {
        var delimiters = [',', ';', this.textSeparator];
        var delimiterPosition = -1;
        if (this.AllowCustomToken())
            delimiters.push(this.valueSeparator);
        delimiters = _aspxGetDistinctArray(delimiters);
        for (var i = 0; i < delimiters.length; i++) {
            if (text.indexOf(delimiters[i]) >= 0)
                delimiterPosition = delimiterPosition == -1 ? text.indexOf(delimiters[i]) : Math.min(text.indexOf(delimiters[i]), delimiterPosition);
        }
        return delimiterPosition;
    },
    OnLostFocus: function () {
        if (!this.IsFocusEventsLocked()) {
            this.AddTokenInternal(this.GetInputElement().value, false);
            this.GetInputElement().value = "";
            this.GetListBoxControl().SetSelectedIndex(-1);
        }
        ASPxClientComboBox.prototype.OnLostFocus.call(this);
        this.AdjustInput(false);
        clearTimeout(this.editorTimer);
        this.editorTimer = null;
        if (this.incrementalFilteringMode != "None" && !this.IsFocusEventsLocked())
            this.ClearFilterInternal();
        if (!this.IsFocusEventsLocked() && this.autoPostBack)
            this.SendPostBackInternal("");
    },
    ResetInputSize: function () {
        this.GetInputElement().style.width = __aspxTokenBoxInputMinWidth + "px";
    },
    AdjustInput: function (startTimer) {
        this.AdjustInputInternal();
        if (this.droppedDown)
            this.RelocationPopup();
        if (startTimer) {
            this.SplitInputTextAndAddTokenInternal();
            this.editorTimer = setTimeout(function () { this.AdjustInput(startTimer); } .aspxBind(this), 0);
        }
    },
    AdjustInputInternal: function () {
        var input = this.GetInputElement();
        var lastToken = document.getElementById(this.name + "_" + __aspxTokenBoxTokenSuffix + (this.GetTokenCollection().length - 1));
        var tokensOffset = 0;
        if (lastToken) {
            var lastTokenCss = _aspxGetCurrentStyle(lastToken);
            if (this.rtl)
                tokensOffset = lastToken.offsetLeft - _aspxPxToInt(lastTokenCss.marginLeft);
            else
                tokensOffset = lastToken.offsetLeft + lastToken.offsetWidth + _aspxPxToInt(lastTokenCss.marginRight);
        }
        var parentElementFW = Math.max(_aspxGetLeftRightMargins(input.parentElement), 0) + input.parentElement.offsetWidth;
        var inputLRMBPSV = _aspxGetLeftRightMargins(input) + _aspxGetLeftRightBordersAndPaddingsSummaryValue(input);
        var maxInputWidthWT = this.rtl ? tokensOffset - inputLRMBPSV : (_aspxGetClearClientWidth(input.parentElement) - tokensOffset) - inputLRMBPSV;
        var maxInputWidth = _aspxGetClearClientWidth(input.parentElement) - inputLRMBPSV;
        var textWidth = _aspxGetSizeOfText(input.value.toString(), _aspxGetCurrentStyle(input)).width;
        var inputWidth = Math.max(__aspxTokenBoxInputMinWidth, textWidth) > maxInputWidthWT ? maxInputWidth : maxInputWidthWT;
        input.style.width = ((inputWidth / parentElementFW) * 100) + "%";
    },
    SplitInputTextAndAddTokenInternal: function () {
        var input = this.GetInputElement();
        var text = input.value.toString();
        var delimiterPosition = this.ContainsSeparator(text);
        if (delimiterPosition >= 0) {
            var texts = [text.substr(0, delimiterPosition), text.substr(delimiterPosition + 1)];
            var tokenText = texts[0];
            var inputText = texts[1];
            input.value = inputText;
            if (texts[0] != "") {
                this.AddTokenInternal(tokenText);
                if (this.incrementalFilteringMode != "None") {
                    this.filterStrategy.isApplyAndCloseAfterFiltration = true;
                }
            }
        }
    },
    RelocationPopup: function () {
        var pc = this.GetPopupControl();
        var element = pc.GetWindowElement(-1);
        var popupElement = this.GetMainElement();
        var horizontalPopupPosition = pc.GetClientPopupPos(element, popupElement, __aspxInvalidPosition, true, false);
        var verticalPopupPosition = pc.GetClientPopupPos(element, popupElement, __aspxInvalidPosition, false, false);
        var clientX = horizontalPopupPosition.position;
        var clientY = verticalPopupPosition.position;
        pc.SetWindowPos(-1, element, clientX, clientY);
    }
});
var __aspxDropDownCollection = null;
function aspxGetDropDownCollection() {
    if (__aspxDropDownCollection == null)
        __aspxDropDownCollection = new ASPxClientDropDownCollection();
    return __aspxDropDownCollection;
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseDownEventName, aspxDropDownDocumentMouseDown);
function aspxDropDownDocumentMouseDown(evt) {
    return aspxGetDropDownCollection().OnDocumentMouseDown(evt);
}
_aspxAttachEventToDocument("mouseup", aspxDropDownDocumentMouseUp);
function aspxDropDownDocumentMouseUp(evt) {
    return aspxGetDropDownCollection().OnDocumentMouseUp(evt);
}
function aspxDDDropDown(name, evt) {
    if (_aspxGetIsLeftButtonPressed(evt)) {
        var dd = aspxGetControlCollection().Get(name);
        if (dd)
            return dd.OnDropDown(evt);
    }
}
function aspxDDMC_MD(name, evt) {
    var dd = aspxGetControlCollection().Get(name);
    if (dd)
        dd.OnMainCellMouseDown(evt);
}
function aspxDDRefocusClick(name, evt) {
    var dd = aspxGetControlCollection().Get(name);
    if (dd && dd.GetInputElement() && _aspxGetEventSource(evt).id != dd.GetInputElement().id)
        dd.ForceRefocusEditor(evt);
}
function aspxDDBPCShown(name) {
    var cb = aspxGetControlCollection().Get(name);
    if (cb != null) cb.OnPopupControlShown();
}
function aspxDDBRaiseDropDownByTimer(name) {
    var cb = aspxGetControlCollection().Get(name);
    if (cb != null) cb.RaiseDropDown();
}
function aspxCBLBSelectedIndexChanged(name, evt) {
    var cb = aspxGetControlCollection().Get(name);
    if (cb != null) cb.OnLBSelectedIndexChanged();
}
function aspxCBLBItemMouseUp(name, evt) {
    var cb = aspxGetControlCollection().Get(name);
    if (cb != null) cb.OnListBoxItemMouseUp(evt);
}
function aspxCBMozillaOverflowOn(name) {
    var cb = aspxGetControlCollection().Get(name);
    cb.EnableLBDivOverflow();
}
function aspxCBDDButtonMMove(evt) {
    return aspxGetDropDownCollection().OnDDButtonMouseMove(evt);
}
function aspxCBMouseWheel(evt) {
    var srcElement = _aspxGetEventSource(evt);
    var focusedCB = aspxGetDropDownCollection().GetFocusedDropDown();
    if (focusedCB != null && _aspxGetIsParent(focusedCB.GetMainElement(), srcElement))
        return focusedCB.OnMouseWheel(evt);
}
function aspxCBKeyUp(evt) {
    var cb = aspxGetDropDownCollection().GetFocusedDropDown();
    if (cb != null)
        cb.filterStrategy.OnFilteringKeyUp(evt);
}
function aspxCBFilterByTimer(name) {
    var cb = aspxGetControlCollection().Get(name);
    if (cb != null) cb.filterStrategy.Filtering();
}
function aspxDECalOkClick() {
    var edit = ASPxClientDateEdit.active;
    if (edit)
        edit.OnTimeSectionOkClick();
}
function aspxDECalCancelClick() {
    var edit = ASPxClientDateEdit.active;
    if (edit)
        edit.OnTimeSectionCancelClick();
}
function aspxDECalClearClick() {
    var edit = ASPxClientDateEdit.active;
    if (edit)
        edit.OnTimeSectionClearClick();
}
function aspxDETimeEditKeyDown(s, e) {
    var edit = ASPxClientDateEdit.active;
    if (!edit) return;
    switch (e.htmlEvent.keyCode) {
        case ASPxKey.Enter:
            edit.OnTimeEditEnter();
            break;
        case ASPxKey.Esc:
            edit.OnTimeEditEsc();
            break;
        case ASPxKey.Tab:
            edit.OnTimeEditTab(e.htmlEvent.shiftKey);
            break;
    }
}
function aspxDETimeEditLostFocus() {
    var edit = ASPxClientDateEdit.active;
    if (!edit) return;
    edit.OnTimeEditLostFocus();
}
function aspxTBIKeyUp(name, evt) {
    aspxEKeyUp(name, evt);
}
function aspxTRBClick(name, evt) {
    var tokenElement = _aspxGetEventSource(evt).parentElement;
    var tb = aspxGetControlCollection().Get(name);
    if (tb) {
        var index = tokenElement.id.substring((tb.name + "_" + __aspxTokenBoxTokenSuffix).length);
        tb.RemoveToken(index, false);
    }
}
function aspxME_MD(name, evt) {
    var tb = aspxGetControlCollection().Get(name);
    if (tb)
        tb.GetInputElement().focus();
}
var __aspxPCWIdSuffix = "_PW";
function ASPxPCResizeCursorInfo(horizontalDirection, verticalDirection, horizontalOffset, verticalOffset) {
    this.horizontalDirection = horizontalDirection;
    this.verticalDirection = verticalDirection;
    this.horizontalOffset = horizontalOffset;
    this.verticalOffset = verticalOffset;
    this.course = verticalDirection + horizontalDirection;
}
ASPxClientPopupControlCssClasses = {};
ASPxClientPopupControlCssClasses.Prefix = "dxpc-";
ASPxClientPopupControlCssClasses.SizeGripLiteCssClassName = ASPxClientPopupControlCssClasses.Prefix + "sizeGrip";
ASPxClientPopupControlCssClasses.LinkCssClassName = ASPxClientPopupControlCssClasses.Prefix + "link";
ASPxClientPopupControlCssClasses.ShadowLiteCssClassName = ASPxClientPopupControlCssClasses.Prefix + "shadow";
ASPxClientPopupControlCssClasses.MainDivLiteCssClass = ASPxClientPopupControlCssClasses.Prefix + "mainDiv";
ASPxClientPopupControl = _aspxCreateClass(ASPxClientControl, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.leadingAfterInitCall = true;
        this.adjustInnerControlsSizeOnShow = true;
        this.slideAnimationDuration = 80;
        this.appearAfter = 300;
        this.disappearAfter = 500;
        this.allowResize = false;
        this.enableAnimation = true;
        this.popupAnimationType = null;
        this.shadowVisible = true;
        this.allowCorrectYOffsetPosition = true;
        this.contentUrl = "";
        this.contentUrlArray = [];
        this.contentLoadingMode = "Default"
        this.loadingPanels = [];
        this.loadingDivs = [];
        this.lpTimers = [];
        this.windowRequestCount = [];
        this.callbackAnimationProcessings = [];
        this.savedCallbackResults = [];
        this.isCallbackFinishedStates = [];
        this.savedCallbackWindowIndex = null;
        this.cookieName = "";
        this.closeAction = "OuterMouseClick";
        this.popupAction = "LeftMouseClick";
        this.closeActionArray = [];
        this.popupActionArray = [];
        this.windowsPopupElementIDList = [];
        this.windowsPopupElementList = [];
        this.windowsLastUsedPopupElementInfoList = [];
        this.windowsIsPopupedList = [];
        this.windowsPopupReasonMouseEventList = [];
        this.defaultWindowPopupElementIDList = [];
        this.defaultWindowPopupElementList = [];
        this.defaultLastUsedPopupElementInfo = {};
        this.defaultIsPopuped = false;
        this.defaultPopupReasonMouseEvent = null;
        this.showOnPageLoad = false;
        this.showOnPageLoadArray = [];
        this.popupHorizontalAlign = __aspxNotSetAlignIndicator;
        this.popupVerticalAlign = __aspxNotSetAlignIndicator;
        this.popupHorizontalOffset = 0;
        this.popupVerticalOffset = 0;
        this.windows = [];
        this.windowCount = 0;
        this.isDragged = false;
        this.isResized = false;
        this.zIndex = -1;
        this.left = 0;
        this.top = 0;
        this.allowLoadToHiddenIframe = __aspxIE || __aspxFirefox;
        this.iframeLoading = false;
        this.isDraggedArray = [];
        this.isResizedArray = [];
        this.zIndexArray = [];
        this.leftArray = [];
        this.topArray = [];
        this.height = 0;
        this.width = 0;
        this.minHeight = null;
        this.minWidth = null;
        this.maxHeight = null;
        this.maxWidth = null;
        this.heightArray = [];
        this.widthArray = [];
        this.minHeightArray = [];
        this.minWidthArray = [];
        this.maxHeightArray = [];
        this.maxWidthArray = [];
        this.iframeLoadingArray = [];
        this.isLiveResizingMode = true;
        this.isPopupPositionCorrectionOn = true;
        this.isPopupFullCorrectionOn = true;
        this.windowElements = new Object();
        this.hideBodyScrollWhenModal = true;
        this.hideBodyScrollWhenMaximized = true;
        this.autoUpdatePosition = false;
        this.autoUpdatePositionArray = [];
        this.cachedSize = null;
        this.cachedSizeArray = [];
        this.fakeDragDiv = null;
        this.headerHeight = 0;
        this.headerHeightArray = [];
        this.footerHeight = 0;
        this.footerHeightArray = [];
        this.ResizeBorderSize = __aspxTouchUI ? 10 : 6;
        this.ResizeCornerBorderSize = 20;
        this.allowDragging = false;
        this.isWindowDragging = false;
        this.enableContentScrolling = false;
        this.contentOverflowX = "None";
        this.contentOverflowY = "None";
        this.isPinned = false;
        this.isPinnedArray = [];
        this.pinX = 0;
        this.pinXArray = [];
        this.pinY = 0;
        this.pinYArray = [];
        this.lockScroll = 0;
        this.isCollapsed = false;
        this.isCollapsedArray = [];
        this.isCollapsedInit = false;
        this.isCollapsedInitArray = [];
        this.collapseExecutingLockCount = 0;
        this.isMaximized = false;
        this.isMaximizedArray = [];
        this.isMaximizedInit = false;
        this.isMaximizedInitArray = [];
        this.maximizationExecutingLockCount = 0;
        this.restoredWindowValues = {};
        this.restoredWindowValuesArray = [];
        this.browserResizingForMaxWindowLockCount = 0;
        this.updateRestoredWindowSizeLockCount = 0;
        this.prohibitClearSelectionOnMouseDown = false;
        this.CloseButtonClick = new ASPxClientEvent();
        this.CloseUp = new ASPxClientEvent();
        this.Closing = new ASPxClientEvent();
        this.PopUp = new ASPxClientEvent();
        this.Resize = new ASPxClientEvent();
        this.Shown = new ASPxClientEvent();
        this.BeforeResizing = new ASPxClientEvent();
        this.AfterResizing = new ASPxClientEvent();
        this.PinnedChanged = new ASPxClientEvent();
        aspxGetPopupControlCollection().Add(this);
    },
    InlineInitialize: function () {
        ASPxClientControl.prototype.InlineInitialize.call(this);
        this.InitializeArrayCores();
    },
    Initialize: function () {
        aspxGetPopupControlCollection().EnsureSaveScrollState();
        this.InitializeBeforeAnyShow();
        if (this.HasDefaultWindow())
            this.InitializeWindow(-1);
        for (var i = 0; i < this.GetWindowCount(); i++)
            this.InitializeWindow(i);
        this.InitializeScrollbars();
        this.constructor.prototype.Initialize.call(this);
    },
    InitializeBeforeAnyShow: function () {
        this.enableContentScrolling = this.contentOverflowX != "None" || this.contentOverflowY != "None";
    },
    InitializeScrollbars: function () {
        if (__aspxWebKitTouchUI && this.enableContentScrolling) {
            var options = {
                showHorizontalScrollbar: this.contentOverflowX == "Auto" || this.contentOverflowX == "Scroll",
                showVerticalScrollbar: this.contentOverflowY == "Auto" || this.contentOverflowY == "Scroll"
            };
            if (this.HasDefaultWindow() && this.GetContentContainer(-1))
                ASPxClientTouchUI.MakeScrollable(this.GetContentContainer(-1), options);
            for (var i = 0; i < this.GetWindowCount(); i++) {
                var scrollElement = this.GetContentContainer(i)
                if (scrollElement)
                    ASPxClientTouchUI.MakeScrollable(scrollElement, options);
            }
        }
    },
    AfterInitialize: function () {
        if (this.HasDefaultWindow())
            this.AfterInitializeWindow(-1);
        for (var i = 0; i < this.GetWindowCount(); i++)
            this.AfterInitializeWindow(i);
        this.constructor.prototype.AfterInitialize.call(this);
    },
    InitializeArrayCores: function () {
        if (this.GetWindowCountCore() > 0) {
            this.InitializeWindowPopupElementList();
            this.InitializeWindowPopupElementIDList();
            this.InitializeWindowLastUsedPopupElementInfoList();
            this.InitializeArray(this.windowsPopupReasonMouseEventList, null);
            this.InitializeArray(this.windowsIsPopupedList, false);
            this.InitializeArray(this.contentUrlArray, "");
            this.InitializeArray(this.popupActionArray, this.popupAction);
            this.InitializeArray(this.closeActionArray, this.closeAction);
            this.InitializeArray(this.showOnPageLoadArray, false);
            this.InitializeArray(this.isDraggedArray, false);
            this.InitializeArray(this.isPinnedArray, false);
            this.InitializeArray(this.isCollapsedArray, false);
            this.InitializeArray(this.isCollapsedInitArray, false);
            this.InitializeArray(this.isMaximizedArray, false);
            this.InitializeArray(this.isMaximizedInitArray, false);
            this.InitializeArray(this.restoredWindowValuesArray, {});
            this.InitializeArray(this.isResizedArray, false);
            this.InitializeArray(this.zIndexArray, -1);
            this.InitializeArray(this.leftArray, 0);
            this.InitializeArray(this.topArray, 0);
            this.InitializeArray(this.widthArray, 0);
            this.InitializeArray(this.heightArray, 0);
            this.InitializeArray(this.pinXArray, 0);
            this.InitializeArray(this.pinYArray, 0);
            this.InitializeArray(this.minWidthArray, null);
            this.InitializeArray(this.minHeightArray, null);
            this.InitializeArray(this.maxWidthArray, null);
            this.InitializeArray(this.maxHeightArray, null);
            this.InitializeArray(this.cachedSizeArray, null);
            this.InitializeArray(this.iframeLoadingArray, false);
            this.InitializeArray(this.autoUpdatePositionArray, false);
            if (__aspxIE) {
                this.InitializeArray(this.headerHeightArray, -1);
                this.InitializeArray(this.footerHeightArray, -1);
            }
        }
    },
    InitializeArray: function (array, defaultValue) {
        if (array.length == 0) {
            for (var i = 0; i < this.GetWindowCountCore(); i++)
                array[i] = defaultValue;
        }
    },
    InitializeWindowPopupElementIDList: function () {
        for (var i = 0; i < this.GetWindowCountCore(); i++) {
            if (!this.windowsPopupElementIDList[i])
                this.windowsPopupElementIDList[i] = [];
        }
    },
    InitializeWindowPopupElementList: function () {
        for (var i = 0; i < this.GetWindowCountCore(); i++) {
            if (!this.windowsPopupElementList[i])
                this.windowsPopupElementList[i] = [];
        }
    },
    InitializeWindowLastUsedPopupElementInfoList: function () {
        for (var i = 0; i < this.GetWindowCountCore(); i++) {
            if (!this.windowsLastUsedPopupElementInfoList[i])
                this.windowsLastUsedPopupElementInfoList[i] = {};
        }
    },
    WindowElementIDAssignmentMap: [
  { cssClass: "dxpc-header", prefix: "_PWH" },
  { cssClass: "dxpc-headerText", prefix: "_PWH", postfix: "T" },
  { cssClass: "dxpc-headerImg", prefix: "_PWH", postfix: "I" },
  { cssClass: "dxpc-closeBtn", prefix: "_HCB" },
  { cssClass: "dxpc-pinBtn", prefix: "_HPB" },
  { cssClass: "dxpc-refreshBtn", prefix: "_HRB" },
  { cssClass: "dxpc-collapseBtn", prefix: "_HMNB" },
  { cssClass: "dxpc-maximizeBtn", prefix: "_HMXB" },
  { cssClass: "dxpc-content", prefix: "_PWC" },
  { cssClass: "dxpc-iFrame", prefix: "_CIF" },
  { cssClass: "dxpc-footer", prefix: "_PWF" },
  { cssClass: "dxpc-footerText", prefix: "_PWF", postfix: "T" },
  { cssClass: "dxpc-footerImg", prefix: "_PWF", postfix: "I" }
 ],
    SetMsTouchDefAction: function (index) {
        var element = this.GetContentContainer(index);
        if (element && __aspxIE && __aspxBrowserVersion >= 10 && window.navigator.msPointerEnabled) {
            element.style['-ms-touch-action'] = 'none';
        }
    },
    AssignElementID: function (element, index, prefix, postfix) {
        element.id = this.name + prefix + index + (postfix ? postfix : "");
    },
    AssignWindowElementsID: function (index, windowElement) {
        for (var i = 0; i < this.WindowElementIDAssignmentMap.length; i++) {
            var elementClass = this.WindowElementIDAssignmentMap[i].cssClass;
            var elements = _aspxGetDescendantNodesByClassName(windowElement, elementClass);
            for (var j = 0; j < elements.length; j++) {
                var element = elements[j];
                if (this.GetFirstParentWindow(element) === windowElement)
                    this.AssignElementID(element, index, this.WindowElementIDAssignmentMap[i].prefix, this.WindowElementIDAssignmentMap[i].postfix);
            }
        }
    },
    GetFirstParentWindow: function (el) {
        while (el && el.tagName != "BODY") {
            if (el.nodeType == 1 && el.className.indexOf("dxpclW") > -1 && !isNaN(this.GetWindowIndex(el)))
                return el;
            el = el.parentNode;
        }
    },
    PreventHeaderButtonMouseDownBubbling: function (evt, hdrButton) {
        if (hdrButton) {
            var source = _aspxGetEventSource(evt);
            if (_aspxGetIsParent(hdrButton, source)) {
                aspxPWHMDown(evt);
                return true;
            }
        }
        return false;
    },
    GetWindowElementMouseDownEventHandler: function (index) {
        var instance = this,
   interactiveTagNames = ['INPUT', 'BUTTON', 'TEXTAREA', 'SELECT', 'OPTION', 'A', 'IFRAME'];
        return function (evt) {
            var content = instance.GetWindowContentElement(index),
    target = _aspxGetEventSource(evt);
            if (target && _aspxGetIsParent(content, target) && _aspxArrayIndexOf(interactiveTagNames, target.tagName) > -1)
                return true;
            if (!instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowCloseButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowPinButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowRefreshButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowCollapseButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowMaximizeButton(index)))
                aspxPWMDown(evt, instance.name, index, instance.isWindowDragging);
        }
    },
    GetWindowElementMouseMoveEventHandler: function (index) {
        var instance = this;
        return function (evt) { aspxPWMMove(evt, instance.name, index); };
    },
    GetWindowHeaderElementMouseDownEventHandler: function (index) {
        var instance = this;
        return function (evt) {
            if (!instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowCloseButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowPinButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowRefreshButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowCollapseButton(index)) &&
      !instance.PreventHeaderButtonMouseDownBubbling(evt, instance.GetWindowMaximizeButton(index)))
                aspxPWDGMDown(evt, instance.name, index);
        }
    },
    AssignWindowElementsEvents: function (index, element) {
        var instance = this;
        var mdEventName = ASPxClientTouchUI.touchMouseDownEventName;
        _aspxAttachEventToElement(element, mdEventName, this.GetWindowElementMouseDownEventHandler(index), true);
        if (this.allowResize) {
            var mmEventName = ASPxClientTouchUI.touchMouseMoveEventName;
            _aspxAttachEventToElement(element, mmEventName, this.GetWindowElementMouseMoveEventHandler(index));
        }
        var header = this.GetWindowHeaderElement(index);
        if (header && this.allowDragging && !this.isWindowDragging) {
            _aspxAttachEventToElement(header, mdEventName, this.GetWindowHeaderElementMouseDownEventHandler(index), true);
        }
        var sizeGrip = this.GetWindowSizeGripElement(index);
        if (sizeGrip) {
            _aspxAttachEventToElement(sizeGrip, mdEventName, function (evt) {
                aspxPWGripMDown(evt, instance.name, index);
                _aspxPreventEvent(evt);
            });
        }
        this.AttachClickToHeaderButton(index, this.GetWindowCloseButton(index), "aspxPWCBClick");
        this.AttachClickToHeaderButton(index, this.GetWindowPinButton(index), "aspxPWPBClick");
        this.AttachClickToHeaderButton(index, this.GetWindowRefreshButton(index), "aspxPWRBClick");
        this.AttachClickToHeaderButton(index, this.GetWindowCollapseButton(index), "aspxPWMNBClick");
        this.AttachClickToHeaderButton(index, this.GetWindowMaximizeButton(index), "aspxPWMXBClick");
    },
    AttachClickToHeaderButton: function (index, headerButton, eventFuncName) {
        var instance = this;
        if (headerButton) {
            _aspxAttachEventToElement(headerButton, "click", function (evt) {
                eval(eventFuncName)(evt, instance.name, index);
            });
        }
    },
    InitializeWindow: function (index) {
        var modalElement = this.GetWindowModalElement(index);
        if (modalElement)
            _aspxAttachEventToElement(modalElement, "mousedown", aspxPWMEMDown);
        this.RemoveWindowAllPopupElements(index);
        this.PopulatePopupElements(index);
        var element = this.GetWindowElement(index);
        if (element != null) {
            this.AssignWindowElementsID(index, element);
            this.AssignWindowElementsEvents(index, element);
            element.DXPopupWindowElement = true;
            _aspxAttachEventToElement(element, "resize", this.CreateWindowResizeHandler(this.name, index));
            if (__aspxIE)
                this.AttachOnDragStartEventToWindowImages(index);
            this.InitIFrame(index);
            element.isHiding = false;
            element.isContentHeightInit = false;
            element.isPopupPositionCorrectionOn = this.isPopupPositionCorrectionOn || !this.GetShowOnPageLoad(index);
            if (this.GetShowOnPageLoad(index) && this.GetZIndex(index) > 0) {
                this.FirstShowWindow(index, false);
                aspxGetPopupControlCollection().SetWindowElementZIndex(element, this.GetZIndex(index));
                element.isPopupPositionCorrectionOn = true;
            }
        }
        this.SetMsTouchDefAction(index);
    },
    CreateWindowResizeHandler: function (name, index) {
        return function () {
            var pc = aspxGetPopupControlCollection().Get(name);
            if (pc)
                pc.ResizeWindowIFrame(index);
        };
    },
    BrowserWindowResizeSubscriber: function () {
        return true;
    },
    OnBrowserWindowResize: function (evt) {
        window.setTimeout(this.SetPopupMaximizedPositionOnBrowserResize.aspxBind(this), 0);
    },
    SetPopupMaximizedPositionOnBrowserResize: function () {
        if (this.HasDefaultWindow())
            this.SetMaximizedPositionOnBrowserResize(-1);
        for (var i = 0; i < this.GetWindowCount(); i++)
            this.SetMaximizedPositionOnBrowserResize(i);
    },
    SetMaximizedPositionOnBrowserResize: function (index) {
        var element = this.GetWindowElement(index);
        if (element && this.GetIsMaximized(index)) {
            var left = _aspxPrepareClientPosForElement(_aspxGetDocumentScrollLeft(), element, true);
            var top = _aspxPrepareClientPosForElement(_aspxGetDocumentScrollTop(), element, false);
            this.SetWindowPos(index, element, left, top);
        }
    },
    InitIFrame: function (index) {
        var contentIFrameElement = this.GetWindowContentIFrameElement(index);
        if (contentIFrameElement) {
            contentIFrameElement.popupControlName = this.name;
            contentIFrameElement.pcWndIndex = index;
            _aspxAttachEventToElement(contentIFrameElement, "load", aspxPCIframeLoad);
        }
    },
    InitCollapsedWindows: function (index) {
        if ((this.isCollapsedInit && index == -1) || (index >= 0 && index < this.isCollapsedInitArray.length && this.isCollapsedInitArray[index])) {
            if (this.InternalIsWindowVisible(index)) {
                this.DoCollapse(index, true);
                if (index == -1)
                    this.isCollapsedInit = false;
                else
                    this.isCollapsedInitArray[index] = false;
            }
        }
    },
    InitMaximizedWindows: function (index) {
        if ((this.isMaximizedInit && index == -1) || (index >= 0 && index < this.isMaximizedInitArray.length && this.isMaximizedInitArray[index])) {
            if (this.InternalIsWindowVisible(index)) {
                this.DoMaximize(index, true);
                if (index == -1)
                    this.isMaximizedInit = false;
                else
                    this.isMaximizedInitArray[index] = false;
            }
        }
    },
    InitPinnedWindows: function (index) {
        if ((this.isPinned && index == -1) || (index >= 0 && index < this.isPinnedArray.length && this.isPinnedArray[index]))
            this.HoldPosition(index, true);
    },
    AfterInitializeWindow: function (index) {
        if (this.GetShowOnPageLoad(index) && this.GetZIndex(index) < 0) {
            this.FirstShowWindow(index, true);
            var element = this.GetWindowElement(index);
            if (element != null)
                element.isPopupPositionCorrectionOn = true;
        }
        this.EnsureContent(index, true);
        this.InitPinnedWindows(index);
        this.InitMaximizedWindows(index);
        this.InitCollapsedWindows(index);
    },
    AttachOnDragStartEventToWindowImages: function (index) {
        this.AttachChildImagesPreventDragStartEvent(this.GetWindowHeaderElement(index));
        this.AttachChildImagesPreventDragStartEvent(this.GetWindowFooterElement(index));
    },
    AttachChildImagesPreventDragStartEvent: function (parentElem) {
        var images = parentElem == null ? null : _aspxGetElementsByTagName(parentElem, "img");
        if (images != null) {
            for (var i = 0; i < images.length; i++)
                _aspxAttachEventToElement(images[i], "dragstart", _aspxPreventDragStart);
        }
    },
    FirstShowWindow: function (index, allowChangeZIndex) {
        var isFreeWindow = this.GetIsDragged(index);
        var x = __aspxInvalidPosition;
        var y = __aspxInvalidPosition;
        if (isFreeWindow) {
            x = this.GetWindowLeft(index);
            y = this.GetWindowTop(index);
            var popupHorizontalOffsetBackup = this.popupHorizontalOffset;
            var popupVerticalOffsetBackup = this.popupVerticalOffset;
            this.popupHorizontalOffset = 0;
            this.popupVerticalOffset = 0;
        }
        var enableAnimationBackup = this.enableAnimation;
        this.enableAnimation = false;
        this.DoShowWindowAtPos(index, x, y, isFreeWindow ? -1 : 0, false, allowChangeZIndex);
        this.enableAnimation = enableAnimationBackup;
        if (isFreeWindow) {
            this.popupHorizontalOffset = popupHorizontalOffsetBackup;
            this.popupVerticalOffset = popupVerticalOffsetBackup;
        }
        this.CorrectElementVerticalAlignment(_aspxAdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index));
    },
    GetIsDragged: function (index) {
        if (0 <= index && index < this.isDraggedArray.length)
            return this.isDraggedArray[index];
        return this.isDragged;
    },
    SetIsDragged: function (index, value) {
        if (0 <= index && index < this.isDraggedArray.length)
            this.isDraggedArray[index] = value;
        else
            this.isDragged = value;
    },
    GetIsPinned: function (index) {
        if (0 <= index && index < this.isPinnedArray.length)
            return this.isPinnedArray[index];
        return this.isPinned;
    },
    SetIsPinned: function (index, value) {
        if (0 <= index && index < this.isPinnedArray.length)
            this.isPinnedArray[index] = value;
        else
            this.isPinned = value;
    },
    GetPinPosX: function (index) {
        if (0 <= index && index < this.pinXArray.length)
            return this.pinXArray[index];
        return this.pinX;
    },
    SetPinPosX: function (index, pinX) {
        if (0 <= index && index < this.pinXArray.length)
            this.pinXArray[index] = pinX;
        else
            this.pinX = pinX;
    },
    GetPinPosY: function (index) {
        if (0 <= index && index < this.pinYArray.length)
            return this.pinYArray[index];
        return this.pinY;
    },
    SetPinPosY: function (index, pinY) {
        if (0 <= index && index < this.pinYArray.length)
            this.pinYArray[index] = pinY;
        else
            this.pinY = pinY;
    },
    GetIsCollapsed: function (index) {
        if (0 <= index && index < this.isCollapsedArray.length)
            return this.isCollapsedArray[index];
        return this.isCollapsed;
    },
    SetIsCollapsed: function (index, value) {
        if (0 <= index && index < this.isCollapsedArray.length)
            this.isCollapsedArray[index] = value;
        else
            this.isCollapsed = value;
    },
    GetIsMaximized: function (index) {
        if (0 <= index && index < this.isMaximizedArray.length)
            return this.isMaximizedArray[index];
        return this.isMaximized;
    },
    SetIsMaximized: function (index, value) {
        if (0 <= index && index < this.isMaximizedArray.length)
            this.isMaximizedArray[index] = value;
        else
            this.isMaximized = value;
    },
    GetRestoredWindowData: function (index) {
        if (0 <= index && index < this.restoredWindowValuesArray.length)
            return this.restoredWindowValuesArray[index];
        return _aspxCloneObject(this.restoredWindowValues);
    },
    SetRestoredWindowData: function (index, value) {
        if (0 <= index && index < this.restoredWindowValuesArray.length)
            this.restoredWindowValuesArray[index] = value;
        else
            this.restoredWindowValues = value;
    },
    GetIsResized: function (index) {
        if (0 <= index && index < this.isResizedArray.length)
            return this.isResizedArray[index];
        return this.isResized;
    },
    SetIsResized: function (index, value) {
        if (0 <= index && index < this.isResizedArray.length)
            this.isResizedArray[index] = value;
        else
            this.isResized = value;
    },
    IsOldIE: function () {
        return __aspxIE && __aspxBrowserVersion < 8;
    },
    HasDefaultWindow: function () {
        return this.GetWindowCountCore() == 0;
    },
    GetCurrentLeft: function (index) {
        return this.GetPosition(index, true);
    },
    GetCurrentTop: function (index) {
        return this.GetPosition(index, false);
    },
    GetHeaderHeight: function (index) {
        if (0 <= index && index < this.headerHeightArray.length)
            return this.headerHeightArray[index];
        return this.headerHeight;
    },
    GetFooterHeight: function (index) {
        if (0 <= index && index < this.footerHeightArray.length)
            return this.footerHeightArray[index];
        return this.footerHeight;
    },
    GetWindowFooterHeightLite: function (index) {
        var footer = this.GetWindowFooterElement(index);
        if (footer)
            return footer.offsetHeight;
        return null;
    },
    SetHeaderHeight: function (index, height) {
        if (0 <= index && index < this.headerHeightArray.length)
            this.headerHeightArray[index] = height;
        else
            this.headerHeight = height;
    },
    SetFooterHeight: function (index, height) {
        if (0 <= index && index < this.footerHeightArray.length)
            return this.footerHeightArray[index] = height;
        else
            this.footerHeight = height;
    },
    GetPosition: function (index, isLeft) {
        if (0 <= index && index < this.GetWindowCountCore())
            return isLeft ? this.leftArray[index] : this.topArray[index];
        return isLeft ? this.left : this.top;
    },
    SetPopupElementReference: function (index, popupElement, popupElementIndex, attach) {
        if (!_aspxIsExistsElement(popupElement)) return;
        var setReferenceFunction = attach ? _aspxAttachEventToElement : _aspxDetachEventFromElement;
        var windowPopupAction = this.GetWindowPopupAction(index);
        if (windowPopupAction == "LeftMouseClick")
            setReferenceFunction(popupElement, "mouseup", aspxPEMEvent);
        else if (windowPopupAction == "RightMouseClick")
            setReferenceFunction(popupElement, "contextmenu", aspxPEMEvent);
        else if (windowPopupAction == "MouseOver") {
            var windowElement = this.GetWindowElement(index);
            setReferenceFunction(popupElement, "mouseover", _aspxClientOverControlUtils.OnMouseOver);
            setReferenceFunction(windowElement, "mouseover", aspxPWEMOver);
            if (attach)
                this.SetMSTouchMouseOverReference(popupElement, windowElement, this.name, index, this.appearAfter);
        }
        if (windowPopupAction == "LeftMouseClick" || windowPopupAction == "RightMouseClick") {
            setReferenceFunction(popupElement, "mousedown", aspxPEMEvent);
        }
        if (attach) {
            popupElement.DXPopupElementControl = this;
            popupElement.DXPopupWindowIndex = index;
            popupElement.DXPopupElementIndex = popupElementIndex;
        } else
            popupElement.DXPopupElementControl = popupElement.DXPopupWindowIndex = popupElement.DXPopupElementIndex = undefined;
    },
    SetMSTouchMouseOverReference: function (popupElement, windowElement, popupName, index, appearAfter) {
        if (!window.navigator.msPointerEnabled) return;
        popupElement.dxMsTouchGesture = popupElement.dxMsTouchGesture ||
   ASPxClientTouchUI.msTouchCreateGerturesWrapper(popupElement, function (evt) {
       window.setTimeout(function () {
           aspxGetPopupControlCollection().SetAppearTimer(popupName, index, popupElement.DXPopupElementIndex, appearAfter, evt);
       }, 0);
   });
        windowElement.dxMsTouchGesture = windowElement.dxMsTouchGesture || ASPxClientTouchUI.msTouchCreateGerturesWrapper(windowElement, function (evt) {
            window.setTimeout(function () {
                aspxGetPopupControlCollection().ClearDisappearTimer();
            }, 0);
        });
    },
    PopulatePopupElements: function (index) {
        var ids = this.GetPopupElementIDList(index);
        for (var i = 0; i < ids.length; i++) {
            var popupElement = _aspxFindPopupElementById(ids[i]);
            if (popupElement)
                this.AddWindowPopupElement(index, popupElement);
        }
    },
    GetPopupElement: function (index, popupElementIndex) {
        var popupElement = this.GetPopupElementList(index)[popupElementIndex];
        return popupElement ? popupElement : null;
    },
    GetPopupElementIDList: function (index) {
        if (0 <= index && index < this.GetWindowCountCore())
            return this.windowsPopupElementIDList[index];
        return this.defaultWindowPopupElementIDList;
    },
    GetPopupElementList: function (index) {
        if (0 <= index && index < this.GetWindowCountCore())
            return this.windowsPopupElementList[index];
        return this.defaultWindowPopupElementList;
    },
    SetPopupElementIDs: function (index, ids) {
        if (0 <= index && index < this.GetWindowCountCore())
            this.windowsPopupElementIDList[index] = ids;
        this.defaultWindowPopupElementIDList = ids;
    },
    AddPopupElementInternal: function (index, element) {
        var popupElements = this.GetPopupElementList(index);
        for (var i = 0; i < popupElements.length; i++) {
            if (!popupElements[i]) {
                popupElements[i] = element;
                return i;
            }
        }
        popupElements.push(element);
        return popupElements.length - 1;
    },
    RemovePopupElementInternal: function (index, element) {
        var popupElements = this.GetPopupElementList(index);
        for (var i = 0; i < popupElements.length; i++) {
            if (popupElements[i] == element) {
                popupElements[i] = null;
                return;
            }
        }
    },
    AddPopupElement: function (popupElement) {
        this.AddWindowPopupElement(-1, popupElement);
    },
    AddWindowPopupElement: function (index, popupElement) {
        var popupElementIndex = this.AddPopupElementInternal(index, popupElement);
        this.SetPopupElementReference(index, popupElement, popupElementIndex, true);
    },
    RemovePopupElement: function (popupElement) {
        this.RemoveWindowPopupElement(-1, popupElement);
    },
    RemoveWindowPopupElement: function (index, popupElement) {
        this.RemovePopupElementInternal(index, popupElement);
        this.SetPopupElementReference(index, popupElement, null, false);
    },
    RemoveAllPopupElements: function () {
        this.RemoveWindowAllPopupElements(-1);
    },
    RemoveWindowAllPopupElements: function (index) {
        var popupElements = this.GetPopupElementList(index);
        for (var i = 0; i < popupElements.length; i++)
            this.RemoveWindowPopupElement(index, popupElements[i]);
    },
    GetIsPopuped: function (index) {
        if (0 <= index && index < this.GetWindowCountCore())
            return this.windowsIsPopupedList[index];
        return this.defaultIsPopuped;
    },
    SetIsPopuped: function (index, isPopuped) {
        if (0 <= index && index < this.GetWindowCountCore())
            this.windowsIsPopupedList[index] = isPopuped;
        this.defaultIsPopuped = isPopuped;
    },
    GetLastShownPopupElementIndex: function (windowIndex) {
        var info = this.GetLastUsedPopupElementInfo(windowIndex);
        return _aspxGetDefinedValue(info.shownPEIndex, 0);
    },
    SetLastShownPopupElementIndex: function (windowIndex, popupElementIndex) {
        var info = this.GetLastUsedPopupElementInfo(windowIndex);
        info.shownPEIndex = popupElementIndex;
    },
    GetLastOverPopupElementIndex: function (windowIndex) {
        var info = this.GetLastUsedPopupElementInfo(windowIndex);
        return _aspxGetDefinedValue(info.overPEIndex, -1);
    },
    SetLastOverPopupElementIndex: function (windowIndex, popupElementIndex) {
        var info = this.GetLastUsedPopupElementInfo(windowIndex);
        info.overPEIndex = popupElementIndex;
    },
    GetLastUsedPopupElementInfo: function (index) {
        if (0 <= index && index < this.GetWindowCountCore())
            return this.windowsLastUsedPopupElementInfoList[index];
        return this.defaultLastUsedPopupElementInfo;
    },
    SetWindowPopUpReasonMouseEvent: function (index, evt) {
        evt = _aspxCloneObject(evt);
        if (evt === undefined)
            evt = null;
        if (0 <= index && index < this.GetWindowCountCore())
            this.windowsPopupReasonMouseEventList[index] = evt;
        this.defaultPopupReasonMouseEvent = evt;
    },
    GetPopUpReasonMouseEvent: function () {
        return this.GetWindowPopUpReasonMouseEvent(null);
    },
    GetWindowPopUpReasonMouseEvent: function (window) {
        var index = (window != null) ? window.index : -1;
        if (0 <= index && index < this.GetWindowCountCore())
            return this.windowsPopupReasonMouseEventList[index];
        return this.defaultPopupReasonMouseEvent;
    },
    GetShadowWidth: function () {
        return this.shadowVisible ? __aspxPopupShadowWidth : 0;
    },
    GetShadowHeight: function () {
        return this.shadowVisible ? __aspxPopupShadowHeight : 0;
    },
    GetShowOnPageLoad: function (index) {
        if (0 <= index && index < this.showOnPageLoadArray.length)
            return this.showOnPageLoadArray[index];
        return this.showOnPageLoad;
    },
    GetWindowCountCore: function () {
        return (this.windows.length > 0) ? this.windows.length : this.windowCount;
    },
    GetWindowIFrame: function (index) {
        var element = this.GetWindowElement(index);
        var iFrame = element.overflowElement;
        if (!iFrame) {
            iFrame = this.FindWindowIFrame(index);
            element.overflowElement = iFrame;
        }
        return iFrame;
    },
    FindWindowIFrame: function (index) {
        return _aspxGetElementById(this.name + "_DXPWIF" + index);
    },
    GetWindowModalElement: function (index) {
        var element = this.GetWindowElement(index);
        if (!element) return;
        var modalElement = element.modalElement;
        if (!modalElement) {
            modalElement = this.FindWindowModalElement(index);
            element.modalElement = modalElement;
            if (modalElement) {
                modalElement.DXModalPopupControl = this;
                modalElement.DXModalPopupWindowIndex = index;
            }
        }
        return modalElement;
    },
    FindWindowModalElement: function (index) {
        return _aspxGetElementById(this.name + "_DXPWMB" + index);
    },
    GetWindowElementId: function (index) {
        return this.name + __aspxPCWIdSuffix + index;
    },
    WindowIsModal: function (index) {
        return !!this.GetWindowModalElement(index);
    },
    GetWindowElement: function (index) {
        if (!_aspxIsExistsElement(this.windowElements[index]))
            this.windowElements[index] = _aspxGetElementById(this.GetWindowElementId(index));
        return this.windowElements[index];
    },
    GetWindowCloseButton: function (index) {
        return _aspxGetElementById(this.name + "_HCB" + index);
    },
    GetWindowPinButton: function (index) {
        return _aspxGetElementById(this.name + "_HPB" + index);
    },
    GetWindowRefreshButton: function (index) {
        return _aspxGetElementById(this.name + "_HRB" + index);
    },
    GetWindowCollapseButton: function (index) {
        return _aspxGetElementById(this.name + "_HMNB" + index);
    },
    GetWindowMaximizeButton: function (index) {
        return _aspxGetElementById(this.name + "_HMXB" + index);
    },
    GetWindowChild: function (index, idPostfix) {
        var elem = this.GetWindowElement(index);
        if (elem)
            return _aspxGetChildById(elem, this.name + idPostfix);
        return null;
    },
    GetWindowContentIFrameDivElementID: function (index) {
        return this.name + "_CIFD" + index;
    },
    GetWindowContentIFrameDivElement: function (index) {
        return this.GetWindowChild(index, "_CIFD" + index);
    },
    GetWindowScrollDiv: function (index) {
        return this.GetWindowChild(index, "_CSD" + index);
    },
    GetWindowContentIFrameElementId: function (index) {
        return this.name + "_CIF" + index;
    },
    GetWindowContentIFrameElement: function (index) {
        return this.GetWindowChild(index, "_CIF" + index);
    },
    GetWindowContentIFrameUrl: function (index) {
        if (0 <= index && index < this.contentUrlArray.length)
            return this.contentUrlArray[index];
        return this.contentUrl;
    },
    GetWindowPopupAction: function (index) {
        if (0 <= index && index < this.popupActionArray.length)
            return this.popupActionArray[index];
        return this.popupAction;
    },
    GetWindowCloseAction: function (index) {
        if (0 <= index && index < this.closeActionArray.length)
            return this.closeActionArray[index];
        return this.closeAction;
    },
    SetWindowContentIFrameUrl: function (index, url) {
        if (0 <= index && index < this.contentUrlArray.length)
            this.contentUrlArray[index] = url;
        else
            this.contentUrl = url;
    },
    ShowWindowContentUrl: function (index) {
        var contentIFrame = this.GetWindowContentIFrameElement(index);
        this.LoadWindowContentUrl(index);
        if (contentIFrame && contentIFrame.DXReloadAfterShowRequired) {
            this.RefreshWindowContentUrl(this.GetWindow(index));
            contentIFrame.DXReloadAfterShowRequired = false;
        }
    },
    LoadWindowContentUrl: function (index) {
        var url = this.GetWindowContentIFrameUrl(index);
        this.LoadWindowContentFromUrl(index, url);
    },
    LoadWindowContentFromUrl: function (index, url) {
        var element = this.GetWindowContentIFrameElement(index);
        if (element && element.src != url && element.DXSrcRaw != url) {
            this.SetSrcToIframeElement(index, element, url);
            this.SetWindowContentIFrameUrl(index, element.src);
        }
    },
    SetSrcToIframeElement: function (index, iframeElement, src) {
        this.SetIframeLoading(index, true);
        iframeElement.src = src;
        if (__aspxChrome && src.indexOf("#"))
            this.PreventScrollingAfterIframeLoaded(iframeElement)
        iframeElement.DXSrcRaw = src;
    },
    PreventScrollingAfterIframeLoaded: function (iframeElement) {
        var docScrollTop = _aspxGetDocumentScrollTop();
        var onIframeLoadedHandler = function () {
            window.setTimeout(function () {
                _aspxSetDocumentScrollTop(docScrollTop);
                _aspxDetachEventFromElement(iframeElement, "load", onIframeLoadedHandler);
            }, 0);
        };
        _aspxAttachEventToElement(iframeElement, "load", onIframeLoadedHandler);
    },
    GetWindowContentElement: function (index) {
        return this.GetWindowChild(index, "_PWC" + index);
    },
    GetWindowHeaderElement: function (index) {
        return this.GetWindowChild(index, "_PWH" + index);
    },
    GetWindowHeaders: function () {
        var elements = [];
        if (this.HasDefaultWindow())
            elements = elements.concat(_aspxGetDescendantNodesByClassName(this.GetWindowElement(-1), "dxpc-header"));
        for (var i = 0; i < this.GetWindowCount(); i++)
            elements = elements.concat(_aspxGetDescendantNodesByClassName(this.GetWindowElement(i), "dxpc-header"));
        return elements;
    },
    GetWindowSizeGripElement: function (index) {
        return this.GetWindowSizeGripLite(index);
    },
    GetWindowSizeGripLite: function (index) {
        var footer = this.GetWindowFooterElement(index);
        if (!footer)
            return null;
        var descendants = _aspxGetDescendantNodesByClassName(footer, ASPxClientPopupControlCssClasses.SizeGripLiteCssClassName);
        return descendants.length > 0 ? descendants[0] : null;
    },
    GetWindowFooterElement: function (index) {
        return this.GetWindowChild(index, "_PWF" + index);
    },
    GetContentContainer: function (index) {
        return this.GetWindowContentElement(index);
    },
    GetWindowIndex: function (element) {
        var id = element.id;
        var pos = id.lastIndexOf(__aspxPCWIdSuffix);
        return parseInt(id.substr(pos + __aspxPCWIdSuffix.length));
    },
    GetWindowMainCell: function (element) {
        if (this.IsOldIE() && this.enableAnimation)
            return _aspxGetDescendantNodesByClassName(element, ASPxClientPopupControlCssClasses.MainDivLiteCssClass)[0];
        return this.enableAnimation ? _aspxGetChildByTagName(element, "DIV", 0) : element;
    },
    GetWindowMainTable: function (element) {
        return this.GetWindowMainCell(element);
    },
    GetWindowShadowTable: function (index) {
        var shadowTable = this.enableAnimation ? this.GetWindowShadowTableCore(index) : this.GetWindowElement(index);
        if (!shadowTable) return null;
        if (shadowTable.tagName != "TABLE")
            shadowTable = this.GetWindowShadowTableCore(index);
        return (shadowTable && shadowTable.tagName == "TABLE") ? shadowTable : null;
    },
    GetWindowShadowTableCore: function (index) {
        return this.GetWindowChild(index, "_PWST" + index);
    },
    GetWindowClientTable: function (index) {
        return this.GetWindowElement(index);
    },
    GetWindowLeft: function (index) {
        if (0 <= index && index < this.leftArray.length)
            return this.leftArray[index];
        return this.left;
    },
    SetWindowLeft: function (index, left) {
        if (0 <= index && index < this.leftArray.length)
            this.leftArray[index] = left;
        else
            this.left = left;
    },
    GetWindowHeightInternal: function (index) {
        if (0 <= index && index < this.heightArray.length)
            return this.heightArray[index];
        return this.height;
    },
    GetWindowMinHeight: function (index) {
        if (0 <= index && index < this.minHeightArray.length)
            return this.minHeightArray[index];
        return this.minHeight;
    },
    GetWindowMaxHeight: function (index) {
        if (0 <= index && index < this.maxHeightArray.length)
            return this.maxHeightArray[index];
        return this.maxHeight;
    },
    SetWindowHeight: function (index, height) {
        if (0 <= index && index < this.heightArray.length)
            this.heightArray[index] = height;
        else
            this.height = height;
    },
    GetWindowWidthInternal: function (index) {
        if (0 <= index && index < this.widthArray.length)
            return this.widthArray[index];
        return this.width;
    },
    GetWindowMinWidth: function (index) {
        if (0 <= index && index < this.minWidthArray.length)
            return this.minWidthArray[index];
        return this.minWidth;
    },
    GetWindowMaxWidth: function (index) {
        if (0 <= index && index < this.maxWidthArray.length)
            return this.maxWidthArray[index];
        return this.maxWidth;
    },
    SetWindowWidth: function (index, width) {
        if (0 <= index && index < this.widthArray.length)
            this.widthArray[index] = width;
        else
            this.width = width;
    },
    GetWindowTop: function (index) {
        if (0 <= index && index < this.topArray.length)
            return this.topArray[index];
        return this.top;
    },
    SetWindowTop: function (index, top) {
        if (0 <= index && index < this.topArray.length)
            return this.topArray[index] = top;
        else
            return this.top = top;
    },
    GetWindowsStateInputElement: function () {
        return _aspxGetElementById(this.name + "WS");
    },
    GetZIndex: function (index) {
        if (0 <= index && index < this.zIndexArray.length)
            return this.zIndexArray[index];
        return this.zIndex;
    },
    GetCurrentZIndex: function (index) {
        var element = this.GetWindowElement(index);
        if (element != null) {
            if (element.style.zIndex != "")
                return element.style.zIndex;
            if (0 <= index && index < this.GetWindowCountCore())
                return this.zIndexArray[index];
            return this.zIndex;
        }
    },
    GetMainWindowWidth: function (index, noCache) {
        return this.GetClientWindowWidth(index, true, noCache);
    },
    GetCurrentWindowWidth: function (index) {
        return this.GetClientWindowWidth(index);
    },
    GetClientWindowWidth: function (index, outerSize, noCache) {
        if (!noCache && (this.GetIsCollapsed(index) || this.GetIsMaximized(index))) {
            var cachedSize = this.GetWindowCachedSize(index);
            if (cachedSize != null)
                return cachedSize.width;
        }
        var element = this.GetWindowElement(index);
        if (element != null)
            return element.offsetWidth;
    },
    GetMainWindowHeight: function (index, noCache) {
        return this.GetClientWindowHeight(index, true, noCache);
    },
    GetCurrentWindowHeight: function (index) {
        return this.GetClientWindowHeight(index);
    },
    GetClientWindowHeight: function (index, outerSize, noCache) {
        if (!noCache && (this.GetIsCollapsed(index) || this.GetIsMaximized(index))) {
            var cachedSize = this.GetWindowCachedSize(index);
            if (cachedSize != null)
                return cachedSize.height;
        }
        var element = this.GetWindowElement(index);
        if (element != null)
            return element.offsetHeight;
    },
    GetIframeLoading: function (index) {
        if (0 <= index && index < this.iframeLoadingArray.length)
            return this.iframeLoadingArray[index];
        return this.iframeLoading;
    },
    SetIframeLoading: function (index, value) {
        if (0 <= index && index < this.iframeLoadingArray.length)
            this.iframeLoadingArray[index] = value;
        else
            this.iframeLoading = value;
    },
    GetAutoUpdatePosition: function (index) {
        if (0 <= index && index < this.autoUpdatePositionArray.length)
            return this.autoUpdatePositionArray[index];
        return this.autoUpdatePosition;
    },
    GetClientPopupPos: function (element, popupElement, pos, isX, isDragged) {
        var index = this.GetWindowIndex(element);
        var popupPosition = null;
        if (isDragged)
            popupPosition = new _aspxPopupPosition(pos == __aspxInvalidPosition ? this.GetPosition(index, isX) : pos, false);
        else
            popupPosition = isX ? this.GetClientPopupPosX(element, popupElement, pos) : this.GetClientPopupPosY(element, popupElement, pos);
        popupPosition.position = _aspxPrepareClientPosForElement(popupPosition.position, element, isX);
        if (__aspxFirefox && __aspxBrowserVersion < 3 && this.GetWindowModalElement(index))
            popupPosition.position -= isX ? _aspxGetDocumentScrollLeft() : _aspxGetDocumentScrollTop();
        return popupPosition;
    },
    GetClientPopupPosX: function (element, popupElement, x) {
        var mainElement = this.GetWindowMainCell(element);
        var popupPosition = _aspxGetPopupAbsoluteX(mainElement, this.GetShadowWidth(), popupElement, this.popupHorizontalAlign, this.popupHorizontalOffset,
   x, this.GetWindowLeft(this.GetWindowIndex(element)), this.rtl, this.isPopupFullCorrectionOn);
        return this.CorrectPopupPositionForClientWindow(element, popupPosition, true);
    },
    GetClientPopupPosY: function (element, popupElement, y) {
        var mainElement = this.GetWindowMainCell(element);
        var popupPosition = _aspxGetPopupAbsoluteY(mainElement, this.GetShadowHeight(), popupElement, this.popupVerticalAlign, this.popupVerticalOffset,
   y, this.GetWindowTop(this.GetWindowIndex(element)), this.isPopupFullCorrectionOn);
        return (this.allowCorrectYOffsetPosition ? this.CorrectPopupPositionForClientWindow(element, popupPosition, false) : popupPosition);
    },
    CorrectPopupPositionForClientWindow: function (element, popupPosition, isX) {
        if (element.isPopupPositionCorrectionOn && this.isPopupFullCorrectionOn) {
            popupPosition.position = _aspxAdjustPositionToClientScreen(element,
    isX ? this.GetShadowWidth() : this.GetShadowHeight(), popupPosition.position, isX);
        }
        return popupPosition;
    },
    DoShowWindow: function (index, popupElementIndex, evt) {
        if (!this.InternalIsWindowVisible(index)) {
            var x = _aspxGetEventX(evt);
            var y = _aspxGetEventY(evt);
            this.DoShowWindowAtPos(index, x, y, popupElementIndex, true, true, evt);
        }
    },
    AdjustContentOnShow: function (index) {
        var windowElement = this.GetWindowElement(index);
        if (this.adjustInnerControlsSizeOnShow)
            aspxGetControlCollection().AdjustControls(windowElement);
    },
    DoShowWindowAtPos: function (index, x, y, popupElementIndex, closeOtherWindows, allowChangeZIndex, evt) {
        if (!this.isInitialized)
            this.PopulatePopupElements(index);
        var element = this.GetWindowElement(index);
        if (element != null) {
            if (this.adjustInnerControlsSizeOnShow) {
                var windowContent = this.GetContentContainer(index);
                var collection = aspxGetControlCollection();
                collection.CollapseControls(windowContent);
            }
            this.FFTextCurFixShow(index, true);
            if (closeOtherWindows)
                aspxGetPopupControlCollection().DoHideAllWindows(element, this.GetWindowElementId(index), false);
            var isMoving = this.InternalIsWindowVisible(index);
            _aspxSetElementDisplay(element, true);
            element.style.display = this.HasAnyScrollBars(index) || this.IsOldIE() ? "block" : "table";
            element.style.position = "absolute";
            var scrollDiv = this.GetWindowScrollDiv(index),
    shouldResetScrollSize = scrollDiv && this.enableContentScrolling && _aspxGetDocumentMaxClientHeight() <= element.offsetHeight,
    savedScrollDivHeight = shouldResetScrollSize && scrollDiv.style.height;
            if (shouldResetScrollSize)
                scrollDiv.style.height = 0;
            var cachedSize = this.GetWindowCachedSize(index);
            if (cachedSize != null) {
                this.SetWindowSize(this.GetWindow(index), cachedSize.width, cachedSize.height);
                this.ResetWindowCachedSize(index);
            }
            if (!this.shown) {
                var liteWidth = Math.max(this.GetWindowWidthInternal(index), this.GetWindowMinWidth(index));
                var maxWidth = this.GetWindowMaxWidth(index);
                if (maxWidth)
                    liteWidth = Math.min(liteWidth, maxWidth);
                var liteHeight = Math.max(this.GetWindowHeightInternal(index), this.GetWindowMinHeight(index));
                var maxHeight = this.GetWindowMaxHeight(index);
                if (maxHeight)
                    liteHeight = Math.min(liteHeight, maxHeight);
                this.SetClientWindowSizeCoreLite(index, liteWidth, liteHeight);
                this.shown = true;
            }
            this.RefreshRootDivElementSize(index);
            var popupElement = this.GetPopupElement(index, popupElementIndex);
            if (popupElement)
                this.SetLastShownPopupElementIndex(index, popupElementIndex);
            var isDragged = this.GetIsDragged(index);
            var horizontalPopupPosition = this.GetClientPopupPos(element, popupElement, x, true, isDragged);
            var verticalPopupPosition = this.GetClientPopupPos(element, popupElement, y, false, isDragged);
            var clientX = horizontalPopupPosition.position;
            var clientY = verticalPopupPosition.position;
            this.SetWindowPos(index, element, clientX, clientY);
            if (shouldResetScrollSize)
                scrollDiv.style.height = savedScrollDivHeight;
            if (this.hideBodyScrollWhenMaximized && this.GetIsMaximized(index))
                _aspxBodyScrollHelper.HideBodyScroll();
            this.DoShowWindowModalElement(index);
            var isAnimationNeed = this.enableAnimation && !isMoving;
            if (isAnimationNeed) {
                if (this.popupAnimationType === 'slide')
                    this.StartSlideAnimation(element, index, horizontalPopupPosition, verticalPopupPosition);
                else
                    this.StartFadeAnimation(element, index);
            } else
                _aspxSetElementVisibility(element, true);
            this.SetWindowPopUpReasonMouseEvent(index, evt);
            if (!isAnimationNeed && __aspxNetscape && this.GetWindowModalElement(index)) {
                _aspxSetElementDisplay(element, false);
                _aspxSetElementDisplay(element, true);
            }
            this.ShowWindowContentUrl(index);
            this.AdjustContentOnShow(index);
            var scrollDiv = this.GetWindowScrollDiv(index);
            if (scrollDiv && this.enableContentScrolling) {
                var dimension = null;
                var windowMainCell = this.GetWindowMainCell(element);
                if (windowMainCell.style.width && windowMainCell.style.height)
                    dimension = 'both';
                else if (windowMainCell.style.width)
                    dimension = 'width';
                else if (windowMainCell.style.height)
                    dimension = 'height';
                if (!dimension)
                    return;
                _aspxSetElementDisplay(scrollDiv, false);
                this.SetWindowScrollDivSize(scrollDiv, index, dimension);
                _aspxSetElementDisplay(scrollDiv, true);
            }
            if (!isMoving) {
                aspxGetPopupControlCollection().RegisterVisibleWindow(element, this, index);
                this.RaisePopUp(index);
                if (!this.enableAnimation)
                    this.OnWindowShown(index);
            }
            if (allowChangeZIndex)
                aspxGetPopupControlCollection().ActivateWindowElement(element);
            this.CorrectWindowSizeGripPositionLite(index);
            this.NormalizeWindowSize(index, this.GetIsMaximized(index));
            this.InitMaximizedWindows(index);
            this.InitCollapsedWindows(index);
            if (this.GetIsPinned(index)) window.setTimeout(function () { this.HoldPosition(index, true); } .aspxBind(this), 0);
            if (!this.GetShowOnPageLoad(index))
                this.CorrectElementVerticalAlignment(_aspxAdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index));
        }
    },
    NormalizeWindowSize: function (index, isMaximized) {
        var width = this.GetClientWindowWidth(index),
   height = this.GetClientWindowHeight(index),
   normWidth = width,
   normHeight = height,
   maxWidth = this.GetWindowMaxWidth(index),
   minWidth = this.GetWindowMinWidth(index),
   maxHeight = this.GetWindowMaxHeight(index),
   minHeight = this.GetWindowMinHeight(index);
        if (maxWidth)
            normWidth = Math.min(normWidth, maxWidth);
        if (minWidth)
            normWidth = Math.max(normWidth, minWidth);
        if (maxHeight)
            normHeight = Math.min(normHeight, maxHeight);
        if (minHeight)
            normHeight = Math.max(normHeight, minHeight);
        if (normWidth !== width || normHeight !== height)
            this.SetWindowSize(this.GetWindow(index), normWidth, normHeight);
        if (isMaximized) {
            var documentClientWidth = _aspxGetDocumentClientWidthForPopup();
            var documentClientHeight = _aspxGetDocumentClientHeight();
            if (this.GetIsCollapsed(index)) {
                if (normWidth != documentClientWidth) {
                    this.SetWindowSizeByIndexCore(index, documentClientWidth, normHeight, true);
                }
            } else {
                if (normWidth != documentClientWidth || normHeight != documentClientHeight) {
                    this.SetWindowSizeByIndexCore(index, documentClientWidth, documentClientHeight, false);
                }
            }
        }
    },
    RefreshRootDivElementSize: function (index) {
        if (this.WindowRootElementIsDiv()) {
            var window = this.GetWindowElement(index);
            var windowMainTable = this.GetWindowMainTable(window);
            var height = windowMainTable.offsetHeight;
            var width = windowMainTable.offsetWidth;
            height -= _aspxGetTopBottomBordersAndPaddingsSummaryValue(window);
            width -= _aspxGetLeftRightBordersAndPaddingsSummaryValue(window);
            _aspxSetStyles(window, { width: width, height: height });
        }
    },
    WindowRootElementIsDiv: function () {
        return this.enableAnimation;
    },
    DoShowWindowIFrame: function (index, x, y, width, height) {
        if (!this.renderIFrameForPopupElements) return;
        var element = this.GetWindowElement(index);
        var iFrame = this.GetWindowIFrame(index);
        if (element && iFrame) {
            var cell = this.GetWindowMainCell(element);
            if (width < 0)
                width = cell.offsetWidth;
            if (height < 0)
                height = cell.offsetHeight;
            _aspxSetStyles(iFrame, { width: width, height: height });
            if (x != __aspxInvalidPosition && y != __aspxInvalidPosition)
                _aspxSetStyles(iFrame, { left: x, top: y });
            _aspxSetElementDisplay(iFrame, true);
        }
    },
    DoShowWindowModalElement: function (index) {
        var modalElement = this.GetWindowModalElement(index);
        if (modalElement) {
            var bodyScrollHasJustBeingHidden = false;
            if (this.hideBodyScrollWhenModal && !this.IsWindowVisible(this.GetWindow(index))) {
                bodyScrollHasJustBeingHidden = true;
                aspxGetPopupControlCollection().LockWindowResizeByBodyScrollVisibilityChanging();
                _aspxBodyScrollHelper.HideBodyScroll();
            }
            if (__aspxIE)
                _aspxAttachEventToElement(modalElement, _aspxGetMouseWheelEventName(), function (evt) { return _aspxPreventEventAndBubble(evt); });
            _aspxSetElementDisplay(modalElement, true);
            aspxGetPopupControlCollection().AdjustModalElementBounds(modalElement);
            if (this.popupAnimationType == "fade") {
                var endOpacity = _aspxGetElementOpacity(modalElement);
                if (__aspxIE && __aspxBrowserMajorVersion < 9) {
                    _aspxSetElementVisibility(modalElement, true);
                    ASPxAnimationHelper.setOpacity(modalElement, 0);
                } else {
                    ASPxAnimationHelper.setOpacity(modalElement, 0);
                    _aspxSetElementVisibility(modalElement, true);
                }
                ASPxAnimationHelper.fadeTo(modalElement, { to: endOpacity });
            } else {
                _aspxSetElementVisibility(modalElement, true);
            }
            aspxGetPopupControlCollection().RegisterVisibleModalElement(modalElement);
            if (bodyScrollHasJustBeingHidden)
                aspxGetPopupControlCollection().UnlockWindowResizeByBodyScrollVisibilityChanging();
        }
    },
    DoHideWindowCore: function (index) {
        this.FFTextCurFixHide(index, true);
        var element = this.GetWindowElement(index);
        if (element != null) {
            element.isHiding = true;
            this.SetIsDragged(index, false);
            this.UpdateWindowsStateInputElement();
            this.UpdateWindowsStateCookie();
            element.isHiding = false;
            if (this.enableAnimation) {
                var stopAnimation = this.popupAnimationType === 'slide' ? _aspxStopAnimation : ASPxAnimationHelper.cancelAnimation;
                stopAnimation(element);
            }
            _aspxSetElementVisibility(element, false);
            _aspxSetElementDisplay(element, false);
            if (this.hideBodyScrollWhenMaximized && this.GetIsMaximized(index))
                _aspxBodyScrollHelper.RestoreBodyScroll();
            this.DoHideWindowModalElement(element);
            this.DoHideWindowIFrame(element);
            aspxGetPopupControlCollection().UnregisterVisibleWindow(element);
            this.HideWindowLoadingPanel(index);
        }
    },
    DoHideWindow: function (index, dontRaiseClosing) {
        if (!this.InternalIsWindowVisible(index)) return;
        var cancel = !dontRaiseClosing && this.RaiseClosing(index);
        if (!cancel) {
            this.DoHideWindowCore(index);
            this.RaiseCloseUp(index);
        }
        return cancel;
    },
    DoHideWindowIFrame: function (element) {
        if (!this.renderIFrameForPopupElements) return;
        var iFrame = element.overflowElement;
        if (iFrame)
            _aspxSetElementDisplay(iFrame, false);
    },
    DoHideWindowModalElement: function (element) {
        var modalElement = element.modalElement;
        if (modalElement) {
            aspxGetPopupControlCollection().UnregisterVisibleModalElement(modalElement);
            if (this.hideBodyScrollWhenModal) {
                if (__aspxWebKitFamily)
                    aspxGetPopupControlCollection().LockScrollEvent();
                _aspxBodyScrollHelper.RestoreBodyScroll();
                if (__aspxWebKitFamily)
                    aspxGetPopupControlCollection().UnlockScrollEvent();
            }
            _aspxSetStyles(modalElement, { width: 1, height: 1 });
            _aspxSetElementVisibility(modalElement, false);
            _aspxSetElementDisplay(modalElement, false);
        }
    },
    SetWindowDisplay: function (index, value) {
        var pcwElement = this.GetWindowElement(index);
        this.SetFFTextCurFixShowing(index, value, false);
        _aspxSetElementDisplay(pcwElement, value);
    },
    GetTextCurFixDiv: function (index) {
        return _aspxGetElementById(this.name + "_" + "TCFix" + index);
    },
    FFTextCurFixShow: function (index, isSetVisibility) {
        this.SetFFTextCurFixShowing(index, true, isSetVisibility);
    },
    FFTextCurFixHide: function (index, isSetVisibility) {
        this.SetFFTextCurFixShowing(index, false, isSetVisibility);
    },
    IsFFTextCurFixRequired: function (index) {
        return __aspxFirefox && __aspxBrowserVersion < 3 && this.GetWindowModalElement(index);
    },
    SetFFTextCurFixShowing: function (index, value, isSetVisibility) {
        if (this.IsFFTextCurFixRequired(index)) {
            var fixDiv = this.GetTextCurFixDiv(index);
            if (fixDiv) {
                if (isSetVisibility)
                    _aspxSetElementVisibility(fixDiv, value);
                _aspxSetElementDisplay(fixDiv, value);
            }
        }
    },
    SetWindowPos: function (index, element, x, y) {
        _aspxSetStyles(element, { left: x, top: y });
        this.DoShowWindowIFrame(index, x, y, __aspxInvalidDimension, __aspxInvalidDimension);
        this.SetIsDragged(index, true);
        this.SetWindowLeft(index, _aspxGetAbsoluteX(element));
        this.SetWindowTop(index, _aspxGetAbsoluteY(element));
        this.UpdateWindowsStateInputElement();
        this.UpdateWindowsStateCookie();
    },
    OnWindowShown: function (windowIndex) {
        this.EnsureContent(windowIndex, false);
        this.RaiseShown(windowIndex);
        var element = this.GetWindowElement(windowIndex);
        if (this.InWindowCallback(windowIndex) && !element.loading) {
            this.ShowWindowLoadingElementsInternal(windowIndex);
        }
    },
    EnsureContent: function (windowIndex, isInit) {
        var element = this.GetWindowElement(windowIndex);
        if (element && !element.loaded && !element.loading) {
            var shouldLoad = this.contentLoadingMode == "OnPageLoad" || this.contentLoadingMode == "OnFirstShow" && !isInit;
            if (shouldLoad) {
                element.loading = true;
                this.CreateWindowCallback(windowIndex, windowIndex);
            } else if (this.contentLoadingMode == "Default")
                element.loaded = true;
        }
    },
    CreateWindowCallback: function (windowIndex, argument) {
        this.IncreaseWindowRequestCount(windowIndex);
        this.ShowWindowLoadingElements(windowIndex);
        this.CreateCallback(argument);
    },
    OnCallback: function (result) {
        this.OnCallbackInternal(result.html, result.index, false);
    },
    OnCallbackError: function (result, data) {
        this.OnCallbackInternal(result, -1, true);
    },
    RaiseCallbackError: function (message) {
        var result = ASPxClientControl.prototype.RaiseCallbackError.call(this, message);
        if (result.isHandled)
            this.HideAllLoadingPanels();
        return result;
    },
    OnCallbackInternal: function (html, windowIndex, isError) {
        var element = this.GetWindowElement(windowIndex);
        element.loaded = !isError;
        element.loading = false;
        this.DecreaseWindowRequestCount(windowIndex);
        this.HideWindowLoadingPanel(windowIndex);
        this.SetWindowContentHtmlCore(windowIndex, html)
        this.savedCallbackWindowIndex = windowIndex;
        this.UpdateWindowsStateInputElement();
        this.UpdateWindowsStateCookie();
    },
    IncreaseWindowRequestCount: function (index) {
        !this.windowRequestCount[index] ? this.windowRequestCount[index] = 1 : this.windowRequestCount[index]++;
    },
    DecreaseWindowRequestCount: function (index) {
        this.windowRequestCount[index]--;
    },
    InWindowCallback: function (windowIndex) {
        return this.windowRequestCount[windowIndex] > 0;
    },
    ShowWindowLoadingElements: function (windowIndex) {
        if (this.lpTimers[windowIndex] && this.lpTimers[windowIndex] > -1) return;
        if (this.enableCallbackAnimation)
            this.StartWindowBeginCallbackAnimation(windowIndex);
        else
            this.ShowWindowLoadingElementsInternal(windowIndex);
    },
    ShowWindowLoadingElementsInternal: function (windowIndex) {
        if (this.lpDelay > 1 && !this.enableCallbackAnimation) {
            var _this = this;
            this.lpTimers[windowIndex] = _aspxSetTimeout(function () { _this.ShowWindowLoadingPanelOnTimer(windowIndex); }, this.lpDelay);
        }
        else
            this.ShowWindowLoadingPanel(windowIndex);
    },
    StartWindowBeginCallbackAnimation: function (windowIndex) {
        this.callbackAnimationProcessings[windowIndex] = true;
        this.isCallbackFinishedStates[windowIndex] = false;
        ASPxAnimationHelper.fadeOut(this.GetWindowContentElement(windowIndex), function () { this.FinishWindowBeginCallbackAnimation(windowIndex); } .aspxBind(this));
    },
    FinishWindowBeginCallbackAnimation: function (windowIndex) {
        this.callbackAnimationProcessings[windowIndex] = false;
        if (!this.isCallbackFinishedStates[windowIndex])
            this.ShowWindowLoadingElementsInternal(windowIndex);
        else
            this.DoCallback(this.savedCallbackResults[windowIndex]);
    },
    CheckBeginCallbackAnimationInProgress: function (callbackResult) {
        var windowIndex = this.EvalCallbackResult(callbackResult).result.index;
        if (this.enableCallbackAnimation && this.callbackAnimationProcessings[windowIndex]) {
            this.savedCallbackResults[windowIndex] = callbackResult;
            this.isCallbackFinishedStates[windowIndex] = true;
            return true;
        }
        return false;
    },
    StartWindowEndCallbackAnimation: function (windowIndex) {
        this.callbackAnimationProcessings[windowIndex] = true;
        ASPxAnimationHelper.fadeIn(this.GetWindowContentElement(windowIndex), function () { this.FinishWindowEndCallbackAnimation(windowIndex); } .aspxBind(this));
    },
    FinishWindowEndCallbackAnimation: function (windowIndex) {
        this.DoEndCallback();
        this.callbackAnimationProcessings[windowIndex] = false;
    },
    CheckEndCallbackAnimationNeeded: function () {
        var windowIndex = this.savedCallbackWindowIndex;
        this.savedCallbackWindowIndex = null;
        if (windowIndex !== null && !this.callbackAnimationProcessings[windowIndex]) {
            this.StartWindowEndCallbackAnimation(windowIndex);
            return true;
        }
        return false;
    },
    CreateLoadingDiv: function (parentElement, offsetElement, windowIndex) {
        if (typeof (windowIndex) != "undefined") {
            var loadingDiv = ASPxClientControl.prototype.CreateLoadingDiv.call(this, parentElement, offsetElement);
            loadingDiv.id += windowIndex;
            return loadingDiv;
        }
    },
    CreateLoadingPanelWithAbsolutePosition: function (parentElement, offsetElement, windowIndex) {
        if (typeof (windowIndex) != "undefined") {
            var loadingPanel = ASPxClientControl.prototype.CreateLoadingPanelWithAbsolutePosition.call(this, parentElement, offsetElement);
            loadingPanel.id += windowIndex;
            return loadingPanel;
        }
    },
    ShowWindowLoadingPanelOnTimer: function (windowIndex) {
        this.ClearWindowLoadingPanelTimer(windowIndex);
        this.ShowWindowLoadingPanel(windowIndex);
    },
    ClearWindowLoadingPanelTimer: function (windowIndex) {
        this.lpTimers[windowIndex] = _aspxClearTimer(this.lpTimers[windowIndex]);
    },
    ShowWindowLoadingPanel: function (windowIndex) {
        if (!this.IsExistLoadingPanel())
            return;
        if (!this.loadingPanels[windowIndex]) {
            var contentElement = this.GetWindowContentWrapperElement(windowIndex);
            this.loadingDivs[windowIndex] = this.CreateLoadingDiv(this.GetWindowElement(windowIndex).parentNode, contentElement, windowIndex);
            this.loadingPanels[windowIndex] = this.CreateLoadingPanelWithAbsolutePosition(this.GetWindowElement(windowIndex).parentNode, contentElement, windowIndex);
        }
    },
    HideAllLoadingPanels: function () {
        if (this.HasDefaultWindow())
            this.HideWindowLoadingPanel(-1);
        for (var i = 0; i < this.GetWindowCount(); i++)
            this.HideWindowLoadingPanel(i);
    },
    HideWindowLoadingPanel: function (windowIndex) {
        this.ClearWindowLoadingPanelTimer(windowIndex);
        if (this.loadingDivs[windowIndex]) {
            _aspxRemoveElement(this.loadingDivs[windowIndex]);
            this.loadingDivs[windowIndex] = null;
        }
        if (this.loadingPanels[windowIndex]) {
            _aspxRemoveElement(this.loadingPanels[windowIndex]);
            this.loadingPanels[windowIndex] = null;
        }
    },
    ShouldHideExistingLoadingElements: function () {
        return false;
    },
    IsLoadingContainerVisible: function () {
        return true;
    },
    IsExistLoadingPanel: function () {
        return !!this.GetLoadingDiv();
    },
    ControlRenderExists: function () {
        if (this.HasDefaultWindow())
            return !!this.GetWindowElement(-1);
        for (var i = 0; i < this.GetWindowCount(); i++)
            if (!this.GetWindowElement(i))
                return false;
        return true;
    },
    PerformCallback: function (parameter) {
        this.PerformWindowCallback(null, parameter);
    },
    PerformWindowCallback: function (window, parameter) {
        parameter = _aspxIsExists(parameter) ? parameter.toString() : ""
        var index = (window != null) ? window.index : -1;
        if (!this.InWindowCallback(index)) {
            var windowCallbackArguments = index + ";" + parameter;
            this.CreateWindowCallback(index, windowCallbackArguments);
        }
    },
    PrepareContentCellForHeigthCorrection: function (windowIndex) {
        if (__aspxIE)
            this.GetWindowContentElement(windowIndex).style.height = "0px";
    },
    CorrectContentCellHeight: function (element, isResizing) {
        if (__aspxIE)
            this.CorrectContentCellHeightIE(element, isResizing);
        if (__aspxOpera)
            this.CorrectContentCellHeightOpera(element, isResizing);
    },
    CorrectContentCellHeightOpera: function (element, isResizing) {
        var index = this.GetWindowIndex(element);
        var contentIFrame = this.GetWindowContentIFrameElement(index);
        if (contentIFrame) {
            contentIFrame.style.height = "0px";
            var contentIFrameDiv = this.GetWindowContentIFrameDivElement(index);
            if (contentIFrameDiv)
                contentIFrameDiv.style.height = "0px";
            var contentCell = this.GetWindowContentElement(index);
            var height = contentCell.clientHeight;
            contentIFrame.style.height = height + "px";
            if (contentIFrameDiv)
                contentIFrameDiv.style.height = contentIFrame.style.height;
            var correction = contentCell.clientHeight - height;
            contentIFrame.style.height = (height - correction) + "px";
            if (contentIFrameDiv)
                contentIFrameDiv.style.height = contentIFrame.style.height;
        }
    },
    CorrectContentCellHeightIE: function (element, isResizing) {
        var index = this.GetWindowIndex(element);
        var clientTable = this.GetWindowClientTable(index);
        var headerCell = this.GetWindowHeaderElement(index);
        var contentCell = this.GetWindowContentElement(index);
        var footerCell = this.GetWindowFooterElement(index);
        var windowMainCell = this.GetWindowMainCell(element);
        var mainCellHeight = windowMainCell.clientHeight - this.GetTwoVerticalPaddingSize(windowMainCell);
        var headerHeight = headerCell ? _aspxGetCeilOffsetHeight(headerCell) : 0;
        var footerHeight = footerCell ? footerCell.offsetHeight : 0;
        if (isResizing) {
            headerHeight = this.GetHeaderHeight(index);
            footerHeight = this.GetFooterHeight(index);
        }
        else {
            this.SetHeaderHeight(index, headerHeight);
            this.SetFooterHeight(index, footerHeight);
        }
        var correctedHeight = Math.max(0, mainCellHeight - headerHeight - footerHeight);
        contentCell.style.height = correctedHeight + "px";
        var verticalsPaddings = contentCell.offsetHeight - correctedHeight;
        contentCell.style.height = correctedHeight - verticalsPaddings + "px";
    },
    GetTwoVerticalPaddingSize: function (element) {
        var heightWithBorders = element.clientHeight;
        var paddingTopBackup = element.style.paddingTop;
        var paddingBottomBackup = element.style.paddingBottom;
        element.style.paddingTop = "0px";
        element.style.paddingBottom = "0px";
        var heightWithoutBorders = element.clientHeight;
        element.style.paddingTop = paddingTopBackup;
        element.style.paddingBottom = paddingBottomBackup;
        return (heightWithBorders - heightWithoutBorders);
    },
    InternalIsWindowVisible: function (index) {
        var element = this.GetWindowElement(index);
        if (!element)
            return false;
        var currentStyle = _aspxGetCurrentStyle(element);
        return ((currentStyle && currentStyle.visibility != "hidden") && _aspxGetElementDisplay(element) ? true : false);
    },
    InternalIsWindowDisplayed: function (index) {
        var element = this.GetWindowElement(index);
        return (element != null) ? _aspxGetElementDisplay(element) : false;
    },
    OnActivate: function (index, evt) {
        var element = this.GetWindowElement(index);
        if (element != null)
            aspxGetPopupControlCollection().ActivateWindowElement(element, evt);
    },
    OnAnimationStop: function (index) {
        this.OnWindowShown(index);
        if (__aspxFirefox)
            this.GetWindowElement(index).style.display = "table";
    },
    OnDragStart: function (evt, index) {
        this.SetIsDragged(index, true);
        this.ShowDragCursor(index);
        if (this.GetWindowContentIFrameElement(index))
            this.HideIframeElementBeforeDragging(index);
        this.InitDragInfo(index, evt);
    },
    InitDragInfo: function (index, evt) {
        var element = this.GetWindowElement(index);
        var gragXOffset = _aspxGetAbsoluteX(element) - _aspxGetEventX(evt);
        var gragYOffset = _aspxGetAbsoluteY(element) - _aspxGetEventY(evt);
        var xClientCorrection = _aspxGetPositionElementOffset(element, true);
        var yClientCorrection = _aspxGetPositionElementOffset(element, false);
        gragXOffset -= xClientCorrection;
        gragYOffset -= yClientCorrection;
        aspxGetPopupControlCollection().InitDragObject(this, index, gragXOffset, gragYOffset, xClientCorrection, yClientCorrection);
    },
    OnDrag: function (index, x, y, xClientCorrection, yClientCorrection) {
        var element = this.GetWindowElement(index);
        if (element != null) {
            _aspxSetStyles(element, { left: x, top: y });
            this.SetWindowLeft(index, x + xClientCorrection);
            this.SetWindowTop(index, y + yClientCorrection);
            var iFrame = element.overflowElement;
            if (iFrame)
                _aspxSetStyles(iFrame, { left: x, top: y });
            if (__aspxOpera)
                _aspxClearSelection();
        }
    },
    OnDragStop: function (index) {
        var element = this.GetWindowElement(index);
        this.HideDragCursor(index);
        this.UpdateWindowsStateInputElement();
        this.UpdateWindowsStateCookie();
        if (this.GetWindowContentIFrameElement(index))
            this.ShowIframeElementAfterDragging(index);
    },
    OnPopupElementMouseOver: function (evt, popupElement) {
        if (popupElement != null) {
            var index = popupElement.DXPopupWindowIndex;
            var isVisible = this.InternalIsWindowVisible(index);
            var popupElementIndex = popupElement.DXPopupElementIndex;
            if (this.GetLastOverPopupElementIndex(index) != popupElementIndex) {
                if (aspxGetPopupControlCollection().IsAppearTimerActive())
                    aspxGetPopupControlCollection().ClearAppearTimer();
                if (aspxGetPopupControlCollection().IsDisappearTimerActive())
                    aspxGetPopupControlCollection().ClearDisappearTimer();
                if (isVisible) {
                    this.DoHideWindow(index);
                    isVisible = false;
                }
            }
            if (!isVisible) {
                aspxGetPopupControlCollection().SetAppearTimer(this.name, index, popupElement.DXPopupElementIndex, this.appearAfter, evt);
                aspxGetPopupControlCollection().InitOverObject(this, index, evt);
            }
            this.SetLastOverPopupElementIndex(index, popupElementIndex);
        }
    },
    OnPopupElementMouseOut: function (evt, popupElement) {
    },
    HideIframeElementBeforeDragging: function (index) {
        var iframeElement = this.GetWindowContentIFrameElement(index);
        if (__aspxIE) {
            this.CreateFakeDragDiv(iframeElement);
            _aspxSetElementDisplay(iframeElement, false);
        } else
            _aspxSetElementVisibility(iframeElement, false);
    },
    ShowIframeElementAfterDragging: function (index) {
        var iframeElement = this.GetWindowContentIFrameElement(index);
        if (this.fakeDragDiv != null) {
            this.RemoveFakeDragDiv(iframeElement);
            _aspxSetElementDisplay(iframeElement, true);
        } else
            _aspxSetElementVisibility(iframeElement, true);
    },
    CreateFakeDragDiv: function (iframe) {
        this.fakeDragDiv = document.createElement("div");
        _aspxSetStyles(this.fakeDragDiv, { width: iframe.offsetWidth, height: iframe.offsetHeight });
        iframe.parentElement.appendChild(this.fakeDragDiv);
    },
    RemoveFakeDragDiv: function (iframe) {
        iframe.parentElement.removeChild(this.fakeDragDiv);
        this.fakeDragDiv = null;
    },
    CreateResizePanel: function (index) {
        var element = this.GetWindowElement(index);
        var mainCell = this.GetWindowMainCell(element);
        var resizePanel = document.createElement("DIV");
        element.parentNode.appendChild(resizePanel);
        resizePanel.style.overflow = "hidden";
        resizePanel.style.position = "absolute";
        resizePanel.style.zIndex = __aspxPopupControlZIndex + aspxGetPopupControlCollection().visiblePopupWindowIds.length * 2 + 2;
        if (!this.isLiveResizingMode)
            resizePanel.style.border = "black 1px dotted";
        return resizePanel;
    },
    OnResizeStart: function (evt, index) {
        if (!aspxGetPopupControlCollection().IsResizeInint()) {
            this.SetIsResized(index, true);
            var cursor = this.CreateResizeCursorInfo(evt, index);
            if (cursor.course != "") {
                var resizePanel = this.CreateResizePanel(index);
                this.UpdateResizeCursor(resizePanel, cursor.verticalDirection, cursor.horizontalDirection);
                aspxGetPopupControlCollection().InitResizeObject(this, index, cursor, resizePanel);
                this.OnResize(evt, index, cursor, resizePanel);
            }
        }
        return aspxGetPopupControlCollection().IsResizeInint();
    },
    OnResize: function (evt, index, cursor, resizePanel) {
        this.OnResizePanelLite(evt, index, cursor, resizePanel);
        if (this.isLiveResizingMode)
            this.OnResizeWindow(index, cursor, resizePanel);
        _aspxClearSelection();
        if (__aspxWebKitTouchUI)
            evt.preventDefault();
        if (this.GetIsPinned(index))
            this.HoldPosition(index, true, resizePanel);
    },
    OnResizePanelLite: function (evt, index, cursor, resizePanel) {
        var x = _aspxGetEventX(evt);
        var y = _aspxGetEventY(evt);
        var element = this.GetWindowElement(index);
        if (__aspxIE && __aspxBrowserVersion >= 10) {
            x = Math.round(x);
            y = Math.round(y);
        }
        var newLeft = _aspxGetAbsoluteX(element);
        var newTop = _aspxGetAbsoluteY(element);
        var newWidth = element.offsetWidth;
        var newHeight = element.offsetHeight;
        if (cursor.verticalDirection == "n") {
            if (!this.fixedBottom)
                this.fixedBottom = newTop + newHeight;
            newHeight = newHeight + (newTop - y) + cursor.verticalOffset;
            newTop = y - cursor.verticalOffset;
        }
        if (cursor.verticalDirection == "s") {
            newHeight = newHeight + (y - (newTop + newHeight)) + cursor.verticalOffset;
            this.fixedBottom = null;
        }
        if (cursor.horizontalDirection == "w") {
            if (!this.fixedRight)
                this.fixedRight = newLeft + newWidth;
            newWidth = newWidth + (newLeft - x) + cursor.horizontalOffset;
            newLeft = x - cursor.horizontalOffset;
        }
        if (cursor.horizontalDirection == "e") {
            newWidth = newWidth + (x - (newLeft + newWidth)) + cursor.horizontalOffset;
            this.fixedRight = null;
        }
        if (newWidth > 0 && newHeight > 0) {
            var minWidth = this.GetWindowMinWidth(index);
            var maxWidth = this.GetWindowMaxWidth(index);
            if (minWidth && newWidth < minWidth)
                newWidth = minWidth;
            if (maxWidth && newWidth > maxWidth)
                newWidth = maxWidth;
            var minHeight = this.GetWindowMinHeight(index);
            var maxHeight = this.GetWindowMaxHeight(index);
            if (minHeight && newHeight < minHeight)
                newHeight = minHeight;
            if (maxHeight && newHeight > maxHeight)
                newHeight = maxHeight;
            newLeft = _aspxPrepareClientPosForElement(newLeft, element, true);
            newTop = _aspxPrepareClientPosForElement(newTop, element, false);
            if (__aspxIE && __aspxBrowserVersion >= 10) {
                newLeft = Math.round(newLeft);
                newTop = Math.round(newTop);
                newHeight = Math.round(newHeight);
                newWidth = Math.round(newWidth);
            }
            _aspxSetStyles(resizePanel, {
                left: newLeft, top: newTop,
                width: newWidth, height: newHeight
            });
            this.SetWindowLeft(index, _aspxGetAbsoluteX(element));
            this.SetWindowTop(index, _aspxGetAbsoluteY(element));
        }
    },
    OnResizeWindow: function (index, cursor, resizePanel) {
        var windowElement = this.GetWindowElement(index);
        var left = _aspxGetAbsoluteX(resizePanel);
        var top = _aspxGetAbsoluteY(resizePanel);
        this.SetClientWindowSizeLite(index, resizePanel.offsetWidth, resizePanel.offsetHeight);
        var bottom = top + windowElement.offsetHeight;
        var right = left + windowElement.offsetWidth;
        if (this.fixedBottom && (bottom > this.fixedBottom || bottom < this.fixedBottom))
            top = this.fixedBottom - windowElement.offsetHeight;
        if (this.fixedRight && (right > this.fixedRight || right < this.fixedRight))
            left = this.fixedRight - windowElement.offsetWidth;
        this.fixedBottom = null;
        this.fixedRight = null;
        var styleLeft = _aspxPrepareClientPosForElement(left, windowElement, true);
        var styleTop = _aspxPrepareClientPosForElement(top, windowElement, false);
        if (__aspxIE && __aspxBrowserVersion >= 10) {
            styleLeft = Math.round(styleLeft);
            styleTop = Math.round(styleTop);
        }
        _aspxSetStyles(windowElement, {
            left: styleLeft,
            top: styleTop
        });
        if (this.InternalIsWindowVisible(index))
            this.DoShowWindowIFrame(index, left, top, __aspxInvalidDimension, __aspxInvalidDimension);
        this.CorrectElementVerticalAlignment(_aspxAdjustVerticalMarginsInContainer, this.GetWindowHeaderElement(index), true);
    },
    OnResizeStop: function (evt, index, cursor, resizePanel) {
        if (this.allowResize) {
            if (!this.isLiveResizingMode) {
                var windowElement = this.GetWindowElement(index);
                aspxGetControlCollection().CollapseControls(windowElement);
                this.OnResizeWindow(index, cursor, resizePanel);
            }
            this.CreateResizeCursorInfo(evt, index);
            this.UpdateWindowsStateInputElement();
            this.UpdateWindowsStateCookie();
            this.RaiseResize(index);
            if (!this.isLiveResizingMode)
                aspxGetControlCollection().AdjustControls(windowElement);
            this.SetWindowCachedSize(index, this.GetClientWindowWidth(index), this.GetClientWindowHeight(index));
        }
    },
    OnMouseDownModalElement: function (evt, index) {
        aspxGetPopupControlCollection().DoHideAllWindows(_aspxGetEventSource(evt), "", false);
        this.SetIsPopuped(index, true)
    },
    IsRaiseAfterResizingLocked: function () {
        return this.CollapseExecuting() || this.MaximizationExecuting();
    },
    SetClientWindowSizeLite: function (index, width, height) {
        this.RaiseBeforeResizing(index);
        this.SetClientWindowSizeCoreLite(index, width, height);
        if (!this.IsRaiseAfterResizingLocked())
            this.RaiseAfterResizing(index);
    },
    HasAnyScrollBars: function (index) {
        var contentElement = this.GetWindowContentElement(index);
        var hasBothScrollBars = contentElement.style.overflow == "scroll" || contentElement.style.overflow == "auto";
        return hasBothScrollBars || contentElement.style.overflowX == "scroll" ||
    contentElement.style.overflowY == "scroll" || contentElement.style.overflowX == "auto" ||
    contentElement.style.overflowY == "auto";
    },
    SetClientWindowSizeCoreLite: function (index, width, height) {
        var contentUrl = this.GetWindowContentIFrameUrl(index);
        var needToHideContent = !contentUrl;
        var element = this.GetWindowElement(index);
        var contentWrapper = this.GetWindowContentWrapperElement(index);
        var contentElement = this.GetWindowContentElement(index);
        if (__aspxIE) {
            var scrollTop = contentElement.scrollTop;
            var scrollLeft = contentElement.scrollLeft;
        }
        contentWrapper.style.height = "";
        contentWrapper.style.width = "";
        contentElement.style.height = "";
        contentElement.style.width = "";
        if (needToHideContent) {
            if (__aspxIE && __aspxBrowserMajorVersion >= 7) {
                var contentElementChildren = contentElement.getElementsByTagName("*"),
     contentElementChildrenScroll = [];
                for (var i = 0; i < contentElementChildren.length; i++) {
                    var child = contentElementChildren[i];
                    if (!!child.scrollLeft || !!child.scrollTop)
                        contentElementChildrenScroll.push([i, child.scrollLeft, child.scrollTop]);
                }
            }
            contentElement.style.display = "none";
        }
        var hasAnyScrollBars = this.HasAnyScrollBars(index);
        var elementsDisplayValue = (width || height) && hasAnyScrollBars || this.IsOldIE() ? "block" : "table";
        element.style.display = elementsDisplayValue;
        if (!this.GetIsCollapsed(index))
            contentWrapper.style.display = elementsDisplayValue;
        if (typeof (width) != "undefined") {
            var actualWidth = width - _aspxGetLeftRightBordersAndPaddingsSummaryValue(element);
            if (actualWidth < 0)
                actualWidth = 0;
            element.style.width = actualWidth + "px";
            if (element.offsetWidth != width) {
                actualWidth += (width - element.offsetWidth);
                if (actualWidth < 0) actualWidth = 0;
                element.style.width = actualWidth + "px";
            }
            if (__aspxWebKitFamily && hasAnyScrollBars) {
                var mainDiv = this.GetWindowMainCell(element);
                var dxpcMainDiv = _aspxGetDescendantNodesByClassName(mainDiv, "dxpc-mainDiv")[0];
                var dxpcMainDivBordersAndPaddings = dxpcMainDiv ? _aspxGetLeftRightBordersAndPaddingsSummaryValue(dxpcMainDiv) : 0;
                contentWrapper.style.width = width - _aspxGetLeftRightBordersAndPaddingsSummaryValue(mainDiv) - dxpcMainDivBordersAndPaddings + "px";
            }
        }
        if (typeof (height) != "undefined") {
            var actualHeight = height - _aspxGetTopBottomBordersAndPaddingsSummaryValue(element);
            if (actualHeight < 0)
                actualHeight = 0;
            element.style.height = actualHeight + "px";
            if (element.offsetHeight != height) {
                actualHeight += (height - element.offsetHeight);
                if (actualHeight < 0) actualHeight = 0;
                element.style.height = actualHeight + "px";
            }
        }
        this.CorrectWindowSizeGripPositionLite(index);
        this.SetContentWrapperHeightLite(index);
        var correctContentElementSize = hasAnyScrollBars || contentElement.style.overflow == "hidden" || contentElement.style.overflowX == "hidden" || contentElement.style.overflowY == "hidden";
        if ((correctContentElementSize || contentUrl) && _aspxIsExists(height)) {
            var contentHeight = _aspxGetClearClientHeight(contentWrapper) -
    _aspxGetTopBottomBordersAndPaddingsSummaryValue(contentElement);
            if (contentHeight < 0)
                contentHeight = 0;
            contentElement.style.height = contentHeight + "px";
        }
        if (correctContentElementSize && _aspxIsExists(width))
            _aspxSetOffsetWidth(contentElement, _aspxGetClearClientWidth(contentWrapper));
        contentElement.style.display = "block";
        if (_aspxIsExists(contentElementChildrenScroll) && contentElementChildrenScroll.length > 0) {
            for (var i = 0; i < contentElementChildrenScroll.length; i++) {
                var childScroll = contentElementChildrenScroll[i],
     childIndex = childScroll[0],
     childScrollLeft = childScroll[1],
     childScrollTop = childScroll[2];
                if (!!childScrollLeft)
                    contentElementChildren[childIndex].scrollLeft = childScrollLeft;
                if (!!childScrollTop)
                    contentElementChildren[childIndex].scrollTop = childScrollTop;
            }
        }
        if (__aspxIE) {
            contentElement.scrollTop = scrollTop;
            contentElement.scrollLeft = scrollLeft;
        }
        this.SetWindowWidth(index, width);
        this.SetWindowHeight(index, height);
    },
    SetContentWrapperHeightLite: function (index) {
        var windowElem = this.GetWindowElement(index);
        if (!windowElem.style.height || _aspxIsPercentageSize(windowElem.style.height))
            return;
        var borderOwner;
        if (_aspxElementHasCssClass(windowElem, ASPxClientPopupControlCssClasses.MainDivLiteCssClass))
            borderOwner = windowElem;
        else
            borderOwner = _aspxGetDescendantNodesByClassName(windowElem, ASPxClientPopupControlCssClasses.MainDivLiteCssClass)[0];
        var height = windowElem.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(borderOwner);
        if (this.IsOldIE() && height == 1)
            height = 0;
        var extenders = [
   this.GetWindowHeaderElement(index),
   this.GetWindowFooterElement(index)
  ];
        for (var i = 0; i < extenders.length; i++) {
            if (extenders[i])
                height -= extenders[i].offsetHeight;
        }
        var contentWrapper = this.GetWindowContentWrapperElement(index);
        if (height > 0)
            contentWrapper.style.height = height + "px";
    },
    GetWindowContentWrapperElement: function (index) {
        var windowElem = this.GetWindowElement(index);
        return _aspxGetDescendantNodesByClassName(windowElem, "dxpc-contentWrapper")[0];
    },
    SetWindowScrollDivSize: function (scrollDiv, index, dimension) {
        var windowClientTable = this.GetWindowClientTable(index);
        var headerElement = this.GetWindowHeaderElement(index);
        var height = windowClientTable.offsetHeight;
        if (headerElement)
            height -= headerElement.offsetHeight;
        height -= this.GetWindowFooterHeightLite(index);
        if (dimension == 'height' || dimension == 'both')
            _aspxSetOffsetHeight(scrollDiv, height);
        if (dimension == 'width' || dimension == 'both') {
            var width = windowClientTable.offsetWidth;
            var contentElement = this.GetWindowContentElement(index);
            width -= _aspxGetLeftRightBordersAndPaddingsSummaryValue(scrollDiv) + _aspxGetHorizontalBordersWidth(contentElement);
            if (width > -1)
                scrollDiv.style.width = width + "px";
        }
        scrollDiv.style.marginRight = "0px";
    },
    CorrectWindowSizeGripPositionLite: function (index) {
        var sizeGrip = this.GetWindowSizeGripElement(index);
        if (!sizeGrip || sizeGrip.corrected) return;
        if (this.rtl)
            sizeGrip.style.marginRight = "-" + sizeGrip.offsetWidth + "px";
        else
            sizeGrip.style.marginLeft = "-" + sizeGrip.offsetWidth + "px";
        sizeGrip.style.marginTop = "-" + sizeGrip.offsetHeight + "px";
        sizeGrip.corrected = true;
    },
    GetIsSafariGreater4OrChromeGreater2: function () {
        return (__aspxSafari && __aspxBrowserVersion >= 4) || (__aspxChrome && __aspxBrowserVersion >= 2);
    },
    SetWindowCachedSize: function (index, width, height) {
        if (0 <= index && index < this.heightArray.length)
            this.cachedSizeArray[index] = new _aspxSize(width, height);
        else
            this.cachedSize = new _aspxSize(width, height);
    },
    GetWindowCachedSize: function (index) {
        if (0 <= index && index < this.heightArray.length)
            return this.cachedSizeArray[index];
        else
            return this.cachedSize;
    },
    ResetWindowCachedSize: function (index) {
        if (0 <= index && index < this.heightArray.length)
            this.cachedSizeArray[index] = null;
        else
            this.cachedSize = null;
    },
    SetWindowSizeByIndex: function (index, width, height) {
        var minWidth = this.GetWindowMinWidth(index);
        var minHeight = this.GetWindowMinHeight(index);
        var maxWidth = this.GetWindowMaxWidth(index);
        var maxHeight = this.GetWindowMaxHeight(index);
        if (minWidth)
            width = Math.max(width, minWidth);
        if (minHeight)
            height = Math.max(height, minHeight);
        if (maxWidth)
            width = Math.min(width, maxWidth);
        if (maxHeight)
            height = Math.min(height, maxHeight);
        var isWindowMaximized = this.GetIsMaximized(index);
        var isWindowCollapsed = this.GetIsCollapsed(index);
        var isWindowMaximizedAndCollapsed = (isWindowMaximized && isWindowCollapsed);
        if (this.InternalIsWindowDisplayed(index) && (!isWindowMaximizedAndCollapsed || this.ResizingForMaxWindowLocked())) {
            if (!this.CollapseExecuting() && !this.MaximizationExecuting() && !this.ResizingForMaxWindowLocked()) {
                this.SetWindowCachedSize(index, width, height);
                this.SetIsResized(index, true);
            }
            if (isWindowCollapsed && !this.MaximizationExecuting() && !this.ResizingForMaxWindowLocked()) {
                this.SetWindowCachedSize(index, width, height);
                this.UpdateRestoredWindowSize(index, width, height);
                height = 0;
            }
            if (isWindowMaximized && !this.CollapseExecuting() && !this.ResizingForMaxWindowLocked()) {
                this.SetWindowCachedSize(index, width, height);
                this.UpdateRestoredWindowSize(index, width, height);
            } else {
                this.SetWindowSizeByIndexCore(index, width, height, isWindowCollapsed);
            }
        } else
            this.SetWindowCachedSize(index, width, height);
    },
    SetWindowSizeByIndexCore: function (index, width, height, isWindowCollapsed) {
        this.SetClientWindowSizeLite(index, width, height);
        var iFrame = this.GetWindowIFrame(index);
        if (iFrame && !isWindowCollapsed) {
            var winElememnt = this.GetWindowElement(index);
            var realWidth = winElememnt.offsetWidth;
            var realHeight = winElememnt.offsetHeight;
            _aspxSetStyles(iFrame, { width: realWidth, height: realHeight });
        }
        this.UpdateWindowsStateInputElement();
        this.UpdateWindowsStateCookie();
    },
    CreateResizeCursorInfo: function (evt, index) {
        var element = this.GetWindowElement(index);
        var mainCell = this.GetWindowMainCell(element);
        var clientWindow = this.GetWindowClientTable(index);
        var headerElement = this.GetWindowHeaderElement(index);
        var left = _aspxGetAbsoluteX(mainCell);
        var top = _aspxGetAbsoluteY(mainCell);
        var x = _aspxGetEventX(evt);
        var y = _aspxGetEventY(evt);
        var mainCellWidth = mainCell.offsetWidth;
        var mainCellHeight = mainCell.offsetHeight;
        var leftOffset = Math.abs(x - left);
        var rightOffset = Math.abs(x - left - mainCellWidth);
        var topOffset = Math.abs(y - top);
        var bottomOffset = Math.abs(y - top - mainCellHeight);
        var cursorInfo = this.CreateResizeBorderCursorInfo(index, leftOffset, rightOffset, topOffset, bottomOffset);
        var grip = this.GetWindowSizeGripElement(index);
        if (grip) {
            var gripCursorInfo = this.CreateGripCursorInfo(index, mainCell, grip, leftOffset, rightOffset, bottomOffset);
            if (gripCursorInfo)
                cursorInfo = gripCursorInfo;
        }
        this.UpdateResizeCursor(clientWindow, cursorInfo.verticalDirection, cursorInfo.horizontalDirection);
        this.UpdateResizeCursor(mainCell, cursorInfo.verticalDirection, cursorInfo.horizontalDirection);
        if (headerElement)
            this.UpdateResizeCursor(headerElement, cursorInfo.verticalDirection, cursorInfo.horizontalDirection);
        return cursorInfo;
    },
    CreateGripCursorInfo: function (index, mainCell, grip, leftOffset, rightOffset, bottomOffset) {
        var gripWidth = this.rtl
   ? _aspxGetAbsoluteX(grip) - _aspxGetAbsoluteX(mainCell) + grip.offsetWidth
   : mainCell.offsetWidth - (_aspxGetAbsoluteX(grip) - _aspxGetAbsoluteX(mainCell));
        var gripHeight = mainCell.offsetHeight - (_aspxGetAbsoluteY(grip) - _aspxGetAbsoluteY(mainCell));
        if (gripHeight > bottomOffset) {
            if (this.rtl && gripWidth > leftOffset)
                return new ASPxPCResizeCursorInfo("w", "s", leftOffset, bottomOffset);
            if (gripWidth > rightOffset)
                return new ASPxPCResizeCursorInfo("e", "s", rightOffset, bottomOffset);
        }
        return null;
    },
    CreateResizeBorderCursorInfo: function (index, leftOffset, rightOffset, topOffset, bottomOffset) {
        var ResizeBorderSize = this.ResizeBorderSize;
        var verticalDirection = this.GetResizeVerticalCourse(ResizeBorderSize, topOffset, bottomOffset);
        ResizeBorderSize = verticalDirection != "" ? this.ResizeCornerBorderSize : this.ResizeBorderSize;
        var horizontalDirection = this.GetResizeHorizontalCourse(ResizeBorderSize, leftOffset, rightOffset);
        if (verticalDirection == "" && horizontalDirection != "")
            verticalDirection = this.GetResizeVerticalCourse(this.ResizeCornerBorderSize, topOffset, bottomOffset);
        var horizontalOffset = leftOffset < rightOffset ? leftOffset : rightOffset;
        var verticalOffset = topOffset < bottomOffset ? topOffset : bottomOffset;
        return new ASPxPCResizeCursorInfo(horizontalDirection, verticalDirection, horizontalOffset, verticalOffset);
    },
    GetResizeVerticalCourse: function (ResizeBorderSize, topOffset, bottomOffset) {
        if (ResizeBorderSize > topOffset) return "n";
        if (ResizeBorderSize > bottomOffset) return "s";
        return "";
    },
    GetResizeHorizontalCourse: function (ResizeBorderSize, leftOffset, rightOffset) {
        if (ResizeBorderSize > leftOffset) return "w";
        if (ResizeBorderSize > rightOffset) return "e";
        return "";
    },
    UpdateResizeCursor: function (element, verticalDirection, horizontalDirection) {
        var cursor = verticalDirection + horizontalDirection;
        if (cursor != "") {
            cursor += "-resize";
            this.ShowTemporaryCursor(element, cursor);
        }
        else
            this.HideTemporaryCursor(element);
    },
    ShowTemporaryCursor: function (element, cursor) {
        _aspxChangeStyleAttribute(element, "cursor", cursor);
    },
    HideTemporaryCursor: function (element) {
        _aspxRestoreStyleAttribute(element, "cursor");
    },
    ResizeWindowIFrame: function (index) {
        if (!this.renderIFrameForPopupElements) return;
        if (!this.InternalIsWindowVisible(index)) return;
        var iFrame = this.GetWindowIFrame(index);
        if (iFrame) {
            var cell = this.GetWindowMainCell(this.GetWindowElement(index));
            _aspxSetStyles(iFrame, { width: cell.offsetWidth, height: cell.offsetHeight });
        }
    },
    GetContentIFrameWindow: function () {
        var iframeElement = this.GetContentIFrame();
        return iframeElement.contentWindow;
    },
    ShowDragCursor: function (index) {
        var dragElement = this.GetDragElement(index);
        if (dragElement)
            this.ShowTemporaryCursor(dragElement, "move");
    },
    HideDragCursor: function (index) {
        var dragElement = this.GetDragElement(index);
        if (dragElement != null)
            this.HideTemporaryCursor(dragElement);
    },
    GetDragElement: function (index) {
        var headerElement = this.GetWindowHeaderElement(index);
        var element = this.GetWindowElement(index);
        if (element != null)
            return (headerElement != null ? headerElement : this.GetWindowMainCell(element));
        return null;
    },
    OnActivateMouseDown: function (evt, index) {
        this.OnActivate(index, evt);
    },
    OnCloseButtonClick: function (index) {
        this.RaiseCloseButtonClick(index);
        if (this.GetWindowCloseAction(index) != "None")
            this.DoHideWindow(index);
    },
    OnRefreshButtonClick: function (index) {
        var contentIFrame = this.GetWindowContentIFrameElement(index);
        if (contentIFrame)
            this.RefreshWindowContentUrl(this.GetWindow(index));
        else
            this.PerformWindowCallback(this.GetWindow(index));
    },
    OnPinButtonClick: function (index) {
        var value = this.GetIsPinned(index);
        this.SetPinCore(index, !value);
    },
    SetPinCore: function (index, value) {
        if (this.GetIsPinned(index) != value) {
            this.SetIsPinned(index, value);
            this.HoldPosition(index, value);
            this.UpdateWindowsStateInputElement();
            this.UpdateWindowsStateCookie();
            this.OnPinned(index, value);
        }
    },
    OnPinned: function (index, pinned) {
        this.RaisePinnedChanged(index, pinned);
    },
    HoldPosition: function (index, hold, element) {
        if (hold) {
            var element = element || this.GetWindowElement(index);
            if (!element) return;
            var x = _aspxGetAbsoluteX(element);
            var y = _aspxGetAbsoluteY(element);
            scrollX = _aspxGetDocumentScrollLeft();
            scrollY = _aspxGetDocumentScrollTop();
            this.SetPinPosX(index, x - scrollX);
            this.SetPinPosY(index, y - scrollY);
        }
        this.UpdateHeaderButtonSelected(index, "GetWindowPinButton", hold);
        this.CheckHeaderCursor(index);
    },
    GetBodyWidth: function () {
        return aspxGetPopupControlCollection().GetSavedBodyWidth();
    },
    GetBodyHeight: function () {
        return aspxGetPopupControlCollection().GetSavedBodyHeight();
    },
    GetIsOutFromViewPort: function (index) {
        var element = this.GetWindowElement(index);
        if (!element) return false;
        var pinXTarget = this.GetPinPosX(index);
        var pinYTarget = this.GetPinPosY(index);
        var popupWindowWidth = this.GetClientWindowWidth(index);
        var docClientWidth = _aspxGetDocumentClientWidth();
        var rightOutOffset = (pinXTarget + popupWindowWidth) - docClientWidth;
        var popupWindowHeight = this.GetClientWindowHeight(index);
        var docClientHeight = _aspxGetDocumentClientHeight();
        var bottomOutOffset = (pinYTarget + popupWindowHeight) - docClientHeight;
        return (rightOutOffset > 0 || bottomOutOffset > 0);
    },
    AdjustPinPositionWhileScroll: function (index) {
        var element = this.GetWindowElement(index);
        if (!element) return;
        var x = _aspxGetAbsoluteX(element);
        var y = _aspxGetAbsoluteY(element);
        var scrollX = _aspxGetDocumentScrollLeft();
        var scrollY = _aspxGetDocumentScrollTop();
        var pinX = x - scrollX;
        var pinY = y - scrollY;
        var pinXTarget = this.GetPinPosX(index);
        var pinYTarget = this.GetPinPosY(index);
        if ((pinX != pinXTarget) || (pinY != pinYTarget)) {
            this.lockScroll++;
            var xNew = pinXTarget + scrollX;
            var yNew = pinYTarget + scrollY;
            var bodyWidth = this.GetBodyWidth();
            var bodyHeight = this.GetBodyHeight();
            var popupWindowWidth = this.GetClientWindowWidth(index);
            var docClientWidth = _aspxGetDocumentClientWidth();
            var rightOutOffset = (pinXTarget + popupWindowWidth) - docClientWidth;
            var popupWindowHeight = this.GetClientWindowHeight(index);
            var docClientHeight = _aspxGetDocumentClientHeight();
            var bottomOutOffset = (pinYTarget + popupWindowHeight) - docClientHeight;
            var cancelScrollX = false;
            if (xNew + (popupWindowWidth - rightOutOffset) > bodyWidth) {
                xNew -= (xNew + (popupWindowWidth - rightOutOffset) - bodyWidth);
                cancelScrollX = true;
            }
            var cancelScrollY = false;
            if (yNew + (popupWindowHeight - bottomOutOffset) > bodyHeight) {
                yNew -= (yNew + (popupWindowHeight - bottomOutOffset) - bodyHeight);
                cancelScrollY = true;
            }
            xNew = _aspxPrepareClientPosForElement(xNew, element, true);
            yNew = _aspxPrepareClientPosForElement(yNew, element, false);
            this.SetWindowPos(index, element, xNew, yNew);
            if (cancelScrollX) {
                var scrollLeftMax = bodyWidth - _aspxGetDocumentClientWidth();
                if ((rightOutOffset > 0) && (scrollX > scrollLeftMax)) {
                    this.lockScroll++;
                    _aspxSetDocumentScrollLeft(scrollLeftMax);
                    this.lockScroll--;
                }
            }
            if (cancelScrollY) {
                var scrollTopMax = bodyHeight - _aspxGetDocumentClientHeight();
                if ((bottomOutOffset > 0) && (scrollY > scrollTopMax)) {
                    this.lockScroll++;
                    _aspxSetDocumentScrollTop(scrollTopMax);
                    this.lockScroll--;
                }
            }
            this.lockScroll--;
        }
    },
    OnScroll: function (evt, index) {
        if (!this.GetIsPinned(index) || (this.lockScroll > 0)) return;
        this.AdjustPinPositionWhileScroll(index);
    },
    OnCollapseButtonClick: function (index) {
        this.SetCollapsedCore(index, !this.GetIsCollapsed(index));
    },
    SetCollapsedCore: function (index, minimization) {
        if (this.GetIsCollapsed(index) == minimization) return;
        this.DoCollapse(index, minimization);
        this.OnCollapsed(index, minimization);
    },
    DoCollapse: function (index, minimization) {
        if (this.GetIsCollapsed(index) == minimization) return;
        this.StartCollapse();
        if (minimization) {
            var cachedWidth = this.GetClientWindowWidth(index);
            var cachedHeight = this.GetClientWindowHeight(index);
            var shouldUpdateRestoredSize = this.ShoulUpdatedRestoredWindowSizeOnCollapse(index);
            var width = this.GetMainWindowWidth(index, !shouldUpdateRestoredSize);
            var height = this.GetMainWindowHeight(index, !shouldUpdateRestoredSize);
            this.SetWindowSizeByIndex(index, width, 0);
            this.SetWindowContentVisible(index, false);
            this.SetWindowFooterVisible(index, false);
            var element = this.GetWindowElement(index);
            if (element)
                element.style.height = "";
            this.SetIsCollapsed(index, minimization);
            this.SetWindowCachedSize(index, cachedWidth, cachedHeight);
            if (shouldUpdateRestoredSize)
                this.UpdateRestoredWindowSize(index, width, height);
        }
        else {
            if (this.MaximizationExecuting()) {
                var element = this.GetWindowElement(index);
                if (element) {
                    element.style.left = _aspxGetDocumentScrollLeft();
                    element.style.top = _aspxGetDocumentScrollTop();
                }
            }
            this.SetWindowContentVisible(index, true);
            this.SetWindowFooterVisible(index, true);
            this.SetIsCollapsed(index, minimization);
            if (this.GetIsMaximized(index)) {
                var documentClientWidth = _aspxGetDocumentClientWidthForPopup();
                var documentClientHeight = _aspxGetDocumentClientHeight();
                this.SetWindowSizeByIndex(index, documentClientWidth, documentClientHeight);
            } else {
                var restoredWindowData = this.GetRestoredWindowData(index);
                this.SetWindowSizeByIndex(index, restoredWindowData.width, restoredWindowData.height);
            }
        }
        this.UpdateHeaderButtonSelected(index, "GetWindowCollapseButton", minimization);
        this.EndCollapse();
        this.UpdateWindowsStateInputElement();
        this.UpdateWindowsStateCookie();
    },
    ShoulUpdatedRestoredWindowSizeOnCollapse: function (index) {
        return !this.GetIsMaximized(index);
    },
    OnCollapsed: function (index, value) {
        if (value)
            this.RaiseCollapsed(index);
        else
            this.RaiseExpanded(index);
        this.RaiseAfterResizing(index);
    },
    OnMaximizeButtonClick: function (index) {
        this.SetMaximizedCore(index, !this.GetIsMaximized(index));
    },
    SetMaximizedCore: function (index, maximization) {
        if (this.GetIsMaximized(index) == maximization) return;
        this.DoMaximize(index, maximization);
        this.OnMaximizedChanged(index, maximization);
    },
    DoMaximize: function (index, maximization) {
        if (this.GetIsMaximized(index) == maximization) return;
        var element = this.GetWindowElement(index);
        if (!element) return;
        this.StartMaximization();
        if (maximization) {
            if (this.hideBodyScrollWhenMaximized)
                _aspxBodyScrollHelper.HideBodyScroll();
            if (this.GetIsCollapsed(index))
                this.DoCollapse(index, false);
            var cachedWidth = this.GetClientWindowWidth(index);
            var cachedHeight = this.GetClientWindowHeight(index);
            var restoredWindowData = this.GetInitRestoredWindowData(index);
            var documentClientWidth = _aspxGetDocumentClientWidthForPopup();
            var documentClientHeight = _aspxGetDocumentClientHeight();
            var currentStyle = _aspxGetCurrentStyle(element);
            var windowClientTable = this.GetWindowClientTable(index);
            var windowClientTableParent = windowClientTable.parentNode;
            childStyle = _aspxGetCurrentStyle(windowClientTableParent);
            var left = _aspxPrepareClientPosForElement(_aspxGetDocumentScrollLeft(), element, true);
            var top = _aspxPrepareClientPosForElement(_aspxGetDocumentScrollTop(), element, false);
            this.SetWindowPos(index, element, left, top);
            this.SetWindowSizeByIndex(index, documentClientWidth, documentClientHeight);
            this.SetWindowCachedSize(index, cachedWidth, cachedHeight);
            this.SetRestoredWindowData(index, restoredWindowData);
            this.SetIsMaximized(index, maximization);
        }
        else {
            var restoredWindowData = this.GetRestoredWindowData(index);
            var width = restoredWindowData.width || this.GetMainWindowWidth(index);
            var height = restoredWindowData.height || this.GetMainWindowHeight(index);
            this.SetIsMaximized(index, maximization);
            var left = _aspxPrepareClientPosForElement(restoredWindowData.left, element, true);
            var top = _aspxPrepareClientPosForElement(restoredWindowData.top, element, false);
            this.SetWindowPos(index, element, left, top);
            this.SetWindowSizeByIndex(index, width, height);
            if (this.GetIsCollapsed(index)) {
                this.SetIsCollapsed(index, false);
                this.DoCollapse(index, true);
            }
            if (this.hideBodyScrollWhenMaximized)
                _aspxBodyScrollHelper.RestoreBodyScroll();
        }
        if (this.GetIsPinned(index))
            this.HoldPosition(index, true, element);
        this.UpdateHeaderButtonSelected(index, "GetWindowMaximizeButton", maximization);
        this.EndMaximization();
        this.UpdateWindowsStateInputElement();
        this.UpdateWindowsStateCookie();
        this.CheckHeaderCursor(index);
    },
    OnMaximizedChanged: function (index, value) {
        if (value)
            this.RaiseMaximized(index);
        else
            this.RaiseRestoredAfterMaximized(index);
        this.RaiseAfterResizing(index);
    },
    GetInitRestoredWindowData: function (index) {
        var restoredWindowData = this.GetRestoredWindowData(index);
        restoredWindowData.left = this.GetCurrentLeft(index);
        restoredWindowData.top = this.GetCurrentTop(index);
        restoredWindowData.width = this.GetMainWindowWidth(index);
        restoredWindowData.height = this.GetMainWindowHeight(index);
        return restoredWindowData;
    },
    UpdateMaximizedWindowSizeOnResize: function (index) {
        this.StartUpdateMaximizedWindowSizeOnResize();
        var documentClientWidth = _aspxGetDocumentClientWidthForPopup();
        var documentClientHeight = _aspxGetDocumentClientHeight();
        if (this.GetIsCollapsed(index)) documentClientHeight = 0;
        this.SetWindowSizeByIndex(index, documentClientWidth, documentClientHeight);
        if (this.GetIsCollapsed(index)) {
            this.CorrectCollapsedSize(index);
        }
        window.setTimeout(function () { this.SetMaximizedWindowSizeAfterOnResize(index); } .aspxBind(this), 0);
        this.EndUpdateMaximizedWindowSizeOnResize();
    },
    SetMaximizedWindowSizeAfterOnResize: function (index) {
        this.StartUpdateMaximizedWindowSizeOnResize();
        var documentClientWidth = _aspxGetDocumentClientWidthForPopup();
        var documentClientHeight = _aspxGetDocumentClientHeight();
        windowWidthCurrent = this.GetMainWindowWidth(index, true);
        windowHeightCurrent = this.GetMainWindowHeight(index, true);
        if (this.GetIsCollapsed(index))
            documentClientHeight = 0;
        if (documentClientWidth != windowWidthCurrent || documentClientHeight != windowHeightCurrent) {
            this.SetWindowSizeByIndex(index, documentClientWidth, documentClientHeight);
            if (this.GetIsCollapsed(index)) {
                this.CorrectCollapsedSize(index);
            }
        }
        this.EndUpdateMaximizedWindowSizeOnResize();
    },
    CorrectCollapsedSize: function (index) {
        var contentWrapper = this.GetWindowContentWrapperElement(index);
        if (contentWrapper && _aspxElementIsVisible(contentWrapper))
            contentWrapper.style.display = 'none';
    },
    UpdateHeaderButtonSelected: function (index, methodGetWindowButton, flagSelected) {
        if (typeof (aspxGetStateController) != "undefined") {
            button = this[methodGetWindowButton](index);
            var method = flagSelected ? "SelectElementBySrcElement" : "DeselectElementBySrcElement";
            aspxGetStateController()[method](button);
        }
    },
    CheckHeaderCursor: function (index) {
        if (!this.allowDragging) return;
        var dragElement = this.GetDragElement(index);
        if (!dragElement) return;
        var styleCursor = dragElement.style.cursor;
        var isPinned = this.GetIsPinned(index);
        var isMaximized = this.GetIsMaximized(index);
        if ((isPinned || isMaximized) && styleCursor != "default")
            dragElement.style.cursor = "default";
        else if (!isPinned && !isMaximized && styleCursor != "move")
            dragElement.style.cursor = "move";
    },
    StartCollapse: function () {
        this.collapseExecutingLockCount++;
    },
    EndCollapse: function () {
        this.collapseExecutingLockCount--;
    },
    CollapseExecuting: function () {
        return this.collapseExecutingLockCount > 0;
    },
    StartMaximization: function () {
        this.maximizationExecutingLockCount++;
    },
    EndMaximization: function () {
        this.maximizationExecutingLockCount--;
    },
    MaximizationExecuting: function () {
        return this.maximizationExecutingLockCount > 0;
    },
    StartUpdateMaximizedWindowSizeOnResize: function () {
        this.browserResizingForMaxWindowLockCount++;
    },
    EndUpdateMaximizedWindowSizeOnResize: function () {
        this.browserResizingForMaxWindowLockCount--;
    },
    ResizingForMaxWindowLocked: function () {
        return this.browserResizingForMaxWindowLockCount > 0;
    },
    UpdateRestoredWindowSizeLock: function () {
        this.updateRestoredWindowSizeLockCount++;
    },
    UpdateRestoredWindowSizeUnlock: function () {
        this.updateRestoredWindowSizeLockCount--;
    },
    UpdateRestoredWindowSizeLocked: function () {
        return this.updateRestoredWindowSizeLockCount > 0;
    },
    UpdateRestoredWindowSize: function (index, width, height) {
        if (!this.UpdateRestoredWindowSizeLocked()) {
            restoredMinWindowData = this.GetRestoredWindowData(index);
            restoredMinWindowData.width = width;
            restoredMinWindowData.height = height;
            this.SetRestoredWindowData(index, restoredMinWindowData);
        }
    },
    OnMouseDown: function (evt, index, isDraggingAllowed, pointOnScrollBar) {
        if (_aspxGetIsLeftButtonPressed(evt)) {
            if ((this.allowResize || isDraggingAllowed) && !this.prohibitClearSelectionOnMouseDown)
                _aspxClearSelection();
            var isResizing = false;
            if (this.allowResize && !this.GetIsCollapsed(index) && !this.GetIsMaximized(index))
                isResizing = this.OnResizeStart(evt, index);
            if (isResizing && __aspxWebKitTouchUI)
                aspxGetPopupControlCollection().OverStop();
            var clickedOnScroll = pointOnScrollBar && this.enableContentScrolling;
            if (isDraggingAllowed && !isResizing && !clickedOnScroll && !this.GetIsPinned(index) && !this.GetIsMaximized(index))
                this.OnDragStart(evt, index);
        }
    },
    OnMouseMove: function (evt, index) {
        if (this.allowResize && !this.GetIsCollapsed(index) && !this.GetIsMaximized(index))
            this.CreateResizeCursorInfo(evt, index);
    },
    SetShadowVisibility: function (visible, index) {
        var shadowTable = this.GetWindowShadowTable(index);
        if (shadowTable && shadowTable.rows.length > 1) {
            var shadowCol = shadowTable.rows[0].cells[1];
            var shadowRow = shadowTable.rows[1];
            _aspxSetElementVisibility(shadowCol, visible);
            _aspxSetElementVisibility(shadowRow, visible);
        }
    },
    StartFadeAnimation: function (element, index) {
        if (__aspxIE && __aspxBrowserMajorVersion < 9) {
            _aspxSetElementVisibility(element, true);
            ASPxAnimationHelper.setOpacity(element, 0);
            this.SetShadowVisibility(false, index);
        } else {
            ASPxAnimationHelper.setOpacity(element, 0);
            _aspxSetElementVisibility(element, true);
        }
        var callback = function () {
            if (__aspxIE && __aspxBrowserVersion < 9 && element.style.filter) {
                if (element.style.filter)
                    element.style.filter = "";
                this.SetShadowVisibility(true, index);
            }
            this.OnAnimationStop(index);
        } .aspxBind(this);
        ASPxAnimationHelper.fadeIn(element, callback);
    },
    StartSlideAnimation: function (animationDivElement, index, horizontalPopupPosition, verticalPopupPosition) {
        var element = this.GetWindowMainTable(animationDivElement);
        var clientX = horizontalPopupPosition.position;
        var clientY = verticalPopupPosition.position;
        var args = "(\"" + this.name + "\", " + index + ")";
        var onAnimStopCallString = "aspxPCAStop" + args;
        if (__aspxFirefox)
            animationDivElement.style.display = "block";
        _aspxInitAnimationDiv(animationDivElement, clientX, clientY, onAnimStopCallString, true);
        var horizontalDirection = _aspxGetAnimationHorizontalDirection(horizontalPopupPosition, this.popupHorizontalAlign, this.popupVerticalAlign, this.rtl);
        var verticalDirection = _aspxGetAnimationVerticalDirection(verticalPopupPosition, this.popupHorizontalAlign, this.popupVerticalAlign);
        var xPos = horizontalDirection * animationDivElement.offsetWidth;
        var yPos = verticalDirection * animationDivElement.offsetHeight;
        _aspxSetStyles(element, { left: xPos, top: yPos });
        _aspxSetElementVisibility(animationDivElement, true);
        this.DoShowWindowIFrame(index, clientX, clientY, 0, 0);
        _aspxStartSlideAnimation(animationDivElement, element, this.GetWindowIFrame(index), this.slideAnimationDuration);
    },
    GetWindowsState: function () {
        var state = "";
        if (this.HasDefaultWindow()) {
            state += this.GetWindowState(-1);
        }
        for (var i = 0; i < this.GetWindowCountCore(); i++) {
            state += this.GetWindowState(i);
            if (i < this.GetWindowCountCore() - 1) state += ";";
        }
        return state;
    },
    GetWindowState: function (index) {
        var element = this.GetWindowElement(index);
        if (element != null) {
            var mainCell = this.GetWindowMainCell(element);
            var visibleFlag = (!this.InternalIsWindowVisible(index) || element.isHiding) ? "0" : "1";
            var isDraggedFlag = this.GetIsDragged(index) ? "1" : "0";
            var zIndex = this.GetCurrentZIndex(index);
            var isResized = this.GetIsResized(index);
            var isResizedFlag = isResized ? "1" : "0";
            var width = isResized ? this.GetCurrentWindowWidth(index) : __aspxInvalidDimension;
            var height = isResized ? this.GetCurrentWindowHeight(index) : __aspxInvalidDimension;
            var contentWasLoaded = element.loaded ? "1" : "0";
            var left, top;
            var isMaximized = this.GetIsMaximized(index);
            if (isMaximized && !this.MaximizationExecuting()) {
                var restoredWindowData = this.GetRestoredWindowData(index);
                left = restoredWindowData.left;
                top = restoredWindowData.top;
            } else {
                left = this.GetCurrentLeft(index);
                top = this.GetCurrentTop(index);
            }
            var isPinned = this.GetIsPinned(index);
            if (isPinned) {
                left -= _aspxGetDocumentScrollLeft();
                top -= _aspxGetDocumentScrollTop();
            }
            left = Math.ceil(left);
            top = Math.ceil(top);
            var pinFlag = isPinned ? "1" : "0";
            var minFlag = this.GetIsCollapsed(index) ? "1" : "0";
            var maxFlag = isMaximized ? "1" : "0";
            return [visibleFlag, isDraggedFlag, zIndex, left, top, isResizedFlag, width, height, contentWasLoaded, pinFlag, minFlag, maxFlag].join(":");
        }
        return "";
    },
    UpdateWindowsStateCookie: function () {
        if (this.cookieName == "") return;
        _aspxDelCookie(this.cookieName);
        _aspxSetCookie(this.cookieName, this.GetWindowsState());
    },
    UpdateWindowsStateInputElement: function () {
        var element = this.GetWindowsStateInputElement();
        if (element != null) element.value = this.GetWindowsState();
    },
    OnIFrameLoad: function (index) {
        this.SetIframeLoading(index, false);
    },
    OnPWHBClickCore: function (evt, index, method) {
        if (ASPxClientTouchUI.handleFastTapIfRequired(evt,
   function () { this[method](index); } .aspxBind(this))) {
            return;
        }
        if ((__aspxIE && __aspxBrowserVersion < 9) || __aspxOpera)
            _aspxEmulateDocumentOnMouseDown(evt);
        this[method](index);
    },
    CreateWindows: function (windowsNames) {
        for (var i = 0; i < windowsNames.length; i++) {
            var window = new ASPxClientPopupWindow(this, i, windowsNames[i]);
            this.windows.push(window);
        }
    },
    RaiseCloseButtonClick: function (index) {
        var window = index < 0 ? null : this.GetWindow(index);
        if (!this.CloseButtonClick.IsEmpty()) {
            var args = new ASPxClientPopupWindowEventArgs(window);
            this.CloseButtonClick.FireEvent(this, args);
        }
    },
    RaiseClosing: function (index) {
        var window = index < 0 ? null : this.GetWindow(index);
        var cancel = false;
        if (!this.Closing.IsEmpty()) {
            var args = new ASPxClientPopupWindowCancelEventArgs(window);
            this.Closing.FireEvent(this, args);
            cancel = args.cancel;
        }
        return cancel;
    },
    RaiseCloseUp: function (index) {
        var window = index < 0 ? null : this.GetWindow(index);
        if (!this.CloseUp.IsEmpty()) {
            var args = new ASPxClientPopupWindowEventArgs(window);
            this.CloseUp.FireEvent(this, args);
        }
    },
    RaisePopUp: function (index) {
        var window = index < 0 ? null : this.GetWindow(index);
        if (!this.PopUp.IsEmpty()) {
            var args = new ASPxClientPopupWindowEventArgs(window);
            this.PopUp.FireEvent(this, args);
        }
    },
    RaiseResize: function (index, resizeState) {
        var window = index < 0 ? null : this.GetWindow(index);
        if (!this.Resize.IsEmpty()) {
            if (!resizeState)
                resizeState = ASPxClientPopupControlResizeState.Resized;
            var args = new ASPxClientPopupWindowResizeEventArgs(window, resizeState);
            this.Resize.FireEvent(this, args);
        }
    },
    RaiseBeforeResizing: function (index) {
        var window = index < 0 ? null : this.GetWindow(index);
        if (!this.BeforeResizing.IsEmpty()) {
            var args = new ASPxClientPopupWindowEventArgs(window);
            this.BeforeResizing.FireEvent(this, args);
        }
    },
    RaiseAfterResizing: function (index) {
        var window = index < 0 ? null : this.GetWindow(index);
        if (!this.AfterResizing.IsEmpty()) {
            var args = new ASPxClientPopupWindowEventArgs(window);
            this.AfterResizing.FireEvent(this, args);
        }
    },
    RaiseShown: function (index) {
        var window = index < 0 ? null : this.GetWindow(index);
        if (!this.Shown.IsEmpty()) {
            var args = new ASPxClientPopupWindowEventArgs(window);
            this.Shown.FireEvent(this, args);
        }
    },
    RaisePinnedChanged: function (index, pinned) {
        var window = index < 0 ? null : this.GetWindow(index);
        if (!this.PinnedChanged.IsEmpty()) {
            var args = new ASPxClientPopupWindowPinnedChangedEventArgs(window, pinned);
            this.PinnedChanged.FireEvent(this, args);
        }
    },
    RaiseCollapsed: function (index) {
        this.RaiseResize(index, ASPxClientPopupControlResizeState.Collapsed);
    },
    RaiseExpanded: function (index) {
        this.RaiseResize(index, ASPxClientPopupControlResizeState.Expanded);
    },
    RaiseMaximized: function (index) {
        this.RaiseResize(index, ASPxClientPopupControlResizeState.Maximized);
    },
    RaiseRestoredAfterMaximized: function (index) {
        this.RaiseResize(index, ASPxClientPopupControlResizeState.RestoredAfterMaximized);
    },
    AdjustSize: function () {
        if (this.enableContentScrolling)
            return;
        this.SetSize(1, 1);
    },
    GetHeight: function () {
        return this.GetWindowHeight(null);
    },
    GetWidth: function () {
        return this.GetWindowWidth(null);
    },
    GetContentWidth: function () {
        return this.GetWindowContentWidth(null);
    },
    GetContentHeight: function () {
        return this.GetWindowContentHeight(null);
    },
    SetSize: function (width, height) {
        this.SetWindowSize(null, width, height);
    },
    SetWidth: function (width) {
        var height = this.GetHeight();
        this.SetSize(width, height);
    },
    SetHeight: function (height) {
        var width = this.GetWidth();
        this.SetSize(width, height);
    },
    GetWindowDimensionByIndex: function (index, isWidth, forceFromCache) {
        var cachedSize = this.GetWindowCachedSize(index);
        var dimensionValue = null;
        if (forceFromCache == undefined && !this.GetWindowElement(index))
            forceFromCache = true;
        if (cachedSize && forceFromCache)
            dimensionValue = isWidth ? cachedSize.width : cachedSize.height;
        if (dimensionValue)
            return dimensionValue;
        else {
            var element = this.GetWindowElement(index);
            var sizeFromDOM = 0;
            if (this.GetIsCollapsed(index)) {
                var headerCell = this.GetWindowHeaderElement(index);
                sizeFromDOM = isWidth ? headerCell.offsetWidth : headerCell.offsetHeight;
            }
            else {
                var mainCell = this.GetWindowMainCell(element);
                sizeFromDOM = isWidth ? mainCell.offsetWidth : mainCell.offsetHeight;
            }
            if (sizeFromDOM === 0 && cachedSize)
                sizeFromDOM = isWidth ? cachedSize.width : cachedSize.height;
            return sizeFromDOM;
        }
    },
    GetWindowDimension: function (window, isWidth, forceFromCache) {
        var index = (window != null) ? window.index : -1;
        return this.GetWindowDimensionByIndex(index, isWidth, forceFromCache);
    },
    GetWindowContentDimension: function (window, isWidth) {
        var index = (window != null) ? window.index : -1,
   dimension = 0,
   contentElem = this.GetWindowContentElement(index),
   dimensionHolder = contentElem.parentNode,
   paddingsHolder = contentElem;
        return isWidth ?
  (dimensionHolder.offsetWidth - _aspxGetLeftRightBordersAndPaddingsSummaryValue(paddingsHolder)) :
  (dimensionHolder.offsetHeight - _aspxGetTopBottomBordersAndPaddingsSummaryValue(paddingsHolder));
    },
    GetWindowContentWidth: function (window) {
        return this.GetWindowContentDimension(window, true);
    },
    GetWindowContentHeight: function (window) {
        return this.GetWindowContentDimension(window, false);
    },
    GetWindowHeight: function (window) {
        return this.GetWindowDimension(window, false);
    },
    GetWindowWidth: function (window) {
        return this.GetWindowDimension(window, true);
    },
    SetWindowSize: function (window, width, height) {
        var index = (window != null) ? window.index : -1;
        this.SetWindowSizeByIndex(index, width, height);
    },
    GetContentHTML: function () {
        return this.GetContentHtml();
    },
    SetContentHTML: function (html) {
        this.SetContentHtml(html);
    },
    GetContentHtml: function () {
        return this.GetWindowContentHtml(null);
    },
    SetContentHtml: function (html, useAnimation) {
        this.SetWindowContentHtml(null, html, useAnimation);
    },
    GetContentIFrame: function (window) {
        return this.GetWindowContentIFrame(null);
    },
    GetContentUrl: function () {
        return this.GetWindowContentUrl(null);
    },
    SetContentUrl: function (url) {
        this.SetWindowContentUrl(null, url);
    },
    RefreshContentUrl: function () {
        this.RefreshWindowContentUrl(null);
    },
    SetWindowPopupElementID: function (window, popupElementId) {
        var index = (window != null) ? window.index : -1;
        this.RemoveWindowAllPopupElements(index);
        this.SetPopupElementIDs(index, popupElementId.split(';'));
        if (aspxGetPopupControlCollection().IsDisappearTimerActive()) {
            aspxGetPopupControlCollection().ClearDisappearTimer();
            this.Hide(index);
        }
        this.PopulatePopupElements(index);
    },
    SetPopupElementID: function (popupElementId) {
        this.SetWindowPopupElementID(null, popupElementId);
    },
    GetCurrentPopupElementIndex: function () {
        return this.GetWindowCurrentPopupElementIndex(null);
    },
    GetWindowCurrentPopupElementIndex: function (window) {
        var popupElement = this.GetWindowCurrentPopupElement(window);
        return popupElement ? popupElement.DXPopupElementIndex : -1;
    },
    GetCurrentPopupElement: function () {
        return this.GetWindowCurrentPopupElement(null);
    },
    GetWindowCurrentPopupElement: function (window) {
        var index = (window != null) ? window.index : -1;
        var popupElement = this.GetPopupElement(index, this.GetLastShownPopupElementIndex(index));
        if (popupElement && popupElement.DXPopupElementControl)
            return popupElement;
        return null;
    },
    Show: function (popupElementIndex) {
        this.ShowWindow(null, popupElementIndex);
    },
    ShowAtElement: function (htmlElement) {
        this.ShowWindowAtElement(null, htmlElement);
    },
    ShowAtElementByID: function (id) {
        var htmlElement = document.getElementById(id);
        this.ShowWindowAtElement(null, htmlElement);
    },
    ShowAtPos: function (x, y) {
        this.ShowWindowAtPos(null, Math.round(x), Math.round(y));
    },
    BringToFront: function () {
        this.BringWindowToFront(null);
    },
    Hide: function () {
        this.HideWindow(null);
    },
    IsWindowVisible: function (window) {
        var index = (window != null) ? window.index : -1;
        return this.InternalIsWindowVisible(index);
    },
    IsVisible: function () {
        return this.InternalIsWindowVisible(-1);
    },
    GetWindow: function (index) {
        return (0 <= index && index < this.windows.length) ? this.windows[index] : null;
    },
    GetWindowByName: function (name) {
        for (var i = 0; i < this.windows.length; i++)
            if (this.windows[i].name == name) return this.windows[i];
        return null;
    },
    GetWindowCount: function () {
        return this.GetWindowCountCore();
    },
    ShowWindow: function (window, popupElementIndex) {
        var index = (window != null) ? window.index : -1;
        if (popupElementIndex === undefined)
            popupElementIndex = this.GetLastShownPopupElementIndex(index);
        this.DoShowWindowAtPos(index, __aspxInvalidPosition, __aspxInvalidPosition, popupElementIndex, false, true);
    },
    ShowWindowAtElement: function (window, htmlElement) {
        var index = (window != null) ? window.index : -1;
        var lastIndexBackup = this.GetLastShownPopupElementIndex(index);
        this.ShowWindow(window, this.AddPopupElementInternal(index, htmlElement));
        this.RemovePopupElementInternal(index, htmlElement);
        this.SetLastShownPopupElementIndex(index, lastIndexBackup);
    },
    ShowWindowAtElementByID: function (window, id) {
        var htmlElement = document.getElementById(id);
        this.ShowWindowAtElement(window, htmlElement);
    },
    ShowWindowAtPos: function (window, x, y) {
        var index = (window != null) ? window.index : -1;
        this.DoShowWindowAtPos(index, x, y, -1, false, true);
    },
    BringWindowToFront: function (window) {
        var index = (window != null) ? window.index : -1;
        var element = this.GetWindowElement(index);
        aspxGetPopupControlCollection().ActivateWindowElement(element);
    },
    HideWindow: function (window) {
        var index = (window != null) ? window.index : -1;
        this.DoHideWindow(index);
    },
    GetWindowContentHTML: function (window) {
        return this.GetWindowContentHtml(window);
    },
    SetWindowContentHTML: function (window, html) {
        this.SetWindowContentHtml(window, html);
    },
    GetWindowContentHtml: function (window) {
        var index = (window != null) ? window.index : -1;
        var element = this.GetContentContainer(index);
        return (element != null) ? element.innerHTML : "";
    },
    SetWindowContentHtml: function (window, html, useAnimation) {
        var index = (window != null) ? window.index : -1;
        this.SetWindowContentHtmlCore(index, html, useAnimation);
    },
    SetWindowContentHtmlCore: function (index, html, useAnimation) {
        var element = this.GetContentContainer(index);
        if (element != null) {
            _aspxSetInnerHtml(element, html);
            if (useAnimation && typeof (ASPxAnimationHelper) != "undefined")
                ASPxAnimationHelper.fadeIn(element, function () { this.ResizeWindowIFrame(index); } .aspxBind(this));
            else
                this.ResizeWindowIFrame(index);
        }
    },
    GetWindowContentIFrame: function (window) {
        var index = (window != null) ? window.index : -1;
        return this.GetWindowContentIFrameElement(index);
    },
    GetWindowContentUrl: function (window) {
        var index = (window != null) ? window.index : -1;
        if (!this.IsWindowVisible(window))
            return this.GetWindowContentIFrameUrl(index);
        var element = this.GetWindowContentIFrameElement(index);
        return (element != null) ? element.src : "";
    },
    SetWindowContentUrl: function (window, url) {
        var index = (window != null) ? window.index : -1;
        var element = this.GetWindowContentIFrameElement(index);
        var windowVisible = this.IsWindowVisible(window);
        if (windowVisible && element != null)
            this.ShowIframeElementAfterDragging(index);
        this.SetWindowContentIFrameUrl(index, url);
        var src = (this.allowLoadToHiddenIframe && !windowVisible) ? ASPx.SSLSecureBlankUrl : url;
        if (element == null) {
            this.CreateWindowContentIFrameElement(index, src);
            if (this.shown)
                this.SetClientWindowSizeCoreLite(index, this.GetWindowWidth(window), this.GetWindowHeight(window));
        }
        else
            this.SetSrcToIframeElement(index, element, src);
    },
    GetPinned: function () {
        return this.GetIsPinned(-1);
    },
    SetPinned: function (value) {
        this.SetPinCore(-1, value);
    },
    GetWindowPinned: function (window) {
        var index = (window != null) ? window.index : -1;
        return this.GetIsPinned(index);
    },
    SetWindowPinned: function (window, value) {
        var index = (window != null) ? window.index : -1;
        this.SetPinCore(index, value);
    },
    GetMaximized: function () {
        return this.GetIsMaximized(-1);
    },
    SetMaximized: function (value) {
        this.SetMaximizedCore(-1, value);
    },
    GetWindowMaximized: function (window) {
        var index = (window != null) ? window.index : -1;
        return this.GetIsMaximized(index);
    },
    SetWindowMaximized: function (window, value) {
        var index = (window != null) ? window.index : -1;
        this.SetMaximizedCore(index, value);
    },
    GetCollapsed: function () {
        return this.GetIsCollapsed(-1);
    },
    SetCollapsed: function (value) {
        this.SetCollapsedCore(-1, value);
    },
    GetWindowCollapsed: function (window) {
        var index = (window != null) ? window.index : -1;
        return this.GetIsCollapsed(index);
    },
    SetWindowCollapsed: function (window, value) {
        var index = (window != null) ? window.index : -1;
        this.SetCollapsedCore(index, value);
    },
    RefreshWindowContentUrl: function (window) {
        var index = (window != null) ? window.index : -1;
        if (__aspxIE)
            this.RefreshWindowContentUrlIE(index, window);
        else
            this.RefreshWindowContentUrlCommon(window);
    },
    RefreshWindowContentUrlIE: function (index, window) {
        var windowVisible = this.InternalIsWindowVisible(index);
        if (windowVisible)
            this.RefreshWindowContentUrlIECore(index, window);
        else {
            var iframe = this.GetWindowContentIFrameElement(index);
            if (iframe)
                iframe.DXReloadAfterShowRequired = true;
        }
    },
    RefreshWindowContentUrlIECore: function (index, window) {
        try {
            if (!this.GetIframeLoading(index)) {
                var iframe = this.GetWindowContentIFrameElement(index);
                if (iframe)
                    iframe.contentWindow.location.reload();
            }
        } catch (e) {
            this.RefreshWindowContentUrlCommon(window);
        }
    },
    RefreshWindowContentUrlCommon: function (window) {
        this.SetWindowContentUrl(window, this.GetWindowContentUrl(window));
    },
    SetWindowContentVisible: function (index, visible) {
        var contentElement = this.GetWindowContentWrapperElement(index);
        if (contentElement)
            this.SetWindowPartVisibleCore(contentElement, "DXPopupWindowContentDisplay", visible);
    },
    SetWindowFooterVisible: function (index, visible) {
        var footerElement = this.GetWindowFooterElement(index);
        if (footerElement)
            this.SetWindowPartVisibleCore(footerElement, "DXPopupWindowFooterDisplay", visible);
    },
    SetWindowPartVisibleCore: function (partElement, displayCacheName, visible) {
        var nothingChanged = _aspxElementIsVisible(partElement) && visible;
        if (nothingChanged) return;
        if (!(_aspxIsExists(partElement[displayCacheName])))
            partElement[displayCacheName] = partElement.style.display;
        partElement.style.display = visible ? partElement[displayCacheName] : 'none';
    },
    UpdatePosition: function () {
        this.UpdatePositionAtElement(this.GetPopupElement(-1, this.GetLastShownPopupElementIndex(-1)));
    },
    UpdatePositionAtElement: function (popupElement) {
        this.UpdateWindowPositionAtElement(null, popupElement);
    },
    UpdateWindowPosition: function (window) {
        var index = (window != null) ? window.index : -1;
        this.UpdateWindowPositionAtElement(window, this.GetPopupElement(index, this.GetLastShownPopupElementIndex(index)));
    },
    UpdateWindowPositionAtElement: function (window, popupElement) {
        var index = (window != null) ? window.index : -1;
        this.UpdateWindowPositionInternal(index, popupElement);
    },
    UpdateWindowPositionInternal: function (index, popupElement) {
        var element = this.GetWindowElement(index);
        if (this.InternalIsWindowVisible(index) && element != null) {
            var horizontalPopupPosition = this.GetClientPopupPos(element, popupElement, __aspxInvalidPosition, true, false);
            var verticalPopupPosition = this.GetClientPopupPos(element, popupElement, __aspxInvalidPosition, false, false);
            this.SetWindowPos(index, element, horizontalPopupPosition.position, verticalPopupPosition.position);
        } else
            this.DoShowWindowAtPos(index, __aspxInvalidDimension, __aspxInvalidDimension, this.GetLastShownPopupElementIndex(index), false, false);
    },
    TryAutoUpdatePosition: function (index) {
        if (this.GetAutoUpdatePosition(index))
            this.UpdateWindowPositionInternal(index, this.GetPopupElement(index, this.GetLastShownPopupElementIndex(index)));
        if (this.GetIsMaximized(index))
            this.UpdateMaximizedWindowSizeOnResize(index);
    },
    CreateWindowContentIFrameElement: function (index, src) {
        var content = this.GetContentContainer(index);
        var iframeParent = content;
        content.innerHTML = "";
        var iframe = this.CreateContentIFrameElement(index, src);
        iframeParent.appendChild(iframe);
        this.InitIFrame(index);
        return iframe;
    },
    CreateContentIFrameElement: function (index, src) {
        var iframe = document.createElement("IFRAME");
        iframe.id = this.GetWindowContentIFrameElementId(index);
        iframe.scrolling = "auto";
        iframe.frameBorder = 0;
        iframe.style.width = "100%";
        iframe.style.height = "100%";
        iframe.style.overflow = "auto";
        this.SetSrcToIframeElement(index, iframe, src);
        return iframe;
    },
    CreateContentIFrameDivElement: function (index) {
        var iframeDiv = document.createElement("DIV");
        iframeDiv.id = this.GetWindowContentIFrameDivElementID(index);
        iframeDiv.style.width = "100%";
        iframeDiv.style.height = "100%";
        return iframeDiv;
    },
    GetWindowHeaderTextCell: function (index) {
        return this.GetWindowChild(index, "_PWH" + index + "T");
    },
    GetWindowHeaderImageCell: function (index) {
        return this.GetWindowChild(index, "_PWH" + index + "I");
    },
    GetWindowFooterTextCell: function (index) {
        return this.GetWindowChild(index, "_PWF" + index + "T");
    },
    GetWindowFooterImageCell: function (index) {
        return this.GetWindowChild(index, "_PWF" + index + "I");
    },
    GetWindowHeaderImageUrl: function (index) {
        var element = this.GetWindowHeaderImageCell(index);
        return element ? element.src : "";
    },
    SetWindowHeaderImageUrl: function (index, url) {
        var element = this.GetWindowHeaderImageCell(index);
        if (element != null)
            element.src = url;
    },
    GetWindowFooterImageUrl: function (index) {
        var element = this.GetWindowFooterImageCell(index);
        return element ? element.src : "";
    },
    SetWindowFooterImageUrl: function (index, url) {
        var element = this.GetWindowFooterImageCell(index);
        if (element != null) {
            element.src = url;
            this.CorrectWindowSizeGripPositionLite(index);
        }
    },
    GetWindowHeaderNavigateUrl: function (index) {
        var header = this.GetWindowHeaderElement(index);
        if (header) {
            var link = _aspxGetDescendantNodesByClassName(header, ASPxClientPopupControlCssClasses.LinkCssClassName)[0];
            if (link)
                return link.href;
        }
        return "";
    },
    SetWindowHeaderNavigateUrl: function (index, url) {
        var header = this.GetWindowHeaderElement(index);
        if (header) {
            var link = _aspxGetDescendantNodesByClassName(header, ASPxClientPopupControlCssClasses.LinkCssClassName)[0];
            if (link)
                link.href = url;
        }
    },
    GetWindowFooterNavigateUrl: function (index) {
        var footer = this.GetWindowFooterElement(index);
        if (footer) {
            var link = _aspxGetDescendantNodesByClassName(footer, ASPxClientPopupControlCssClasses.LinkCssClassName)[0];
            if (link)
                return link.href;
        }
        return "";
    },
    SetWindowFooterNavigateUrl: function (index, url) {
        var footer = this.GetWindowFooterElement(index);
        if (footer) {
            var link = _aspxGetDescendantNodesByClassName(footer, ASPxClientPopupControlCssClasses.LinkCssClassName)[0];
            if (link)
                link.href = url;
        }
        return;
    },
    GetWindowHeaderText: function (index) {
        var element = this.GetWindowHeaderTextCell(index);
        if (element != null) {
            var link = _aspxGetChildByTagName(element, "A", 0);
            if (link != null)
                return link.innerHTML;
            else
                return element.innerHTML;
        }
        return "";
    },
    SetWindowHeaderText: function (index, text) {
        var element = this.GetWindowHeaderTextCell(index);
        if (element != null) {
            var link = _aspxGetChildByTagName(element, "A", 0);
            if (link != null)
                link.innerHTML = text;
            else
                element.innerHTML = text;
        }
    },
    GetWindowFooterText: function (index) {
        var element = this.GetWindowFooterTextCell(index);
        if (element != null) {
            var link = _aspxGetChildByTagName(element, "A", 0);
            if (link != null)
                return link.innerHTML;
            else
                return element.innerHTML;
        }
        return "";
    },
    SetWindowFooterText: function (index, text) {
        var element = this.GetWindowFooterTextCell(index);
        if (element != null) {
            var link = _aspxGetChildByTagName(element, "A", 0);
            if (link != null)
                link.innerHTML = text;
            else
                element.innerHTML = text;
            this.CorrectWindowSizeGripPositionLite(index);
        }
    },
    RefreshPopupElementConnection: function () {
        var index = this.HasDefaultWindow() ? -1 : 0;
        for (; index < this.GetWindowCount(); index++) {
            this.RemoveWindowAllPopupElements(index);
            this.PopulatePopupElements(index);
        }
    },
    GetHeaderImageUrl: function () {
        return this.GetWindowHeaderImageUrl(-1);
    },
    SetHeaderImageUrl: function (value) {
        this.SetWindowHeaderImageUrl(-1, value);
    },
    GetFooterImageUrl: function () {
        return this.GetWindowFooterImageUrl(-1);
    },
    SetFooterImageUrl: function (value) {
        this.SetWindowFooterImageUrl(-1, value);
    },
    GetHeaderNavigateUrl: function () {
        return this.GetWindowHeaderNavigateUrl(-1);
    },
    SetHeaderNavigateUrl: function (value) {
        this.SetWindowHeaderNavigateUrl(-1, value);
    },
    GetFooterNavigateUrl: function () {
        return this.GetWindowFooterNavigateUrl(-1);
    },
    SetFooterNavigateUrl: function (value) {
        this.SetWindowFooterNavigateUrl(-1, value);
    },
    GetHeaderText: function () {
        return this.GetWindowHeaderText(-1);
    },
    SetHeaderText: function (value) {
        this.SetWindowHeaderText(-1, value);
    },
    GetFooterText: function () {
        return this.GetWindowFooterText(-1);
    },
    SetFooterText: function (value) {
        this.SetWindowFooterText(-1, value);
    },
    GetVisible: function () {
        return this.IsVisible();
    },
    SetVisible: function (visible) {
        if (visible && !this.IsVisible())
            this.Show();
        else if (!visible && this.IsVisible())
            this.Hide();
    }
});
ASPxClientPopupControl.Cast = ASPxClientControl.Cast;
ASPxClientPopupControl.GetPopupControlCollection = function () {
    return aspxGetPopupControlCollection();
}
var ASPxClientPopupControlResizeState = {
    Resized: 0,
    Collapsed: 1,
    Expanded: 2,
    Maximized: 3,
    RestoredAfterMaximized: 4
};
ASPxClientPopupControlCollection = _aspxCreateClass(ASPxClientControlCollection, {
    constructor: function () {
        this.constructor.prototype.constructor.call(this);
        this.draggingControl = null;
        this.draggingWindowIndex = -1;
        this.gragXOffset = 0;
        this.gragYOffset = 0;
        this.visibleModalElements = new Array();
        this.visiblePopupWindowIds = new Array();
        this.zIndex = __aspxPopupControlZIndex;
        this.windowResizeByBodyScrollVisibilityChangingLockCount = 0;
        this.savedBodyWidth = 0;
        this.savedBodyHeight = 0;
        this.overControl = null;
        this.overWindowIndex = -1;
        this.overXPos = __aspxInvalidPosition;
        this.overYPos = __aspxInvalidPosition;
        this.appearTimerID = -1;
        this.disappearTimerID = -1;
        this.scrollEventLockCount = 0;
        this.currentActiveWindowElement = null;
        this.resizeControl = null;
        this.resizeIndex = -2;
        this.resizeCursor = "";
        this.resizePanel = null;
        this.selectBanned = false;
        this.pcWindowsAreRestrictedByDocumentWindow = true;
        this.searchForTabIndexInAllElements = false;
        this.docScrollLeft = -1;
        this.docScrollTop = -1;
        this.EnsureSaveScrollState();
    },
    EnsureSaveScrollState: function () {
        if (__aspxDocumentLoaded && this.docScrollLeft < 0 && this.docScrollTop < 0)
            this.SaveScrollState();
    },
    GetPopupWindowFromID: function (id) {
        var pos = id.lastIndexOf(__aspxPCWIdSuffix);
        var name = id.substring(0, pos);
        var index = id.substr(pos + __aspxPCWIdSuffix.length);
        var popupControl = aspxGetPopupControlCollection().Get(name);
        return new _aspxPopupWindow(popupControl, index);
    },
    DoHideAllWindows: function (srcElement, excptId, applyToAll) {
        for (var i = this.visiblePopupWindowIds.length - 1; i >= 0; i--) {
            var id = this.visiblePopupWindowIds[i];
            if (id == excptId) continue;
            if (srcElement != null && _aspxGetParentById(srcElement, id) != null) continue;
            var popupWindow = this.GetPopupWindowFromID(id);
            var windowCloseAction = popupWindow.popupControl.GetWindowCloseAction(popupWindow.windowIndex);
            if (popupWindow.popupControl != null && (
    (windowCloseAction != "CloseButton" && windowCloseAction != "None") || applyToAll)) {
                popupWindow.popupControl.DoHideWindow(parseInt(popupWindow.windowIndex));
            }
        }
    },
    DoShowAtCurrentPos: function (name, index, popupElementIndex, evtClone) {
        var pc = this.Get(name);
        if (pc != null && !pc.InternalIsWindowVisible(index))
            pc.DoShowWindowAtPos(index, this.overXPos, this.overYPos, popupElementIndex, true, true, evtClone);
    },
    ActivateWindowElement: function (element, evt) {
        var visibleWindowsCount = this.visiblePopupWindowIds.length;
        if (__aspxPopupControlZIndex <= element.style.zIndex && element.style.zIndex != visibleWindowsCount * 2 + __aspxPopupControlZIndex) {
            this.DeleteWindowFromZIndexOrder(element);
        }
        this.SetWindowElementZIndex(element, __aspxPopupControlZIndex + visibleWindowsCount * 2);
        var pcWElementEventSource = _aspxFindEventSourceParentByTestFunc(evt, aspxTestPopupWindowElement);
        if (!evt || (evt && pcWElementEventSource == element)) {
            if (this.GetCurrentActiveWindowElement() != element) {
                this.RefreshTabIndexes(false);
                this.SaveCurrentActiveWindowElement(element);
            }
        }
    },
    RefreshTabIndexes: function (forceRecalculate) {
        var topModalWindow = this.GetTopModalWindow();
        if (topModalWindow != null || forceRecalculate) {
            var topModalWindowZIndexArray = _aspxGetElementZIndexArray(topModalWindow);
            this.CalculateTabIndexes(topModalWindowZIndexArray);
        }
    },
    ElementHasTabIndex: function (element) {
        if (__aspxIE && __aspxBrowserVersion < 8) {
            var elementHtml = element.outerHTML;
            var attributeIndex = elementHtml.indexOf('tabIndex');
            return attributeIndex != -1 && attributeIndex < elementHtml.indexOf(">");
        }
        else
            return _aspxIsExists(_aspxGetAttribute(element, "tabindex"));
    },
    IsElementCanBeActive: function (element) {
        return element.tagName === "INPUT" || element.tagName === "A" || this.ElementHasTabIndex(element);
    },
    GetCanBeActiveElements: function () {
        var searchForTabIndexInAllElements = aspxGetPopupControlCollection().searchForTabIndexInAllElements;
        if (searchForTabIndexInAllElements) {
            var elements = document.getElementsByTagName("*");
            var canBeActiveElements = [];
            for (var i = 0; i < elements.length; i++) {
                if (this.IsElementCanBeActive(elements[i], searchForTabIndexInAllElements))
                    canBeActiveElements.push(elements[i]);
            }
            return canBeActiveElements;
        } else {
            var inputs = document.getElementsByTagName("INPUT");
            var links = document.getElementsByTagName("A");
            var lists = document.getElementsByTagName("UL");
            var union = _aspxCollectionsUnionToArray(inputs, links);
            return _aspxCollectionsUnionToArray(union, lists);
        }
    },
    CalculateTabIndexes: function (topModalWindowZIndexArray) {
        var elements = this.GetCanBeActiveElements();
        for (var i = 0; i < elements.length; i++) {
            var currentElementZIndexArray = _aspxGetElementZIndexArray(elements[i]);
            if (_aspxIsHigher(currentElementZIndexArray, topModalWindowZIndexArray))
                _aspxRestoreTabIndexAttribute(elements[i]);
            else
                _aspxChangeTabIndexAttribute(elements[i]);
        }
    },
    PopupWindowIsModalByVisibleIndex: function (visiblePopupWindowIndex) {
        return this.PopupWindowIsModalByID(this.visiblePopupWindowIds[visiblePopupWindowIndex]);
    },
    PopupWindowIsModalByID: function (windowElementID) {
        var popupWindow = this.GetPopupWindowFromID(windowElementID);
        return popupWindow.popupControl.WindowIsModal(popupWindow.windowIndex);
    },
    SaveCurrentActiveWindowElement: function (windowElement) {
        this.currentActiveWindowElement = windowElement;
    },
    SkipCurrentActiveWindowElement: function (element) {
        if (element == this.GetCurrentActiveWindowElement())
            this.SaveCurrentActiveWindowElement(null);
    },
    GetCurrentActiveWindowElement: function () {
        return this.currentActiveWindowElement;
    },
    GetTopModalWindow: function () {
        var topWindow = null;
        var topWindowZIndexArray = null;
        for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
            var currentWindow = _aspxGetElementById(this.visiblePopupWindowIds[i]);
            if (this.PopupWindowIsModalByVisibleIndex(i) && _aspxElementIsVisible(currentWindow)) {
                var currentWindowZIndexArray = _aspxGetElementZIndexArray(currentWindow);
                if (topWindow == null || _aspxIsHigher(currentWindowZIndexArray, topWindowZIndexArray)) {
                    topWindow = currentWindow;
                    topWindowZIndexArray = currentWindowZIndexArray;
                }
            }
        }
        return topWindow;
    },
    DeleteWindowFromZIndexOrder: function (element) {
        for (var i = this.visiblePopupWindowIds.length - 1; i >= 0; i--) {
            var windowElement = _aspxGetElementById(this.visiblePopupWindowIds[i]);
            if (!windowElement)
                _aspxArrayRemoveAt(this.visiblePopupWindowIds, i);
            else if (windowElement.style.zIndex > element.style.zIndex)
                this.SetWindowElementZIndex(windowElement, windowElement.style.zIndex - 2);
        }
    },
    SetWindowElementZIndex: function (element, zIndex) {
        element.style.zIndex = zIndex;
        var iFrame = element.overflowElement;
        if (iFrame)
            iFrame.style.zIndex = zIndex - 1;
        var modalElement = element.modalElement;
        if (modalElement)
            modalElement.style.zIndex = zIndex - 1;
        this.UpdateWindowsStateInputElement(element.id);
        this.UpdateWindowsStateCookie(element.id);
    },
    AdjustModalElementsBounds: function () {
        for (var i = 0; i < this.visibleModalElements.length; i++)
            this.AdjustModalElementBounds(this.visibleModalElements[i]);
    },
    AdjustModalElementBounds: function (element) {
        if (!_aspxIsExistsElement(element)) return;
        var x = _aspxPrepareClientPosForElement(0, element, true);
        var y = _aspxPrepareClientPosForElement(0, element, false);
        _aspxSetStyles(element, { left: x, top: y });
        if (__aspxNetscapeFamily && !__aspxFirefox)
            _aspxSetStyles(element, { width: 1, height: 1 });
        _aspxSetStyles(element, { width: _aspxGetDocumentWidth(), height: _aspxGetDocumentHeight() });
    },
    ClearAppearTimer: function () {
        this.appearTimerID = _aspxClearTimer(this.appearTimerID);
    },
    ClearDisappearTimer: function () {
        this.disappearTimerID = _aspxClearTimer(this.disappearTimerID);
    },
    IsAppearTimerActive: function () {
        return this.appearTimerID > -1;
    },
    IsDisappearTimerActive: function () {
        return this.disappearTimerID > -1;
    },
    SetAppearTimer: function (name, index, popupElementIndex, timeout, evt) {
        var evtClone = _aspxCloneObject(evt);
        this.appearTimerID = _aspxSetTimeout(function () {
            aspxGetPopupControlCollection().DoShowAtCurrentPos(name, index, popupElementIndex, evtClone);
        }, timeout);
    },
    SetDisappearTimer: function (name, index, timeout) {
        this.disappearTimerID = _aspxSetTimeout("aspxPWDisappearTimer(\"" + name + "\", " + index + ")", timeout);
    },
    GetDocScrollDifference: function () {
        return new _aspxScrollDifference(_aspxGetDocumentScrollLeft() - this.docScrollLeft, _aspxGetDocumentScrollTop() - this.docScrollTop);
    },
    IsDocScrolled: function (scroll) {
        return scroll.horizontal != 0 || scroll.vertical != 0;
    },
    SaveScrollState: function () {
        this.docScrollLeft = _aspxGetDocumentScrollLeft();
        this.docScrollTop = _aspxGetDocumentScrollTop();
    },
    InitDragObject: function (control, index, x, y, xClientCorrection, yClientCorrection) {
        this.draggingControl = control;
        this.draggingWindowIndex = index;
        this.gragXOffset = x;
        this.gragYOffset = y;
        this.xClientCorrection = xClientCorrection;
        this.yClientCorrection = yClientCorrection;
        this.SetDocumentSelectionBan(true);
    },
    InitOverObject: function (control, index, evt) {
        this.overControl = control;
        this.overWindowIndex = index;
        if (evt)
            this.SaveCurrentMouseOverPos(evt);
    },
    InitResizeObject: function (control, index, cursor, resizePanel) {
        this.resizeControl = control;
        this.resizeIndex = index;
        this.resizeCursor = cursor;
        this.resizePanel = resizePanel;
        this.SetDocumentSelectionBan(true);
    },
    SetDocumentSelectionBan: function (value) {
        this.selectBanned = value;
        if (__aspxWebKitFamily) {
            if (value) {
                if (!this.webkitUserSelectBackup && document.body.style.webkitUserSelect)
                    this.webkitUserSelectBackup = document.body.style.webkitUserSelect;
                document.body.style.webkitUserSelect = "none";
            } else {
                if (this.webkitUserSelectBackup) {
                    document.body.style.webkitUserSelect = this.webkitUserSelectBackup;
                    delete this.webkitUserSelectBackup;
                } else
                    document.body.style.webkitUserSelect = "auto";
            }
        }
    },
    IsResizeInint: function () {
        return this.resizeControl != null;
    },
    ClearDragObject: function () {
        this.draggingControl = null;
        this.draggingWindowIndex = -1;
        this.gragXOffset = 0;
        this.gragYOffset = 0;
        this.SetDocumentSelectionBan(this.resizeControl != null);
    },
    ClearResizeObject: function () {
        this.resizeControl = null;
        this.resizeIndex = -2;
        this.resizeCursor = "";
        this.SetDocumentSelectionBan(this.draggingControl != null);
        this.resizePanel.parentNode.removeChild(this.resizePanel);
    },
    Drag: function (evt) {
        if (!_aspxGetIsLeftButtonPressed(evt)) return;
        var x = _aspxGetEventX(evt);
        var y = _aspxGetEventY(evt);
        if (this.pcWindowsAreRestrictedByDocumentWindow && _aspxCoordinatesInDocumentRect(x, y)) {
            x += this.gragXOffset;
            y += this.gragYOffset;
            this.draggingControl.OnDrag(this.draggingWindowIndex, x, y, this.xClientCorrection, this.yClientCorrection, evt);
            if (__aspxWebKitTouchUI)
                evt.preventDefault();
        }
    },
    DragStop: function () {
        this.draggingControl.OnDragStop(this.draggingWindowIndex);
        this.ClearDragObject();
    },
    ResizeStop: function (evt) {
        this.resizeControl.OnResizeStop(evt, this.resizeIndex, this.resizeCursor, this.resizePanel);
        aspxGetPopupControlCollection().ClearResizeObject();
    },
    OnPWMouseMove: function (evt, name, index) {
        if (this.draggingControl == null &&
   this.overControl == null &&
   this.resizeControl == null) {
            var pc = aspxGetPopupControlCollection().Get(name);
            if (pc != null) pc.OnMouseMove(evt, index);
        }
    },
    OnPWMouseOver: function (evt) {
        if (!this.overControl || this.draggingControl) return;
        if (this.IsOverPopupWindow(evt))
            this.ClearDisappearTimer();
    },
    IsOverPopupWindow: function (evt) {
        return _aspxFindEventSourceParentByTestFunc(evt, aspxTestPopupControlOverElement) != null;
    },
    OnDocumentMouseDown: function (evt) {
        var popupElement = _aspxFindEventSourceParentByTestFunc(evt, aspxTestPopupControlElement);
        var excptId = popupElement == null ? "" :
   popupElement.DXPopupElementControl.GetWindowElementId(popupElement.DXPopupWindowIndex);
        this.OnMouseDownCore(evt, excptId);
    },
    OnMouseDown: function (evt) {
        this.OnMouseDownCore(evt, "");
    },
    OnMouseDownCore: function (evt, excptId) {
        if (this.IsDocumentIsCoveredByModalElement())
            return;
        var srcElement = _aspxGetEventSource(evt);
        this.DoHideAllWindows(srcElement, excptId, false);
        aspxGetPopupControlCollection().ClearAppearTimer();
    },
    OnMouseMove: function (evt) {
        if (__aspxWebKitTouchUI && ASPxClientTouchUI.isGesture)
            return;
        if (this.draggingControl != null) {
            this.Drag(evt);
        }
        else if (this.overControl != null) {
            this.OnMouseOver(evt);
        }
        else if (this.resizeControl != null) {
            if (__aspxIE && !_aspxGetIsLeftButtonPressed(evt))
                this.ResizeStop(evt);
            else
                this.resizeControl.OnResize(evt, this.resizeIndex, this.resizeCursor, this.resizePanel);
        }
    },
    OnMouseOver: function (evt) {
        var element = _aspxFindEventSourceParentByTestFunc(evt, aspxTestPopupControlOverElement);
        var curPopupElementIndex = this.overControl.GetWindowCurrentPopupElementIndex(this.overWindowIndex);
        var curPopupElement = this.overControl.GetPopupElementList()[curPopupElementIndex];
        var popup = element != null ? element.DXPopupElementControl : null;
        var isPopupActionMouseOver = popup && popup.popupAction == 'MouseOver';
        var isCurPopupElement = element === curPopupElement;
        var isCurPopupWindow = element != null && element.id === this.overControl.GetWindowElementId(this.overWindowIndex);
        var isCurPopupElementOrCurPopupWindow = isCurPopupElement || isCurPopupWindow || isPopupActionMouseOver;
        if (isCurPopupElementOrCurPopupWindow) {
            var clearTimer = true;
            var popup = element.DXPopupElementControl;
            if (popup && popup.GetLastShownPopupElementIndex(element.DXPopupWindowIndex) != element.DXPopupElementIndex)
                clearTimer = false;
            if (clearTimer)
                this.ClearDisappearTimer();
            this.SaveCurrentMouseOverPos(evt);
            if (__aspxTouchUI && !ASPxClientTouchUI.IsNativeScrolling())
                return;
            return _aspxCancelBubble(evt);
        }
        this.OnMouseOut();
    },
    OnMouseOut: function (evt) {
        if (!this.overControl || this.draggingControl) return;
        this.ClearAppearTimer();
        var windowCloseAction = this.overControl.GetWindowCloseAction(this.overWindowIndex);
        if (windowCloseAction == "MouseOut" && this.overControl.InternalIsWindowVisible(this.overWindowIndex)) {
            if (!this.IsDisappearTimerActive() && this.IsDisappearAllowedByMouseOut(evt))
                this.SetDisappearTimer(this.overControl.name, this.overWindowIndex, this.overControl.disappearAfter);
        }
        else
            this.OverStop();
    },
    IsDisappearAllowedByMouseOut: function (evt) {
        return __aspxFirefox ? !this.IsOverPopupWindow(evt) : true;
    },
    OnMouseUp: function (evt) {
        if (this.draggingControl != null)
            this.DragStop();
        if (this.resizeControl != null)
            this.ResizeStop(evt);
    },
    OnResize: function (evt) {
        this.AutoUpdateElementsPosition();
        this.AdjustModalElementsBounds();
    },
    OnScroll: function (evt) {
        if (this.scrollEventLockCount > 0)
            return;
        var scroll = this.GetDocScrollDifference();
        if (this.IsDocScrolled(scroll)) {
            this.CorrectPositionAtScroll(scroll);
            this.AdjustModalElementsBounds();
            this.SaveScrollState();
        }
        if (__aspxIE && __aspxBrowserVersion <= 8) {
            this.CalculateDocumentDimensionsWithoutPinnedWindowsOldIE(function () {
                this.FireScrollEventToWindowsOldIE(evt);
            } .aspxBind(this), evt);
        }
        else {
            this.CalculateDocumentDimensionsWithoutPinnedWindows(evt);
            this.FireScrollEventToWindows(evt);
        }
    },
    GetSavedBodyWidth: function () {
        if (this.savedBodyWidth == 0)
            this.CalculateDocumentDimensionsWithoutPinnedWindows();
        return this.savedBodyWidth;
    },
    GetSavedBodyHeight: function () {
        if (this.savedBodyHeight == 0)
            this.CalculateDocumentDimensionsWithoutPinnedWindows();
        return this.savedBodyHeight;
    },
    HidePinnedPopupsThatOutFromViewPort: function () {
        var popupsToRestoreVisible = [];
        for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
            var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
            var popupControl = popupWindow.popupControl;
            if (!(popupControl.GetIsPinned(popupWindow.windowIndex) && popupControl.GetIsOutFromViewPort(popupWindow.windowIndex)))
                continue;
            var element = popupControl.GetWindowElement(popupWindow.windowIndex);
            if (!element) continue;
            var restoreData = {};
            restoreData.element = element;
            restoreData.display = element.style.display;
            element.style.display = "none";
            popupsToRestoreVisible.push(restoreData);
        }
        return popupsToRestoreVisible;
    },
    RestorePinnedPopupsThatOutFromViewPort: function (popupsToRestoreVisible) {
        if (popupsToRestoreVisible.length > 0) {
            for (var i = 0; i < popupsToRestoreVisible.length; i++) {
                var restoreData = popupsToRestoreVisible[i];
                restoreData.element.style.display = restoreData.display;
            }
        }
    },
    CalculateDocumentDimensionsWithoutPinnedWindows: function (evt) {
        var popupsToRestoreVisible = [];
        var needToHideRestorePopupsThatOutFromViewPort = !!evt && _aspxGetEventSource(evt) == document;
        if (needToHideRestorePopupsThatOutFromViewPort)
            popupsToRestoreVisible = this.HidePinnedPopupsThatOutFromViewPort();
        this.savedBodyWidth = _aspxGetDocumentWidth();
        this.savedBodyHeight = _aspxGetDocumentHeight();
        if (needToHideRestorePopupsThatOutFromViewPort)
            this.RestorePinnedPopupsThatOutFromViewPort(popupsToRestoreVisible);
    },
    FireScrollEventToWindows: function (evt) {
        for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
            var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
            var popupControl = popupWindow.popupControl;
            popupControl.OnScroll(evt, popupWindow.windowIndex);
        }
    },
    CalculateDocumentDimensionsWithoutPinnedWindowsOldIE: function (onCalculateFinished, evt) {
        var popupsToRestoreVisible = [];
        var needToHideRestorePopupsThatOutFromViewPort = !!evt && _aspxGetEventSource(evt) == document;
        if (needToHideRestorePopupsThatOutFromViewPort)
            popupsToRestoreVisible = this.HidePinnedPopupsThatOutFromViewPort();
        this.scrollEventLockCount++;
        window.setTimeout(function () {
            this.savedBodyWidth = _aspxGetDocumentWidth();
            this.savedBodyHeight = _aspxGetDocumentHeight();
            if (needToHideRestorePopupsThatOutFromViewPort)
                this.RestorePinnedPopupsThatOutFromViewPort(popupsToRestoreVisible);
            if (onCalculateFinished)
                window.setTimeout(function () { onCalculateFinished(); } .aspxBind(this), 0);
            this.scrollEventLockCount--;
        } .aspxBind(this), 0);
    },
    FireScrollEventToWindowsOldIE: function (evt) {
        this.scrollEventLockCount++;
        this.FireScrollEventToWindows(evt);
        this.scrollEventLockCount--;
    },
    LockScrollEvent: function () {
        this.scrollEventLockCount++;
    },
    UnlockScrollEvent: function () {
        this.scrollEventLockCount--;
    },
    CorrectPositionAtScroll: function (scroll) {
        for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
            var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
            var popupControl = popupWindow.popupControl;
            if (popupControl != null && popupControl.InternalIsWindowVisible(popupWindow.windowIndex)) {
                if (popupControl.GetAutoUpdatePosition(popupWindow.windowIndex))
                    popupWindow.popupControl.TryAutoUpdatePosition(popupWindow.windowIndex);
            }
        }
    },
    FFScrollEmulation: function (scroll, popupWindow) {
        var windowElement = popupWindow.popupControl.GetWindowElement(popupWindow.windowIndex);
        windowElement.style.left = (windowElement.offsetLeft - scroll.horizontal) + "px";
        windowElement.style.top = (windowElement.offsetTop - scroll.vertical) + "px";
    },
    OnSelectStart: function () {
        return !this.selectBanned;
    },
    OverStop: function () {
        this.overControl = null;
        this.overWindowIndex = -1;
    },
    OnPWDisappearTimer: function (name, index) {
        var pc = this.Get(name);
        if (pc != null) {
            if (!pc.DoHideWindow(index))
                this.OverStop();
            this.ClearDisappearTimer();
        }
    },
    SaveCurrentMouseOverPos: function (evt) {
        this.overXPos = _aspxGetEventX(evt);
        this.overYPos = _aspxGetEventY(evt);
    },
    RegisterVisibleModalElement: function (element) {
        if (_aspxArrayIndexOf(this.visibleModalElements, element) == -1)
            this.visibleModalElements.push(element);
    },
    UnregisterVisibleModalElement: function (element) {
        _aspxArrayRemove(this.visibleModalElements, element);
    },
    RegisterVisibleWindow: function (element, popupControl, index) {
        if (_aspxArrayIndexOf(this.visiblePopupWindowIds, element.id) == -1) {
            this.visiblePopupWindowIds.push(element.id);
            if (popupControl && popupControl.GetWindowCloseAction(index) == "MouseOut")
                aspxGetPopupControlCollection().InitOverObject(popupControl, index, null);
            this.OnRegisteredVisibleWindow(element);
        }
    },
    OnRegisteredVisibleWindow: function (element) {
        var elementIndex = _aspxArrayIndexOf(this.visiblePopupWindowIds, element.id);
        if (this.PopupWindowIsModalByVisibleIndex(elementIndex))
            _aspxRemoveFocus(element);
    },
    UnregisterVisibleWindow: function (element) {
        this.DeleteWindowFromZIndexOrder(element);
        _aspxArrayRemove(this.visiblePopupWindowIds, element.id);
        var forceRecalculate = this.PopupWindowIsModalByID(element.id);
        this.RefreshTabIndexes(forceRecalculate);
        this.SkipCurrentActiveWindowElement(element);
    },
    UpdateWindowsStateCookie: function (id) {
        var pos = id.lastIndexOf(__aspxPCWIdSuffix);
        var name = id.substring(0, pos);
        var popupControl = aspxGetPopupControlCollection().Get(name);
        if (popupControl != null)
            popupControl.UpdateWindowsStateCookie(false);
    },
    UpdateWindowsStateInputElement: function (id) {
        var pos = id.lastIndexOf(__aspxPCWIdSuffix);
        var name = id.substring(0, pos);
        var popupControl = aspxGetPopupControlCollection().Get(name);
        if (popupControl != null)
            popupControl.UpdateWindowsStateInputElement(false);
    },
    AutoUpdateElementsPosition: function () {
        for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
            var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
            var popupControl = popupWindow.popupControl;
            if (popupControl != null && popupControl.InternalIsWindowVisible(popupWindow.windowIndex))
                popupControl.TryAutoUpdatePosition(popupWindow.windowIndex);
        }
    },
    IsDocumentIsCoveredByModalElement: function () {
        for (var i = 0; i < this.visiblePopupWindowIds.length; i++) {
            var popupWindow = this.GetPopupWindowFromID(this.visiblePopupWindowIds[i]);
            var popupControl = popupWindow.popupControl;
            if (popupControl && popupControl.GetWindowModalElement(popupWindow.windowIndex))
                return true;
        }
        return false;
    },
    LockWindowResizeByBodyScrollVisibilityChanging: function () {
        this.windowResizeByBodyScrollVisibilityChangingLockCount++;
    },
    UnlockWindowResizeByBodyScrollVisibilityChanging: function () {
        this.windowResizeByBodyScrollVisibilityChangingLockCount--;
    },
    WindowResizeByBodyScrollVisibilityChangingLocked: function () {
        return this.windowResizeByBodyScrollVisibilityChangingLockCount > 0;
    },
    HideAllWindows: function () {
        this.DoHideAllWindows(null, "", true);
    }
});
var __aspxPopupControlCollection = null;
function aspxGetPopupControlCollection() {
    if (__aspxPopupControlCollection == null)
        __aspxPopupControlCollection = new ASPxClientPopupControlCollection();
    return __aspxPopupControlCollection;
}
ASPxClientPopupWindow = _aspxCreateClass(null, {
    constructor: function (popupControl, index, name) {
        this.popupControl = popupControl;
        this.index = index;
        this.name = name;
    },
    GetHeaderImageUrl: function () {
        return this.popupControl.GetWindowHeaderImageUrl(this.index);
    },
    SetHeaderImageUrl: function (value) {
        this.popupControl.SetWindowHeaderImageUrl(this.index, value);
    },
    GetFooterImageUrl: function () {
        return this.popupControl.GetWindowFooterImageUrl(this.index);
    },
    SetFooterImageUrl: function (value) {
        this.popupControl.SetWindowFooterImageUrl(this.index, value);
    },
    GetHeaderNavigateUrl: function () {
        return this.popupControl.GetWindowHeaderNavigateUrl(this.index);
    },
    SetHeaderNavigateUrl: function (value) {
        this.popupControl.SetWindowHeaderNavigateUrl(this.index, value);
    },
    GetFooterNavigateUrl: function () {
        return this.popupControl.GetWindowFooterNavigateUrl(this.index);
    },
    SetFooterNavigateUrl: function (value) {
        this.popupControl.SetWindowFooterNavigateUrl(this.index, value);
    },
    GetHeaderText: function () {
        return this.popupControl.GetWindowHeaderText(this.index);
    },
    SetHeaderText: function (value) {
        this.popupControl.SetWindowHeaderText(this.index, value);
    },
    GetFooterText: function () {
        return this.popupControl.GetWindowFooterText(this.index);
    },
    SetFooterText: function (value) {
        this.popupControl.SetWindowFooterText(this.index, value);
    }
});
ASPxClientPopupWindowEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
    constructor: function (window) {
        this.constructor.prototype.constructor.call(this);
        this.window = window;
    }
});
ASPxClientPopupWindowCancelEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
    constructor: function (window) {
        this.constructor.prototype.constructor.call(this);
        this.window = window;
    }
});
ASPxClientPopupWindowResizeEventArgs = _aspxCreateClass(ASPxClientPopupWindowEventArgs, {
    constructor: function (window, resizeState) {
        this.constructor.prototype.constructor.call(this, window);
        this.resizeState = resizeState;
    }
});
ASPxClientPopupWindowPinnedChangedEventArgs = _aspxCreateClass(ASPxClientPopupWindowEventArgs, {
    constructor: function (window, pinned) {
        this.constructor.prototype.constructor.call(this, window);
        this.pinned = pinned;
    }
});
function _aspxPopupWindow(popupControl, windowIndex) {
    this.popupControl = popupControl;
    this.windowIndex = windowIndex;
}
function _aspxScrollDifference(horizontal, vertical) {
    this.horizontal = horizontal;
    this.vertical = vertical;
}
function aspxPWDisappearTimer(name, index) {
    aspxGetPopupControlCollection().OnPWDisappearTimer(name, index);
}
function aspxPWHMDown(evt) {
    return _aspxCancelBubble(evt);
}
function aspxPWCBClick(evt, name, index) {
    var pc = aspxGetPopupControlCollection().Get(name);
    if (pc != null) pc.OnPWHBClickCore(evt, index, "OnCloseButtonClick");
}
function aspxPWPBClick(evt, name, index) {
    var pc = aspxGetPopupControlCollection().Get(name);
    if (pc != null) pc.OnPWHBClickCore(evt, index, "OnPinButtonClick");
}
function aspxPWRBClick(evt, name, index) {
    var pc = aspxGetPopupControlCollection().Get(name);
    if (pc != null) pc.OnPWHBClickCore(evt, index, "OnRefreshButtonClick");
}
function aspxPWMNBClick(evt, name, index) {
    var pc = aspxGetPopupControlCollection().Get(name);
    if (pc != null) pc.OnPWHBClickCore(evt, index, "OnCollapseButtonClick");
}
function aspxPWMXBClick(evt, name, index) {
    var pc = aspxGetPopupControlCollection().Get(name);
    if (pc != null) pc.OnPWHBClickCore(evt, index, "OnMaximizeButtonClick");
}
function aspxPWEMOver(evt) {
    aspxGetPopupControlCollection().OnPWMouseOver(evt);
}
function aspxPWMEMDown(evt) {
    var internalScrollableModalDiv = __aspxAndroidDefaultBrowser ? _aspxGetEventSource(evt) : null;
    var modalDiv = internalScrollableModalDiv ? internalScrollableModalDiv.parentNode : _aspxGetEventSource(evt);
    if (modalDiv != null)
        modalDiv.DXModalPopupControl.OnMouseDownModalElement(evt, modalDiv.DXModalPopupWindowIndex);
}
function aspxPEMEvent(evt) {
    var element = _aspxFindEventSourceParentByTestFunc(evt, aspxTestPopupControlElement);
    if (element != null) {
        var popupControl = element.DXPopupElementControl;
        var index = element.DXPopupWindowIndex;
        if (evt.type == "mousedown") {
            popupControl.SetIsPopuped(index, popupControl.InternalIsWindowVisible(index));
            aspxGetPopupControlCollection().OnMouseDown(evt);
        }
        else {
            var windowPopupAction = popupControl.GetWindowPopupAction(element.DXPopupWindowIndex);
            var leftMouseButtonAction = windowPopupAction == "LeftMouseClick" && _aspxGetIsLeftButtonPressed(evt);
            var rightMouseButtonAction = windowPopupAction == "RightMouseClick" && !_aspxGetIsLeftButtonPressed(evt);
            if (leftMouseButtonAction || rightMouseButtonAction) {
                if (rightMouseButtonAction)
                    _aspxPreventContextMenu(evt);
                var windowCloseAction = popupControl.GetWindowCloseAction(index);
                var isPopuped = popupControl.GetIsPopuped(index);
                var isNewPopupElement = popupControl.GetLastShownPopupElementIndex(index) != element.DXPopupElementIndex;
                if (isPopuped && isNewPopupElement) {
                    popupControl.DoHideWindow(index);
                    aspxGetPopupControlCollection().ClearDisappearTimer();
                    isPopuped = false;
                }
                if (!(isPopuped && windowCloseAction == "OuterMouseClick")) {
                    popupControl.DoShowWindow(index, element.DXPopupElementIndex, evt);
                }
                if (windowCloseAction == "MouseOut")
                    aspxGetPopupControlCollection().InitOverObject(popupControl, element.DXPopupWindowIndex, evt);
                return false;
            }
        }
    }
}
function aspxPWDGMDown(evt, name, index) {
    return aspxPWMDown(evt, name, index, true);
}
function aspxPWGripMDown(evt, name, index) {
    aspxPWMDownCore(evt, name, index, false);
    return aspxPWHMDown(evt);
}
function aspxPointOnElementScrollBar(element, x, y, rtl) {
    var scrollWidth = _aspxGetVerticalScrollBarWidth();
    var hasHorizontalScroll = element.scrollWidth > element.clientWidth;
    var hasVerticalScroll = element.scrollHeight > element.clientHeight;
    var ceilX = rtl ? _aspxGetAbsoluteX(element) + scrollWidth :
  _aspxGetAbsoluteX(element) + (element.offsetWidth - _aspxGetHorizontalBordersWidth(element));
    var ceilY = _aspxGetAbsoluteY(element) + (element.offsetHeight - _aspxGetVerticalBordersWidth(element));
    return (hasVerticalScroll && x >= ceilX - scrollWidth && x <= ceilX) ||
     (hasHorizontalScroll && y >= ceilY - scrollWidth && y <= ceilY);
}
function aspxPWMDown(evt, name, index, isWindowContentDraggingAllowed) {
    var pointOnScrollBar = false;
    var pc = aspxGetPopupControlCollection().Get(name);
    if (pc && pc.enableContentScrolling) {
        var rtl = pc.rtl && (__aspxIE || __aspxFirefox || __aspxOpera);
        pointOnScrollBar = aspxPointOnElementScrollBar(pc.GetContentContainer(index), evt.clientX, evt.clientY, rtl);
    }
    aspxPWMDownCore(evt, name, index, isWindowContentDraggingAllowed, pointOnScrollBar);
    if (isWindowContentDraggingAllowed) {
        aspxGetPopupControlCollection().OnDocumentMouseDown(evt);
        if (typeof (aspxGetDropDownCollection) == "function")
            aspxGetDropDownCollection().OnDocumentMouseDown(evt);
        if (!pointOnScrollBar) {
            if (!__aspxWebKitTouchUI && _aspxGetEventSource(evt).tagName == "IMG")
                _aspxPreventEvent(evt);
        }
    }
}
function aspxPWMDownCore(evt, name, index, isDraggingAllowed, pointOnScrollBar) {
    var pc = aspxGetPopupControlCollection().Get(name);
    if (pc != null) {
        pc.OnActivateMouseDown(evt, index);
        pc.OnMouseDown(evt, index, isDraggingAllowed, pointOnScrollBar);
    }
}
function aspxPWMMove(evt, name, index) {
    aspxGetPopupControlCollection().OnPWMouseMove(evt, name, index);
}
function aspxPCAStop(name, index) {
    var pc = aspxGetPopupControlCollection().Get(name);
    if (pc != null) pc.OnAnimationStop(index);
}
function aspxPCIframeLoad(evt) {
    var srcElement = _aspxGetEventSource(evt);
    if (srcElement) {
        var pcName = srcElement.popupControlName;
        var pcWndIndex = srcElement.pcWndIndex;
        if (pcName) {
            var pc = aspxGetPopupControlCollection().Get(pcName);
            pc.OnIFrameLoad(pcWndIndex);
        }
    }
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseDownEventName, aspxPopupControlDocumentMouseDown);
function aspxPopupControlDocumentMouseDown(evt) {
    aspxGetPopupControlCollection().OnDocumentMouseDown(evt);
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, aspxPopupControlDocumentMouseUp);
function aspxPopupControlDocumentMouseUp(evt) {
    return aspxGetPopupControlCollection().OnMouseUp(evt);
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseMoveEventName, aspxPopupControlDocumentMouseMove);
function aspxPopupControlDocumentMouseMove(evt) {
    if (typeof (aspxGetPopupControlCollection) != "undefined")
        aspxGetPopupControlCollection().OnMouseMove(evt);
}
_aspxAttachEventToDocument("mouseout", aspxPopupControlDocumentMouseOut);
function aspxPopupControlDocumentMouseOut(evt) {
    if (typeof (aspxGetPopupControlCollection) != "undefined")
        aspxGetPopupControlCollection().OnMouseOut(evt);
}
_aspxAttachEventToElement(window, "resize", aspxPopupControlWindowResize);
function aspxPopupControlWindowResize(evt) {
    aspxGetPopupControlCollection().OnResize(evt);
}
_aspxAttachEventToElement(window, "scroll", aspxPopupControlWindowScroll);
function aspxPopupControlWindowScroll(evt) {
    aspxGetPopupControlCollection().OnScroll(evt);
}
_aspxAttachEventToDocument("selectstart", aspxPopupControlDocumentSelectStart);
function aspxPopupControlDocumentSelectStart(evt) {
    var ret = aspxGetPopupControlCollection().OnSelectStart(evt);
    if (!ret) return false;
}
function aspxTestPopupWindowElement(element) {
    return !!element.DXPopupWindowElement;
}
function aspxTestPopupControlElement(element) {
    return element.DXPopupElementControl && _aspxIsExists(element.DXPopupWindowIndex);
}
function aspxTestPopupControlOverElement(element) {
    var collection = aspxGetPopupControlCollection();
    var popupControl = collection.overControl;
    var index = collection.overWindowIndex;
    var windowId = popupControl.GetWindowElementId(index);
    if (element.id == windowId)
        return true;
    var popupElements = popupControl.GetPopupElementList(index);
    for (var i = 0; i < popupElements.length; i++)
        if (popupElements[i] == element)
            return true;
    return false;
}

var __aspxLBSerializingSeparator = "|";
var __aspxLBSerializingSeparatorLength = __aspxLBSerializingSeparator.length;
var __aspxLoadRangeItemsCallbackPrefix = "LBCRI";
var __aspxLBIPostfixes = ['C', 'I', 'T'];
var __aspxLBIIdSuffix = "LBI";
var __aspxLBSIIdSuffix = __aspxLBIIdSuffix + "-1";
var __aspxLBTSIdSuffix = "_TS";
var __aspxLBBSIdSuffix = "_BS";
var __aspxLBHeaderDivIdSuffix = "_H";
var __aspxLTableIdSuffix = "_LBT";
var __aspxLEVISuffix = "_VI";
var __aspxLBDSuffix = "_D";
var __aspxEmptyItemsRange = "0:-1";
var __aspxNbsp = "&nbsp;";
var __aspxNameSeparator = "_";
var __aspxNbspChar = String.fromCharCode(160);
var ListBoxSelectionMode = { Single: 0, Multiple: 1, CheckColumn: 2 };
ASPxClientListEdit = _aspxCreateClass(ASPxClientEdit, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.SelectedIndexChanged = new ASPxClientEvent();
        this.savedSelectedIndex = -1;
    },
    FindInputElement: function () {
        return this.FindStateInputElement();
    },
    FindStateInputElement: function () {
        return document.getElementById(this.name + __aspxLEVISuffix);
    },
    GetItem: function (index) {
        throw "Not implemented";
    },
    GetItemValue: function (index) {
        throw "Not implemented";
    },
    GetValue: function () {
        return this.GetItemValue(this.GetSelectedIndex());
    },
    GetSelectedIndexInternal: function () {
        return this.savedSelectedIndex;
    },
    SetSelectedIndexInternal: function (index) {
        this.savedSelectedIndex = index;
    },
    FindItemIndexByValue: function (value) {
        for (var i = 0; i < this.GetItemCount(); i++) {
            if (this.GetItemValue(i) == value)
                return i;
        }
        return -1;
    },
    RaiseItemClick: function () {
        var processOnServer = this.autoPostBack;
        if (!this.ItemClick.IsEmpty()) {
            var args = new ASPxClientProcessingModeEventArgs(processOnServer);
            this.ItemClick.FireEvent(this, args);
            processOnServer = args.processOnServer;
        }
        return processOnServer;
    },
    RaiseItemDoubleClick: function () {
        var processOnServer = this.autoPostBack;
        if (!this.ItemDoubleClick.IsEmpty()) {
            var args = new ASPxClientProcessingModeEventArgs(processOnServer);
            this.ItemDoubleClick.FireEvent(this, args);
            processOnServer = args.processOnServer;
        }
        return processOnServer;
    },
    RaiseValueChangedEvent: function () {
        if (!this.isInitialized) return false;
        var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
        processOnServer = this.RaiseValueChangedAdditionalEvents(processOnServer);
        return processOnServer;
    },
    RaiseValueChangedAdditionalEvents: function (processOnServer) {
        return this.RaiseSelectedIndexChanged(processOnServer);
    },
    RaiseSelectedIndexChanged: function (processOnServer) {
        this.RaiseValidationInternal();
        if (!this.SelectedIndexChanged.IsEmpty()) {
            var args = new ASPxClientProcessingModeEventArgs(processOnServer);
            this.SelectedIndexChanged.FireEvent(this, args);
            processOnServer = args.processOnServer;
        }
        return processOnServer;
    },
    UpdateHiddenInputs: function () {
        var element = this.FindStateInputElement();
        if (_aspxIsExistsElement(element)) {
            var value = this.GetValue();
            if (value == null)
                value = "";
            element.value = value;
        }
    },
    GetSelectedItem: function () {
        var index = this.GetSelectedIndexInternal();
        return this.GetItem(index);
    },
    GetSelectedIndex: function () {
        return this.GetSelectedIndexInternal();
    },
    SetSelectedItem: function (item) {
        var index = (item != null) ? item.index : -1;
        this.SetSelectedIndex(index);
    },
    SetSelectedIndex: function (index) {
        this.SelectIndexSilent(index);
    },
    SelectIndexSilent: function (index) {
        throw "Not implemented";
    },
    OnValueChanged: function () {
        var processOnServer = this.RaiseValueChangedEvent() && this.GetIsValid();
        if (processOnServer)
            this.SendPostBackInternal("");
    }
});
ASPxClientListEditItem = _aspxCreateClass(null, {
    constructor: function (listEditBase, index, text, value, imageUrl) {
        this.listEditBase = listEditBase;
        this.index = index;
        this.imageUrl = imageUrl;
        this.text = text;
        this.value = value;
    }
});
ASPxClientListBoxItem = _aspxCreateClass(ASPxClientListEditItem, {
    constructor: function (listEditBase, index, texts, value, imageUrl, selected) {
        this.constructor.prototype.constructor.call(this, listEditBase, index, null, value, imageUrl);
        this.selected = selected ? selected : false;
        this.texts = texts;
        this.text = listEditBase.FormatText(texts);
    },
    GetColumnText: function (columnIndexOrFieldName) {
        var columnIndex = -1;
        if (typeof (columnIndexOrFieldName) == "string")
            columnIndex = _aspxArrayIndexOf(this.listEditBase.columnFieldNames, columnIndexOrFieldName);
        else if (typeof (columnIndexOrFieldName) == "number")
            columnIndex = columnIndexOrFieldName;
        return this.GetColumnTextByIndex(columnIndex);
    },
    GetColumnTextByIndex: function (columnIndex) {
        if (0 <= columnIndex && columnIndex < this.texts.length)
            return this.texts[columnIndex];
        else
            return null;
    }
});
_aspxListBoxScrollCallbackHelperBase = _aspxCreateClass(null, {
    constructor: function (listBoxControl) {
        this.listBoxControl = listBoxControl;
        this.itemsRange = "";
        this.defaultItemsRange = "0:" + (this.listBoxControl.callbackPageSize - 1);
    },
    OnScroll: function () { },
    Reset: function () { },
    IsScrolledToTopSpacer: function () { return false; },
    IsScrolledToBottomSpacer: function () { return false; },
    GetIsNeedToHideTopSpacer: function () { return false; },
    GetIsNeedCallback: function () { return false; },
    GetItemsRangeForLoad: function () { return this.defaultItemsRange; },
    SetItemsRangeForLoad: function () { }
});
_aspxListBoxScrollCallbackHelper = _aspxCreateClass(_aspxListBoxScrollCallbackHelperBase, {
    constructor: function (listBoxControl) {
        this.constructor.prototype.constructor.call(this, listBoxControl);
        this.isScrolledToTopSpacer = false;
        this.isScrolledToBottomSpacer = false;
    },
    OnScroll: function () {
        this.DetectScrollDirection();
        this.ResetItemsRange();
        if (this.GetIsAnySpacerVisible())
            this.RecalcItemsRangeForLoad();
    },
    DetectScrollDirection: function () {
        var listBoxControl = this.listBoxControl;
        var divElement = listBoxControl.GetScrollDivElement();
        var listTable = listBoxControl.GetListTable();
        var scrollTop = divElement.scrollTop;
        var scrollBottom = divElement.scrollTop + divElement.clientHeight;
        var isTopSpacerVisible = listBoxControl.GetScrollSpacerVisibility(true);
        var isBottomSpacerVisible = listBoxControl.GetScrollSpacerVisibility(false);
        var topSpacerHeight = listBoxControl.GetScrollSpacerVisibility(true) ? parseInt(listBoxControl.GetScrollSpacerElement(true).clientHeight) : 0;
        this.isScrolledToTopSpacer = (scrollTop < topSpacerHeight) && isTopSpacerVisible;
        this.isScrolledToBottomSpacer = (scrollBottom >= topSpacerHeight + listTable.clientHeight) && isBottomSpacerVisible;
    },
    Reset: function () {
        this.ResetItemsRange();
        this.isScrolledToTopSpacer = false;
        this.isScrolledToBottomSpacer = false;
    },
    ResetItemsRange: function () {
        this.itemsRange = "";
    },
    RecalcItemsRangeForLoad: function () {
        if (this.listBoxControl.isCallbackMode) {
            if (this.isScrolledToTopSpacer || this.isScrolledToBottomSpacer)
                this.SetItemsRangeForLoad(this.isScrolledToTopSpacer);
        }
    },
    IsScrolledToTopSpacer: function () {
        return this.isScrolledToTopSpacer;
    },
    IsScrolledToBottomSpacer: function () {
        return this.isScrolledToBottomSpacer;
    },
    GetIsAnySpacerVisible: function () {
        return this.isScrolledToTopSpacer || this.isScrolledToBottomSpacer;
    },
    GetIsNeedCallback: function () {
        return !this.GetIsItemsRangeEmpty();
    },
    GetIsNeedToHideTopSpacer: function () {
        return this.isScrolledToTopSpacer && this.GetIsItemsRangeEmpty();
    },
    GetItemsRangeForLoad: function () {
        return (!this.GetIsItemsRangeEmpty() ? this.itemsRange : this.defaultItemsRange);
    },
    SetItemsRangeForLoad: function (isForTop) {
        var listbox = this.listBoxControl;
        var beginIndex = isForTop ?
   listbox.serverIndexOfFirstItem - listbox.callbackPageSize :
   listbox.serverIndexOfFirstItem + listbox.GetItemCount();
        beginIndex = beginIndex < 0 ? 0 : beginIndex;
        var endIndex = isForTop ?
   listbox.serverIndexOfFirstItem - 1 :
   beginIndex + listbox.callbackPageSize - 1;
        this.itemsRange = beginIndex + ":" + endIndex;
        this.isScrolledToTopSpacer = isForTop;
        this.isScrolledToBottomSpacer = !isForTop;
    },
    GetIsItemsRangeEmpty: function () {
        return (this.itemsRange == "" || this.itemsRange == __aspxEmptyItemsRange);
    }
});
ASPxClientListBoxBase = _aspxCreateClass(ASPxClientListEdit, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.APILockCount = 0;
        this.enableSyncOnPerfCallback = false;
        this.scrollOnKBNavigationLockCount = 0;
        this.isComboBoxList = false;
        this.isSyncEnabled = true;
        this.ownerName = "";
        this.selectionEventsLockCount = 0;
        this.syncLockCount = 0;
        this.encodeHtml = true;
        this.serializingHelper = null;
        this.deletedItems = [];
        this.insertedItems = [];
        this.itemsValue = [];
        this.ItemDoubleClick = new ASPxClientEvent();
        this.ItemClick = new ASPxClientEvent();
    },
    InlineInitialize: function () {
        ASPxClientListEdit.prototype.InlineInitialize.call(this);
        for (var i = 0; i < this.itemsValue.length; i++)
            this.itemsValue[i] = this.GetDecodeValue(this.itemsValue[i]);
    },
    LockScrollOnKBNavigation: function () {
        this.scrollOnKBNavigationLockCount++;
    },
    UnlockScrollOnKBNavigation: function () {
        this.scrollOnKBNavigationLockCount--;
    },
    IsScrollOnKBNavigationLocked: function () {
        return this.scrollOnKBNavigationLockCount > 0;
    },
    LockSelectionEvents: function () {
        this.selectionEventsLockCount++;
    },
    UnlockSelectionEvents: function () {
        this.selectionEventsLockCount--;
    },
    IsSelectionEventsLocked: function () {
        return this.selectionEventsLockCount > 0;
    },
    LockSynchronizationOnInternalCallback: function () {
        if (!this.enableSyncOnPerfCallback)
            this.LockSynchronization();
    },
    UnlockSynchronizationOnInternalCallback: function () {
        if (!this.enableSyncOnPerfCallback)
            this.UnlockSynchronization();
    },
    GetItemCount: function () {
        return 0;
    },
    GetItemValue: function (index) {
        if (0 <= index && index < this.GetItemCount())
            return this.PrepareItemValue(this.itemsValue[index]);
        return null;
    },
    GetItemTexts: function (item) {
        return item.text;
    },
    PrepareItemValue: function (value) {
        return (typeof (value) == "string" && value == "" && this.convertEmptyStringToNull) ? null : value;
    },
    LoadItemsFromCallback: function (isToTop, itemStrings) {
    },
    SetValue: function (value) {
        var index = this.FindItemIndexByValue(value);
        this.SelectIndexSilentAndMakeVisible(index);
    },
    FindItemIndexByText: function (text) {
        for (var i = 0; i < this.GetItemCount(); i++) {
            if (this.GetItem(i).text == text)
                return i;
        }
        return -1;
    },
    SelectIndex: function (index) {
        if (this.SelectIndexSilentAndMakeVisible(index, false)) {
            this.RaisePersonalStandardValidation();
            this.OnValueChanged();
        }
    },
    SelectIndexSilentAndMakeVisible: function (index) {
        var selectionChanged = this.SelectIndexSilent(index);
        if (!this.IsScrollOnKBNavigationLocked())
            this.MakeItemVisible(index);
        return selectionChanged;
    },
    FormatText: function (texts) {
        return texts;
    },
    MakeItemVisible: function (index) {
    },
    InitOnContainerMadeVisible: function () {
    },
    AddItem: function (texts, value, imageUrl) {
        var index = this.GetItemCount();
        this.InsertItemInternal(index, texts, value, imageUrl);
        return index;
    },
    InsertItem: function (index, texts, value, imageUrl) {
        this.InsertItemInternal(index, texts, value, imageUrl);
    },
    InsertItemInternal: function (index, text, value, imageUrl) {
    },
    BeginUpdate: function () {
        this.APILockCount++;
    },
    EndUpdate: function () {
        this.APILockCount--;
        this.Synchronize();
    },
    ClearItems: function () {
        this.BeginUpdate();
        this.UpdateArraysItemsCleared();
        this.ClearItemsCore();
        this.EndUpdate();
    },
    ClearItemsCore: function () {
    },
    ClearItemsForPerformCallback: function () {
        this.itemsValue = [];
        this.ClearItemsCore();
    },
    RemoveItem: function (index) {
    },
    FindItemByText: function (text) {
        var index = this.FindItemIndexByText(text);
        return this.GetItem(index);
    },
    FindItemByValue: function (value) {
        var index = this.FindItemIndexByValue(value);
        return this.GetItem(index);
    },
    PerformCallback: function (arg) {
    },
    GetCallbackArguments: function () {
        var args = this.GetCustomCallbackArg();
        args += this.GetLoadItemsRangeCallbackArg();
        return args;
    },
    GetLoadItemsRangeCallbackArg: function () {
        return this.FormatCallbackArg(__aspxLoadRangeItemsCallbackPrefix, this.GetItemsRangeForLoad());
    },
    FormatCallbackArg: function (prefix, arg) {
        arg = arg.toString();
        return (_aspxIsExists(arg) ? prefix + "|" + arg.length + ';' + arg + ';' : "");
    },
    GetItemsRangeForLoad: function () {
        return __aspxEmptyItemsRange;
    },
    GetCallbackOwnerControl: function () {
        if (this.ownerName && !this.ownerControl)
            this.ownerControl = aspxGetControlCollection().Get(this.ownerName);
        return this.ownerControl;
    },
    GetCustomCallbackArg: function () {
        return this.GetSyncHiddenInput("CustomCallback").value;
    },
    SetCustomCallbackArg: function (arg) {
        this.GetSyncHiddenInput("CustomCallback").value = arg;
    },
    FormatAndSetCustomCallbackArg: function (arg) {
        arg = _aspxIsExists(arg) ? arg.toString() : ""
        var formatArg = this.FormatCallbackArg("LECC", arg);
        this.SetCustomCallbackArg(formatArg);
    },
    SendCallback: function () {
    },
    LockSynchronization: function () {
        this.syncLockCount++;
    },
    UnlockSynchronization: function () {
        this.syncLockCount--;
    },
    IsSyncLocked: function () {
        return this.syncLockCount > 0;
    },
    IsSyncEnabled: function () {
        return this.isSyncEnabled && !this.IsSyncLocked();
    },
    RegisterInsertedItem: function (index, text, value, imageUrl) {
        if (this.IsSyncEnabled()) {
            this.RefreshSynchroArraysIndex(index, true);
            var item = this.CreateItem(index, text, value, imageUrl);
            this.insertedItems.push(item);
            this.Synchronize();
        }
    },
    CreateItem: function (index, text, value, imageUrl, selected) {
        return new ASPxClientListBoxItem(this, index, text, value, imageUrl, selected);
    },
    UpdateSyncArraysItemDeleted: function (item, isValueRemovingRequired) {
        if (isValueRemovingRequired)
            _aspxArrayRemoveAt(this.itemsValue, item.index);
        if (this.IsSyncEnabled()) {
            var index = this.FindItemInArray(this.insertedItems, item);
            if (index == -1) {
                this.RefreshSynchroArraysIndex(item.index, false);
                this.deletedItems.push(item);
            } else {
                this.RefreshSynchroArraysIndex(item.index, false);
                _aspxArrayRemoveAt(this.insertedItems, index);
            }
            this.Synchronize();
        }
    },
    UpdateArraysItemsCleared: function () {
        if (this.IsSyncEnabled()) {
            for (var i = this.GetItemCount() - 1; i >= 0; i--)
                this.UpdateSyncArraysItemDeleted(this.GetItem(i), false);
        }
        this.itemsValue = [];
    },
    RefreshSynchroArraysIndex: function (startIndex, isIncrease) {
        this.RefreshSynchroArrayIndexIndex(this.deletedItems, startIndex, isIncrease);
        this.RefreshSynchroArrayIndexIndex(this.insertedItems, startIndex, isIncrease);
    },
    RefreshSynchroArrayIndexIndex: function (array, startIndex, isIncrease) {
        var delta = isIncrease ? 1 : -1;
        for (var i = 0; i < array.length; i++) {
            if (array[i].index >= startIndex)
                array[i].index += delta;
        }
    },
    FindItemInArray: function (array, item) {
        for (var i = array.length - 1; i >= 0; i--) {
            var currentItem = array[i];
            if ((!this.encodeHtml || currentItem.text == item.text) && currentItem.value == item.value &&
    currentItem.imageUrl == item.imageUrl)
                break;
        }
        return i;
    },
    GetSyncHiddenInput: function (syncType) {
        return _aspxGetElementById(this.name + syncType);
    },
    Synchronize: function () {
        if (this.APILockCount == 0) {
            if (this.IsSyncEnabled()) {
                this.SynchronizeItems(this.deletedItems, "DeletedItems");
                this.SynchronizeItems(this.insertedItems, "InsertedItems");
            }
            this.CorrectSizeByTimer();
        }
    },
    CorrectSizeByTimer: function () {
    },
    SynchronizeItems: function (items, syncType) {
        var inputElement = this.GetSyncHiddenInput(syncType);
        if (!_aspxIsExistsElement(inputElement))
            return;
        inputElement.value = _aspxEncodeHtml(this.SerializeItems(items));
    },
    GetSerializingHelper: function () {
        if (this.serializingHelper == null)
            this.serializingHelper = this.CreateSerializingHelper();
        return this.serializingHelper;
    },
    CreateSerializingHelper: function () {
        return new _aspxListBoxBaseItemsSerializingHelper(this);
    },
    SerializeItems: function (items) {
        var serialiser = this.GetSerializingHelper();
        return serialiser.SerializeItems(items);
    },
    DeserializeItems: function (serializedItems) {
        var serialiser = this.GetSerializingHelper();
        return serialiser.DeserializeItems(serializedItems);
    }
});
_aspxListBoxBaseItemsSerializingHelper = _aspxCreateClass(null, {
    constructor: function (listBoxControl) {
        this.listBoxControl = listBoxControl;
        this.startPos = 0;
    },
    SerializeItems: function (items) {
        var sb = [];
        for (var i = 0; i < items.length; i++)
            this.SerializeItem(sb, items[i]);
        return sb.join("");
    },
    SerializeItem: function (sb, item) {
        if (!item)
            return;
        this.SerializeAtomValue(sb, item.index);
        this.SerializeAtomValue(sb, item.value);
        this.SerializeAtomValue(sb, item.imageUrl);
        var texts = this.listBoxControl.GetItemTexts(item);
        if (typeof (texts) == "string")
            this.SerializeAtomValue(sb, texts);
        else {
            for (var i = 0; i < texts.length; i++)
                this.SerializeAtomValue(sb, texts[i]);
        }
    },
    SerializeAtomValue: function (sb, value) {
        var valueStr = _aspxIsExists(value) ? value.toString() : "";
        sb.push(valueStr.length);
        sb.push('|');
        sb.push(valueStr);
    },
    DeserializeItems: function (serializedItems) {
        var deserializedItems = [];
        var evalItems = _aspxEvalJSON(serializedItems, this.listBoxControl.name);
        if (evalItems.length > 0) {
            var textsCount = this.listBoxControl.isNative ? 1 : this.listBoxControl.GetItemTextCellCount();
            var itemLength = (this.listBoxControl.imageCellExists ? 1 : 0) + 1 + textsCount;
            var index = 0, selected, value, texts, imageUrl, item;
            for (var i = 0; i < evalItems.length; i += itemLength, index++) {
                selected = typeof (evalItems[i]) == "object";
                value = selected ? evalItems[i][0] : evalItems[i];
                texts = textsCount > 0 ? evalItems.slice(i + 1, i + 1 + textsCount) : evalItems[i + 1];
                imageUrl = this.listBoxControl.imageCellExists ? evalItems[i + itemLength - 1] : "";
                item = this.listBoxControl.CreateItem(index, texts, value, imageUrl, selected);
                deserializedItems.push(item);
            }
            return deserializedItems;
        }
    },
    ParseItemIndex: function (serializedItem) {
        return parseInt(this.ParseString(serializedItem));
    },
    ParseItemValue: function (serializedItem) {
        return this.ParseString(serializedItem);
    },
    ParseString: function (str) {
        var indexOfSeparator = str.indexOf(__aspxLBSerializingSeparator, this.startPos);
        var strLength = parseInt(str.substring(this.startPos, indexOfSeparator));
        var strStartPos = indexOfSeparator + __aspxLBSerializingSeparatorLength;
        this.startPos = strStartPos + strLength;
        return str.substring(strStartPos, strStartPos + strLength);
    },
    ParseTexts: function (serializedItems) {
        return this.ParseString(serializedItems);
    },
    DeserializeValues: function (serializedValues) {
        var deserializedValues = [];
        this.startPos = 0;
        while (this.startPos < serializedValues.length) {
            deserializedValues.push(this.ParseItemValue(serializedValues));
        }
        return deserializedValues;
    }
});
_aspxListBoxItemsSerializingHelper = _aspxCreateClass(_aspxListBoxBaseItemsSerializingHelper, {
    constructor: function (listBoxControl) {
        this.constructor.prototype.constructor.call(this, listBoxControl);
    },
    ParseTexts: function (serializedItems) {
        var textColumnCount = this.listBoxControl.GetItemTextCellCount();
        return (textColumnCount > 1) ? this.DeserializeItemTexts(serializedItems, textColumnCount)
   : this.constructor.prototype.ParseTexts.call(this, serializedItems);
    },
    DeserializeItemTexts: function (serializedItem, textColumnCount) {
        var text = "";
        var texts = [];
        for (var i = 0; i < textColumnCount; i++)
            texts.push(this.ParseString(serializedItem));
        return texts;
    }
});
_aspxListBoxSingleSelectionHelper = _aspxCreateClass(null, {
    constructor: function (listBoxControl) {
        this.listBoxControl = listBoxControl;
        this.savedSelectedIndex = -1;
        this.updateHiddenInputsLockCount = 0;
        this.cachedSelectionChangedArgs = [];
    },
    ClearSelection: function () {
        this.SetSelectedIndexCore(-1);
        this.OnSelectionCleared();
    },
    OnSelectionCleared: function () {
        this.cachedSelectionChangedArgs = [];
    },
    GetSelectedIndexInternal: function () {
        return this.savedSelectedIndex;
    },
    SetSelectedIndexInternal: function (index) {
        this.savedSelectedIndex = index;
    },
    SetSelectedIndexCore: function (index) {
        if (index != this.savedSelectedIndex && -1 <= index && index < this.GetItemCount()) {
            this.BeginSelectionUpdate();
            this.SetSelectedIndexInternal(index);
            this.EndSelectionUpdate();
            return true;
        }
        return false;
    },
    GetSelectedIndex: function () {
        return this.GetSelectedIndexInternal();
    },
    SetSelectedIndex: function (index) {
        this.ChangeSelectedItem(index);
        this.SetSelectedIndexCore(index);
        this.OnItemSelectionChanged(index, true);
    },
    GetSelectedIndices: function () {
        var selectedIndex = this.GetSelectedIndexInternal();
        return selectedIndex != -1 ? [selectedIndex] : [];
    },
    GetSelectedValues: function () {
        var selectedValue = this.listBoxControl.GetValue();
        return selectedValue != null ? [selectedValue] : [];
    },
    GetSelectedItems: function () {
        var selectedItem = this.listBoxControl.GetSelectedItem();
        return selectedItem != null ? [selectedItem] : [];
    },
    SelectIndices: function (indices) { },
    SelectItems: function (items) { },
    SelectValues: function (values) { },
    UnselectIndices: function (selected) { this.SetSelectedIndex(-1); },
    UnselectItems: function (items) { },
    UnselectValues: function (values) { },
    GetIsItemSelected: function (index) { return index == this.GetSelectedIndexInternal(); },
    ResetSelectionCollectionsCache: function () { },
    OnItemClick: function (index, evt) {
        var selected = true;
        this.BeginSelectionUpdate();
        this.ChangeSelectedItem(index);
        var selectedIndexChanged = this.SetSelectedIndexCore(index);
        this.EndSelectionUpdate();
        if (selectedIndexChanged)
            this.OnItemSelectionChanged(index, selected);
    },
    ChangeSelectedItem: function (newSelectedIndex) {
        var selected = true;
        var oldSelectedIndex = this.GetSelectedIndexInternal();
        this.BeginSelectionUpdate();
        this.SetItemSelectionState(oldSelectedIndex, !selected);
        this.SetItemSelectionState(newSelectedIndex, selected);
        this.EndSelectionUpdate();
    },
    SetItemSelectionState: function (itemIndex, selected, controller) {
        this.BeginSelectionUpdate();
        this.listBoxControl.SetItemSelectionAppearance(itemIndex, selected, controller);
        this.EndSelectionUpdate();
    },
    GetFocusedIndex: function () {
        return this.GetSelectedIndexInternal();
    },
    BeginSelectionUpdate: function () {
        this.updateHiddenInputsLockCount++;
    },
    EndSelectionUpdate: function () {
        this.updateHiddenInputsLockCount--;
        if (!this.IsUpdateInternalSelectionStateLocked()) {
            this.listBoxControl.UpdateInternalState();
            this.FlushSelectionChanged();
        }
    },
    IsUpdateInternalSelectionStateLocked: function () {
        return this.updateHiddenInputsLockCount > 0;
    },
    GetItemCount: function () {
        return this.listBoxControl.GetItemCount();
    },
    OnItemSelectionChanged: function (index, selected) {
        if (this.IsUpdateInternalSelectionStateLocked()) {
            var a = { Index: index, Selected: selected };
            this.cachedSelectionChangedArgs.push(a);
        }
        else
            this.listBoxControl.OnItemSelectionChanged(index, selected);
    },
    FlushSelectionChanged: function () {
        if (this.IsUpdateInternalSelectionStateLocked())
            return;
        for (var i = 0; i < this.cachedSelectionChangedArgs.length; i++)
            this.listBoxControl.OnItemSelectionChanged(this.cachedSelectionChangedArgs[i].Index, this.cachedSelectionChangedArgs[i].Selected);
        this.cachedSelectionChangedArgs = [];
    },
    OnItemInserted: function (index) {
        if (index <= this.savedSelectedIndex && this.savedSelectedIndex != -1)
            this.SetSelectedIndexInternal(this.savedSelectedIndex + 1);
    },
    OnItemRemoved: function (index) {
        var selectedIndex = this.GetSelectedIndex();
        if (index < this.savedSelectedIndex)
            this.SetSelectedIndexInternal(this.savedSelectedIndex - 1);
        else if (index == this.savedSelectedIndex)
            this.SetSelectedIndexInternal(-1);
    },
    OnItemsCleared: function () {
        this.ClearSelection();
    }
});
_aspxListBoxMultiSelectionHelper = _aspxCreateClass(_aspxListBoxSingleSelectionHelper, {
    constructor: function (listBoxControl) {
        this.constructor.prototype.constructor.call(this, listBoxControl);
        this.selectedValuesCache = [];
        this.selectedItemsCache = [];
        this.savedSelectedIndices = [];
        this.selectedIndicesSortingRequired = false;
        this.focusedIndex = -1;
        this.lastIndexFocusedWithoutShift = -1;
    },
    SetSelectedIndex: function (index) {
        this.SingleIndexSelection(index);
    },
    ResetSelectionCollectionsCache: function () {
        this.selectedIndicesSortingRequired = true;
        this.selectedItemsCache = [];
        this.selectedValuesCache = [];
    },
    GetSelectedIndices: function () {
        return this.GetSortedSelectedIndices().slice();
    },
    GetSortedSelectedIndices: function () {
        if (this.savedSelectedIndices.length > 1 && this.selectedIndicesSortingRequired)
            this.SortSelectedIndices();
        return this.savedSelectedIndices;
    },
    GetSelectedValues: function () {
        if (this.savedSelectedIndices.length == 0)
            return [];
        if (this.selectedValuesCache.length == 0)
            this.selectedValuesCache = this.GetSelectedValuesCore();
        return this.selectedValuesCache;
    },
    GetSelectedValuesCore: function () {
        var selectedValues = [];
        var selectedIndices = this.GetSortedSelectedIndices();
        if (selectedIndices.length == 0)
            return selectedValues;
        for (var i = 0; i < selectedIndices.length; i++)
            selectedValues.push(this.listBoxControl.GetItemValue([selectedIndices[i]]));
        return selectedValues;
    },
    GetSelectedItems: function () {
        if (this.savedSelectedIndices.length == 0)
            return [];
        if (this.selectedItemsCache.length == 0)
            this.selectedItemsCache = this.GetSelectedItemsCore();
        return this.selectedItemsCache;
    },
    GetSelectedItemsCore: function () {
        var selectedItems = [];
        for (var i = 0; i < this.savedSelectedIndices.length; i++)
            selectedItems.push(this.listBoxControl.GetItem(this.savedSelectedIndices[i]));
        return selectedItems;
    },
    SetIndicesSelectionState: function (indices, selected) {
        this.BeginSelectionUpdate();
        var controller = typeof (aspxGetStateController) != "undefined" ? aspxGetStateController() : null;
        var itemCount = this.listBoxControl.GetItemCount();
        if (indices) {
            for (var i = 0; i < indices.length; i++) {
                var index = indices[i];
                if (index >= 0 && index < itemCount)
                    this.SetItemSelectionState(indices[i], selected, controller);
            }
        } else
            this.SetAllItemsSelectionState(selected, controller);
        this.SetSelectedIndexCore(this.GetFirstSelectedIndex());
        this.EndSelectionUpdate();
    },
    SetItemsSelectionState: function (items, selected) {
        var indices = items ? this.ConvertItemsToIndices(items) : null;
        this.SetIndicesSelectionState(indices, selected);
    },
    SetValuesSelectionState: function (values, selected) {
        var indices = values ? this.ConvertValuesToIndices(values) : null;
        this.SetIndicesSelectionState(indices, selected);
    },
    ConvertValuesToIndices: function (values) {
        var indices = [];
        for (var i = 0; i < values.length; i++)
            indices.push(this.listBoxControl.FindItemIndexByValue(values[i]));
        return indices;
    },
    ConvertItemsToIndices: function (items) {
        var indices = [];
        for (var i = 0; i < items.length; i++)
            indices.push(items[i].index);
        return indices;
    },
    SelectIndices: function (indices) {
        this.SetIndicesSelectionState(indices, true);
    },
    SelectItems: function (items) {
        this.SetItemsSelectionState(items, true);
    },
    SelectValues: function (values) {
        this.SetValuesSelectionState(values, true);
    },
    UnselectIndices: function (indices) {
        this.SetIndicesSelectionState(indices, false);
    },
    UnselectItems: function (items) {
        this.SetItemsSelectionState(items, false);
    },
    UnselectValues: function (values) {
        this.SetValuesSelectionState(values, false);
    },
    GetIsItemSelected: function (index) {
        return _aspxArrayBinarySearch(this.GetSortedSelectedIndices(), index) > -1;
    },
    OnItemClick: function (index, evt) {
        this.BeginSelectionUpdate();
        var ctrlKey = evt.ctrlKey || evt.metaKey;
        var shift = evt.shiftKey;
        if (ctrlKey)
            this.AddSelectedIndex(index);
        else if (shift) {
            var startIndex = index > this.lastIndexFocusedWithoutShift ? this.lastIndexFocusedWithoutShift + 1 : index;
            var endIndex = index > this.lastIndexFocusedWithoutShift ? index : this.lastIndexFocusedWithoutShift - 1;
            this.SelectRangeIndicesOnly(startIndex, endIndex);
            this.SetFocusedIndexInternal(index, true);
        } else
            this.SingleIndexSelection(index);
        this.EndSelectionUpdate();
    },
    OnItemCheckBoxClick: function (index, evt) {
        this.BeginSelectionUpdate();
        this.AddSelectedIndex(index);
        this.EndSelectionUpdate();
    },
    AddSelectedIndex: function (index) {
        this.SetFocusedIndexInternal(index, false);
        var indexInSelectedIndices = _aspxArrayIndexOf(this.savedSelectedIndices, index);
        var selectionOperation = indexInSelectedIndices == -1;
        this.SetItemSelectionState(index, selectionOperation);
        this.SetSelectedIndexCore(this.GetFirstSelectedIndex());
    },
    SelectRangeIndicesOnly: function (startIndex, endIndex) {
        this.BeginSelectionUpdate();
        var controller = typeof (aspxGetStateController) != "undefined" ? aspxGetStateController() : null;
        var itemCount = this.GetItemCount();
        for (var i = 0; i < itemCount; i++) {
            if (i == this.lastIndexFocusedWithoutShift)
                continue;
            this.SetItemSelectionState(i, i >= startIndex && i <= endIndex, controller);
        }
        this.SetSelectedIndexCore(this.GetFirstSelectedIndex());
        this.EndSelectionUpdate();
    },
    SingleIndexSelection: function (index) {
        this.SetFocusedIndexInternal(-1, false);
        this.SelectRangeIndicesOnly(index, index);
        this.SetFocusedIndexInternal(index, false);
    },
    SetAllItemsSelectionState: function (selected, controller) {
        this.BeginSelectionUpdate();
        this.savedSelectedIndices = [];
        var itemCount = this.GetItemCount();
        for (var i = 0; i < itemCount; i++) {
            this.SetItemSelectionStateCore(i, selected, controller);
            if (selected)
                this.PushSelectedIndex(i);
            this.OnItemSelectionChanged(i, selected);
        }
        this.ResetSelectionCollectionsCache();
        this.EndSelectionUpdate();
    },
    SetItemSelectionState: function (itemIndex, selected, controller) {
        this.SetItemSelectionStateCore(itemIndex, selected, controller);
        this.ResetSelectionCollectionsCache();
        var indexInSelectionArray = _aspxArrayIndexOf(this.savedSelectedIndices, itemIndex);
        if (selected && indexInSelectionArray == -1) {
            this.PushSelectedIndex(itemIndex);
            this.OnItemSelectionChanged(itemIndex, true);
        }
        if (!selected && indexInSelectionArray != -1) {
            this.RemoveSelectedIndexAt(indexInSelectionArray);
            this.OnItemSelectionChanged(itemIndex, false);
        }
    },
    GetFirstSelectedIndex: function () {
        var selectedIndices = this.GetSelectedIndices();
        var selectedIndicesCount = selectedIndices.length;
        var firstSelectedIndex = -1;
        if (selectedIndicesCount > 0) {
            firstSelectedIndex = selectedIndices[0];
            for (var i = 1; i < selectedIndices.length; i++) {
                if (firstSelectedIndex > selectedIndices[i])
                    firstSelectedIndex = selectedIndices[i];
            }
        }
        return firstSelectedIndex;
    },
    PushSelectedIndex: function (index) {
        this.savedSelectedIndices.push(index);
    },
    RemoveSelectedIndex: function (index) {
        _aspxArrayRemove(this.savedSelectedIndices, index);
    },
    RemoveSelectedIndexAt: function (indexInArray) {
        _aspxArrayRemoveAt(this.savedSelectedIndices, indexInArray);
    },
    SortSelectedIndices: function () {
        _aspxArrayIntegerAscendingSort(this.savedSelectedIndices);
        this.selectedIndicesSortingRequired = false;
    },
    SetItemSelectionStateCore: function (itemIndex, selected, controller) {
        _aspxListBoxSingleSelectionHelper.prototype.SetItemSelectionState.call(this, itemIndex, selected, controller);
    },
    GetFocusedIndex: function () {
        return this.focusedIndex;
    },
    SetFocusedIndexInternal: function (index, isShiftPressed) {
        if (!isShiftPressed)
            this.lastIndexFocusedWithoutShift = index;
        this.focusedIndex = index;
    },
    OnItemInserted: function (index) {
        this.ResetSelectionCollectionsCache();
        _aspxListBoxSingleSelectionHelper.prototype.OnItemInserted.call(this, index);
        if (this.focusedIndex >= index)
            this.focusedIndex++;
        for (var i = 0; i < this.savedSelectedIndices.length; i++) {
            if (this.savedSelectedIndices[i] >= index)
                this.savedSelectedIndices[i]++;
        }
    },
    OnItemRemoved: function (index) {
        this.ResetSelectionCollectionsCache();
        _aspxListBoxSingleSelectionHelper.prototype.OnItemRemoved.call(this, index);
        if (this.focusedIndex == index)
            this.focusedIndex = -1;
        else if (this.focusedIndex > index)
            this.focusedIndex--;
        if (this.GetIsItemSelected(index))
            this.RemoveSelectedIndex(index);
        for (var i = 0; i < this.savedSelectedIndices.length; i++) {
            if (this.savedSelectedIndices[i] > index)
                this.savedSelectedIndices[i]--;
        }
        if (this.GetSelectedIndex() == -1)
            this.SetSelectedIndexCore(this.GetFirstSelectedIndex());
    },
    ClearSelection: function () {
        this.ResetSelectionCollectionsCache();
        _aspxArrayClear(this.savedSelectedIndices);
        this.OnSelectionCleared();
        this.SetSelectedIndexCore(-1);
    }
});
_aspxCheckBoxListMultiSelectionHelper = _aspxCreateClass(_aspxListBoxMultiSelectionHelper, {
    OnItemClick: function (index) {
        this.BeginSelectionUpdate();
        this.AddSelectedIndex(index);
        this.EndSelectionUpdate();
    },
    GetFocusedItemIndex: function () {
        return this.lastIndexFocusedWithoutShift;
    }
});
_aspxListBoxCheckSelectionHelper = _aspxCreateClass(_aspxListBoxMultiSelectionHelper, {
    OnItemClick: function (index, evt) {
        this.BeginSelectionUpdate();
        if (evt.shiftKey)
            _aspxListBoxMultiSelectionHelper.prototype.OnItemClick.call(this, index, evt);
        else
            this.AddSelectedIndex(index);
        this.EndSelectionUpdate();
    }
});
ASPxClientListBox = _aspxCreateClass(ASPxClientListBoxBase, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.freeUniqIndex = -1;
        this.isHasFakeRow = false;
        this.headerDiv = null;
        this.headerTable = null;
        this.listTable = null;
        this.sampleItemFirstTextCell = null;
        this.width = "";
        this.hasSampleItem = false;
        this.hoverClasses = [""];
        this.hoverCssArray = [""];
        this.selectedClasses = [""];
        this.selectedCssArray = [""];
        this.disabledClasses = [""];
        this.disabledCssArray = [""];
        this.imageCellExists = false;
        this.scrollHandlerLockCount = 0;
        this.columnFieldNames = [];
        this.textFormatString = "";
        this.defaultImageUrl = "";
        this.selectionMode = 0;
        this.initSelectedIndices = [];
        this.itemHorizontalAlign = "";
        this.emptyTextRowCellIndices = null;
        this.allowMultipleCallbacks = false;
        this.isCallbackMode = false;
        this.callbackPageSize = -1;
        this.isTopSpacerVisible = false;
        this.isBottomSpacerVisible = false;
        this.serverIndexOfFirstItem = 0;
        this.scrollHelper = null;
        this.changeSelectAfterCallback = 0;
        this.ownerControl = null;
        this.SampleItem = null;
        this.scrollDivElement = null;
        this.scrollPageSize = 4;
        this.itemsValue = [];
        this.cachedValue = null;
        this.tempCache = new ASPxClientTemporaryCache();
        this.sizingConfig.adjustControl = true;
        this.disableScrolling = false;
        this.icbFocusedStyle = null;
        this.icbImageProperties = null;
        this.internalCheckBoxCollection = null;
        this.focusableCheckInput = null;
        this.nativeCheckOnFocusHandler = null;
    },
    Initialize: function () {
        this.LockScrollHandler();
        this.InitDXTextAttributes();
        this.InitScrollPos();
        if (__aspxWebKitTouchUI)
            ASPxClientTouchUI.MakeScrollable(this.GetScrollDivElement(), { showHorizontalScrollbar: false });
        this.CreateInternalCheckBoxCollection();
        this.InitSelection();
        this.AdjustControl();
        this.InitializeLoadOnDemand();
        this.UnlockScrollHandler();
        this.freeUniqIndex = this.GetItemCount();
        ASPxClientEdit.prototype.Initialize.call(this);
        if (__aspxFirefox)
            _aspxSetAttribute(this.GetScrollDivElement(), "tabIndex", "-1");
    },
    InitDXTextAttributes: function () {
        if (this.emptyTextRowCellIndices != null) {
            var itemWithDXTextCount = this.emptyTextRowCellIndices.length;
            for (var i = 0; i < itemWithDXTextCount; i++) {
                var itemIndex = this.emptyTextRowCellIndices[i][0];
                var cellIndices = this.emptyTextRowCellIndices[i][1];
                var itemRow = this.GetItemRow(itemIndex);
                for (var j = 0; j < cellIndices.length; j++) {
                    _aspxSetAttribute(itemRow.cells[cellIndices[j]], "DXText", "");
                }
            }
        }
    },
    InitSelection: function () {
        var valueFromLastTime = this.GetValueFromValueInput();
        if (this.MultiSelectionMode()) {
            if (valueFromLastTime != "") {
                var serialiser = this.GetSerializingHelper();
                var selectedValuesFromLastTime = serialiser.DeserializeValues(valueFromLastTime);
                var selectedIdicesFromLastTime = [];
                for (var i = 0; i < selectedValuesFromLastTime.length; i++)
                    selectedIdicesFromLastTime.push(this.FindItemIndexByValue(selectedValuesFromLastTime[i]));
                this.SelectIndices(selectedIdicesFromLastTime);
            } else
                this.SelectIndices(this.initSelectedIndices);
        } else {
            var selectedIndex = (valueFromLastTime != "") ?
    this.FindItemIndexByValue(valueFromLastTime) : this.GetSelectedIndexInternal();
            this.SetSelectedIndexInternal(selectedIndex);
            this.SelectIndexSilent(selectedIndex);
        }
        this.CacheValue();
    },
    CreateInternalCheckBoxCollection: function () {
        if (this.IsNativeCheckBoxes() || this.internalCheckBoxCollection)
            return;
        this.internalCheckBoxCollection = new ASPxCheckBoxInternalCollection(this.icbImageProperties, false, false, null, true);
        for (var i = 0; i < this.GetItemCount(); i++)
            this.AddInternalCheckBoxToCollection(i);
    },
    AddInternalCheckBoxToCollection: function (index) {
        if (!this.internalCheckBoxCollection)
            return;
        var inputElement = this.GetItemCheckBoxInput(index)
        if (inputElement) {
            var internalCheckBox = this.internalCheckBoxCollection.Add(this.GetInternalCheckBoxKey(index), inputElement);
            internalCheckBox.CreateFocusDecoration(this.icbFocusedStyle);
            internalCheckBox.SetEnabled(this.GetEnabled());
            internalCheckBox.autoSwitchEnabled = false;
            this.ChangeSpecialInputEnabledAttributes(inputElement, _aspxChangeEventsMethod(this.GetEnabled()));
            internalCheckBox.CheckedChanged.AddHandler(
    function (s, e) {
        if (_aspxGetKeyCode(e) == ASPxKey.Space) {
            var element = _aspxGetEventSource(e);
            this.GetItemSelectionHelper().OnItemCheckBoxClick(this.FindInternalCheckBoxIndex(element), e);
        }
    } .aspxBind(this)
   );
            internalCheckBox.Focus.AddHandler(
    function (s, e) {
        var index = this.FindInternalCheckBoxIndex(s.mainElement);
        window.setTimeout(function () { this.ScrollToItemVisible(index); } .aspxBind(this), 50);
    } .aspxBind(this)
   );
        }
    },
    ClearInternalCheckBoxCollection: function () {
        if (this.internalCheckBoxCollection)
            this.internalCheckBoxCollection.Clear();
    },
    RemoveInternalCheckBoxFromCollecntion: function (index) {
        if (this.internalCheckBoxCollection)
            this.internalCheckBoxCollection.Remove(this.GetItemValue(index));
    },
    GetInternalCheckBoxKey: function (index) {
        return this.name + __aspxNameSeparator + this.GetItemValue(index);
    },
    GetInternalCheckBox: function (index) {
        if (this.internalCheckBoxCollection == null)
            this.CreateInternalCheckBoxCollection()
        if (this.internalCheckBoxCollection)
            return this.internalCheckBoxCollection.Get(this.GetInternalCheckBoxKey(index));
        return null;
    },
    IsNativeCheckBoxes: function () {
        return !this.icbImageProperties;
    },
    SetCheckBoxChecked: function (index, checked) {
        if (this.IsNativeCheckBoxes()) {
            var checkBox = this.GetItemCheckBoxInput(index);
            checkBox.checked = checked;
        }
        else {
            var internalCheckBox = this.GetInternalCheckBox(index);
            internalCheckBox.SetValue(checked ? ASPxClientCheckBoxInputKey.Checked : ASPxClientCheckBoxInputKey.Unchecked);
        }
    },
    SetCheckBoxEnabled: function (index, enabled) {
        var inputElement;
        if (this.IsNativeCheckBoxes()) {
            var checkbox = this.GetItemCheckBoxInput(index);
            checkbox.disabled = !enabled;
            this.ChangeNativeCheckEnabledAttributes(checkbox, _aspxChangeEventsMethod(this.GetEnabled()));
            inputElement = checkbox;
        }
        else {
            var internalCheckBox = this.GetInternalCheckBox(index);
            internalCheckBox.SetEnabled(enabled);
            inputElement = internalCheckBox.inputElement;
        }
        this.ChangeSpecialInputEnabledAttributes(inputElement, _aspxChangeEventsMethod(enabled));
    },
    ClearItems: function () {
        ASPxClientListBoxBase.prototype.ClearItems.call(this);
        this.ClearInternalCheckBoxCollection();
    },
    OnDelayedSpecialFocusMouseDown: function (evt) {
        if (this.GetIsCheckColumnExists())
            this.SetFocusableCheckInput(this.GetCheckBoxInputFromEvent(evt));
        ASPxClientListBoxBase.prototype.OnDelayedSpecialFocusMouseDown.call(this, evt);
    },
    GetCheckBoxInputFromEvent: function (evt) {
        var element = _aspxGetEventSource(evt);
        if (this.IsNativeCheckBoxes())
            return element.type == "checkbox" ? element : null;
        var index = this.FindInternalCheckBoxIndex(element);
        return index > -1 ? this.GetInternalCheckBox(index).inputElement : null;
    },
    FindInternalCheckBoxIndex: function (element) {
        var level = 5;
        while (level > 0) {
            var id = element.id;
            if (id && element.tagName == "TD" && id.slice(-1) == __aspxLBIPostfixes[0])
                return element.parentNode.rowIndex;
            element = element.parentNode;
            level--;
        }
        return -1;
    },
    IsCheckBoxClicked: function (evt) {
        return !!this.GetCheckBoxInputFromEvent(evt);
    },
    GetFocusableInputElement: function () {
        return this.focusableCheckInput || this.GetInputElement();
    },
    SetFocusableCheckInput: function (element) {
        this.focusableCheckInput = element;
    },
    OnFocusCore: function () {
        if (this.UseDelayedSpecialFocus())
            window.clearTimeout(this.specialFocusTimer);
        if (this.focused) {
            this.UnlockFocusEvents();
            return;
        }
        ASPxClientListBoxBase.prototype.OnFocusCore.call(this);
    },
    OnLostFocusCore: function () {
        if (!this.IsFocusEventsLocked())
            this.SetFocusableCheckInput(null);
        ASPxClientListBoxBase.prototype.OnLostFocusCore.call(this);
    },
    GetValueFromValueInput: function () {
        if (this.ShouldRestoreSelectionAfterBackPressed()) {
            var valueInput = this.FindStateInputElement();
            if (_aspxIsExistsElement(valueInput))
                return valueInput.value;
        }
        return "";
    },
    ShouldRestoreSelectionAfterBackPressed: function () {
        return __aspxIE || __aspxChrome;
    },
    GetInitSelectedIndex: function () {
        return this.savedSelectedIndex;
    },
    CacheValue: function () {
        this.cachedValue = this.GetValue();
    },
    InitScrollPos: function () {
        if (!this.isComboBoxList && this.isCallbackMode && this.GetInitSelectedIndex() == -1)
            this.GetScrollDivElement().scrollTop = 0;
    },
    InitializeLoadOnDemand: function () {
        var loadOnDemandRequired = this.isCallbackMode && this.GetEnabledByServer();
        this.scrollHelper = loadOnDemandRequired ? new _aspxListBoxScrollCallbackHelper(this) : new _aspxListBoxScrollCallbackHelperBase(this);
    },
    InlineInitialize: function () {
        this.InitializeNativeCheckHandlers();
        this.LockScrollHandler();
        if (!this.disableScrolling)
            this.InitSpecialKeyboardHandling();
        this.InitializeItemsAttributes();
        this.GenerateStateItems();
        this.UnlockScrollHandler();
        ASPxClientListBoxBase.prototype.InlineInitialize.call(this);
    },
    InitializeNativeCheckHandlers: function () {
        this.nativeCheckOnFocusHandler = function (evt) {
            this.SetFocusableCheckInput(_aspxGetEventSource(evt));
        } .aspxBind(this);
    },
    ChangeNativeCheckEnabledAttributes: function (element, method) {
        if (this.nativeCheckOnFocusHandler)
            method(element, "focus", this.nativeCheckOnFocusHandler);
    },
    InitializeItemsAttributes: function () {
        var listTable = this.GetListTable();
        if (this.isHasFakeRow) {
            this.LockSynchronization();
            this.ClearItems();
            this.UnlockSynchronization();
        }
        listTable.ListBoxId = this.name;
        var rows = listTable.rows;
        var count = rows.length;
        var rowIdConst = this.name + "_";
        if (this.hasSampleItem)
            this.InitializeItemAttributes(this.GetSampleItemRow(), rowIdConst + __aspxLBSIIdSuffix);
        rowIdConst += __aspxLBIIdSuffix;
        for (var i = 0; i < count; i++)
            this.InitializeItemAttributes(rows[i], rowIdConst + i);
    },
    InitializeItemAttributes: function (row, rowId) {
        var cells = row.cells;
        var itemCellsIdSuffixes = this.GetItemCellsIdPostfixes();
        for (var i = 0; i < row.cells.length; i++) {
            cells[i].style.textAlign = this.itemHorizontalAlign;
            cells[i].id = rowId + itemCellsIdSuffixes[i];
        }
        if (this.GetIsCheckColumnExists() && this.IsNativeCheckBoxes() && rowId != this.GetSampleItemRowID()) {
            var input = this.GetItemCheckBoxInput(row.rowIndex);
            this.ChangeNativeCheckEnabledAttributes(input, _aspxChangeEventsMethod(this.GetEnabled()));
            this.ChangeSpecialInputEnabledAttributes(input, _aspxChangeEventsMethod(this.GetEnabled()));
        }
    },
    InitializePageSize: function () {
        var divElement = this.GetScrollDivElement();
        var listTable = this.GetListTable();
        var rows = listTable.rows;
        var count = rows.length;
        if (divElement && count > 0)
            this.scrollPageSize = Math.round(divElement.clientHeight / rows[0].offsetHeight) - 1;
    },
    GenerateStateItems: function () {
        if (typeof (aspxGetStateController) == "undefined") return;
        var itemCellsIdSuffixes = this.GetItemCellsIdPostfixes();
        var count = this.GetItemCount();
        var constName = this.name + "_" + __aspxLBIIdSuffix;
        var name = "";
        var controller = aspxGetStateController();
        var i = this.hasSampleItem ? -1 : 0;
        for (; i < count; i++) {
            name = constName + i;
            if (!__aspxWebKitTouchUI)
                controller.AddHoverItem(name, this.hoverClasses, this.hoverCssArray, itemCellsIdSuffixes, null, null, true);
            controller.AddSelectedItem(name, this.selectedClasses, this.selectedCssArray, itemCellsIdSuffixes, null, null, true);
            controller.AddDisabledItem(name, this.disabledClasses, this.disabledCssArray, itemCellsIdSuffixes, null, null, true);
        }
    },
    AfterInitialize: function () {
        if (this.disableScrolling) {
            var scrollDiv = this.GetScrollDivElement();
            var mainElement = this.GetMainElement();
            scrollDiv.style.height = mainElement.style.height = _aspxGetClearClientHeight(this.GetListTable()) + "px";
        }
        this.CallbackSpaceInit(true);
        this.constructor.prototype.AfterInitialize.call(this);
    },
    GetEnabledByServer: function () {
        return this.enabled;
    },
    SetEnabled: function (enabled) {
        ASPxClientListBoxBase.prototype.SetEnabled.call(this, enabled);
        this.CallbackSpaceInit(false);
    },
    CallbackSpaceInit: function (isInitialization) {
        if (this.isCallbackMode) {
            this.SetBottomScrollSpacerVisibility(this.GetScrollSpacerVisibility(false));
            this.SetTopScrollSpacerVisibility(this.GetScrollSpacerVisibility(true));
            if (isInitialization || this.isComboBoxList) {
                this.EnsureSelectedItemVisible();
                _aspxAttachEventToElement(this.GetScrollDivElement(), "scroll", aspxLBScroll);
            }
        }
    },
    GetListTable: function () {
        return this.tempCache.Get("ListTable", this.GetListTableCore, this);
    },
    GetListTableCore: function () {
        if (!_aspxIsExistsElement(this.listTable))
            this.listTable = _aspxGetElementById(this.name + __aspxLTableIdSuffix);
        return this.listTable;
    },
    GetListTableHeight: function () {
        return this.GetListTable().offsetHeight;
    },
    GetHeaderDivElement: function () {
        if (!_aspxIsExistsElement(this.headerDiv))
            this.headerDiv = _aspxGetElementById(this.name + __aspxLBHeaderDivIdSuffix);
        return this.headerDiv;
    },
    GetHeaderTableElement: function () {
        if (!_aspxIsExistsElement(this.headerTable)) {
            var headerDiv = this.GetHeaderDivElement();
            this.headerTable = _aspxGetChildByTagName(headerDiv, "table", 0);
        }
        return this.headerTable;
    },
    GetScrollDivElement: function () {
        if (!_aspxIsExistsElement(this.scrollDivElement))
            this.scrollDivElement = document.getElementById(this.name + __aspxLBDSuffix);
        return this.scrollDivElement;
    },
    GetItemElement: function (index) {
        var itemElement = this.GetItemRow(index);
        return __aspxWebKitFamily && itemElement != null ? itemElement.cells[0] : itemElement;
    },
    GetItemRow: function (index) {
        var listTable = this.GetListTable();
        if (listTable && index >= 0)
            return listTable.rows[index] || null;
        return null;
    },
    GetItemTexts: function (item) {
        return item.texts ? item.texts : [item.text];
    },
    GetItemCount: function () {
        var lbt = this.GetListTable();
        if (lbt)
            return this.GetListTable().rows.length;
        return 0;
    },
    GetItemCellCount: function () {
        if (this.hasSampleItem)
            return this.GetSampleItemRow().cells.length;
        else if (this.GetItemCount() > 0) {
            var listTable = this.GetListTable();
            return listTable.rows[0].cells.length;
        }
        return 0;
    },
    GetItemTextCellCount: function () {
        return this.GetItemCellCount() - this.GetItemFirstTextCellIndex();
    },
    GetItemFirstTextCellIndex: function () {
        var itemFirstTextCellIndex = 0;
        if (this.GetIsCheckColumnExists())
            itemFirstTextCellIndex++;
        if (this.imageCellExists)
            itemFirstTextCellIndex++;
        return itemFirstTextCellIndex;
    },
    GetItemFirstTextCell: function (index) {
        var rowElement = this.GetItemRow(index);
        if (rowElement == null)
            return null;
        return rowElement.cells[this.GetItemFirstTextCellIndex()];
    },
    GetItemTopOffset: function (index) {
        var itemElement = this.GetItemElement(index);
        return (itemElement != null) ? itemElement.offsetTop + this.GetTopScrollSpacerHeight() : 0;
    },
    GetItemHeight: function (index) {
        var itemElement = this.GetItemElement(index);
        return (itemElement != null) ? itemElement.offsetHeight : 0;
    },
    GetItemCheckBoxInput: function (index) {
        var itemRow = this.GetItemRow(index);
        var checkBoxCell = itemRow.cells[this.GetCheckBoxCellIndex()];
        return _aspxGetElementsByTagName(checkBoxCell, "input")[0];
    },
    GetIsCheckColumnExists: function () {
        if (!this.checkCellExists)
            this.checkCellExists = this.CheckColumnSelectionMode();
        return this.checkCellExists;
    },
    GetCheckBoxCellIndex: function () {
        return 0;
    },
    GetImageCellIndex: function () {
        return this.GetIsCheckColumnExists() ? 1 : 0;
    },
    GetItemCellsIdPostfixes: function () {
        if (this.itemCellsIdPostfixes == null) {
            this.itemCellsIdPostfixes = [];
            var i = 0;
            if (this.GetIsCheckColumnExists()) {
                this.itemCellsIdPostfixes.push(__aspxLBIPostfixes[0]);
                i++;
            }
            if (this.imageCellExists) {
                this.itemCellsIdPostfixes.push(__aspxLBIPostfixes[1]);
                i++;
            }
            var cellCount = this.GetItemCellCount();
            for (; i < cellCount; i++)
                this.itemCellsIdPostfixes.push(__aspxLBIPostfixes[2] + i);
        }
        return this.itemCellsIdPostfixes;
    },
    AdjustControl: function (nestedCall) {
        if (this.IsAdjustmentRequired())
            this.heightCorrected = false;
        ASPxClientEdit.prototype.AdjustControl.call(this, nestedCall);
    },
    AdjustControlCore: function () {
        if (this.disableScrolling)
            return;
        ASPxClientEdit.prototype.AdjustControlCore.call(this);
        this.CorrectSize();
        this.EnsureSelectedItemVisible();
        if (!this.isComboBoxList && __aspxIE && __aspxBrowserVersion >= 7)
            this.CorrectWidth();
    },
    CorrectSize: function () {
        if (this.isComboBoxList || this.disableScrolling)
            return;
        this.LockScrollHandler();
        this.CorrectHeight();
        this.CorrectWidth();
        this.InitializePageSize();
        this.UnlockScrollHandler();
    },
    OnCorrectSizeByTimer: function () {
        if (this.IsVisible())
            this.CorrectSize();
    },
    SetProtectionFromFlick_inFF: function (changeVisibility, changeDisplay) {
        if (!__aspxFirefox) return;
        var listTable = this.GetListTable();
        if (changeVisibility)
            listTable.style.visibility = "hidden";
        if (changeDisplay)
            listTable.style.display = "none";
    },
    ResetProtectionFromFlick_inFF: function () {
        if (!__aspxFirefox) return;
        var listTable = this.GetListTable();
        listTable.style.visibility = "";
        listTable.style.display = "";
    },
    CorrectHeight: function () {
        if (__aspxFirefox && this.heightCorrected) return;
        this.heightCorrected = true;
        var mainElement = this.GetMainElement();
        var divElement = this.GetScrollDivElement();
        if (__aspxIE && __aspxBrowserVersion == 5.5)
            divElement.style.display = "none";
        divElement.style.height = "0px";
        var height = mainElement.offsetHeight;
        if (__aspxIE && __aspxBrowserVersion == 5.5)
            divElement.style.display = "";
        divElement.style.height = height + "px";
        var extrudedHeight = mainElement.offsetHeight;
        var heightCorrection = extrudedHeight - height;
        if (heightCorrection > 0) {
            var divHeight = divElement.offsetHeight;
            this.SetProtectionFromFlick_inFF(true, false);
            divElement.style.height = (divHeight - heightCorrection) + "px";
            this.ResetProtectionFromFlick_inFF();
            extrudedHeight = mainElement.offsetHeight;
            var paddingsHeightCorrection = extrudedHeight - height;
            if (paddingsHeightCorrection > 0)
                divElement.style.height = (divHeight - heightCorrection - paddingsHeightCorrection) + "px";
        }
    },
    IsMultiColumn: function () {
        return this.columnFieldNames.length > 0;
    },
    CorrectWidth: function () {
        if (this.IsMultiColumn())
            this.CorrectMultiColumnWidth();
        else
            this.CorrectNonMultiColumnWidth();
    },
    CorrectMultiColumnWidth: function () {
        var scrollDivElement = this.GetScrollDivElement();
        var scrollBarWidth = this.GetVerticalScrollBarWidth();
        var browserPutsScrollBarOnContent = __aspxIE && __aspxBrowserVersion > 5.5 && __aspxBrowserVersion < 8;
        if (browserPutsScrollBarOnContent)
            scrollDivElement.style.paddingRight = scrollBarWidth + "px";
        if (__aspxIE && (__aspxBrowserVersion == 6 || __aspxBrowserVersion == 7)) {
            this.CollapseMultiColumnHeaderWidth();
            var listTable = this.GetListTable();
            var mainElement = this.GetMainElement();
            listTable.style.width = "";
            scrollDivElement.style.width = (mainElement.clientWidth - scrollBarWidth) + "px";
            listTable.style.width = "100%";
        }
        this.CorrectMultiColumnHeaderWidth(scrollBarWidth);
        if (this.rtl && __aspxIE && __aspxBrowserVersion < 8)
            this.FixIE7MultiColumnRtl();
    },
    CollapseMultiColumnHeaderWidth: function () {
        var headerDivElement = this.GetHeaderDivElement();
        headerDivElement.style.width = "0px";
    },
    CorrectMultiColumnHeaderWidth: function (scrollBarWidth) {
        var scrollDivElement = this.GetScrollDivElement();
        var headerDivElement = this.GetHeaderDivElement();
        if (_aspxIsExistsElement(headerDivElement)) {
            var headerTable;
            if (__aspxWebKitFamily) {
                headerTable = this.GetHeaderTableElement();
                if (!_aspxIsExistsElement(headerTable))
                    headerTable = null;
            }
            if (headerTable)
                headerTable.style.width = "0";
            if (__aspxIE && __aspxBrowserVersion < 8)
                headerDivElement.style.width = scrollDivElement.style.width;
            headerDivElement.style.paddingRight = scrollBarWidth + "px";
            if (headerTable)
                window.setTimeout(function () { headerTable.style.width = "100%"; }, 0);
        }
    },
    FixIE7MultiColumnRtl: function () {
        var tables = [this.GetHeaderTableElement(), this.GetListTable()];
        for (var i = 0; i < tables.length; i++) {
            var table = tables[i];
            if (!table) continue;
            var backup = table.style.tableLayout;
            table.style.tableLayout = "auto";
            table.offsetWidth;
            table.style.tableLayout = backup;
        }
    },
    CorrectNonMultiColumnWidth: function () {
        var divElement = this.GetScrollDivElement();
        if (__aspxIE && __aspxBrowserMajorVersion < 8) {
            var mainElement = this.GetMainElement();
            var scrollBarWidth = this.GetVerticalScrollBarWidth();
            mainElement.style.width = "";
            divElement.style.width = "100%";
            if (__aspxIE && __aspxBrowserVersion > 5.5)
                divElement.style.paddingRight = "0px";
            if (this.width != "") {
                mainElement.style.width = this.width;
                divElement.style.width = "0px";
                var widthCorrectrion = (__aspxIE && __aspxBrowserVersion == 5.5) ? 0 : scrollBarWidth;
                var correctedWidth = mainElement.clientWidth - widthCorrectrion;
                if (correctedWidth >= 0)
                    divElement.style.width = correctedWidth + "px";
            } else {
                var widthCorrectrion = (__aspxIE && __aspxBrowserVersion == 5.5) ? scrollBarWidth : 0;
                if (this.IsListBoxWidthLessThenList())
                    widthCorrectrion -= scrollBarWidth;
                divElement.style.width = (mainElement.clientWidth + widthCorrectrion) + "px";
            }
            if (__aspxIE && __aspxBrowserVersion > 5.5)
                divElement.style.paddingRight = scrollBarWidth + "px";
        } else {
            if (this.width == "") {
                var listTable = this.GetListTable();
                var mainElement = this.GetMainElement();
                if (listTable.offsetWidth != 0 || !__aspxNetscapeFamily) {
                    divElement.style.width = (listTable.offsetWidth + this.GetVerticalScrollBarWidth()) + "px";
                    if (__aspxFirefox)
                        mainElement.style.width = divElement.offsetWidth + "px";
                }
            } else {
                var mainElement = this.GetMainElement();
                mainElement.style.width = this.width;
                divElement.style.width = __aspxWebKitFamily ? "1px" : "0px";
                divElement.style.width = mainElement.clientWidth + "px";
            }
        }
    },
    UpdateAdjustmentFlags: function () {
        this.constructor.prototype.UpdateAdjustmentFlags.call(this);
        this.widthValueSetInPercentage = _aspxIsPercentageSize(this.width);
    },
    EnsureSelectedItemVisible: function () {
        var index = this.GetSelectedIndex();
        if (index != -1)
            this.MakeItemVisible(index);
    },
    MakeItemVisible: function (index) {
        if (!this.IsItemVisible(index))
            this.ScrollItemToTop(index);
    },
    IsItemVisible: function (index) {
        var scrollDiv = this.GetScrollDivElement();
        var itemElement = this.GetItemElement(index);
        var topVisible = false;
        var bottomVisible = false;
        if (itemElement != null) {
            var itemOffsetTop = itemElement.offsetTop + this.GetTopScrollSpacerHeight();
            topVisible = itemOffsetTop >= scrollDiv.scrollTop;
            bottomVisible = itemOffsetTop + itemElement.offsetHeight < scrollDiv.scrollTop + scrollDiv.clientHeight;
        }
        return (topVisible && bottomVisible);
    },
    ScrollItemToTop: function (index) {
        this.LockScrollHandler();
        this.SetScrollTop(this.GetItemTopOffset(index));
        this.UnlockScrollHandler();
    },
    ScrollToItemVisible: function (index) {
        if (!this.IsItemVisible(index)) {
            var scrollDiv = this.GetScrollDivElement();
            var scrollTop = scrollDiv.scrollTop;
            var scrollDivHeight = scrollDiv.clientHeight;
            var itemOffsetTop = this.GetItemTopOffset(index);
            var itemHeight = this.GetItemHeight(index);
            var itemAbove = scrollTop > itemOffsetTop;
            var itemBelow = scrollTop + scrollDivHeight < itemOffsetTop + itemHeight;
            if (itemAbove)
                scrollDiv.scrollTop = itemOffsetTop;
            else if (itemBelow) {
                var scrollPaddings = scrollDiv.scrollHeight - this.GetListTable().offsetHeight -
     this.GetTopScrollSpacerHeight() - this.GetBottomScrollSpacerHeight();
                scrollDiv.scrollTop = itemOffsetTop + itemHeight - scrollDivHeight + scrollPaddings;
            }
        }
    },
    SetScrollTop: function (scrollTop) {
        var scrollDiv = this.GetScrollDivElement();
        if (scrollDiv) {
            scrollDiv.scrollTop = scrollTop;
            if (__aspxOpera)
                this.CachedScrollTop();
        }
    },
    CachedScrollTop: function () {
        var scrollDiv = this.GetScrollDivElement();
        scrollDiv.cachedScrollTop = scrollDiv.scrollTop;
    },
    RestoreScrollTopFromCache: function () {
        var scrollDiv = this.GetScrollDivElement();
        if (scrollDiv && _aspxIsExists(scrollDiv.cachedScrollTop))
            scrollDiv.scrollTop = scrollDiv.cachedScrollTop;
    },
    IsListBoxWidthLessThenList: function () {
        var divElement = this.GetScrollDivElement();
        var listTable = this.GetListTable();
        var listTabelWidth = listTable.style.width;
        var isLess = false;
        listTable.style.width = "";
        isLess = listTable.offsetWidth < divElement.offsetWidth;
        listTable.style.width = listTabelWidth;
        return isLess;
    },
    GetVerticalScrollBarWidth: function () {
        var divElement = this.GetScrollDivElement();
        if (!this.verticalScrollBarWidth || this.verticalScrollBarWidth <= 0) {
            this.verticalScrollBarWidth = this.GetVerticalScrollBarWidthCore(divElement);
            return this.verticalScrollBarWidth;
        } else
            return this.GetIsVerticalScrollBarVisible(divElement) ? this.verticalScrollBarWidth : 0;
    },
    GetIsVerticalScrollBarVisible: function (divElement) {
        var verticalOverflow = this.GetVerticalOverflow(divElement);
        if (verticalOverflow != "auto") {
            var listTable = this.GetListTable();
            return divElement.clientHeight < listTable.offsetHeight;
        } else {
            var borderWidthWithScroll = divElement.offsetWidth - divElement.clientWidth;
            return borderWidthWithScroll == this.scrollDivBordersWidthWithScroll;
        }
    },
    GetVerticalScrollBarWidthCore: function (divElement) {
        var overflowYReserv = this.GetVerticalOverflow(divElement);
        this.SetVerticalOverflow(divElement, "auto");
        this.scrollDivBordersWidthWithScroll = divElement.offsetWidth - divElement.clientWidth;
        if (__aspxIE && __aspxBrowserVersion >= 7)
            return this.scrollDivBordersWidthWithScroll;
        this.SetProtectionFromFlick_inFF(false, true);
        this.SetVerticalOverflow(divElement, "hidden");
        var bordersWidthWithoutScroll = divElement.offsetWidth - divElement.clientWidth;
        this.SetVerticalOverflow(divElement, overflowYReserv);
        this.ResetProtectionFromFlick_inFF();
        return this.scrollDivBordersWidthWithScroll - bordersWidthWithoutScroll;
    },
    GetVerticalOverflow: function (element) {
        if (__aspxIE || __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome)
            return element.style.overflowY;
        return element.style.overflow;
    },
    SetVerticalOverflow: function (element, value) {
        if (__aspxIE || __aspxSafari && __aspxBrowserVersion >= 3 || __aspxChrome)
            element.style.overflowY = value;
        else
            element.style.overflow = value;
    },
    MultiSelectionMode: function () {
        return this.selectionMode != ListBoxSelectionMode.Single;
    },
    CheckColumnSelectionMode: function () {
        return this.selectionMode == ListBoxSelectionMode.CheckColumn;
    },
    OnItemClick: function (index, evt) {
        if (!this.isInitialized)
            return;
        if (this.readOnly)
            return this.OnItemClickOrDblClickReadOnly();
        if (this.CheckColumnSelectionMode() && this.IsCheckBoxClicked(evt))
            this.GetItemSelectionHelper().OnItemCheckBoxClick(index, evt);
        else
            this.GetItemSelectionHelper().OnItemClick(index, evt);
        this.SetFocus();
        this.RaiseItemClick();
    },
    OnItemClickOrDblClickReadOnly: function () {
        return false;
    },
    OnItemDblClick: function () {
        if (this.readOnly)
            return this.OnItemClickOrDblClickReadOnly();
        return this.RaiseItemDoubleClick();
    },
    CanChangeSelection: function () {
        return !this.readOnly || !this.isInitialized;
    },
    SelectIndexSilent: function (index) {
        return this.SetItemSelectionStateSilent(index);
    },
    SetItemSelectionStateSilent: function (index) {
        if (!this.CanChangeSelection())
            return;
        var oldSelectionIndex = this.GetSelectedIndex();
        this.LockSelectionEvents();
        this.SetSelectedIndexCore(index);
        this.UnlockSelectionEvents();
        return index != oldSelectionIndex;
    },
    SetItemSelectionAppearance: function (index, selected, controller) {
        if (!this.CanChangeSelection())
            return;
        if (!controller)
            controller = aspxGetStateController();
        if (!this.isInitialized)
            this.SetHoverElement(null);
        var itemFirstTextCell = this.GetItemFirstTextCell(index);
        if (selected)
            controller.SelectElementBySrcElement(itemFirstTextCell);
        else
            controller.DeselectElementBySrcElement(itemFirstTextCell);
        if (!this.isInitialized)
            this.SetHoverElement(itemFirstTextCell);
    },
    GetItemSelectionHelper: function () {
        if (!this.itemSelectionHelper)
            this.itemSelectionHelper = this.CreateItemSelectionHelper();
        return this.itemSelectionHelper;
    },
    CreateItemSelectionHelper: function () {
        if (this.selectionMode == ListBoxSelectionMode.Single)
            return new _aspxListBoxSingleSelectionHelper(this);
        else if (this.selectionMode == ListBoxSelectionMode.Multiple)
            return new _aspxListBoxMultiSelectionHelper(this);
        else if (this.selectionMode == ListBoxSelectionMode.CheckColumn)
            return new _aspxListBoxCheckSelectionHelper(this);
    },
    GetValue: function () {
        var index = this.GetSelectedIndex();
        if (0 <= index && index < this.itemsValue.length)
            return this.itemsValue[index];
        return null;
    },
    SetValue: function (value) {
        var index = this.FindItemIndexByValue(value);
        this.SetSelectedIndex(index);
    },
    GetSelectedItem: function () {
        var index = this.GetSelectedIndex();
        return this.GetItem(index);
    },
    GetSelectedIndex: function () {
        if (!this.isInitialized)
            return this.GetSelectedIndexInternal();
        return this.GetItemSelectionHelper().GetSelectedIndex();
    },
    SetSelectedIndex: function (index) {
        this.LockSelectionEvents();
        this.SetSelectedIndexCore(index);
        this.EnsureSelectedItemVisible(index);
        this.UnlockSelectionEvents();
    },
    SetSelectedIndexCore: function (index) {
        this.GetItemSelectionHelper().SetSelectedIndex(index);
    },
    GetSelectedIndices: function () {
        return this.GetItemSelectionHelper().GetSelectedIndices();
    },
    GetSelectedValues: function () {
        return this.GetItemSelectionHelper().GetSelectedValues();
    },
    GetSelectedItems: function () {
        return this.GetItemSelectionHelper().GetSelectedItems();
    },
    SelectAll: function () {
        this.SelectIndices();
    },
    UnselectAll: function () {
        this.UnselectIndices();
    },
    SelectIndices: function (indices) {
        this.LockSelectionEvents();
        this.GetItemSelectionHelper().SelectIndices(indices);
        this.UnlockSelectionEvents();
    },
    SelectItems: function (items) {
        this.LockSelectionEvents();
        this.GetItemSelectionHelper().SelectItems(items);
        this.UnlockSelectionEvents();
    },
    SelectValues: function (values) {
        this.LockSelectionEvents();
        this.GetItemSelectionHelper().SelectValues(values);
        this.UnlockSelectionEvents();
    },
    UnselectIndices: function (indices) {
        this.LockSelectionEvents();
        this.GetItemSelectionHelper().UnselectIndices(indices);
        this.UnlockSelectionEvents();
    },
    UnselectItems: function (items) {
        this.LockSelectionEvents();
        this.GetItemSelectionHelper().UnselectItems(items);
        this.UnlockSelectionEvents();
    },
    UnselectValues: function (values) {
        this.LockSelectionEvents();
        this.GetItemSelectionHelper().UnselectValues(values);
        this.UnlockSelectionEvents();
    },
    GetIsItemSelected: function (index) {
        return this.GetItemSelectionHelper().GetIsItemSelected(index);
    },
    GetFocusedIndex: function () {
        return this.GetItemSelectionHelper().GetFocusedIndex();
    },
    UpdateInternalState: function () {
        this.UpdateHiddenInputs();
    },
    IsUpdateHiddenInputsLocked: function () {
        return this.GetItemSelectionHelper().IsUpdateInternalSelectionStateLocked();
    },
    UpdateHiddenInputs: function () {
        if (this.IsUpdateHiddenInputsLocked())
            return;
        if (this.MultiSelectionMode()) {
            var element = this.FindStateInputElement();
            if (_aspxIsExistsElement(element)) {
                var sb = [];
                var serialiser = this.GetSerializingHelper();
                var selectedIndices = this.GetSelectedIndices();
                for (var i = 0; i < selectedIndices.length; i++)
                    serialiser.SerializeAtomValue(sb, this.GetItemValue(selectedIndices[i]));
                element.value = sb.join("");
            }
        } else
            ASPxClientListBoxBase.prototype.UpdateHiddenInputs.call(this);
    },
    UseDelayedSpecialFocus: function () {
        return true;
    },
    ShowLoadingPanel: function () {
        if (!this.isComboBoxList) {
            var loadingParentElement = this.GetScrollDivElement().parentNode;
            this.CreateLoadingPanelWithAbsolutePosition(loadingParentElement);
        }
    },
    ShowLoadingDiv: function () {
        if (!this.isComboBoxList) {
            var loadingParentElement = this.GetScrollDivElement().parentNode;
            this.CreateLoadingDiv(loadingParentElement);
        }
    },
    ParseCallbackResult: function (result) {
        var gottenEgdeOfCollection = false;
        var nothingToLoad = result == "[]";
        var isLoadindToTopByScroll = this.scrollHelper.IsScrolledToTopSpacer();
        if (!nothingToLoad) {
            var deserializedItems = this.DeserializeItems(result);
            this.LoadItemsFromCallback(isLoadindToTopByScroll, deserializedItems);
            gottenEgdeOfCollection = deserializedItems.length != this.callbackPageSize;
        }
        var noMoreItemsForLoadThisDirection = nothingToLoad || gottenEgdeOfCollection;
        this.SetScrollSpacerVisibility(isLoadindToTopByScroll, !noMoreItemsForLoadThisDirection);
        this.scrollHelper.Reset();
    },
    LoadItemsFromCallback: function (isToTop, deserializedItems) {
        this.LockSynchronizationOnInternalCallback();
        this.BeginUpdate();
        var isMultiSelect = this.MultiSelectionMode();
        if (isToTop) {
            var scrollHeightCorrection = 0;
            for (var i = deserializedItems.length - 1; i >= 0; i--) {
                this.InsertItem(0, deserializedItems[i].texts, deserializedItems[i].value, deserializedItems[i].imageUrl);
                scrollHeightCorrection += this.GetItemHeight(0);
            }
            this.GetScrollDivElement().scrollTop += scrollHeightCorrection;
            this.serverIndexOfFirstItem -= deserializedItems.length;
            if (this.serverIndexOfFirstItem < 0) this.serverIndexOfFirstItem = 0;
        } else {
            for (var i = 0; i < deserializedItems.length; i++) {
                var itemIndex = this.AddItem(deserializedItems[i].texts, deserializedItems[i].value, deserializedItems[i].imageUrl);
                this.SelectValueOnLoad(itemIndex, deserializedItems[i].selected, isMultiSelect);
            }
        }
        if (this.changeSelectAfterCallback != 0) {
            var newIndex = this.GetSelectedIndex() + this.changeSelectAfterCallback;
            newIndex = this.GetAdjustedIndex(newIndex);
            this.SelectIndexSilent(newIndex);
            if (this.scrollHelper.isScrolledToTopSpacer)
                this.ScrollItemToTop(newIndex);
            else
                this.ScrollToItemVisible(newIndex);
        }
        this.EndUpdate();
        this.UnlockSynchronizationOnInternalCallback();
    },
    SelectValueOnLoad: function (index, selected, isMultiSelect) {
        if (selected && this.changeSelectAfterCallback == 0) {
            if (isMultiSelect) {
                this.SelectIndices([index]);
            } else {
                this.SelectIndex(index);
            }
        }
    },
    CreateSerializingHelper: function () {
        return new _aspxListBoxItemsSerializingHelper(this);
    },
    InCallback: function () {
        var callbackOwner = this.GetCallbackOwnerControl();
        if (callbackOwner != null)
            return callbackOwner.InCallback();
        return ASPxClientListEdit.prototype.InCallback.call(this);
    },
    GetItemsRangeForLoad: function () {
        return this.scrollHelper.GetItemsRangeForLoad();
    },
    GetScrollSpacerElement: function (isTop) {
        return document.getElementById(this.name + (isTop ? __aspxLBTSIdSuffix : __aspxLBBSIdSuffix));
    },
    GetScrollSpacerVisibility: function (isTop) {
        if (!this.clientEnabled)
            return false;
        return isTop ? this.isTopSpacerVisible : this.isBottomSpacerVisible;
    },
    SetScrollSpacerVisibility: function (isTop, visibility) {
        this.LockScrollHandler();
        var spacer = this.GetScrollSpacerElement(isTop);
        if (spacer) {
            if (visibility)
                spacer.style.height = this.GetScrollDivElement().clientHeight + "px";
            if (this.clientEnabled) {
                if (isTop)
                    this.isTopSpacerVisible = visibility;
                else
                    this.isBottomSpacerVisible = visibility;
            }
            if (_aspxGetElementDisplay(spacer) != visibility) {
                _aspxSetElementDisplay(spacer, visibility);
                _aspxGetElementVisibility(spacer, visibility);
            }
        }
        this.UnlockScrollHandler();
    },
    SetTopScrollSpacerVisibility: function (visibility) {
        this.SetScrollSpacerVisibility(true, visibility);
    },
    SetBottomScrollSpacerVisibility: function (visibility) {
        this.SetScrollSpacerVisibility(false, visibility);
    },
    GetTopScrollSpacerHeight: function () {
        return this.GetScrollSpacerVisibility(true) ? this.GetScrollSpacerElement(true).clientHeight : 0;
    },
    GetBottomScrollSpacerHeight: function () {
        return this.GetScrollSpacerVisibility(false) ? this.GetScrollSpacerElement(false).clientHeight : 0;
    },
    SendCallback: function () {
        if (!this.InCallback()) {
            this.ShowLoadingElements();
            var callbackOwner = this.GetCallbackOwnerControl();
            if (callbackOwner != null)
                callbackOwner.SendCallback();
            else {
                var argument = this.GetCallbackArguments();
                this.CreateCallback(argument);
            }
        }
    },
    OnCallback: function (result) {
        this.ParseCallbackResult(result);
        this.OnCallbackFinally();
    },
    OnCallbackError: function (result) {
        ASPxClientListBoxBase.prototype.OnCallbackError.call(this, result);
        this.OnCallbackFinally();
    },
    OnCallbackFinally: function () {
        this.HideLoadingPanel();
        this.changeSelectAfterCallback = 0;
    },
    LockScrollHandler: function () {
        this.scrollHandlerLockCount++;
    },
    UnlockScrollHandler: function () {
        this.scrollHandlerLockCount--;
    },
    IsScrollHandlerLocked: function () {
        return this.scrollHandlerLockCount > 0;
    },
    OnScroll: function () {
        if (this.IsScrollHandlerLocked()) return;
        if (this.IsVisible() && !this.InCallback() && (this.GetScrollSpacerVisibility(true) || this.GetScrollSpacerVisibility(false))) {
            this.scrollHelper.OnScroll();
            if (this.scrollHelper.GetIsNeedToHideTopSpacer())
                this.SetTopScrollSpacerVisibility(false);
            if (this.scrollHelper.GetIsNeedCallback())
                this.SendCallback();
        }
    },
    OnBrowserWindowResize: function (evt) {
        if (this.IsVisible())
            this.CorrectSize();
    },
    KeyboardSupportAllowed: function () {
        return !this.CheckColumnSelectionMode();
    },
    InitializeKeyHandlers: function () {
        if (this.KeyboardSupportAllowed()) {
            this.AddKeyDownHandler(ASPxKey.PageUp, "OnPageUp");
            this.AddKeyDownHandler(ASPxKey.PageDown, "OnPageDown");
            this.AddKeyDownHandler(ASPxKey.End, "OnEndKeyDown");
            this.AddKeyDownHandler(ASPxKey.Home, "OnHomeKeyDown");
            this.AddKeyDownHandler(ASPxKey.Up, "OnArrowUp");
            this.AddKeyDownHandler(ASPxKey.Down, "OnArrowDown");
        }
    },
    OnArrowUp: function (evt) {
        if (this.isInitialized)
            this.SelectNeighbour(-1);
        return true;
    },
    OnArrowDown: function (evt) {
        if (this.isInitialized)
            this.SelectNeighbour(1);
        return true;
    },
    OnPageUp: function (evt) {
        if (this.isInitialized)
            this.SelectNeighbour(-this.scrollPageSize);
        return true;
    },
    OnPageDown: function (evt) {
        if (this.isInitialized)
            this.SelectNeighbour(this.scrollPageSize);
        return true;
    },
    OnHomeKeyDown: function (evt) {
        if (this.isInitialized)
            this.SelectNeighbour(-this.GetItemCount());
        return true;
    },
    OnEndKeyDown: function (evt) {
        if (this.isInitialized)
            this.SelectNeighbour(this.GetItemCount());
        return true;
    },
    GetAdjustedIndex: function (index) {
        if (index < 0) index = 0;
        else {
            var itemCount = this.GetItemCount();
            if (index >= itemCount) index = itemCount - 1;
        }
        return index;
    },
    SelectNeighbour: function (step) {
        var itemCount = this.GetItemCount();
        if (itemCount > 0) {
            this.changeSelectAfterCallback = 0;
            var selectedIndex = this.GetFocusedIndex();
            var pageDownSize = step == 1 ? this.scrollPageSize + 1 : this.scrollPageSize;
            var isFirstPageDown = selectedIndex == -1 && step == pageDownSize && step > 1;
            var newSelectedIndex = isFirstPageDown ? step : selectedIndex + step;
            newSelectedIndex = this.GetAdjustedIndex(newSelectedIndex);
            if (selectedIndex != newSelectedIndex) {
                this.LockScrollOnKBNavigation();
                this.SetSelectedIndexCore(newSelectedIndex);
                this.UnlockScrollOnKBNavigation();
            }
            if (this.GetIsNeedToCallbackLoadItemsToTop(newSelectedIndex, step, itemCount)) {
                this.LoadItemsOnCallback(true, newSelectedIndex);
            } else if (this.GetIsNeedToCallbackLoadItemsToBottom(newSelectedIndex, step, itemCount)) {
                this.LoadItemsOnCallback(false, newSelectedIndex);
            }
            this.ScrollToItemVisible(newSelectedIndex);
        }
    },
    GetIsNeedToCallbackLoadItemsToTop: function (selectedIndex, step, itemCount) {
        return this.isCallbackMode && this.GetScrollSpacerVisibility(true) &&
   this.serverIndexOfFirstItem > 0 && ((step < 0 && selectedIndex <= 0) || step <= -itemCount);
    },
    GetIsNeedToCallbackLoadItemsToBottom: function (selectedIndex, step, itemCount) {
        return this.isCallbackMode && this.GetScrollSpacerVisibility(false) &&
   ((step > 0 && selectedIndex >= itemCount - 1) || step >= itemCount);
    },
    LoadItemsOnCallback: function (isToTop, index) {
        this.changeSelectAfterCallback = index - this.GetSelectedIndex();
        this.scrollHelper.SetItemsRangeForLoad(isToTop);
        this.SendCallback();
    },
    FindInputElement: function () {
        return document.getElementById(this.name + "_KBS");
    },
    SetHoverElement: function (element) {
        aspxGetStateController().SetCurrentHoverElementBySrcElement(element);
    },
    InitOnContainerMadeVisible: function () {
        this.AdjustControl();
    },
    ClearItemsCore: function () {
        this.ClearListTableContent();
        this.OnItemsCleared();
        this.SetValue(null);
    },
    OnItemsCleared: function () {
        this.GetItemSelectionHelper().OnItemsCleared();
    },
    CopyCellWidths: function (sourceRowIndex, destinationRowIndex) {
        var cellCount = this.GetItemCellCount();
        var sourceRow = this.GetItemRow(sourceRowIndex);
        var destRow = this.GetItemRow(destinationRowIndex);
        for (var i = 0; i < cellCount; i++)
            destRow.cells[i].style.width = sourceRow.cells[i].style.width;
    },
    RemoveItem: function (index) {
        if (index == 0 && this.GetItemCount() > 1)
            this.CopyCellWidths(0, 1);
        if (0 <= index && index < this.GetItemCount()) {
            if (this.GetIsCheckColumnExists() && !this.IsNativeCheckBoxes())
                this.RemoveInternalCheckBoxFromCollecntion(index);
            this.UpdateSyncArraysItemDeleted(this.GetItem(index), true);
            var row = this.GetItemRow(index);
            if (_aspxIsExistsElement(row))
                row.parentNode.removeChild(row);
            this.OnItemRemoved(index);
        }
    },
    GetItem: function (index) {
        var listTable = this.GetListTable();
        if (!listTable || index < 0 || index >= listTable.rows.length)
            return null;
        var row = listTable.rows[index];
        var image = this.imageCellExists ? _aspxGetChildByTagName(row.cells[this.GetImageCellIndex()], "IMG", 0) : null;
        var src = image == null ? "" : ASPxImageUtils.GetImageSrc(image);
        var i = this.GetItemFirstTextCellIndex();
        var texts = [];
        for (; i < row.cells.length; i++) {
            var textCell = row.cells[i];
            if (typeof (textCell.attributes["DXText"]) != "undefined")
                texts.push(_aspxGetAttribute(textCell, "DXText"));
            else {
                var text = _aspxGetInnerText(textCell);
                if (__aspxIE && __aspxBrowserVersion >= 9 && !this.encodeHtml)
                    text = this.PrepareItemTextForIE(text);
                text = text.replace(new RegExp(__aspxNbspChar, "g"), " ");
                texts.push(text);
            }
        }
        return new ASPxClientListBoxItem(this, index, texts, this.itemsValue[index], src, this.GetIsItemSelected(index));
    },
    PrepareItemTextForIE: function (text, index) {
        if (!index && index !== 0)
            return this.PrepareItemTextForIE(text, 0);
        if (text[index] === '\r' && text[index + 1] === '\n')
            return this.PrepareItemTextForIE(text, index + 2);
        return text.substr(index);
    },
    PerformCallback: function (arg) {
        this.SetScrollSpacerVisibility(true, false);
        this.SetScrollSpacerVisibility(false, false);
        this.ClearItemsForPerformCallback();
        this.serverIndexOfFirstItem = 0;
        this.SetScrollSpacerVisibility(true, false);
        this.SetScrollSpacerVisibility(false, false);
        this.FormatAndSetCustomCallbackArg(arg);
        this.SendCallback();
    },
    GetTableRowParent: function (table) {
        if (table.tBodies.length > 0)
            return table.tBodies[0];
        return table;
    },
    ProtectWhitespaceSerieses: function (text) {
        if (text == "")
            text = __aspxNbsp;
        else {
            if (text.charAt(0) == ' ')
                text = __aspxNbsp + text.slice(1);
            if (text.charAt(text.length - 1) == ' ')
                text = text.slice(0, -1) + __aspxNbsp;
            text = text.replace(new RegExp("  ", "g"), " &nbsp;");
        }
        return text;
    },
    CreateItem: function (index, texts, value, imageUrl, selected) {
        return new ASPxClientListBoxItem(this, index, texts, value, imageUrl, selected);
    },
    InsertItemInternal: function (index, texts, value, imageUrl) {
        if (!texts || texts.length == 0)
            texts = [""];
        else if (typeof (texts) == "string")
            texts = [texts];
        if (typeof (value) == "undefined")
            value = texts[0];
        if (!_aspxIsExists(imageUrl))
            imageUrl = "";
        var newItemRow = this.CreateNewItem();
        _aspxRemoveAttribute(newItemRow, "id");
        var listTable = this.GetListTable();
        var tbody = this.GetTableRowParent(listTable);
        var isAdd = listTable.rows.length <= index;
        if (isAdd)
            tbody.appendChild(newItemRow);
        else
            tbody.insertBefore(newItemRow, this.GetItemRow(index));
        var newIndex = this.FindFreeIndex();
        var newId = this.CreateItemId(newIndex);
        var newClientId = this.CreateItemClientId(newIndex);
        this.InitializeItemAttributes(newItemRow, newClientId, true);
        var sampleItemFirstTextCell = this.GetSampleItemFirstTextCell();
        var itemCellsIdPostfixes = this.GetItemCellsIdPostfixes();
        var styleController = aspxGetStateController();
        aspxAddHoverItems(this.name, this.CreateStyleClasses(newId, itemCellsIdPostfixes,
   styleController.GetHoverElement(sampleItemFirstTextCell), __aspxHoverItemKind), true);
        aspxAddSelectedItems(this.name, this.CreateStyleClasses(newId, itemCellsIdPostfixes,
   styleController.GetSelectedElement(sampleItemFirstTextCell), __aspxSelectedItemKind), true);
        aspxAddDisabledItems(this.name, this.CreateStyleClasses(newId, itemCellsIdPostfixes,
   styleController.GetDisabledElement(sampleItemFirstTextCell), __aspxDisabledItemKind), true);
        _aspxRemoveAttribute(sampleItemFirstTextCell, __aspxCachedStatePrefix + __aspxHoverItemKind);
        _aspxRemoveAttribute(sampleItemFirstTextCell, __aspxCachedStatePrefix + __aspxSelectedItemKind);
        _aspxRemoveAttribute(sampleItemFirstTextCell, __aspxCachedStatePrefix + __aspxDisabledItemKind);
        this.PrepareItem(newItemRow, texts, imageUrl);
        _aspxArrayInsert(this.itemsValue, value, index);
        this.RegisterInsertedItem(index, texts, value, imageUrl);
        if (this.GetIsCheckColumnExists() && !this.IsNativeCheckBoxes())
            this.AddInternalCheckBoxToCollection(index);
        this.OnItemInserted(index);
    },
    PrepareItem: function (newItemRow, texts, imageUrl) {
        var i = 0;
        if (this.GetIsCheckColumnExists())
            i++;
        if (this.imageCellExists) {
            this.PrepareItemImage(newItemRow, i, imageUrl);
            i++;
        }
        var cellCount = this.GetItemCellCount();
        for (var j = 0; i < cellCount; i++, j++)
            this.PrepareItemTextCell(newItemRow.cells[i], texts[j])
    },
    PrepareItemImage: function (newItemRow, imageCellIndex, imageUrl) {
        var imageCell = newItemRow.cells[imageCellIndex];
        var image = _aspxGetChildByTagName(imageCell, "IMG", 0);
        if (!image) {
            image = document.createElement("IMG");
            imageCell.innerHTML = "";
            imageCell.appendChild(image);
        }
        ASPxImageUtils.SetImageSrc(image, imageUrl);
    },
    PrepareItemTextCell: function (cell, text) {
        if (!_aspxIsExists(text))
            text = "";
        if (this.encodeHtml)
            text = _aspxEncodeHtml(text);
        cell.innerHTML = this.ProtectWhitespaceSerieses(text);
        if (text == "")
            _aspxSetAttribute(cell, "DXText", text);
    },
    ClearListTableContent: function () {
        var tBody = this.GetTableRowParent(this.GetListTable());
        if (__aspxIE)
            tBody.innerText = "";
        else
            tBody.innerHTML = "";
    },
    FormatText: function (texts) {
        if (typeof (texts) == "string")
            return texts;
        else if (!this.IsMultiColumn())
            return texts[0];
        else
            return this.FormatTextCore(texts);
    },
    FormatTextCore: function (texts) {
        if (this.isComboBoxList)
            return ASPxFormatter.Format(this.textFormatString, texts);
        else
            return texts.join("; ");
    },
    OnItemInserted: function (index) {
        this.GetItemSelectionHelper().OnItemInserted(index);
    },
    OnItemRemoved: function (index) {
        this.GetItemSelectionHelper().OnItemRemoved(index);
    },
    CreateItemId: function (index) {
        return __aspxLBIIdSuffix + index;
    },
    CreateItemClientId: function (index) {
        return this.name + "_" + __aspxLBIIdSuffix + index;
    },
    CreateNewItem: function () {
        var newItemRow = this.GetSampleItemRow();
        if (_aspxIsExistsElement(newItemRow))
            newItemRow = newItemRow.cloneNode(true);
        return newItemRow;
    },
    CreateStyleClasses: function (id, postfixes, item, kind) {
        var classes = [];
        if (item && item[kind]) {
            classes[0] = [];
            classes[0][0] = item[kind].classNames;
            classes[0][1] = item[kind].cssTexts;
            classes[0][2] = [];
            classes[0][2][0] = id;
            classes[0][3] = postfixes;
        }
        return classes;
    },
    CorrectSizeByTimer: function () {
        if (this.APILockCount == 0 && this.IsDisplayed())
            _aspxSetTimeout("aspxLBCorrectSizeByTimer(\"" + this.name + "\");", 0);
    },
    FindFreeIndex: function () {
        return this.freeUniqIndex++;
    },
    GetSampleItemRowID: function () {
        return this.name + "_" + __aspxLBSIIdSuffix;
    },
    GetSampleItemRow: function () {
        if (this.SampleItem == null)
            this.SampleItem = _aspxGetElementById(this.GetSampleItemRowID());
        return this.SampleItem;
    },
    GetSampleItemFirstTextCell: function () {
        if (!_aspxIsExistsElement(this.sampleItemFirstTextCell)) {
            var sampleItemRow = this.GetSampleItemRow();
            if (_aspxIsExistsElement(sampleItemRow))
                this.sampleItemFirstTextCell = sampleItemRow.cells[this.imageCellExists ? 1 : 0];
        }
        return this.sampleItemFirstTextCell;
    },
    ChangeEnabledAttributes: function (enabled) {
        this.ChangeListTableEvents(this.GetListTable(), _aspxChangeEventsMethod(enabled));
        var inputElement = this.GetInputElement();
        if (inputElement)
            this.ChangeSpecialInputEnabledAttributes(inputElement, _aspxChangeEventsMethod(enabled));
    },
    ChangeEnabledStateItems: function (enabled) {
        var controller = aspxGetStateController();
        controller.SetElementEnabled(this.GetMainElement(), enabled);
        var count = this.GetItemCount();
        var i = this.hasSampleItem ? -1 : 0;
        var checkColumnExists = this.GetIsCheckColumnExists();
        for (; i < count; i++) {
            var element = this.GetItemFirstTextCell(i);
            if (element)
                controller.SetElementEnabled(element, enabled);
            if (checkColumnExists && i >= 0)
                this.SetCheckBoxEnabled(i, enabled);
        }
    },
    ChangeListTableEvents: function (listTable, method) {
        if (this.isComboBoxList) {
            method(listTable, "mouseup", aspxLBIClick);
            if (__aspxFirefox)
                method(listTable, "mousedown", _aspxPreventEvent);
        }
        else {
            method(listTable, "click", aspxLBIClick);
            method(listTable, "dblclick", aspxLBIClick);
            if (this.MultiSelectionMode())
                _aspxAttachEventToElement(listTable, "selectstart", aspxLBTSelectStart);
        }
    },
    IsValueChanged: function () {
        return this.cachedValue != this.GetValue();
    },
    OnItemSelectionChanged: function (index, selected) {
        if (this.CheckColumnSelectionMode())
            this.SetCheckBoxChecked(index, selected);
        if (!this.IsSelectionEventsLocked()) {
            this.SetRaiseSelectedIndexChangedArguments(this.autoPostBack, index, selected);
            var valueChanged = this.IsValueChanged();
            if (valueChanged) {
                this.RaisePersonalStandardValidation();
                this.OnValueChanged();
            } else {
                if (this.RaiseSelectedIndexChanged())
                    this.SendPostBackInternal("");
            }
        }
        this.CacheValue();
    },
    SetRaiseSelectedIndexChangedArguments: function (processOnServer, index, selected) {
        this.selectedIndexChangedArguments = {
            processOnServer: processOnServer,
            index: index,
            selected: selected
        };
    },
    GetRaiseSelectedIndexChangedArguments: function () {
        if (!this.selectedIndexChangedArguments)
            this.SetRaiseSelectedIndexChangedArguments(false, this.GetSelectedIndex(), true);
        return this.selectedIndexChangedArguments;
    },
    RaiseSelectedIndexChanged: function (processOnServer) {
        this.RaiseValidationInternal();
        var savedArgs = this.GetRaiseSelectedIndexChangedArguments();
        processOnServer = savedArgs.processOnServer || processOnServer;
        if (!this.SelectedIndexChanged.IsEmpty()) {
            var args = new ASPxClientListEditItemSelectedChangedEventArgs(savedArgs.index, savedArgs.selected, processOnServer);
            this.SelectedIndexChanged.FireEvent(this, args);
            processOnServer = args.processOnServer;
        }
        return processOnServer;
    },
    SetWidth: function (width) {
        this.width = width + "px";
        this.GetScrollDivElement().style.width = "100%";
        this.constructor.prototype.SetWidth.call(this, width);
    },
    SetHeight: function (height) {
        this.heightCorrected = false;
        this.constructor.prototype.SetHeight.call(this, height);
    }
});
ASPxClientNativeListBox = _aspxCreateClass(ASPxClientListBoxBase, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
    },
    SetMainElement: function (mainElement) {
        this.mainElement = mainElement;
    },
    FindInputElement: function () {
        return this.GetMainElement();
    },
    GetOptionCount: function () {
        return this.GetMainElement().options.length;
    },
    GetOption: function (index) {
        return this.GetMainElement().options[index];
    },
    GetItemCount: function () {
        return this.GetOptionCount();
    },
    SelectIndexSilent: function (index) {
        var selectedIndex = this.GetSelectedIndexInternal();
        var isValidIndex = (-1 <= index && index < this.GetItemCount());
        if ((selectedIndex != index && isValidIndex) || !this.isInitialized) {
            this.SetSelectedIndexInternal(index);
            return true;
        }
        return false;
    },
    GetSelectedIndexInternal: function () {
        return this.GetMainElement().selectedIndex;
    },
    SetSelectedIndexInternal: function (index) {
        this.GetMainElement().selectedIndex = index;
    },
    ClearItemsCore: function () {
        this.GetMainElement().innerHTML = "";
    },
    RemoveItem: function (index) {
        if (0 <= index && index < this.GetItemCount()) {
            var oldSelectedIndex = this.GetSelectedIndexInternal();
            this.UpdateSyncArraysItemDeleted(this.GetItem(index), true);
            var option = this.GetOption(index);
            this.GetMainElement().removeChild(option);
            this.UpdateOptionValues();
            this.OnItemRemoved(oldSelectedIndex, index);
        }
    },
    OnItemRemoved: function (oldSelectedIndex, newSelectedIndex) {
        if (newSelectedIndex == oldSelectedIndex && !this.MultiSelectionMode())
            this.SetSelectedIndexInternal(-1);
    },
    MultiSelectionMode: function () {
        return this.GetMainElement().multiple;
    },
    GetItem: function (index) {
        if (0 <= index && index < this.GetOptionCount()) {
            var text = this.GetOption(index).text;
            var selected = this.GetMainElement().options[index].selected
            if (_aspxIsExists(text))
                return new ASPxClientListBoxItem(this, index, text, this.itemsValue[index], "", selected);
        }
        return null;
    },
    PerformCallback: function (arg) {
        this.ClearItemsForPerformCallback();
        this.FormatAndSetCustomCallbackArg(arg);
        this.SendCallback();
    },
    SendCallback: function () {
        if (!this.InCallback()) {
            var callbackOwner = this.GetCallbackOwnerControl();
            if (callbackOwner != null)
                callbackOwner.SendCallback();
            else {
                var argument = this.GetCallbackArguments();
                this.CreateCallback(argument);
            }
        }
    },
    ParseCallbackResult: function (result) {
        var deserializedItems = this.DeserializeItems(result);
        this.LoadItemsFromCallback(true, deserializedItems);
    },
    InsertItemInternal: function (index, text, value, imageUrl) {
        if (typeof (value) == "undefined")
            value = text;
        var oldSelectedIndex = this.GetSelectedIndexInternal();
        var isAdd = this.GetOptionCount() <= index;
        var newOption = document.createElement("OPTION");
        if (isAdd)
            this.GetMainElement().appendChild(newOption);
        else
            this.GetMainElement().insertBefore(newOption, this.GetOption(index));
        newOption.innerHTML = text;
        this.UpdateOptionValues();
        _aspxArrayInsert(this.itemsValue, value, index);
        this.RegisterInsertedItem(index, text, value, imageUrl);
        if (index == oldSelectedIndex && index != -1)
            this.SetSelectedIndex(index + 1);
    },
    UpdateOptionValues: function () {
        if (this.APILockCount == 0) {
            for (var i = 0; i < this.GetOptionCount(); i++)
                this.GetOption(i).value = i;
        }
    },
    ChangeEnabledAttributes: function (enabled) {
        if (!this.isComboBoxList)
            this.GetMainElement().disabled = !enabled;
    },
    OnCallback: function (result) {
        this.ParseCallbackResult(result);
    },
    OnItemDblClick: function () {
        this.RaiseItemDoubleClick();
    },
    LoadItemsFromCallback: function (isToTop, deserializedItems) {
        this.BeginUpdate();
        this.LockSynchronizationOnInternalCallback();
        var mainElement = this.GetMainElement();
        for (var i = deserializedItems.length - 1; i >= 0; i--) {
            this.InsertItemInternal(0, deserializedItems[i].text, deserializedItems[i].value, deserializedItems[i].imageUrl);
            if (deserializedItems[i].selected) {
                var index = deserializedItems[i].index;
                mainElement.options[0].selected = true;
            }
        }
        this.UnlockSynchronizationOnInternalCallback();
        this.EndUpdate();
    },
    EndUpdate: function () {
        ASPxClientListBoxBase.prototype.EndUpdate.call(this);
        this.UpdateOptionValues();
    },
    GetSelectedIndices: function () {
        var selectedIndices = [];
        var mainElement = this.GetMainElement();
        for (var i = 0; i < mainElement.options.length; i++) {
            if (mainElement.options[i].selected)
                selectedIndices.push(i);
        }
        return selectedIndices;
    },
    GetSelectedValues: function () {
        var selectedValues = [];
        var selectedIndices = this.GetSelectedIndices();
        for (var i = 0; i < selectedIndices.length; i++)
            selectedValues.push(this.GetItemValue(selectedIndices[i]));
        return selectedValues;
    },
    GetSelectedItems: function () {
        var selectedItems = [];
        var selectedIndices = this.GetSelectedIndices();
        for (var i = 0; i < selectedIndices.length; i++)
            selectedItems.push(this.GetItem(selectedIndices[i]));
        return selectedItems;
    },
    SelectAll: function () {
        this.SetAllItemsSelectedValue(true);
    },
    UnselectAll: function () {
        this.SetAllItemsSelectedValue(false);
    },
    SetAllItemsSelectedValue: function (selected) {
        var mainElement = this.GetMainElement();
        for (var i = 0; i < mainElement.options.length; i++)
            mainElement.options[i].selected = selected;
    },
    SelectIndices: function (indices) {
        this.SetIndicesSelectionState(indices, true);
    },
    UnselectIndices: function (indices) {
        this.SetIndicesSelectionState(indices, false);
    },
    SetIndicesSelectionState: function (indices, selected) {
        var mainElement = this.GetMainElement();
        for (var i = 0; i < indices.length; i++) {
            mainElement.options[indices[i]].selected = selected;
        }
    },
    SelectItems: function (items) {
        if (_aspxIsExists(items))
            this.SetItemsSelectionState(items, true);
        else
            this.SelectAll();
    },
    UnselectItems: function (items) {
        if (_aspxIsExists(items))
            this.SetItemsSelectionState(items, false);
        else
            this.UnselectAll();
    },
    SetItemsSelectionState: function (items, selected) {
        var mainElement = this.GetMainElement();
        for (var i = 0; i < items.length; i++) {
            mainElement.options[items[i].index].selected = selected;
        }
    },
    SelectValues: function (values) {
        this.SetValuesSelectedState(values, true);
    },
    UnselectValues: function (values) {
        this.SetValuesSelectedState(values, false);
    },
    SetValuesSelectedState: function (values, selected) {
        var mainElement = this.GetMainElement();
        var index;
        for (var i = 0; i < values.length; i++) {
            index = this.FindItemIndexByValue(values[i]);
            mainElement.options[index].selected = selected;
        }
    }
});
ASPxClientListBox.Cast = ASPxClientControl.Cast;
ASPxClientCheckListBase = _aspxCreateClass(ASPxClientListEdit, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.imageProperties = null;
        this.internalButtonCollection = null;
        this.icbFocusedStyle = [];
        this.items = [];
    },
    Initialize: function () {
        ASPxClientListEdit.prototype.Initialize.call(this);
        this.UpdateInternalSelectedIndex();
    },
    UpdateInternalSelectedIndex: function () {
        var selectedIndexFromServer = this.GetSelectedIndex();
        if (__aspxIE) {
            var stateInput = this.FindStateInputElement();
            if (stateInput) {
                var restoredSelectedIndex = stateInput.value;
                if (restoredSelectedIndex != '' && restoredSelectedIndex != selectedIndexFromServer)
                    this.SetSelectedIndex(restoredSelectedIndex);
            }
        }
    },
    CreateButtonInternalCollection: function () {
        this.internalButtonCollection = new ASPxCheckBoxInternalCollection(this.imageProperties, false, true, ASPxCheckEditElementHelper.Instance);
        var instance = this;
        for (var i = 0; i < this.GetItemCount(); i++) {
            var icbInputElement = this.GetItemInput(i);
            var internalButton = this.internalButtonCollection.Add(icbInputElement.id, icbInputElement, this.GetItemElement(i));
            internalButton.CreateFocusDecoration(this.icbFocusedStyle);
            internalButton.SetEnabled(this.GetEnabled());
            internalButton.readOnly = this.readOnly;
            internalButton.CheckedChanged.AddHandler(function (s, e) { instance.OnItemClick(instance.GetItemIndexByElement(_aspxGetEventSource(e))); });
            internalButton.Focus.AddHandler(function (s, e) { instance.OnFocus(); });
            internalButton.LostFocus.AddHandler(function (s, e) { instance.OnLostFocus(); });
            this.attachToCellsClick(i);
            this.PrepareInternalButton(internalButton, i);
        }
    },
    CheckableElementsExist: function () {
        return !!this.imageProperties;
    },
    SetFocus: function () {
        this.UpdateFocus();
    },
    UpdateFocus: function () {
    },
    IsElementBelongToInputElement: function (element) {
        return this.GetItemIndexByElement(element) != -1;
    },
    attachToCellsClick: function (index) {
        var element = this.GetItemElement(index);
        _aspxAttachEventToElement(element, "click", function (evt) {
            var src = _aspxGetEventSource(evt);
            var label = ASPxCheckEditElementHelper.Instance.GetLabelElement(element);
            var button = this.internalButtonCollection.Get(this.GetItemInput(index).id);
            if (!_aspxGetIsParent(button.mainElement, src) && src !== label && src.parentElement !== label) {
                ASPxCheckEditElementHelper.Instance.InvokeClick(button, evt);
            }
        } .aspxBind(this));
    },
    GetItemIndexByElement: function (element) {
        for (var i = 0; i < this.GetItemCount(); i++) {
            var itemElement = this.GetItemElement(i);
            if (_aspxGetIsParent(itemElement, element))
                return i;
        }
        return -1;
    },
    GetItemInput: function (index) {
        return this.GetChild("_RB" + index + "_I");
    },
    GetItemElement: function (index) {
        return this.GetChild("_RB" + index);
    },
    GetItemCount: function () {
        return this.items.length;
    },
    OnItemClick: function (index) {
    },
    OnItemClickReadonly: function () {
        var index = this.GetSelectedIndexInternal();
        this.SelectIndexSilent(index);
    },
    UpdateHiddenInputs: function (index) {
        var stateInput = this.FindStateInputElement();
        if (_aspxIsExistsElement(stateInput))
            stateInput.value = index;
        var valueInput = this.GetValueInputElement();
        if (_aspxIsExistsElement(valueInput)) {
            var value = this.GetValue();
            valueInput.value = _aspxIsExists(value) ? value : " ";
        }
    },
    GetItemValue: function (index) {
        if (index > -1 && index < this.items.length) {
            if (typeof (this.items[index].value) == "string" && this.items[index].value == "" && this.convertEmptyStringToNull)
                return null;
            else
                return this.items[index].value;
        }
        return null;
    },
    SetValue: function (value) {
        for (var i = 0; i < this.items.length; i++) {
            if (this.GetItemValue(i) == value) {
                this.SelectIndexSilent(i);
                return;
            }
        }
        this.SelectIndexSilent(-1);
    },
    CreateItems: function (itemsProperties) {
        for (var i = 0; i < itemsProperties.length; i++)
            this.CreateItem(i, itemsProperties[i][0], this.GetDecodeValue(itemsProperties[i][1]), itemsProperties[i][2]);
    },
    CreateItem: function (index, text, value, imageUrl) {
        var item = new ASPxClientListEditItem(this, index, text, value, imageUrl);
        this.items.push(item);
    },
    GetItem: function (index) {
        return (0 <= index && index < this.items.length) ? this.items[index] : null;
    },
    ChangeEnabledAttributes: function (enabled) {
        if (!this.CheckableElementsExist()) {
            for (var i = 0; i < this.GetItemCount(); i++) {
                var element = this.GetItemInput(i);
                if (element) {
                    this.ChangeItemEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
                    element.disabled = !enabled;
                }
            }
        } else {
            var selectedIndex = this.GetSelectedIndexInternal();
            this.UpdateCheckableElementDecorations(selectedIndex, enabled);
        }
    },
    ChangeEnabledStateItems: function (enabled) {
        aspxGetStateController().SetElementEnabled(this.GetMainElement(), enabled);
        if (this.isNative) {
            for (var i = 0; i < this.GetItemCount(); i++) {
                var element = this.GetItemInput(i);
                if (element)
                    aspxGetStateController().SetElementEnabled(element, enabled);
            }
        }
    },
    ChangeItemEnabledAttributes: function (element, method) {
        method(element, "onclick");
    }
});
ASPxClientRadioButtonList = _aspxCreateClass(ASPxClientCheckListBase, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.isASPxClientRadioButtonList = true;
    },
    InlineInitialize: function () {
        var selectedIndex = this.GetSelectedIndex();
        this.UpdateHiddenInputs(selectedIndex);
        if (this.CheckableElementsExist())
            this.CreateButtonInternalCollection();
        this.SetSelectedIndex(this.GetSelectedIndex());
        ASPxClientCheckListBase.prototype.InlineInitialize.call(this);
    },
    Initialize: function () {
        ASPxClientCheckListBase.prototype.Initialize.call(this);
    },
    PrepareInternalButton: function (internalRadioButton) {
        internalRadioButton.autoSwitchEnabled = false;
    },
    GetInputElement: function () {
        if (this.isNative) {
            var index = this.GetSelectedIndexInternal();
            return this.GetItemInput(index);
        } else
            return this.GetValueInputElement();
    },
    GetValueInputElement: function () {
        if (this.valueInput == null) {
            this.valueInput = _aspxCreateHiddenField(null, this.name + "_ValueInput");
            var stateInput = this.FindStateInputElement();
            stateInput.parentNode.insertBefore(this.valueInput, stateInput);
        }
        return this.valueInput;
    },
    GetValueInputToValidate: function () {
        return this.GetValueInputElement();
    },
    SelectIndexSilent: function (index) {
        var itemCount = this.GetItemCount();
        var isValidIndex = (-1 <= index && index < itemCount);
        if (isValidIndex) {
            if (this.CheckableElementsExist())
                this.UpdateCheckableElementDecorations(index, this.GetEnabled());
            else {
                for (var i = 0; i < itemCount; i++) {
                    var element = this.GetItemInput(i);
                    if (element)
                        element.checked = (i == index);
                }
            }
            this.SetSelectedIndexInternal(index);
            this.UpdateHiddenInputs(index);
        }
    },
    UpdateCheckableElementDecorations: function (selectedIndex, enabled) {
        if (this.CheckableElementsExist()) {
            for (var i = 0; i < this.items.length; i++) {
                var inputElement = this.GetItemInput(i);
                var internalButton = this.internalButtonCollection.Get(inputElement.id);
                internalButton.SetEnabled(enabled);
                internalButton.SetValue(i == selectedIndex ? ASPxClientCheckBoxInputKey.Checked : ASPxClientCheckBoxInputKey.Unchecked);
            }
        }
    },
    UpdateFocus: function () {
        var index = this.GetSelectedIndexInternal();
        if (index == -1)
            index = 0;
        var itemElement = this.GetItemInput(index);
        if (itemElement != null && _aspxGetActiveElement() != itemElement && _aspxIsEditorFocusable(itemElement))
            _aspxSetFocus(itemElement);
    },
    OnItemClick: function (index) {
        if (this.GetSelectedIndexInternal() != index) {
            this.SelectIndexSilent(index);
            this.RaisePersonalStandardValidation();
            this.OnValueChanged();
        }
        this.UpdateFocus();
    }
});
ASPxClientRadioButtonList.Cast = ASPxClientControl.Cast;
ASPxClientCheckBoxList = _aspxCreateClass(ASPxClientCheckListBase, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.selectionEventsLockCount = 0;
    },
    InlineInitialize: function () {
        if (this.CheckableElementsExist())
            this.CreateButtonInternalCollection();
        ASPxClientCheckListBase.prototype.InlineInitialize.call(this);
    },
    Initialize: function () {
        ASPxClientCheckListBase.prototype.Initialize.call(this);
        this.InitSelection();
    },
    InitSelection: function () {
        this.SelectIndices(this.initSelectedIndices);
        this.CacheValue();
    },
    PrepareInternalButton: function (internalCheckBox, index) {
        internalCheckBox.autoSwitchEnabled = true;
        internalCheckBox.SetChecked(this.GetItemSelectionHelper().GetIsItemSelected(index));
    },
    SelectIndexSilent: function (index) {
        var itemCount = this.GetItemCount();
        var isValidIndex = (-1 <= index && index < itemCount);
        if (isValidIndex) {
            this.UpdateHiddenInputs(index);
        }
    },
    UpdateCheckableElementDecorations: function (selectedIndex, enabled) {
        if (this.CheckableElementsExist()) {
            for (var i = 0; i < this.items.length; i++) {
                var inputElement = this.GetItemInput(i);
                var internalButton = this.internalButtonCollection.Get(inputElement.id);
                internalButton.SetEnabled(enabled);
            }
        }
    },
    SetSelectionDecoration: function (index, selected) {
        if (this.CheckableElementsExist()) {
            var inputElement = this.GetItemInput(index);
            var internalButton = this.internalButtonCollection.Get(inputElement.id);
            internalButton.SetValue(selected ? ASPxClientCheckBoxInputKey.Checked : ASPxClientCheckBoxInputKey.Unchecked);
        } else {
            var element = this.GetItemInput(index);
            if (element)
                element.checked = (selected);
        }
    },
    OnItemClick: function (index) {
        this.GetItemSelectionHelper().OnItemClick(index);
    },
    UpdateFocus: function () {
        var index = this.GetItemSelectionHelper().GetFocusedItemIndex();
        if (index == -1)
            index = this.GetSelectedIndexInternal();
        if (index == -1)
            index = 0;
        var itemElement = this.GetItemInput(index);
        if (itemElement != null && _aspxGetActiveElement() != itemElement && _aspxIsEditorFocusable(itemElement))
            _aspxSetFocus(itemElement);
    },
    UpdateInternalState: function () {
        this.UpdateHiddenInputs();
    },
    IsUpdateHiddenInputsLocked: function () {
        return this.GetItemSelectionHelper().IsUpdateInternalSelectionStateLocked();
    },
    UpdateHiddenInputs: function () {
        if (this.IsUpdateHiddenInputsLocked())
            return;
        var element = this.FindStateInputElement();
        if (_aspxIsExistsElement(element)) {
            var sb = [];
            var serialiser = this.GetSerializingHelper();
            var selectedIndices = this.GetSelectedIndices();
            for (var i = 0; i < selectedIndices.length; i++)
                serialiser.SerializeAtomValue(sb, selectedIndices[i]);
            element.value = sb.join("");
        }
    },
    GetSerializingHelper: function () {
        if (this.serializingHelper == null)
            this.serializingHelper = new _aspxListBoxBaseItemsSerializingHelper(this);
        return this.serializingHelper;
    },
    SetItemSelectionAppearance: function (index, selected, controller) {
    },
    LockSelectionEvents: function () {
        this.selectionEventsLockCount++;
    },
    UnlockSelectionEvents: function () {
        this.selectionEventsLockCount--;
    },
    IsSelectionEventsLocked: function () {
        return this.selectionEventsLockCount > 0;
    },
    CacheValue: function () {
        this.cachedValue = this.GetValue();
    },
    IsValueChanged: function () {
        return this.cachedValue != this.GetValue();
    },
    OnItemSelectionChanged: function (index, selected) {
        this.SetSelectionDecoration(index, selected);
        if (!this.IsSelectionEventsLocked()) {
            this.SetRaiseSelectedIndexChangedArguments(this.autoPostBack, index, selected);
            var valueChanged = this.IsValueChanged();
            if (valueChanged) {
                this.RaisePersonalStandardValidation();
                this.OnValueChanged();
            } else {
                if (this.RaiseSelectedIndexChanged())
                    this.SendPostBackInternal("");
            }
        }
        this.CacheValue();
    },
    SetRaiseSelectedIndexChangedArguments: function (processOnServer, index, selected) {
        this.selectedIndexChangedArguments = {
            processOnServer: processOnServer,
            index: index,
            selected: selected
        };
    },
    GetRaiseSelectedIndexChangedArguments: function () {
        if (!this.selectedIndexChangedArguments)
            this.SetRaiseSelectedIndexChangedArguments(false, this.GetSelectedIndex(), true);
        return this.selectedIndexChangedArguments;
    },
    RaiseSelectedIndexChanged: function (processOnServer) {
        this.RaiseValidationInternal();
        var savedArgs = this.GetRaiseSelectedIndexChangedArguments();
        processOnServer = savedArgs.processOnServer || processOnServer;
        if (!this.SelectedIndexChanged.IsEmpty()) {
            var args = new ASPxClientListEditItemSelectedChangedEventArgs(savedArgs.index, savedArgs.selected, processOnServer);
            this.SelectedIndexChanged.FireEvent(this, args);
            processOnServer = args.processOnServer;
        }
        return processOnServer;
    },
    GetItemSelectionHelper: function () {
        if (!this.itemSelectionHelper)
            this.itemSelectionHelper = this.CreateItemSelectionHelper();
        return this.itemSelectionHelper;
    },
    CreateItemSelectionHelper: function () {
        return new _aspxCheckBoxListMultiSelectionHelper(this);
    },
    GetItem: function (index) {
        var item = ASPxClientCheckListBase.prototype.GetItem.call(this, index);
        item.selected = this.GetItemSelectionHelper().GetIsItemSelected(index);
        return item;
    },
    SetValue: function (value) {
        var index = this.FindItemIndexByValue(value);
        this.SetSelectedIndex(index);
    },
    GetSelectedIndexInternal: function () {
        if (!this.isInitialized)
            return ASPxClientCheckListBase.prototype.GetSelectedIndexInternal.call(this);
        return this.GetItemSelectionHelper().GetSelectedIndex();
    },
    SetSelectedIndex: function (index) {
        this.LockSelectionEvents();
        this.GetItemSelectionHelper().SetSelectedIndex(index);
        this.UnlockSelectionEvents();
    },
    GetSelectedIndices: function () {
        return this.GetItemSelectionHelper().GetSelectedIndices();
    },
    GetSelectedValues: function () {
        return this.GetItemSelectionHelper().GetSelectedValues();
    },
    GetSelectedItems: function () {
        return this.GetItemSelectionHelper().GetSelectedItems();
    },
    SelectAll: function () {
        this.SelectIndices();
    },
    UnselectAll: function () {
        this.UnselectIndices();
    },
    SelectIndices: function (indices) {
        this.LockSelectionEvents();
        this.GetItemSelectionHelper().SelectIndices(indices);
        this.UnlockSelectionEvents();
    },
    SelectItems: function (items) {
        this.LockSelectionEvents();
        this.GetItemSelectionHelper().SelectItems(items);
        this.UnlockSelectionEvents();
    },
    SelectValues: function (values) {
        this.LockSelectionEvents();
        this.GetItemSelectionHelper().SelectValues(values);
        this.UnlockSelectionEvents();
    },
    UnselectIndices: function (indices) {
        this.LockSelectionEvents();
        this.GetItemSelectionHelper().UnselectIndices(indices);
        this.UnlockSelectionEvents();
    },
    UnselectItems: function (items) {
        this.LockSelectionEvents();
        this.GetItemSelectionHelper().UnselectItems(items);
        this.UnlockSelectionEvents();
    },
    UnselectValues: function (values) {
        this.LockSelectionEvents();
        this.GetItemSelectionHelper().UnselectValues(values);
        this.UnlockSelectionEvents();
    }
});
ASPxClientCheckBoxList.Cast = ASPxClientControl.Cast;
ASPxClientListEditItemSelectedChangedEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
    constructor: function (index, isSelected, processOnServer) {
        this.constructor.prototype.constructor.call(this, processOnServer);
        this.index = index;
        this.isSelected = isSelected;
    }
});
function aspxLBTSelectStart(evt) {
    var element = _aspxGetEventSource(evt);
    var shiftPressed = evt.shiftKey;
    var ctrlKey = evt.ctrlKey || evt.metaKey;
    if (shiftPressed || ctrlKey) {
        _aspxClearSelection();
        _aspxPreventEventAndBubble(evt);
    }
}
function aspxLBIClick(evt) {
    if (ASPxClientTouchUI.isMouseEventFromScrolling) return;
    var element = _aspxGetEventSource(evt);
    while (element != null && element.tagName != "BODY") {
        if (element.tagName == "TR") {
            var table = element.offsetParent;
            if (table && table.ListBoxId) {
                var lb = aspxGetControlCollection().Get(table.ListBoxId);
                if (lb != null) {
                    var retValue;
                    if (evt.type == "dblclick")
                        retValue = lb.OnItemDblClick();
                    else if (!lb.isComboBoxList || _aspxGetIsLeftButtonPressed(evt))
                        retValue = lb.OnItemClick(element.rowIndex, evt);
                    if (typeof (retValue) != "undefined")
                        return retValue;
                }
                break;
            }
        }
        element = element.parentNode;
    }
}
function aspxNLBIDClick(evt) {
    var element = _aspxGetEventSource(evt);
    if (element != null && element.tagName == "SELECT") {
        var lb = aspxGetControlCollection().Get(element.id);
        if (lb != null)
            lb.OnItemDblClick();
    }
}
function aspxLBScroll(evt) {
    var sourceId = _aspxGetEventSource(evt).id;
    if (sourceId.slice(-__aspxLBDSuffix.length) == __aspxLBDSuffix) {
        var name = sourceId.slice(0, -2);
        var lb = aspxGetControlCollection().Get(name);
        if (lb != null && lb.isInitialized)
            lb.OnScroll();
    }
}
function aspxLBCorrectSizeByTimer(name) {
    var lb = aspxGetControlCollection().Get(name);
    if (lb != null)
        lb.OnCorrectSizeByTimer();
}
function aspxERBLIClick(name, index) {
    var list = aspxGetControlCollection().Get(name);
    if (list != null)
        list.OnItemClick(index);
}
function aspxERBLICancel(name) {
    var list = aspxGetControlCollection().Get(name);
    if (list != null)
        list.OnItemClickReadonly();
}

ASPxClientPanel = _aspxCreateClass(ASPxClientControl, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.touchUIScroller = null;
    },
    Initialize: function () {
        this.touchUIScroller = ASPxClientTouchUI.makeScrollableIfRequired(this.GetMainElement());
    },
    GetContentElement: function () {
        return this.GetMainElement();
    },
    GetContentHTML: function () {
        return this.GetContentHtml();
    },
    SetContentHTML: function (html) {
        this.SetContentHtml(html);
    },
    GetContentHtml: function () {
        if (this.touchUIScroller)
            this.touchUIScroller.destroy();
        var contentElement = this.GetContentElement();
        contentHtml = _aspxIsExistsElement(contentElement) ? contentElement.innerHTML : null;
        if (this.touchUIScroller)
            this.touchUIScroller.ChangeElement(this.GetMainElement());
        return contentHtml;
    },
    SetContentHtml: function (html) {
        var contentElement = this.GetContentElement();
        if (_aspxIsExistsElement(contentElement))
            _aspxSetInnerHtml(contentElement, html);
        if (this.touchUIScroller)
            this.touchUIScroller.ChangeElement(this.GetMainElement());
    }
});
ASPxClientPanel.Cast = ASPxClientControl.Cast;
var __aspxRPHeaderTextContainerIDSuffix = "_RPHT";
var __aspxRPContentElementIDSuffix = "_RPC";
var __aspxRPGroupBoxCaptionIDSuffix = "_GBC";
var ASPxClientRoundPanel = _aspxCreateClass(ASPxClientPanel, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.headerTextContainer = null;
        this.headerTextEmpty = false;
        this.contentElement = null;
        this.isGroupBox = false;
    },
    GetContentElement: function () {
        if (this.contentElement == null)
            this.contentElement = this.GetChild(__aspxRPContentElementIDSuffix);
        return this.contentElement;
    },
    GetGroupBoxCaptionElement: function () {
        if (this.groupBoxCaptionElement == null)
            this.groupBoxCaptionElement = this.GetChild(__aspxRPGroupBoxCaptionIDSuffix);
        return this.groupBoxCaptionElement;
    },
    GetHeaderTextContainer: function () {
        if (this.headerTextContainer == null)
            this.headerTextContainer = document.getElementById(this.name + __aspxRPHeaderTextContainerIDSuffix);
        return this.headerTextContainer;
    },
    GetHeaderText: function () {
        return !this.headerTextEmpty ? this.GetHeaderTextInternal() : "";
    },
    SetHeaderText: function (text) {
        var textContainer = this.GetHeaderTextContainer();
        if (_aspxIsExistsElement(textContainer)) {
            if (!text || _aspxTrim(text) == "") {
                this.headerTextEmpty = true;
                textContainer.innerHTML = "&nbsp;";
            } else {
                this.headerTextEmpty = false;
                textContainer.innerHTML = text;
            }
        }
    },
    GetHeaderTextInternal: function () {
        var textContainer = this.GetHeaderTextContainer();
        return _aspxIsExistsElement(textContainer) ? textContainer.innerHTML : null;
    },
    GetContentHtml: function () {
        var contentElement = this.GetContentElement();
        if (_aspxIsExistsElement(contentElement)) {
            if (this.isGroupBox)
                var caption = this.RemoveGroupBoxCaptionElement();
            var contentHTML = contentElement.innerHTML;
            if (this.isGroupBox)
                this.RestoreGroupBoxCaptionElement(caption);
            return contentHTML;
        }
        return null;
    },
    SetContentHtml: function (html) {
        var contentElement = this.GetContentElement();
        if (_aspxIsExistsElement(contentElement)) {
            if (this.isGroupBox)
                var caption = this.RemoveGroupBoxCaptionElement();
            _aspxSetInnerHtml(contentElement, html);
            if (this.isGroupBox)
                this.RestoreGroupBoxCaptionElement(caption);
        }
    },
    RemoveGroupBoxCaptionElement: function () {
        var captionElement = this.GetGroupBoxCaptionElement();
        return captionElement ? captionElement.parentNode.removeChild(captionElement) : null;
    },
    RestoreGroupBoxCaptionElement: function (captionElement) {
        var contentElement = this.GetContentElement();
        if (contentElement) {
            if (contentElement.hasChildNodes())
                contentElement.insertBefore(captionElement, contentElement.firstChild);
            else
                contentElement.appendChild(captionElement);
        }
    }
});
ASPxClientRoundPanel.Cast = ASPxClientControl.Cast;
var ASPxCollection = function () {
    var initialItems = null;

    switch (arguments.length) {
        case 0:
            initialItems = new Array();
            break;
        case 1:
            var argument = arguments[0];
            initialItems = argument instanceof Array ? argument : [argument];
            break;
        default:
            initialItems = arguments;
            break;
    }


    var collection = Array.apply(null, initialItems);

    ASPxCollection.injectClassMethods(collection);

    collection.IsASPxCollection = true;

    return (collection);
};

ASPxCollection.injectClassMethods = function (collection) {
    for (var method in ASPxCollection.prototype) {
        if (ASPxCollection.prototype.hasOwnProperty(method)) {
            collection[method] = ASPxCollection.prototype[method];
        }
    }
    return (collection);
};

ASPxCollection.prototype = {

    CreateInstance: function () {
        return (new ASPxCollection());
    },


    Count: function () {
        return (this.length);
    },


    IndexOfItem: function (item) {
        var itemsCount = this.Count();
        for (var index = 0; index < itemsCount; index++) {
            if (this[index] == item) return (index);
        }
        return (null);
    },


    AddItem: function (item) {
        this.push(item);
        return (this);
    },

    AddRange: function (items) {
        for (var index = 0; index < items.length; index++) {
            this.AddItem(items[index]);
        }
        return (this);
    },

    Add: function () {
        switch (arguments.length) {
            case 0:
                return (this);
            case 1:
                var argument = arguments[0];
                if (argument instanceof Array) {
                    return (this.AddRange(argument));
                } else {
                    return (this.AddItem(argument));
                }
            default:
                return (this.AddRange(arguments));
        }
    },


    RemoveItem: function (item) {
        var itemIndex = this.IndexOfItem(item);
        if (itemIndex != null) {
            this.splice(itemIndex, 1);
        }
        return (this);
    },

    RemoveRange: function (items) {
        for (var index = 0; index < items.length; index++) {
            this.RemoveItem(items[index]);
        }
        return (this);
    },

    Remove: function () {
        switch (arguments.length) {
            case 0:
                return (this);
            case 1:
                var argument = arguments[0];
                if (argument instanceof Array) {
                    return (this.RemoveRange(argument));
                } else {
                    return (this.RemoveItem(argument));
                }
            default:
                return (this.RemoveRange(arguments));
        }
    },


    Pop: function () {
        if (this.IsNotEmpty()) {
            this.pop();
        }
        return (this);
    },


    Clear: function () {
        while (this.IsNotEmpty()) {
            this.pop();
        }
        return (this);
    },


    IsEmpty: function () {
        return (this.Count() == 0);
    },

    IsNotEmpty: function () {
        return (this.IsEmpty() == false);
    },


    First: function () {
        return (this.IsNotEmpty() ? this[0] : null);
    },

    Last: function () {
        return (this.IsNotEmpty() ? this[this.Count() - 1] : null);
    },


    Each: function () {
        var beginIndex = null;
        var endIndex = null;
        var sourceFunction = null;

        switch (arguments.length) {
            case 1:
                beginIndex = 0;
                endIndex = this.Count();
                sourceFunction = arguments[0];
                break;
            case 2:
                beginIndex = arguments[0];
                endIndex = this.Count();
                sourceFunction = arguments[1];
                break;
            case 3:
                beginIndex = arguments[0];
                endIndex = Math.min(arguments[1], this.Count());
                sourceFunction = arguments[2];
                break;
            default:
                return (this);
        }

        for (var index = beginIndex; index < endIndex; index++) {
            sourceFunction.call(this[index], index);
        }

        return (this);
    },


    Select: function (predicate) {
        var result = this.CreateInstance();

        this.Each(function (index) {
            if (predicate.call(this, index) == true) {
                result.AddItem(this);
            }
        });

        return (result);
    },

    Evict: function (predicate) {
        var result = this.CreateInstance();

        this.Each(function (index) {
            if (predicate.call(this, index) == false) {
                result.AddItem(this);
            }
        });

        return (result);
    },


    Any: function (predicate) {
        if (predicate) {
            var itemsCount = this.Count();
            for (var index = 0; index < itemsCount; index++) {
                if (predicate.call(this[index], index) == true) {
                    return (true);
                }
            }
            return (false);
        }
        return this.IsNotEmpty();
    },


    OfType: function (itemType) {
        return this.Select(function () {
            return (this instanceof itemType);
        });
    },

    Except: function (itemType) {
        return this.Evict(function () {
            return (this instanceof itemType);
        });
    },


    Take: function (itemCount) {
        return this.Select(function (index) {
            return (index < itemCount);
        });
    },

    Skip: function (itemCount) {
        return this.Evict(function (index) {
            return (index < itemCount);
        });
    },


    Min: function (selector) {
        if (this.IsEmpty()) return (null);

        var firstItem = this.First();
        var result = selector ? selector.call(firstItem, 0) : firstItem;

        this.Each(1, function (index) {
            var currentResult = selector ? selector.call(this, index) : this;
            if (currentResult < result) result = currentResult;
        });

        return (result);
    },

    Max: function (selector) {
        if (this.IsEmpty()) return (null);

        var firstItem = this.First();
        var result = selector ? selector.call(firstItem, 0) : firstItem;

        this.Each(1, function (index) {
            var currentResult = selector ? selector.call(this, index) : this;
            if (result < currentResult) result = currentResult;
        });

        return (result);
    }

};

ASPxClientControl.IsASPxClientListBox = function (control) {
    return typeof ASPxClientListBox !== "undefined" && ASPxClientListBox != null && control instanceof ASPxClientListBox;
};

ASPxClientControl.IsASPxClientCalendar = function (control) {
    return typeof ASPxClientCalendar !== "undefined" && ASPxClientCalendar != null && control instanceof ASPxClientCalendar;
};


ASPxClientControl.GetChildControls = function (parentControl) {
    var controls = aspxGetControlCollection().elements;

    var parentControlName = parentControl.name;

    var result = new Array();

    for (var controlName in controls) {
        var control = controls[controlName];

        if (control == null) continue;
        if (control.GetMainElement() == null) continue;

        if (!control.isASPxClientControl) continue;

        if (controlName.slice(0, parentControlName.length) != parentControlName) continue;
        if (controlName.length == parentControlName.length) continue;

        result.push(control);
    }

    return new ASPxControlCollection(result);
};


var _aspxAdjustControl = function (control) {
    if (control != null && typeof control.AdjustControl === "function") {
        control.AdjustControl();
    }
};

var _aspxRefreshControlState = function (control) {
    if (control != null && typeof control.RefreshState === "function") {
        control.RefreshState();
    }
};

var _aspxFocusControl = function (control) {
    if (control != null && typeof control.SetFocus === "function") {
        control.SetFocus();
    }
};

var _aspxClearControl = function (control) {
    if (control != null) {
        if (typeof control.ClearValue === "function") {
            control.ClearValue();
            return;
        }

        if (typeof control.SetValue === "function") {
            control.SetValue(null);
            return;
        }
    }
};


var _aspxGetVisible = function (control) {
    if (control != null && typeof control.GetVisible === "function") {
        return control.GetVisible();
    }
    return null;
};

var _aspxGetEnabled = function (control) {
    if (control != null && typeof control.GetEnabled === "function") {
        return control.GetEnabled();
    }
    return null;
};



var ASPxControlCollectionContainer = _aspxCreateClass(null, {

    constructor: function (controlType) {
        this.controlType = controlType;
        this.controls = new Array();
    },


    ControlType: function () {
        return this.controlType;
    },

    Controls: function () {
        return this.controls;
    },


    AddControl: function (control) {
        if (this.HasAppropriateType(control) == false) return this;

        this.controls.push(this.InitializeControl(control));

        return this;
    },


    AdjustControls: function () {
        var _this = this;

        return this.Each(function () {
            _this.AdjustControl(this);
        });
    },

    AdjustControl: function (control) {
        _aspxAdjustControl(control);
    },


    ClearControls: function () {
        var _this = this;

        return this.Each(function () {
            _this.ClearControl(this);
        });
    },

    ClearControl: function (control) {
        _aspxClearControl(control);
    },


    HasAppropriateType: function (control) {
        if (this.controlType) {
            return ASPxClientUtils.IsExists(this.controlType) && control instanceof this.controlType;
        }

        return true;
    },


    InitializeControl: function (control) {
        this.AttachCCContainerReference(control);

        return control;
    },

    AttachCCContainerReference: function (control) {
        control.controlCollectionContainer = this;
        control.ControlCollectionContainer = function () {
            return this.controlCollectionContainer;
        }
    },


    Changed: function () {
        return this;
    },


    IsEmpty: function () {
        return this.controls.length == 0;
    },

    IsNotEmpty: function () {
        return this.IsEmpty() == false;
    },

    FirstOrDefault: function () {
        return this.IsNotEmpty() ? this.controls[0] : null;
    },

    LastOrDefault: function () {
        return this.IsNotEmpty() ? this.controls[this.controls.length - 1] : null;
    },

    Each: function () {
        if (arguments.length == 0 || arguments.length > 3) return this;

        var beginIndex = 0;
        var endIndex = this.controls.length;

        if (arguments.length == 2) {
            beginIndex = arguments[0];
        }
        else if (arguments.length >= 3) {
            beginIndex = arguments[0];
            endIndex = Math.min(arguments[1], this.controls.length);
        }

        var sourceFunction = arguments[arguments.length - 1];

        for (var index = beginIndex; index < endIndex; index++) {
            var currentControl = this.controls[index];

            sourceFunction.call(currentControl);
        }

        return this;
    }
});


var ASPxControlCollection = function () {
    var collection = ASPxCollection.apply(null, arguments);

    ASPxControlCollection.injectClassMethods(collection);

    collection.IsASPxControlCollection = true;

    return (collection);
}

ASPxControlCollection.injectClassMethods = function (controlCollection) {
    for (var method in ASPxControlCollection.prototype) {
        if (ASPxControlCollection.prototype.hasOwnProperty(method)) {
            controlCollection[method] = ASPxControlCollection.prototype[method];
        }
    }
    return (controlCollection);
};

ASPxControlCollection.prototype = {

    CreateInstance: function () {
        return (new ASPxControlCollection());
    },


    AdjustControls: function () {
        return this.Each(function () {
            _aspxAdjustControl(this);
        });
    },

    RefreshState: function () {
        return this.Each(function () {
            _aspxRefreshControlState(this);
        });
    },

    Focus: function () {
        _aspxFocusControl(this.First());
        return (this);
    },

    ClearControls: function () {
        return this.Each(function () {
            _aspxClearControl(this);
        });
    },


    RemoveInternals: function () {
        return this.Evict(function () {
            if (ASPxClientControl.IsASPxClientListBox(this)) {
                return this.isComboBoxList ? true : false;
            }

            if (ASPxClientControl.IsASPxClientCalendar(this)) {
                return this.isDateEditCalendar ? true : false;
            }

            return false;
        });
    },

    Editors: function () {
        return this.Select(function () {
            return this.isASPxClientEdit ? true : false;
        });
    },

    Visible: function () {
        return this.Select(function () {
            return _aspxGetVisible(this); ;
        });
    },

    Enabled: function () {
        return this.Select(function () {
            return _aspxGetEnabled(this); ;
        });
    },

    Active: function () {
        return this.Select(function () {
            return _aspxGetVisible(this) && _aspxGetEnabled(this);
        });
    }
}
var _aspxParseJSON = function (jsonString) {
    return _aspxIsValidJSON(jsonString) ? eval("(" + jsonString + ")") : null;
};

var _aspxParseBool = function (value) {
    if (typeof value === "string") {
        return value === 'true' || value === 'True' || (value === 'false' || value === 'False' ? false : null);
    }
    return Boolean(value);
};

var _aspxEscapeRegExp = function (source) {
    return source.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
};

var _aspxReplaceAll = function (source, oldValue, newValue) {
    return source.replace(new RegExp(_aspxEscapeRegExp(oldValue), 'g'), newValue);
};
var __aspxRPHeaderElementIDSuffix = "_RPH";
var __aspxRPHeaderECButtonIDSuffix = "_RPHECB";
var __aspxRPCStateControlIDSuffix = "_RPCSC";

var ASPxClientExpandablePanel = _aspxCreateClass(ASPxClientRoundPanel, {

    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);

        this.headerElement = null;
        this.headerECButton = null;
        this.CStateElement = null;

        this.controlStateObject = null;

        this.controls = [];

        this.HeaderClick = new ASPxClientEvent();
        this.Expanded = new ASPxClientEvent();
        this.Collapsed = new ASPxClientEvent();
    },


    GetChildControl: function (idPostfix) {
        return aspxGetControlCollection().Get(this.name + idPostfix);
    },


    GetGroupBoxCaptionElement: undefined,

    RemoveGroupBoxCaptionElement: undefined,

    RestoreGroupBoxCaptionElement: undefined,

    InlineInitialize: function () {
        ASPxClientRoundPanel.prototype.InlineInitialize.call(this);

        this.InitializeControls();
        this.InitializeEvents();

        this.ChangeHeaderTextDisplayed(this.GetHeaderText());
        this.Toggle(this.IsExpanded());

        this.UpdateHeaderECButtonState();
    },

    AdjustControlCore: function () {
        ASPxClientRoundPanel.prototype.AdjustControlCore.call(this);

        //We have to use jQuery - there is no other simple way to detect actual width of the "hidden" content element:
        var $dxrpHeader = $(this.GetHeaderElement());
        var $dxrpContent = $(this.GetContentElement());

        var difference = $dxrpContent.outerWidth(true) - $dxrpHeader.outerWidth(true);

        if (difference > 0) {
            $dxrpHeader.width($dxrpHeader.width() + difference);
        }
    },

    InitializeControls: function () {
        this.controls = ASPxClientControl.GetChildControls(this).RemoveInternals();
    },

    InitializeEvents: function () {
        _aspxAttachEventToElement(this.GetHeaderElement(), "click", this.HeaderElement_OnClickEventHandler.aspxBind(this));
    },

    HeaderElement_OnClickEventHandler: function (evt) {
        if (evt.ctrlKey == true || evt.shiftKey == true || evt.altKey == true) return;


        var eventArgs = new ASPxClientCancelEventArgs();

        this.HeaderClick.FireEvent(this, eventArgs);

        if (eventArgs.cancel) return;


        this.Toggle();
    },


    Controls: function () {
        return this.controls;
    },


    GetHeaderElement: function () {
        return this.headerElement || (this.headerElement = this.GetChild(__aspxRPHeaderElementIDSuffix));
    },

    GetHeaderECButton: function () {
        return this.headerECButton || (this.headerECButton = this.GetChildControl(__aspxRPHeaderECButtonIDSuffix));
    },


    GetCStateElement: function () {
        return this.CStateElement || (this.CStateElement = this.GetChild(__aspxRPCStateControlIDSuffix));
    },

    GetControlStateObject: function () {
        return this.controlStateObject || (this.controlStateObject = _aspxParseJSON(this.GetCStateElement().value));
    },

    SaveControlStateObject: function () {
        this.GetCStateElement().value = _aspxToJson(this.controlStateObject);
    },

    GetControlState: function (key) {
        return this.GetControlStateObject()[key];
    },

    SetControlState: function (key, value) {
        this.GetControlStateObject()[key] = value;
        this.SaveControlStateObject();
    },


    GetECStateValue: function () {
        return this.GetControlState("Expanded") || false;
    },

    SetECStateValue: function (value) {
        if (typeof value === "boolean") {
            this.SetControlState("Expanded", value);
        }
        return this;
    },

    GetHTStateValue: function () {
        return this.GetControlState("HeaderText") || "";
    },

    SetHTStateValue: function (value) {
        if (typeof value === "string") {
            this.SetControlState("HeaderText", value);
        }
        return this;
    },


    IsExpanded: function () {
        return this.GetECStateValue();
    },

    IsCollapsed: function () {
        return this.IsExpanded() == false;
    },

    Expand: function () {
        _aspxSetElementDisplay(this.GetContentElement(), true);

        this.SetECStateValue(true);

        this.AdjustControlCore();

        this.UpdateHeaderECButtonState();

        this.Expanded.FireEvent(this, ASPxClientEventArgs.Empty);

        return this;
    },

    Collapse: function () {
        _aspxSetElementDisplay(this.GetContentElement(), false);

        this.SetECStateValue(false);

        this.AdjustControlCore();

        this.UpdateHeaderECButtonState();

        this.Collapsed.FireEvent(this, ASPxClientEventArgs.Empty);

        return this;
    },

    Toggle: function (expandOrCollapse) {
        var expandOrCollapseActualState = typeof expandOrCollapse === "boolean" ? expandOrCollapse : !this.IsExpanded();

        return expandOrCollapseActualState ? this.Expand() : this.Collapse();
    },


    GetHeaderText: function () {
        return this.GetHTStateValue();
    },

    SetHeaderText: function (text) {
        this.SetHTStateValue(text);
        this.ChangeHeaderTextDisplayed(text);
    },


    ChangeHeaderTextDisplayed: function (text) {
        ASPxClientRoundPanel.prototype.SetHeaderText.call(this, text);
    },


    UpdateHeaderECButtonState: function () {
        this.GetHeaderECButton().SetText(this.IsExpanded() ? '-' : '+');

        return this;
    }
});

ASPxClientExpandablePanel.Cast = ASPxClientControl.Cast;

var _aspxEmptyFunction = function () { };

var _aspxCreateFunctionWrapper = function (sourceFunction, beforeFunction, afterFunction) {
    return function () {
        beforeFunction.apply(this, arguments);

        var result = sourceFunction.apply(this, arguments);

        afterFunction.apply(this, arguments);

        return result;
    }
};


var ASPxActionsRepository = function () {
    var collection = ASPxCollection.apply(null, arguments);

    ASPxActionsRepository.injectClassMethods(collection);

    collection.IsASPxActionsRepository = true;

    return (collection);
}

ASPxActionsRepository.injectClassMethods = function (controlCollection) {
    for (var method in ASPxActionsRepository.prototype) {
        if (ASPxActionsRepository.prototype.hasOwnProperty(method)) {
            controlCollection[method] = ASPxActionsRepository.prototype[method];
        }
    }
    return (controlCollection);
};

ASPxActionsRepository.prototype = {

    CreateInstance: function () {
        return (new ASPxActionsRepository());
    },


    AddItem: function (item) {
        if (item && typeof item === "function") {
            ASPxCollection.prototype.AddItem.call(this, item);
        }
        return (this);
    },


    Execute: function (actionContext, actionParameters) {
        this.Each(function () {
            try { this.apply(actionContext || null, actionParameters || arguments); } catch (e) { }
        });

        return (this.Clear());
    }

}

var ASPxCSPControlButtonsContainer = _aspxCreateClass(ASPxControlCollectionContainer, {

    constructor: function (searchPanel) {
        this.constructor.prototype.constructor.call(this, ASPxClientButton);

        this.parentSearchPanel = searchPanel;
        this.minControlWidth = null;
        this.maxControlWidth = null;

        this.adjustControlsOnExpand = false;


        this.ParentSearchPanel().Expanded.AddHandler(
            this.ParentSearchPanel_OnExpandedEventHandler.aspxBind(this)
        );
    },


    ParentSearchPanel: function () {
        return this.parentSearchPanel;
    },


    InitializeControl: function (control) {
        ASPxControlCollectionContainer.prototype.InitializeControl.call(this, control);

        control.UpdateWidth = _aspxEmptyFunction;
        control.UpdateHeight = _aspxEmptyFunction;

        control.SetText = this.CreateSmartFunctionWrapper(ASPxClientButton.prototype.SetText);
        control.SetImageUrl = this.CreateSmartFunctionWrapper(ASPxClientButton.prototype.SetImageUrl);

        return control;
    },

    CreateSmartFunctionWrapper: function (sourceFunction) {
        return _aspxCreateFunctionWrapper(
            function () {
                sourceFunction.apply(this, arguments);

                return this;
            },
            function () {
                this.UpdateWidth = ASPxClientButton.prototype.UpdateWidth;
                this.UpdateHeight = ASPxClientButton.prototype.UpdateHeight;

                _aspxRemoveStyleAttribute(this.GetMainElement(), "width");
            },
            function () {
                this.UpdateWidth = _aspxEmptyFunction;
                this.UpdateHeight = _aspxEmptyFunction;

                this.ControlButtonsContainer().Changed();
            }
        );
    },


    AttachCCContainerReference: function (control) {
        control.controlButtonsContainer = this;
        control.ControlButtonsContainer = function () {
            return this.controlButtonsContainer;
        }
    },


    AdjustControls: function () {
        if (this.ParentSearchPanel().IsExpanded()) {
            ASPxControlCollectionContainer.prototype.AdjustControls.call(this);
            this.adjustControlsOnExpand = false;
        } else {
            this.adjustControlsOnExpand = true;
        }
    },

    AdjustControl: function (control) {
        control.SetWidth(this.MaxControlWidth());

        ASPxControlCollectionContainer.prototype.AdjustControl.call(this, control);
    },

    ParentSearchPanel_OnExpandedEventHandler: function () {
        if (this.adjustControlsOnExpand) {
            ASPxControlCollectionContainer.prototype.AdjustControls.call(this);
            this.adjustControlsOnExpand = false;
        }
    },


    Changed: function () {
        ASPxControlCollectionContainer.prototype.Changed.call(this);

        this.minControlWidth = null;
        this.maxControlWidth = null;

        return this;
    },



    MinControlWidth: function () {
        return this.minControlWidth || (this.minControlWidth = this.FetchMinControlWidth());
    },

    FetchMinControlWidth: function () {
        if (this.IsEmpty()) return null;

        var result = this.FirstOrDefault().GetWidth();

        this.Each(1, function () {
            var controlWidth = this.GetWidth();

            if (controlWidth < result) result = controlWidth;
        });

        return result;
    },


    MaxControlWidth: function () {
        return this.maxControlWidth || (this.maxControlWidth = this.FetchMaxControlWidth());
    },

    FetchMaxControlWidth: function () {
        if (this.IsEmpty()) return null;

        var result = this.FirstOrDefault().GetWidth();

        this.Each(1, function () {
            var controlWidth = this.GetWidth();

            if (result < controlWidth) result = controlWidth;
        });

        return result;
    }
});



var __aspxRPPerformSearchButtonIDSuffix = "_RPCBPS";
var __aspxRPCancelSearchButtonIDSuffix = "_RPCBCS";

var ASPxClientSearchPanel = _aspxCreateClass(ASPxClientExpandablePanel, {
    HeaderTextValueRepository: {
        SearchUndefined: 0,
        SearchPerformed: 1,
        SearchCancelled: 2,
        Custom: 3
    },

    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);

        this.parentGridViewID = null;
        this.parentGridView = null;

        this.headerSearchUndefined = null;
        this.headerSearchPerformed = null;
        this.headerSearchCancelled = null;

        this.editors = [];

        this.controlButtonsContainer = null;
        this.performSearchButton = null;
        this.cancelSearchButton = null;

        this.PerformSearchClick = new ASPxClientEvent();
        this.CancelSearchClick = new ASPxClientEvent();
    },


    InlineInitialize: function () {
        ASPxClientExpandablePanel.prototype.InlineInitialize.call(this);

        this.GetControlButtonsContainer()
            .AddControl(this.GetPerformSearchButton())
            .AddControl(this.GetCancelSearchButton());
    },

    AdjustControlCore: function () {
        ASPxClientExpandablePanel.prototype.AdjustControlCore.call(this);

        this.GetControlButtonsContainer().AdjustControls();
    },

    AfterInitialize: function () {
        this.InitializeParentGridView();

        ASPxClientExpandablePanel.prototype.AfterInitialize.call(this);
    },

    InitializeControls: function () {
        ASPxClientExpandablePanel.prototype.InitializeControls.call(this);
        this.editors = this.controls.Editors();
    },

    InitializeEvents: function () {
        ASPxClientExpandablePanel.prototype.InitializeEvents.call(this);

        this.GetPerformSearchButton().Click.AddHandler(this.PerformSearchButton_OnClickEventHandler.aspxBind(this));
        this.GetCancelSearchButton().Click.AddHandler(this.CancelSearchButton_OnClickEventHandler.aspxBind(this));
    },

    PerformSearchButton_OnClickEventHandler: function () {
        var eventArgs = new ASPxClientCancelEventArgs();

        this.PerformSearchClick.FireEvent(this, eventArgs);

        if (eventArgs.cancel) return;

        this.PerformSearch();
    },

    CancelSearchButton_OnClickEventHandler: function () {
        var eventArgs = new ASPxClientCancelEventArgs();

        this.CancelSearchClick.FireEvent(this, eventArgs);

        if (eventArgs.cancel) return;

        this.CancelSearch();
    },


    SetParentGridView: function (value) {
        this.FinalizeParentGridView();

        if (typeof value === "string") {
            this.parentGridViewID = value != "" ? value : null;
        } else {
            this.parentGridView = value;
        }

        this.InitializeParentGridView();

        return this;
    },

    GetParentGridView: function () {
        return this.parentGridView;
    },


    FinalizeParentGridView: function () {
        this.parentGridView = null;
        this.parentGridViewID = null;
    },

    InitializeParentGridView: function () {
        if (!this.parentGridView) {
            this.parentGridView = this.parentGridViewID ? ASPxClientControl.GetControlCollection().Get(this.parentGridViewID) : null;
        }

        if (!this.parentGridViewID) {
            this.parentGridViewID = this.parentGridView ? this.parentGridView.name : null;
        }
    },


    SetHeaderSearchUndefined: function (value) {
        this.headerSearchUndefined = value;
        return this;
    },

    GetHeaderSearchUndefined: function () {
        return this.headerSearchUndefined;
    },

    SetHeaderSearchPerformed: function (value) {
        this.headerSearchPerformed = value;
        return this;
    },

    GetHeaderSearchPerformed: function () {
        return this.headerSearchPerformed;
    },

    SetHeaderSearchCancelled: function (value) {
        this.headerSearchCancelled = value;
        return this;
    },

    GetHeaderSearchCancelled: function () {
        return this.headerSearchCancelled;
    },


    GetHeaderTextValue: function () {
        return this.GetControlState("HeaderTextValue") || this.HeaderTextValueRepository.SearchUndefined;
    },

    SetHeaderTextValue: function (value) {
        if (typeof value === "number") {
            this.SetControlState("HeaderTextValue", value);
            this.ChangeHeaderTextDisplayed(this.GetHeaderText());
        }
        return this;
    },


    GetHeaderText: function () {
        switch (this.GetHeaderTextValue()) {
            case this.HeaderTextValueRepository.SearchUndefined:
                return this.GetHeaderSearchUndefined();
            case this.HeaderTextValueRepository.SearchPerformed:
                return this.GetHeaderSearchPerformed() || this.GetHeaderSearchUndefined();
            case this.HeaderTextValueRepository.SearchCancelled:
                return this.GetHeaderSearchCancelled() || this.GetHeaderSearchUndefined();
            default:
                return ASPxClientExpandablePanel.prototype.GetHeaderText.call(this);
        }
    },

    SetHeaderText: function (text) {
        this.SetHeaderTextValue(this.HeaderTextValueRepository.Custom);
        return ASPxClientExpandablePanel.prototype.SetHeaderText.call(this, text);
    },


    Editors: function () {
        return this.editors;
    },


    GetControlButtonsContainer: function () {
        return this.controlButtonsContainer || (this.controlButtonsContainer = new ASPxCSPControlButtonsContainer(this));
    },

    GetPerformSearchButton: function () {
        return this.performSearchButton || (this.performSearchButton = this.GetChildControl(__aspxRPPerformSearchButtonIDSuffix));
    },

    GetCancelSearchButton: function () {
        return this.cancelSearchButton || (this.cancelSearchButton = this.GetChildControl(__aspxRPCancelSearchButtonIDSuffix));
    },


    Expand: function () {
        ASPxClientExpandablePanel.prototype.Expand.call(this);

        this.FocusFilters();
    },


    PerformSearch: function () {
        var parentGridView = this.GetParentGridView();

        if (parentGridView) {
            if (parentGridView.PerformSearch) {
                parentGridView.PerformSearch();
            } else {
                parentGridView.PerformCallback("PerformSearch");
            }
        }

        this.SetHeaderTextValue(this.HeaderTextValueRepository.SearchPerformed);
    },

    CancelSearch: function () {
        this.Editors().ClearControls();

        var parentGridView = this.GetParentGridView();

        if (parentGridView) {
            if (parentGridView.CancelSearch) {
                parentGridView.CancelSearch();
            } else {
                parentGridView.PerformCallback("CancelSearch");
            }
        }

        this.SetHeaderTextValue(this.HeaderTextValueRepository.SearchCancelled);

        this.FocusFilters();
    },

    FocusFilters: function () {

        if (this.IsCollapsed()) return this;

        this.Editors().Active().Focus();

        return this;
    }

});

ASPxClientSearchPanel.Cast = ASPxClientExpandablePanel.Cast;

ASPxClientButton = _aspxCreateClass(ASPxClientControl, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.isASPxClientButton = true;
        this.allowFocus = true;
        this.autoPostBackFunction = null;
        this.causesValidation = true;
        this.checked = false;
        this.clickLocked = false;
        this.groupName = "";
        this.focusElementSelected = false;
        this.pressed = false;
        this.useSubmitBehavior = true;
        this.validationGroup = "";
        this.validationContainerID = null;
        this.validateInvisibleEditors = false;
        this.originalWidth = null;
        this.originalHeight = null;
        this.buttonCell = null;
        this.contentDiv = null;
        this.checkedInput = null;
        this.buttonImage = null;
        this.internalButton = null;
        this.textElement = null;
        this.textControl = null;
        this.textContainer = null;
        this.isTextEmpty = false;
        this.CheckedChanged = new ASPxClientEvent();
        this.GotFocus = new ASPxClientEvent();
        this.LostFocus = new ASPxClientEvent();
        this.Click = new ASPxClientEvent();
    },
    InlineInitialize: function () {
        var mainElement = this.GetMainElement();
        this.originalWidth = mainElement.style.width;
        this.originalHeight = mainElement.style.height;
        ASPxClientControl.prototype.InlineInitialize.call(this);
        this.InitializeElementIDs();
        this.InitializeEvents();
        this.InitializeEnabled();
        this.InitializeChecked();
        if (this.IsLink())
            this.InitializeLink();
        this.PreventButtonImageDragging();
    },
    InitializeElementIDs: function () {
        var mainElement = this.GetMainElement();
        var contentElement = _aspxGetChildByTagName(mainElement, "DIV", 0);
        if (contentElement) contentElement.id = this.name + "_CD";
        var imageElement = _aspxGetChildByTagName(mainElement, "IMG", 0);
        if (imageElement) imageElement.id = this.name + "Img";
    },
    InitializeEnabled: function () {
        this.SetEnabledInternal(this.clientEnabled, true);
    },
    InitializeChecked: function () {
        this.SetCheckedInternal(this.checked, true);
    },
    InitializeLink: function () {
        var mainElement = this.GetMainElement();
        if (this.enabled)
            mainElement.href = "javascript:;";
        if (!this.allowFocus)
            mainElement.style.outline = 0;
        if (!this.GetTextContainer())
            mainElement.style.fontSize = "0pt";
    },
    InitializeEvents: function () {
        if (!this.isNative && !this.IsLink()) {
            var element = this.GetInternalButton();
            if (element)
                element.onfocus = null;
            var textControl = this.GetTextControl();
            if (textControl) {
                if (__aspxIE)
                    _aspxAttachEventToElement(textControl, "mouseup", _aspxClearSelection);
                _aspxPreventElementDragAndSelect(textControl, false);
            }
        }
        var name = this.name;
        this.onClick = function () {
            var processOnServer = aspxBClick(name);
            if (!processOnServer) {
                var evt = _aspxGetEvent(arguments[0]);
                if (evt)
                    _aspxPreventEvent(evt);
            }
            return processOnServer;
        };
        this.onGotFocus = function () { aspxBGotFocus(name); };
        this.onLostFocus = function () { aspxBLostFocus(name); };
        this.onKeyUp = function (evt) { aspxBKeyUp(evt, name); };
        this.onKeyDown = function (evt) { aspxBKeyDown(evt, name); };
        if (!this.isNative && !this.IsLink()) {
            this.AttachNativeHandlerToMainElement("focus", "SetFocus");
            this.AttachNativeHandlerToMainElement("click", "DoClick");
        }
    },
    AdjustControlCore: function () {
        if (this.isNative || this.IsLink()) return;
        window.setTimeout(function () {
            this.UpdateWidth();
            this.UpdateHeight();
        } .aspxBind(this), 0);
    },
    UpdateHeight: function () {
        if (this.isNative || this.IsLink() || this.originalHeight === null || _aspxIsPercentageSize(this.originalHeight)) return;
        var height;
        var mainElement = this.GetMainElement();
        var borderAndPadding = _aspxGetTopBottomBordersAndPaddingsSummaryValue(mainElement);
        if (!this.originalHeight) {
            mainElement.style.height = "";
            height = mainElement.offsetHeight - borderAndPadding;
        }
        else
            height = (_aspxPxToInt(this.originalHeight) - borderAndPadding);
        if (height) {
            mainElement.style.height = height + "px";
            var contentDiv = this.GetContentDiv();
            if (contentDiv && contentDiv.offsetHeight > 0) {
                var contentDivCurrentStyle = _aspxGetCurrentStyle(contentDiv);
                var paddingTop = parseInt(contentDivCurrentStyle.paddingTop);
                if (!paddingTop) paddingTop = 0;
                var paddingBottom = parseInt(contentDivCurrentStyle.paddingBottom);
                if (!paddingBottom) paddingBottom = 0;
                var clientHeightDiff = height - contentDiv.offsetHeight;
                var verticalAlign = _aspxGetCurrentStyle(mainElement).verticalAlign;
                if (verticalAlign == "top")
                    paddingBottom = paddingBottom + clientHeightDiff;
                else if (verticalAlign == "bottom")
                    paddingTop = paddingTop + clientHeightDiff;
                else {
                    var halfClientHeightDiff = Math.floor(clientHeightDiff / 2);
                    paddingTop = paddingTop + halfClientHeightDiff;
                    paddingBottom = paddingBottom + (clientHeightDiff - halfClientHeightDiff);
                }
                contentDiv.style.paddingTop = (paddingTop > 0 ? paddingTop : 0) + "px";
                contentDiv.style.paddingBottom = (paddingBottom > 0 ? paddingBottom : 0) + "px";
            }
        }
    },
    UpdateWidth: function () {
        if (this.isNative || this.IsLink() || this.originalWidth === null) return;
        if (!_aspxIsPercentageSize(this.originalWidth)) {
            var mainElement = this.GetMainElement();
            var borderAndPadding = _aspxGetLeftRightBordersAndPaddingsSummaryValue(mainElement);
            if (__aspxIE && __aspxBrowserVersion < 8) {
                mainElement.style.display = "inline";
                mainElement.style.width = "";
                if (mainElement.offsetWidth > 0)
                    mainElement.style.width = (mainElement.offsetWidth + borderAndPadding) + "px";
                mainElement.style.display = "";
            }
            else
                mainElement.style.width = this.originalWidth && _aspxIsTextWrapped(this.GetTextContainer()) ? this.originalWidth : "";
            var width = mainElement.offsetWidth - borderAndPadding;
            if (this.originalWidth && width < _aspxPxToInt(this.originalWidth) - borderAndPadding)
                width = _aspxPxToInt(this.originalWidth) - borderAndPadding;
            if (width)
                mainElement.style.width = (width > 0 ? width : 0) + "px";
        }
        _aspxAdjustWrappedTextInContainer(this.GetContentDiv());
    },
    GetAdjustedSizes: function () {
        var sizes = ASPxClientControl.prototype.GetAdjustedSizes.call(this);
        var image = this.GetButtonImage();
        if (image) {
            sizes.imageWidth = image.offsetWidth;
            sizes.imageHeight = image.offsetHeight;
        }
        return sizes;
    },
    PreventButtonImageDragging: function () {
        _aspxPreventImageDragging(this.GetButtonImage());
    },
    AttachNativeHandlerToMainElement: function (handlerName, correspondingMethodName) {
        var mainElement = this.GetMainElement();
        if (!_aspxIsExistsElement(mainElement))
            return;
        mainElement[handlerName] = Function("_aspxBCallButtonMethod('" + this.name + "', '" + correspondingMethodName + "')");
    },
    GetContentDiv: function () {
        if (!_aspxIsExistsElement(this.contentDiv))
            this.contentDiv = this.GetChild("_CD");
        return this.contentDiv;
    },
    GetButtonCheckedInput: function () {
        if (!_aspxIsExistsElement(this.checkedInput))
            this.checkedInput = _aspxGetElementById(this.name + "_CH");
        return this.checkedInput;
    },
    GetButtonImage: function () {
        if (!_aspxIsExistsElement(this.buttonImage))
            this.buttonImage = _aspxGetChildByTagName(this.GetMainElement(), "IMG", 0);
        return this.buttonImage;
    },
    GetInternalButton: function () {
        if (!_aspxIsExistsElement(this.internalButton))
            this.internalButton = this.isNative || this.IsLink() ? this.GetMainElement() : _aspxGetChildByTagName(this.GetMainElement(), "INPUT", 0);
        return this.internalButton;
    },
    GetTextContainer: function () {
        if (!this.textContainer) {
            if (this.isNative)
                this.textContainer = this.GetMainElement();
            else {
                var textElement = this.IsLink() ? this.GetMainElement() : this.GetContentDiv();
                this.textContainer = _aspxGetChildByTagName(textElement, "SPAN", 0);
            }
        }
        return this.textContainer;
    },
    GetTextControl: function () {
        if (!_aspxIsExistsElement(this.textControl))
            this.textControl = _aspxGetParentByTagName(this.GetContentDiv(), "DIV");
        if (!_aspxIsExistsElement(this.textControl) || (this.textControl.id == this.name))
            this.textControl = this.GetContentDiv();
        return this.textControl;
    },
    IsLink: function () {
        return this.GetMainElement().tagName === "A";
    },
    IsHovered: function () {
        var hoverElement = this.GetMainElement();
        return aspxGetStateController().currentHoverItemName == hoverElement.id;
    },
    SetEnabledInternal: function (enabled, initialization) {
        if (!this.enabled)
            return;
        if (!initialization || !enabled)
            this.ChangeEnabledStateItems(enabled);
        this.ChangeEnabledAttributes(enabled);
    },
    ChangeEnabledAttributes: function (enabled) {
        var element = this.GetInternalButton();
        if (element) {
            element.disabled = !enabled;
            if (this.IsLink()) {
                var method = _aspxChangeAttributesMethod(enabled);
                method(this.GetMainElement(), "href");
            }
        }
        this.ChangeEnabledEventsAttributes(_aspxChangeEventsMethod(enabled));
    },
    ChangeEnabledEventsAttributes: function (method) {
        var element = this.GetMainElement();
        method(element, "click", this.onClick);
        if (this.allowFocus) {
            if (!this.isNative && !this.IsLink())
                element = this.GetInternalButton();
            if (element) {
                method(element, "focus", this.onGotFocus);
                method(element, "blur", this.onLostFocus);
                if (!this.isNative && !this.IsLink()) {
                    method(element, "keyup", this.onKeyUp);
                    method(element, "blur", this.onKeyUp);
                    method(element, "keydown", this.onKeyDown);
                }
            }
        }
    },
    ChangeEnabledStateItems: function (enabled) {
        if (this.isNative) return;
        aspxGetStateController().SetElementEnabled(this.GetMainElement(), enabled);
        this.UpdateFocusedStyle();
    },
    RequiredPreventDoublePostback: function () {
        return __aspxFirefox && !this.isNative;
    },
    OnFocus: function () {
        if (!this.allowFocus)
            return false;
        this.focused = true;
        if (this.isInitialized)
            this.RaiseFocus();
        this.UpdateFocusedStyle();
    },
    OnLostFocus: function () {
        if (!this.allowFocus)
            return false;
        this.focused = false;
        if (this.isInitialized)
            this.RaiseLostFocus();
        this.UpdateFocusedStyle();
    },
    CauseValidation: function () {
        if (this.causesValidation && typeof (ASPxClientEdit) != "undefined")
            return this.validationContainerID != null ?
    ASPxClientEdit.ValidateEditorsInContainerById(this.validationContainerID, this.validationGroup, this.validateInvisibleEditors) :
    ASPxClientEdit.ValidateGroup(this.validationGroup, this.validateInvisibleEditors);
        else
            return true;
    },
    OnClick: function () {
        if (this.clickLocked) return true;
        if (this.checked && this.groupName != "" && this.GetCheckedGroupList().length > 1) return;
        this.SetFocus();
        var isValid = this.CauseValidation();
        var processOnServer = this.autoPostBack;
        if (this.groupName != "") {
            if (this.GetCheckedGroupList().length == 1)
                this.SetCheckedInternal(!this.checked, false);
            else {
                this.SetCheckedInternal(true, false);
                this.ClearButtonGroupChecked(true);
            }
            processOnServer = this.RaiseCheckedChanged();
            if (processOnServer && isValid)
                this.SendPostBack("CheckedChanged");
        }
        processOnServer = this.RaiseClick();
        if (processOnServer && isValid) {
            var requiredPreventDoublePostback = this.RequiredPreventDoublePostback();
            var postponePostback = __aspxAndroidMobilePlatform;
            if (requiredPreventDoublePostback || postponePostback)
                _aspxSetTimeout("_aspxBCallButtonMethod(\"" + this.name + "\", \"SendPostBack\", \"Click\" );", 0);
            else
                this.SendPostBack("Click");
            return !requiredPreventDoublePostback;
        }
        return false;
    },
    OnKeyUp: function (evt) {
        if (this.pressed)
            this.SetUnpressed();
    },
    OnKeyDown: function (evt) {
        if (evt.keyCode == ASPxKey.Enter || evt.keyCode == ASPxKey.Space)
            this.SetPressed();
    },
    GetChecked: function () {
        return this.groupName != "" ? this.GetButtonCheckedInput().value == "1" : false;
    },
    GetCheckedGroupList: function () {
        var result = [];
        aspxGetControlCollection().ForEachControl(function (control) {
            if (ASPxIdent.IsASPxClientButton(control) && (control.groupName == this.groupName) && control.RenderExistsOnPage())
                result.push(control);
        }, this);
        return result;
    },
    ClearButtonGroupChecked: function (raiseCheckedChanged) {
        var list = this.GetCheckedGroupList();
        for (var i = 0; i < list.length; i++) {
            if (list[i] != this && list[i].checked) {
                list[i].SetCheckedInternal(false, false);
                if (raiseCheckedChanged)
                    list[i].RaiseCheckedChanged();
            }
        }
    },
    ApplyCheckedStyle: function () {
        var stateController = aspxGetStateController();
        if (this.IsHovered())
            stateController.SetCurrentHoverElement(null);
        stateController.SelectElementBySrcElement(this.GetMainElement());
    },
    ApplyUncheckedStyle: function () {
        var stateController = aspxGetStateController();
        if (this.IsHovered())
            stateController.SetCurrentHoverElement(null);
        stateController.DeselectElementBySrcElement(this.GetMainElement());
    },
    SetCheckedInternal: function (checked, initialization) {
        if (initialization && checked || (this.checked != checked)) {
            this.checked = checked;
            var inputElement = this.GetButtonCheckedInput();
            if (inputElement)
                inputElement.value = checked ? "1" : "0";
            if (checked)
                this.ApplyCheckedStyle();
            else
                this.ApplyUncheckedStyle();
        }
    },
    ApplyPressedStyle: function () {
        aspxGetStateController().OnMouseDownOnElement(this.GetMainElement());
    },
    ApplyUnpressedStyle: function () {
        aspxGetStateController().OnMouseUpOnElement(this.GetMainElement());
    },
    SetPressed: function () {
        this.pressed = true;
        this.ApplyPressedStyle();
    },
    SetUnpressed: function () {
        this.pressed = false;
        this.ApplyUnpressedStyle();
    },
    SetFocus: function () {
        if (!this.allowFocus || this.focused)
            return;
        var element = this.GetInternalButton();
        if (element) {
            var hiddenInternalButtonRequiresVisibilityToGetFocused = __aspxWebKitFamily && !this.isNative && !this.IsLink();
            if (hiddenInternalButtonRequiresVisibilityToGetFocused)
                ASPxClientButton.MakeHiddenElementFocusable(element);
            if (_aspxIsFocusable(element) && _aspxGetActiveElement() != element)
                element.focus();
            if (hiddenInternalButtonRequiresVisibilityToGetFocused)
                ASPxClientButton.RestoreHiddenElementAppearance(element);
        }
    },
    ApplyFocusedStyle: function () {
        if (this.focusElementSelected) return;
        if (typeof (aspxGetStateController) != "undefined")
            aspxGetStateController().SelectElementBySrcElement(this.GetContentDiv());
        this.focusElementSelected = true;
    },
    ApplyUnfocusedStyle: function () {
        if (!this.focusElementSelected) return;
        if (typeof (aspxGetStateController) != "undefined")
            aspxGetStateController().DeselectElementBySrcElement(this.GetContentDiv());
        this.focusElementSelected = false;
    },
    UpdateFocusedStyle: function () {
        if (this.isNative || this.IsLink()) return;
        if (this.enabled && this.clientEnabled && this.allowFocus && this.focused)
            this.ApplyFocusedStyle();
        else
            this.ApplyUnfocusedStyle();
    },
    SendPostBack: function (postBackArg) {
        if (!this.enabled || !this.clientEnabled)
            return;
        var arg = postBackArg || "";
        if (this.autoPostBackFunction)
            this.autoPostBackFunction(arg);
        else if (!this.useSubmitBehavior || this.IsLink())
            ASPxClientControl.prototype.SendPostBack.call(this, arg);
        if (this.useSubmitBehavior && !this.isNative)
            this.ClickInternalButton();
    },
    ClickInternalButton: function () {
        var element = this.GetInternalButton();
        if (element) {
            this.clickLocked = true;
            if (__aspxNetscapeFamily)
                this.CreateUniqueIDCarrier();
            _aspxDoElementClick(element);
            if (__aspxNetscapeFamily)
                this.RemoveUniqueIDCarrier();
            this.clickLocked = false;
        }
    },
    CreateUniqueIDCarrier: function () {
        var name = this.uniqueID;
        var id = this.GetUniqueIDCarrierID();
        var field = _aspxCreateHiddenField(name, id);
        var form = this.GetParentForm();
        if (form) form.appendChild(field);
    },
    RemoveUniqueIDCarrier: function () {
        var field = document.getElementById(this.GetUniqueIDCarrierID());
        if (field)
            field.parentNode.removeChild(field);
    },
    GetUniqueIDCarrierID: function () {
        return this.uniqueID + "_UIDC";
    },
    DoClick: function () {
        if (!this.enabled || !this.clientEnabled)
            return;
        var button = (this.isNative || this.IsLink()) ? this.GetMainElement() : this.GetInternalButton();
        if (button)
            _aspxDoElementClick(button);
        else
            this.OnClick();
    },
    GetChecked: function () {
        return this.checked;
    },
    SetChecked: function (checked) {
        this.SetCheckedInternal(checked, false);
        this.ClearButtonGroupChecked(false);
    },
    GetText: function () {
        if (!this.isTextEmpty)
            return this.isNative ? this.GetTextContainer().value : this.GetTextContainer().innerHTML;
        return "";
    },
    SetText: function (text) {
        this.isTextEmpty = (text == null || text == "");
        var textContainer = this.GetTextContainer();
        if (textContainer) {
            if (this.isNative)
                textContainer.value = (text != null) ? text : "";
            else {
                textContainer.innerHTML = this.isTextEmpty ? "&nbsp;" : text;
                if (this.clientVisible && __aspxIE && __aspxBrowserVersion >= 9)
                    _aspxSetElementDisplay(this.GetMainElement(), true);
            }
            this.UpdateWidth();
            this.UpdateHeight();
        }
    },
    GetImageUrl: function () {
        var img = this.GetButtonImage();
        return img ? img.src : "";
    },
    SetImageUrl: function (url) {
        var img = this.GetButtonImage();
        if (img) {
            img.src = url;
            this.UpdateWidth();
        }
    },
    SetEnabled: function (enabled) {
        if (this.clientEnabled != enabled) {
            if (!enabled && this.focused)
                this.OnLostFocus();
            this.clientEnabled = enabled;
            this.SetEnabledInternal(enabled, false);
        }
    },
    GetEnabled: function () {
        return this.enabled && this.clientEnabled;
    },
    Focus: function () {
        this.SetFocus();
    },
    RaiseCheckedChanged: function () {
        var processOnServer = this.autoPostBack || this.IsServerEventAssigned("CheckedChanged");
        if (!this.CheckedChanged.IsEmpty()) {
            var args = new ASPxClientProcessingModeEventArgs(processOnServer);
            this.CheckedChanged.FireEvent(this, args);
            processOnServer = args.processOnServer;
        }
        return processOnServer;
    },
    RaiseFocus: function () {
        if (!this.GotFocus.IsEmpty()) {
            var args = new ASPxClientEventArgs();
            this.GotFocus.FireEvent(this, args);
        }
    },
    RaiseLostFocus: function () {
        if (!this.LostFocus.IsEmpty()) {
            var args = new ASPxClientEventArgs();
            this.LostFocus.FireEvent(this, args);
        }
    },
    RaiseClick: function () {
        var processOnServer = this.autoPostBack || this.IsServerEventAssigned("Click");
        if (!this.Click.IsEmpty()) {
            var args = new ASPxClientProcessingModeEventArgs(processOnServer);
            this.Click.FireEvent(this, args);
            processOnServer = args.processOnServer;
        }
        return processOnServer;
    }
});
ASPxClientButton.Cast = ASPxClientControl.Cast;
ASPxClientButton.MakeHiddenElementFocusable = function (element) {
    element.__dxHiddenElementState = {
        parentDisplay: element.parentNode.style.display,
        height: element.style.height,
        width: element.style.width
    };
    element.parentNode.style.display = "block";
    element.style.height = "1px";
    element.style.width = "1px";
};
ASPxClientButton.RestoreHiddenElementAppearance = function (element) {
    var state = element.__dxHiddenElementState;
    element.parentNode.style.display = state.parentDisplay;
    element.style.height = state.height;
    element.style.width = state.width;
    delete element.__dxHiddenElementState;
};
ASPxIdent.IsASPxClientButton = function (obj) {
    return !!obj.isASPxClientButton;
};
function _aspxBCallButtonMethod(name, methodName, arg) {
    var button = aspxGetControlCollection().Get(name);
    if (button != null)
        button[methodName](arg);
}
function aspxBGotFocus(name) {
    var button = aspxGetControlCollection().Get(name);
    if (button != null)
        return button.OnFocus();
}
function aspxBLostFocus(name) {
    var button = aspxGetControlCollection().Get(name);
    if (button != null)
        return button.OnLostFocus();
}
function aspxBClick(name) {
    var button = aspxGetControlCollection().Get(name);
    if (button != null)
        return button.OnClick();
}
function aspxBKeyDown(evt, name) {
    var button = aspxGetControlCollection().Get(name);
    if (button != null)
        button.OnKeyDown(evt);
}
function aspxBKeyUp(evt, name) {
    var button = aspxGetControlCollection().Get(name);
    if (button != null)
        button.OnKeyUp(evt);
}

ASPxDateFormatter = _aspxCreateClass(null, {
    constructor: function () {
        this.date = new Date(2000, 0, 1);
        this.mask;
        this.specifiers = {};
        this.spPositions = [];
        this.knownSpecifiers = ["d", "M", "y", "H", "h", "m", "s", "f", "F", "g", "t"];
        this.savedYear = -1;
        this.isYearParsed = false;
        this.parsedMonth = -1;
        this.replacers = {
            "d": this.ReplaceDay,
            "M": this.ReplaceMonth,
            "y": this.ReplaceYear,
            "H": this.ReplaceHours23,
            "h": this.ReplaceHours12,
            "m": this.ReplaceMinutes,
            "s": this.ReplaceSeconds,
            "F": this.ReplaceMsTrimmed,
            "f": this.ReplaceMs,
            "g": this.ReplaceEra,
            "t": this.ReplaceAmPm
        };
        this.parsers = {
            "d": this.ParseDay,
            "M": this.ParseMonth,
            "y": this.ParseYear,
            "H": this.ParseHours,
            "h": this.ParseHours,
            "m": this.ParseMinutes,
            "s": this.ParseSeconds,
            "F": this.ParseMs,
            "f": this.ParseMs,
            "g": this.ParseEra,
            "t": this.ParseAmPm
        };
    },
    Format: function (date) {
        this.date = date;
        var sp;
        var pos;
        var replacerKey;
        var result = this.mask;
        for (var i = 0; i < this.spPositions.length; i++) {
            pos = this.spPositions[i];
            sp = this.specifiers[pos];
            replacerKey = sp.substr(0, 1);
            if (this.replacers[replacerKey]) {
                result = result.substr(0, pos) + this.replacers[replacerKey].call(this, sp.length) + result.substr(pos + sp.length);
            }
        }
        return result;
    },
    Parse: function (str) {
        var now = new Date();
        this.savedYear = now.getFullYear();
        this.isYearParsed = false;
        this.parsedMonth = -1;
        this.date = new Date(2000, 0, now.getDate());
        this.strToParse = str;
        this.catchNumbers(str);
        var parserKey;
        var sp;
        var pos;
        var parseResult;
        var error = false;
        this.hasAmPm = false;
        for (var i = 0; i < this.spPositions.length; i++) {
            pos = this.spPositions[i];
            sp = this.specifiers[pos];
            parserKey = sp.substr(0, 1);
            if (this.parsers[parserKey]) {
                parseResult = this.parsers[parserKey].call(this, sp.length);
                if (!parseResult) {
                    error = true;
                    break;
                }
            }
        }
        if (error)
            return false;
        if (this.hasAmPm) {
            if (!this.fixHours())
                return false;
        }
        if (!this.isYearParsed)
            this.date.setYear(this.savedYear);
        if (this.parsedMonth < 0)
            this.parsedMonth = now.getMonth();
        this.ApplyMonth();
        return this.date;
    },
    ApplyMonth: function () {
        var trial;
        var day = this.date.getDate();
        while (true) {
            trial = new Date();
            trial.setTime(this.date.getTime());
            trial.setMonth(this.parsedMonth);
            if (trial.getMonth() == this.parsedMonth)
                break;
            --day;
            this.date.setDate(day);
        }
        _aspxFixTimezoneGap(this.date, trial);
        this.date = trial;
    },
    SetFormatString: function (mask) {
        if (mask.length == 2 && mask.charAt(0) == "%")
            mask = mask.charAt(1);
        this.specifiers = {};
        this.spPositions = [];
        this.mask = "";
        var subt = 0;
        var pos = 0;
        var startPos = 0;
        var ch;
        var prevCh = "";
        var skip = false;
        var backslash = false;
        var sp = "";
        while (true) {
            ch = mask.charAt(pos);
            if (ch == "") {
                if (sp.length > 0)
                    this.RegisterSpecifier(startPos, sp);
                break;
            }
            if (ch == "\\" && !backslash) {
                backslash = true;
                subt++;
            } else {
                if (!backslash && (ch == "'" || ch == '"')) {
                    skip = !skip;
                    subt++;
                } else {
                    if (!skip) {
                        if (ch == "/")
                            ch = __aspxCultureInfo.ds;
                        else if (ch == ":")
                            ch = __aspxCultureInfo.ts;
                        else if (this.IsKnownSpecifier(ch)) {
                            if (prevCh.length == 0)
                                prevCh = ch;
                            if (ch == prevCh)
                                sp += ch;
                            else {
                                if (sp.length > 0)
                                    this.RegisterSpecifier(startPos, sp);
                                sp = ch;
                                startPos = pos - subt;
                            }
                        }
                    }
                    this.mask += ch;
                }
                backslash = false;
            }
            prevCh = ch;
            pos++;
        }
        this.spPositions.reverse();
    },
    RegisterSpecifier: function (pos, sp) {
        this.spPositions.push(pos);
        this.specifiers[pos] = sp;
    },
    ReplaceDay: function (length) {
        if (length < 3) {
            var value = this.date.getDate().toString();
            return length == 2 ? this.padLeft(value, 2) : value;
        } else if (length == 3) {
            return __aspxCultureInfo.abbrDayNames[this.date.getDay()];
        } else {
            return __aspxCultureInfo.dayNames[this.date.getDay()];
        }
    },
    ReplaceMonth: function (length) {
        var value = 1 + this.date.getMonth();
        switch (length) {
            case 1:
                return value.toString();
            case 2:
                return this.padLeft(value.toString(), 2);
            case 3:
                return __aspxCultureInfo.abbrMonthNames[value - 1];
            default:
                for (var i in this.specifiers) {
                    var spec = this.specifiers[i];
                    if (spec == "d" || spec == "dd")
                        return __aspxCultureInfo.genMonthNames[value - 1];
                }
                return __aspxCultureInfo.monthNames[value - 1];
        }
    },
    ReplaceYear: function (length) {
        var value = this.date.getFullYear();
        if (length <= 2)
            value = value % 100;
        return this.padLeft(value.toString(), length);
    },
    ReplaceHours23: function (length) {
        var value = this.date.getHours().toString();
        return length > 1 ? this.padLeft(value, 2) : value;
    },
    ReplaceHours12: function (length) {
        var value = this.date.getHours() % 12;
        if (value == 0)
            value = 12;
        value = value.toString();
        return length > 1 ? this.padLeft(value, 2) : value;
    },
    ReplaceMinutes: function (length) {
        var value = this.date.getMinutes().toString();
        return length > 1 ? this.padLeft(value, 2) : value;
    },
    ReplaceSeconds: function (length) {
        var value = this.date.getSeconds().toString();
        return length > 1 ? this.padLeft(value, 2) : value;
    },
    ReplaceMsTrimmed: function (length) {
        return this.formatMs(length, true);
    },
    ReplaceMs: function (length) {
        return this.formatMs(length, false);
    },
    ReplaceEra: function (length) {
        return "A.D.";
    },
    ReplaceAmPm: function (length) {
        var value = this.date.getHours() < 12 ? __aspxCultureInfo.am : __aspxCultureInfo.pm;
        return length < 2 ? value.charAt(0) : value;
    },
    catchNumbers: function (str) {
        this.parseNumbers = [];
        var regex = /\d+/g;
        var match;
        for (; ; ) {
            match = regex.exec(str);
            if (!match)
                break;
            this.parseNumbers.push(this.parseDecInt(match[0]));
        }
        var spCount = 0;
        var now = new Date();
        for (var i in this.specifiers) {
            var sp = this.specifiers[i];
            if (sp.constructor != String || !this.IsNumericSpecifier(sp)) continue;
            spCount++;
            if (this.parseNumbers.length < spCount) {
                var defaultValue = 0;
                if (sp.charAt(0) == "y") defaultValue = now.getFullYear();
                this.parseNumbers.push(defaultValue);
            }
        }
        var excess = this.parseNumbers.length - spCount;
        if (excess > 0)
            this.parseNumbers.splice(spCount, excess);
        this.currentParseNumber = this.parseNumbers.length - 1;
    },
    popParseNumber: function () {
        return this.parseNumbers[this.currentParseNumber--];
    },
    findAbbrMonth: function () {
        return this.findMonthCore(__aspxCultureInfo.abbrMonthNames);
    },
    findFullMonth: function () {
        return this.findMonthCore(__aspxCultureInfo.genMonthNames);
    },
    findMonthCore: function (monthNames) {
        var inputLower = this.strToParse.toLowerCase();
        for (var i = 0; i < monthNames.length; i++) {
            var monthName = monthNames[i].toLowerCase();
            if (monthName.length > 0 && inputLower.indexOf(monthName) > -1) {
                var empty = "";
                for (var j = 0; j < monthName.length; j++) empty += " ";
                this.strToParse = this.strToParse.replace(new RegExp(monthName, "gi"), empty);
                return 1 + parseInt(i);
            }
        }
        return false;
    },
    ParseDay: function (length) {
        if (length < 3) {
            var value = this.popParseNumber();
            if (value < 1 || value > 31)
                return false;
            this.date.setDate(value);
        }
        return true;
    },
    ParseMonth: function (length) {
        var value;
        switch (length) {
            case 1:
            case 2:
                value = this.popParseNumber();
                break;
            case 3:
                value = this.findAbbrMonth();
                break;
            default:
                value = this.findFullMonth();
                break;
        }
        if (value < 1 || value > 12)
            return false;
        this.parsedMonth = value - 1;
        return true;
    },
    ParseYear: function (length) {
        var value = this.popParseNumber();
        if (value > 9999)
            return false;
        if (value < 100)
            value = _aspxExpandTwoDigitYear(value);
        this.date.setFullYear(value);
        this.isYearParsed = true;
        return true;
    },
    ParseHours: function (length) {
        var value = this.popParseNumber();
        if (value > 23)
            return false;
        this.date.setHours(value);
        return true;
    },
    ParseMinutes: function (length) {
        var value = this.parseMinSecCore();
        if (value == -1)
            return false;
        this.date.setMinutes(value);
        return true;
    },
    ParseSeconds: function (length) {
        var value = this.parseMinSecCore();
        if (value == -1)
            return false;
        this.date.setSeconds(value);
        return true;
    },
    ParseMs: function (length) {
        if (length > 3)
            length = 3;
        var thr = 1;
        for (var i = 0; i < length; i++)
            thr *= 10;
        thr -= 1;
        var value = this.popParseNumber();
        while (value > thr)
            value /= 10;
        this.date.setMilliseconds(Math.round(value));
        return true;
    },
    ParseEra: function (length) {
        return true;
    },
    ParseAmPm: function (length) {
        this.hasAmPm = __aspxCultureInfo.am.length > 0 && __aspxCultureInfo.pm.length > 0;
        return true;
    },
    parseDecInt: function (str) {
        return parseInt(str, 10);
    },
    padLeft: function (str, length) {
        while (str.length < length)
            str = "0" + str;
        return str;
    },
    formatMs: function (length, trim) {
        var value = Math.floor(this.date.getMilliseconds() * Math.pow(10, length - 3));
        value = this.padLeft(value.toString(), length);
        if (trim) {
            var pos = value.length - 1;
            var req = false;
            while (value.charAt(pos) == "0") {
                req = true;
                pos--;
            }
            if (req)
                value = value.substring(0, pos + 1);
        }
        return value;
    },
    parseMinSecCore: function () {
        var value = this.popParseNumber();
        return value > 59 ? -1 : value;
    },
    fixHours: function () {
        var am = __aspxCultureInfo.am.charAt(0).toLowerCase();
        var pm = __aspxCultureInfo.pm.charAt(0).toLowerCase();
        var str = this.strToParse.toLowerCase();
        var state = null;
        if (str.indexOf(am) > -1)
            state = "A";
        else if (str.indexOf(pm) > -1)
            state = "P";
        if (!state) return true;
        var h = this.date.getHours();
        switch (state) {
            case "P":
                if (h > 12) return false;
                if (h < 12)
                    this.date.setHours(12 + h);
                break;
            case "A":
                if (h == 12)
                    this.date.setHours(0);
        }
        return true;
    },
    IsNumericSpecifier: function (sp) {
        var ch = sp.charAt(0);
        if (ch == "g" || ch == "t" || ((ch == "M" || ch == "d") && sp.length > 2))
            return false;
        return true;
    },
    IsKnownSpecifier: function (sp) {
        if (sp.length > 1)
            sp = sp.charAt(0);
        for (var i = 0; i < this.knownSpecifiers.length; i++) {
            if (this.knownSpecifiers[i] == sp)
                return true;
        }
        return false;
    }
});
ASPxDateFormatter.Create = function (format) {
    var instance = new ASPxDateFormatter();
    instance.SetFormatString(format);
    return instance;
};
ASPxDateFormatter.ExpandPredefinedFormat = function (format) {
    switch (format) {
        case "d":
            return __aspxCultureInfo.shortDate;
        case "D":
            return __aspxCultureInfo.longDate;
        case "t":
            return __aspxCultureInfo.shortTime;
        case "T":
            return __aspxCultureInfo.longTime;
        case "g":
            return __aspxCultureInfo.shortDate + " " + __aspxCultureInfo.shortTime;
        case "f":
            return __aspxCultureInfo.longDate + " " + __aspxCultureInfo.shortTime;
        case "G":
            return __aspxCultureInfo.shortDate + " " + __aspxCultureInfo.longTime;
        case "F":
        case "U":
            return __aspxCultureInfo.longDate + " " + __aspxCultureInfo.longTime;
        case "M":
        case "m":
            return __aspxCultureInfo.monthDay;
        case "Y":
        case "y":
            return __aspxCultureInfo.yearMonth;
        case "O":
        case "o":
            return "yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffff";
        case "R":
        case "r":
            return "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'";
        case "s":
            return "yyyy'-'MM'-'dd'T'HH':'mm':'ss";
        case "u":
            return "yyyy'-'MM'-'dd HH':'mm':'ss'Z'";
    }
    return format;
};
ASPxFormatter = {
    Format: function () {
        if (arguments.length < 1)
            return "";
        var format = arguments[0];
        if (format == null)
            return "";
        var args;
        if (arguments.length > 1 && arguments[1] != null && arguments[1].constructor == Array) {
            args = arguments[1];
        } else {
            args = [];
            for (var i = 1; i < arguments.length; i++)
                args.push(arguments[i]);
        }
        var bag = [];
        var pos = 0;
        var savedPos = 0;
        while (pos < format.length) {
            var ch = format.charAt(pos);
            pos++;
            if (ch == '{') {
                bag.push(format.substr(savedPos, pos - savedPos - 1));
                if (format.charAt(pos) == "{") {
                    savedPos = pos;
                    pos++;
                    continue;
                }
                var spec = this.ParseSpec(format, pos);
                var pos = spec.pos;
                var arg = args[spec.index];
                var argString;
                if (arg == null) {
                    argString = "";
                } else if (typeof arg == "number") {
                    argString = ASPxNumberFormatter.Format(spec.format, arg);
                } else if (arg.constructor == Date) {
                    if (spec.format != this.activeDateFormat) {
                        this.activeDateFormat = spec.format;
                        if (spec.format == "")
                            spec.format = "G";
                        if (spec.format.length == 1)
                            spec.format = ASPxDateFormatter.ExpandPredefinedFormat(spec.format);
                        this.GetDateFormatter().SetFormatString(spec.format);
                    }
                    if (this.activeDateFormat == "U")
                        arg = _aspxToUtcTime(arg);
                    argString = this.GetDateFormatter().Format(arg);
                } else {
                    argString = String(arg);
                    if (spec.format != "" && argString.length > 0) {
                        var num = Number(argString.replace(",", "."));
                        if (!isNaN(num))
                            argString = ASPxNumberFormatter.Format(spec.format, num);
                    }
                }
                var padLen = spec.width - argString.length;
                if (padLen > 0) {
                    if (spec.left)
                        bag.push(argString);
                    for (var i = 0; i < padLen; i++)
                        bag.push(" ");
                    if (!spec.left)
                        bag.push(argString);
                } else {
                    bag.push(argString);
                }
                savedPos = pos;
            }
            else if (ch == "}" && pos < format.length && format.charAt(pos) == "}") {
                bag.push(format.substr(savedPos, pos - savedPos - 1));
                savedPos = pos;
                pos++;
            }
            else if (ch == "}") {
                return "";
            }
        }
        if (savedPos < format.length)
            bag.push(format.substr(savedPos));
        return bag.join("");
    },
    ParseSpec: function (format, pos) {
        var result = {
            index: -1,
            left: false,
            width: 0,
            format: "",
            pos: 0
        };
        var savedPos, ch;
        savedPos = pos;
        while (true) {
            ch = format.charAt(pos);
            if (ch < "0" || ch > "9")
                break;
            pos++;
        }
        if (pos > savedPos)
            result.index = Number(format.substr(savedPos, pos - savedPos));
        if (format.charAt(pos) == ",") {
            pos++;
            while (true) {
                ch = format.charAt(pos);
                if (ch != " " && ch != "\t")
                    break;
                pos++;
            }
            result.left = format.charAt(pos) == "-";
            if (result.left)
                pos++;
            savedPos = pos;
            while (true) {
                ch = format.charAt(pos);
                if (ch < "0" || ch > "9")
                    break;
                pos++;
            }
            if (pos > savedPos)
                result.width = Number(format.substr(savedPos, pos - savedPos));
        }
        if (format.charAt(pos) == ":") {
            pos++;
            savedPos = pos;
            while (format.charAt(pos) != "}")
                pos++;
            result.format = format.substr(savedPos, pos - savedPos);
        }
        pos++;
        result.pos = pos;
        return result;
    },
    activeDateFormat: null,
    GetDateFormatter: function () {
        if (!this.__dateFormatter)
            this.__dateFormatter = new ASPxDateFormatter();
        return this.__dateFormatter;
    }
};
ASPxNumberFormatter = {
    Format: function (format, value) {
        if (isNaN(value))
            return __aspxCultureInfo.numNan;
        if (!isFinite(value)) {
            return value > 0
    ? __aspxCultureInfo.numPosInf
    : __aspxCultureInfo.numNegInf;
        }
        this.FillFormatInfo(format);
        if (this.spec == "X")
            return this.FormatHex(value);
        this.FillDigitInfo(value);
        switch (this.spec) {
            case "C":
                return this.FormatCurrency();
            case "D":
                return this.FormatDecimal();
            case "E":
                return this.FormatExp();
            case "F":
                return this.FormatFixed();
            case "G":
                return this.FormatGeneral();
            case "N":
                return this.FormatNumber();
            case "P":
                return this.FormatPercent();
            default:
                if (this.custom)
                    return this.FormatCustom(format);
                return "?";
        }
    },
    positive: true,
    digits: null,
    pointPos: 0,
    spec: "",
    prec: -1,
    upper: true,
    custom: false,
    FormatCurrency: function () {
        if (this.prec < 0)
            this.prec = __aspxCultureInfo.currPrec;
        this.Round(this.prec);
        var bag = [];
        if (this.positive) {
            switch (__aspxCultureInfo.currPosPattern) {
                case 0:
                    bag.push(__aspxCultureInfo.currency);
                    break;
                case 2:
                    bag.push(__aspxCultureInfo.currency, " ");
                    break;
            }
        } else {
            switch (__aspxCultureInfo.currNegPattern) {
                case 0:
                    bag.push("(", __aspxCultureInfo.currency);
                    break;
                case 1:
                    bag.push("-", __aspxCultureInfo.currency);
                    break;
                case 2:
                    bag.push(__aspxCultureInfo.currency, "-");
                    break;
                case 3:
                    bag.push(__aspxCultureInfo.currency);
                    break;
                case 5:
                case 8:
                    bag.push("-");
                    break;
                case 9:
                    bag.push("-", __aspxCultureInfo.currency, " ");
                    break;
                case 12:
                    bag.push(__aspxCultureInfo.currency, " -");
                    break;
                case 14:
                    bag.push("(", __aspxCultureInfo.currency, " ");
                    break;
                case 15:
                    bag.push("(");
                    break;
            }
        }
        this.AppendGroupedInteger(bag, __aspxCultureInfo.currGroups, __aspxCultureInfo.currGroupSeparator);
        if (this.prec > 0) {
            bag.push(__aspxCultureInfo.currDecimalPoint);
            this.AppendDigits(bag, this.pointPos, this.pointPos + this.prec);
        }
        if (this.positive) {
            switch (__aspxCultureInfo.currPosPattern) {
                case 1:
                    bag.push(__aspxCultureInfo.currency);
                    break;
                case 3:
                    bag.push(" ", __aspxCultureInfo.currency);
                    break;
            }
        } else {
            switch (__aspxCultureInfo.currNegPattern) {
                case 0:
                case 14:
                    bag.push(")");
                    break;
                case 3:
                    bag.push("-");
                    break;
                case 5:
                    bag.push(__aspxCultureInfo.currency);
                    break;
                case 8:
                    bag.push(" ", __aspxCultureInfo.currency);
                    break;
                case 10:
                    bag.push(" ", __aspxCultureInfo.currency, "-");
                    break;
                case 15:
                    bag.push(" ", __aspxCultureInfo.currency, ")");
                    break;
            }
        }
        return bag.join("");
    },
    FormatDecimal: function () {
        if (this.prec < this.pointPos)
            this.prec = this.pointPos;
        if (this.prec < 1)
            return "0";
        var bag = [];
        if (!this.positive)
            bag.push("-");
        this.AppendDigits(bag, this.pointPos - this.prec, this.pointPos);
        return bag.join("");
    },
    FormatExp: function () {
        if (this.prec < 0)
            this.prec = 6;
        this.Round(1 - this.pointPos + this.prec);
        return this.FormatExpCore(3);
    },
    FormatExpCore: function (minExpDigits) {
        var bag = [];
        if (!this.positive)
            bag.push("-");
        this.AppendDigits(bag, 0, 1);
        if (this.prec > 0) {
            bag.push(__aspxCultureInfo.numDecimalPoint);
            this.AppendDigits(bag, 1, 1 + this.prec);
        }
        bag.push(this.upper ? "E" : "e");
        var order = this.pointPos - 1;
        if (order >= 0) {
            bag.push("+");
        } else {
            bag.push("-");
            order = -order;
        }
        var orderStr = String(order);
        for (var i = orderStr.length; i < minExpDigits; i++)
            bag.push(0);
        bag.push(orderStr);
        return bag.join("");
    },
    FormatFixed: function () {
        if (this.prec < 0)
            this.prec = __aspxCultureInfo.numPrec;
        this.Round(this.prec);
        var bag = [];
        if (!this.positive)
            bag.push("-");
        if (this.pointPos < 1)
            bag.push(0);
        else
            this.AppendDigits(bag, 0, this.pointPos);
        if (this.prec > 0) {
            bag.push(__aspxCultureInfo.numDecimalPoint);
            this.AppendDigits(bag, this.pointPos, this.pointPos + this.prec);
        }
        return bag.join("");
    },
    FormatGeneral: function () {
        var hasFrac = this.pointPos < this.digits.length;
        var allowExp;
        if (this.prec < 0) {
            allowExp = hasFrac;
            this.prec = hasFrac ? 15 : 10;
        } else {
            allowExp = true;
            if (this.prec < 1)
                this.prec = hasFrac ? 15 : 10;
            this.Round(this.prec - this.pointPos);
        }
        if (allowExp) {
            if (this.pointPos > this.prec || this.pointPos <= -4) {
                this.prec = this.digits.length - 1;
                return this.FormatExpCore(2);
            }
        }
        this.prec = Math.min(this.prec, Math.max(1, this.digits.length)) - this.pointPos;
        return this.FormatFixed();
    },
    FormatNumber: function () {
        if (this.prec < 0)
            this.prec = __aspxCultureInfo.numPrec;
        this.Round(this.prec);
        var bag = [];
        if (!this.positive) {
            switch (__aspxCultureInfo.numNegPattern) {
                case 1:
                    bag.push("-");
                    break;
                case 2:
                    bag.push("- ");
                    break;
            }
        }
        this.AppendGroupedInteger(bag, __aspxCultureInfo.numGroups, __aspxCultureInfo.numGroupSeparator);
        if (this.prec > 0) {
            bag.push(__aspxCultureInfo.numDecimalPoint);
            this.AppendDigits(bag, this.pointPos, this.pointPos + this.prec);
        }
        if (!this.positive) {
            switch (__aspxCultureInfo.numNegPattern) {
                case 3:
                    bag.push("-");
                    break;
            }
        }
        return bag.join("");
    },
    FormatPercent: function () {
        if (this.prec < 0)
            this.prec = __aspxCultureInfo.numPrec;
        if (this.digits.length > 0)
            this.pointPos += 2;
        this.Round(this.prec);
        var bag = [];
        if (!this.positive)
            bag.push("-");
        if (__aspxCultureInfo.percentPattern == 2)
            bag.push("%");
        this.AppendGroupedInteger(bag, __aspxCultureInfo.numGroups, __aspxCultureInfo.numGroupSeparator);
        if (this.prec > 0) {
            bag.push(__aspxCultureInfo.numDecimalPoint);
            this.AppendDigits(bag, this.pointPos, this.pointPos + this.prec);
        }
        switch (__aspxCultureInfo.percentPattern) {
            case 0:
                bag.push(" %");
                break;
            case 1:
                bag.push("%");
                break;
        }
        return bag.join("");
    },
    FormatHex: function (value) {
        var result = value.toString(16);
        if (result.indexOf("(") > -1)
            return result;
        result = this.upper ? result.toUpperCase() : result.toLowerCase();
        if (this.prec <= result.length)
            return result;
        var bag = [];
        for (var i = result.length; i < this.prec; i++)
            bag.push(0);
        bag.push(result);
        return bag.join("");
    },
    FormatCustom: function (format) {
        var sectionList = this.GetCustomFormatSections(format);
        var section = this.SelectCustomFormatSection(sectionList);
        if (section == "")
            return this.positive ? "" : "-";
        var info = this.ParseCustomFormatSection(section);
        var lists = this.CreateCustomFormatLists(info);
        if (sectionList.length > 2 && section != sectionList[2]) {
            var zero = lists.i.concat(lists.f).join("").split(0).join("") == "";
            if (zero) {
                section = sectionList[2];
                info = this.ParseCustomFormatSection(section);
                lists = this.CreateCustomFormatLists(info);
            }
        }
        return this.FormatCustomCore(section, info, lists);
    },
    GetCustomFormatSections: function (format) {
        var sections = [];
        var escaping = false;
        var quote = "";
        var length = 0;
        var prevPos = 0;
        for (var i = 0; i < format.length; i++) {
            var ch = format.charAt(i);
            if (!escaping && quote == "" && ch == ";") {
                sections.push(format.substr(prevPos, length));
                length = 0;
                prevPos = i + 1;
                if (sections.length > 2)
                    break;
            } else {
                if (escaping)
                    escaping = false;
                else if (ch == quote)
                    quote = quote == "" ? ch : "";
                else if (ch == "\\")
                    escaping = true;
                else if (ch == "'" || ch == '"')
                    quote = ch;
                ++length;
            }
        }
        if (length > 0)
            sections.push(format.substr(prevPos, length));
        if (sections.length < 1)
            sections.push(format);
        return sections;
    },
    SelectCustomFormatSection: function (sections) {
        if (!this.positive && sections.length > 1 && sections[1] != "") {
            this.positive = true;
            return sections[1];
        }
        if (this.digits.length < 1 && sections.length > 2 && sections[2] != "")
            return sections[2];
        return sections[0];
    },
    CreateCustomFormatInfo: function () {
        return {
            pointPos: -1,
            grouping: false,
            exp: false,
            expShowPlus: false,
            percent: false,
            scaling: 0,
            intDigits: 0,
            fracDigits: 0,
            expDigits: 0,
            intSharps: 0,
            fracSharps: 0,
            expSharps: 0
        };
    },
    ParseCustomFormatSection: function (section) {
        var quote = "";
        var area = "i";
        var canParseIntSharps = true;
        var result = this.CreateCustomFormatInfo();
        var groupSeparators = 0;
        for (var i = 0; i < section.length; i++) {
            var ch = section.charAt(i);
            if (ch == quote) {
                quote = "";
                continue;
            }
            if (quote != "")
                continue;
            if (area == "e" && ch != "0" && ch != "#") {
                area = result.pointPos < 0 ? "i" : "f";
                i--;
                continue;
            }
            switch (ch) {
                case "\\":
                    i++;
                    continue;
                case "'":
                case '"':
                    quote = ch;
                    continue;
                case "#":
                case "0":
                    if (ch == "#") {
                        switch (area) {
                            case "i":
                                if (canParseIntSharps)
                                    result.intSharps++;
                                break;
                            case "f":
                                result.fracSharps++;
                                break;
                            case "e":
                                result.expSharps++;
                                break;
                        }
                    } else {
                        canParseIntSharps = false;
                        switch (area) {
                            case "f":
                                result.fracSharps = 0;
                                break;
                            case "e":
                                result.expSharps = 0;
                                break;
                        }
                    }
                    switch (area) {
                        case "i":
                            result.intDigits++;
                            if (groupSeparators > 0)
                                result.grouping = true;
                            groupSeparators = 0;
                            break;
                        case "f":
                            result.fracDigits++;
                            break;
                        case "e":
                            result.expDigits++;
                            break;
                    }
                    break;
                case "e":
                case "E":
                    if (result.exp)
                        break;
                    result.exp = true;
                    area = "e";
                    if (i < section.length - 1) {
                        var next = section.charAt(1 + i);
                        if (next == "+" || next == "-") {
                            if (next == "+")
                                result.expShowPlus = true;
                            i++;
                        }
                        else if (next != "0" && next != "#") {
                            result.exp = false;
                            if (result.pointPos < 0)
                                area = "i";
                        }
                    }
                    break;
                case ".":
                    area = "f";
                    if (result.pointPos < 0)
                        result.pointPos = i;
                    break;
                case "%":
                    result.percent = true;
                    break;
                case ",":
                    if (area == "i" && result.intDigits > 0)
                        groupSeparators++;
                    break;
                default:
                    break;
            }
        }
        if (result.expDigits < 1)
            result.exp = false;
        else
            result.intSharps = 0;
        if (result.fracDigits < 1)
            result.pointPos = -1;
        result.scaling = 3 * groupSeparators;
        return result;
    },
    CreateCustomFormatLists: function (info) {
        var intList = [];
        var fracList = [];
        var expList = [];
        if (this.digits.length > 0) {
            if (info.percent)
                this.pointPos += 2;
            this.pointPos -= info.scaling;
        }
        var expPositive = true;
        if (info.exp && (info.intDigits > 0 || info.fracDigits > 0)) {
            var diff = 0;
            if (this.digits.length > 0) {
                this.Round(info.intDigits + info.fracDigits - this.pointPos);
                diff -= this.pointPos - info.intDigits;
                this.pointPos = info.intDigits;
            }
            expPositive = diff <= 0;
            expList = String(diff < 0 ? -diff : diff).split("");
        } else {
            this.Round(info.fracDigits);
        }
        if (this.digits.length < 1 || this.pointPos < 1)
            intList = [0];
        else
            this.AppendDigits(intList, 0, this.pointPos);
        this.AppendDigits(fracList, this.pointPos, this.digits.length);
        if (info.exp) {
            while (intList.length < info.intDigits)
                intList.unshift(0);
            while (expList.length < info.expDigits - info.expSharps)
                expList.unshift(0);
            if (expPositive && info.expShowPlus)
                expList.unshift("+");
            else if (!expPositive)
                expList.unshift("-");
        } else {
            while (intList.length < info.intDigits - info.intSharps)
                intList.unshift(0);
            if (info.intSharps >= info.intDigits) {
                var zero = true;
                for (var i = 0; i < intList.length; i++) {
                    if (intList[i] != 0) {
                        zero = false;
                        break;
                    }
                }
                if (zero)
                    intList = [];
            }
        }
        while (fracList.length < info.fracDigits - info.fracSharps)
            fracList.push(0);
        return {
            i: intList,
            f: fracList,
            e: expList
        };
    },
    FormatCustomCore: function (section, info, lists) {
        var intLen = 0;
        var total = 0;
        var groupIndex = 0;
        var counter = 0;
        var groupSize = 0;
        if (info.grouping && __aspxCultureInfo.numGroups.length > 0) {
            intLen = lists.i.length;
            for (var i = 0; i < __aspxCultureInfo.numGroups.length; i++) {
                total += __aspxCultureInfo.numGroups[i];
                if (total <= intLen)
                    groupIndex = i;
            }
            groupSize = __aspxCultureInfo.numGroups[groupIndex];
            var fraction = intLen > total ? intLen - total : 0;
            if (groupSize == 0) {
                while (groupIndex >= 0 && __aspxCultureInfo.numGroups[groupIndex] == 0)
                    groupIndex--;
                groupSize = fraction > 0 ? fraction : __aspxCultureInfo.numGroups[groupIndex];
            }
            if (fraction == 0) {
                counter = groupSize;
            } else {
                groupIndex += Math.floor(fraction / groupSize);
                counter = fraction % groupSize;
                if (counter == 0)
                    counter = groupSize;
                else
                    groupIndex++;
            }
        } else {
            info.grouping = false;
        }
        var bag = [];
        var area = "i";
        var intSharps = 0;
        var intListIndex = 0;
        var fracListIndex = 0;
        var savedCh = "";
        for (var i = 0; i < section.length; i++) {
            var ch = section.charAt(i);
            if (ch == savedCh) {
                savedCh = "";
                continue;
            }
            if (savedCh != "") {
                bag.push(ch);
                continue;
            }
            switch (ch) {
                case "\\":
                    ++i;
                    if (i < section.length)
                        bag.push(section.charAt(i));
                    continue;
                case "'":
                case '"':
                    savedCh = ch;
                    continue;
                case "#":
                case "0":
                    if (area == "i") {
                        intSharps++;
                        if (ch == "0" || info.intDigits - intSharps < lists.i.length + intListIndex) {
                            while (info.intDigits - intSharps + intListIndex < lists.i.length) {
                                bag.push(lists.i[intListIndex]);
                                intListIndex++;
                                if (info.grouping && --intLen > 0 && --counter == 0) {
                                    bag.push(__aspxCultureInfo.numGroupSeparator);
                                    if (--groupIndex < __aspxCultureInfo.numGroups.length && groupIndex >= 0)
                                        groupSize = __aspxCultureInfo.numGroups[groupIndex];
                                    counter = groupSize;
                                }
                            }
                        }
                    } else if (area == "f") {
                        if (fracListIndex < lists.f.length) {
                            bag.push(lists.f[fracListIndex]);
                            fracListIndex++;
                        }
                    }
                    break;
                case "e":
                case "E":
                    if (lists.e == null || !info.exp) {
                        bag.push(ch);
                        break;
                    }
                    for (var q = i + 1; q < section.length; q++) {
                        if (q == i + 1 && (section.charAt(q) == "+" || section.charAt(q) == "-"))
                            continue;
                        if (section.charAt(q) == "0" || section.charAt(q) == "#")
                            continue;
                        break;
                    }
                    i = q - 1;
                    area = info.pointPos < 0 ? "i" : "f";
                    bag.push(ch);
                    bag = bag.concat(lists.e);
                    lists.e = null;
                    break;
                case ".":
                    if (info.pointPos == i && lists.f.length > 0)
                        bag.push(__aspxCultureInfo.numDecimalPoint);
                    area = "f";
                    break;
                case ",":
                    break;
                default:
                    bag.push(ch);
                    break;
            }
        }
        if (!this.positive)
            bag.unshift("-");
        return bag.join("");
    },
    FillDigitInfo: function (value) {
        this.positive = true;
        if (value < 0) {
            value = -value;
            this.positive = false;
        }
        this.digits = [];
        this.pointPos = 0;
        if (value == 0 || !isFinite(value) || isNaN(value)) {
            this.pointPos = 1;
            return;
        }
        var list = String(value).split("e");
        var str = list[0];
        if (list.length > 1) {
            this.pointPos = Number(list[1]);
        }
        var frac = false;
        var decimalCount = 0;
        for (var i = 0; i < str.length; i++) {
            var ch = str.charAt(i);
            if (ch == ".") {
                frac = true;
            } else {
                if (frac)
                    decimalCount++;
                if (ch != "0" || this.digits.length > 0)
                    this.digits.push(Number(ch));
            }
        }
        this.pointPos += this.digits.length - decimalCount;
    },
    FillFormatInfo: function (format) {
        this.upper = true;
        this.custom = false;
        this.prec = -1;
        var spec;
        if (format == null || format.length < 1)
            spec = "G";
        else
            spec = format.charAt(0);
        if (spec >= "a" && spec <= "z") {
            spec = spec.toUpperCase();
            this.upper = false;
        }
        if (spec >= "A" && spec <= "Z") {
            if (format != null && format.length > 1) {
                var prec = Number(format.substr(1));
                if (!isNaN(prec))
                    this.prec = prec;
                else
                    this.custom = true;
            }
        } else {
            this.custom = true;
        }
        this.spec = this.custom ? "0" : spec;
    },
    Round: function (shift) {
        var amount = this.digits.length - this.pointPos - shift;
        if (amount <= 0)
            return;
        var cutPos = this.pointPos + shift;
        if (cutPos < 0) {
            this.digits = [];
            this.pointPos = 0;
            return;
        }
        var digit = this.digits[cutPos];
        if (digit > 4) {
            for (var i = 0; i < amount; i++) {
                var index = cutPos - 1 - i;
                if (index < 0) {
                    this.digits.unshift(0);
                    this.pointPos++;
                    cutPos++;
                    index++;
                }
                digit = this.digits[index];
                if (digit < 9) {
                    this.digits[index] = 1 + digit;
                    break;
                } else {
                    this.digits[index] = 0;
                    amount++;
                }
            }
        }
        for (var i = cutPos - 1; i >= 0; i--) {
            if (this.digits[i] > 0) break;
            cutPos--;
        }
        this.digits.splice(cutPos, this.digits.length - cutPos);
    },
    AppendGroupedInteger: function (list, groups, separator) {
        if (this.pointPos < 1) {
            list.push(0);
            return;
        }
        var total = 0;
        var groupIndex = 0;
        for (var i = 0; i < groups.length; i++) {
            total += groups[i];
            if (total <= this.pointPos)
                groupIndex = i;
            else
                break;
        }
        if (groups.length > 0 && total > 0) {
            var counter;
            var groupSize = groups[groupIndex];
            var fraction = this.pointPos > total ? this.pointPos - total : 0;
            if (groupSize == 0) {
                while (groupIndex >= 0 && groups[groupIndex] == 0)
                    groupIndex--;
                groupSize = fraction > 0 ? fraction : groups[groupIndex];
            }
            if (fraction == 0) {
                counter = groupSize;
            } else {
                groupIndex += Math.floor(fraction / groupSize);
                counter = fraction % groupSize;
                if (counter == 0)
                    counter = groupSize;
                else
                    groupIndex++;
            }
            var i = 0;
            while (true) {
                if (this.pointPos - i <= counter || counter == 0) {
                    this.AppendDigits(list, i, this.pointPos);
                    break;
                }
                this.AppendDigits(list, i, i + counter);
                list.push(separator);
                i += counter;
                groupIndex--;
                if (groupIndex < groups.length && groupIndex >= 0)
                    groupSize = groups[groupIndex];
                counter = groupSize;
            }
        } else {
            this.AppendDigits(list, 0, this.pointPos);
        }
    },
    AppendDigits: function (list, start, end) {
        for (var i = start; i < end; i++) {
            if (i < 0 || i >= this.digits.length)
                list.push(0);
            else
                list.push(this.digits[i]);
        }
    }
};
ASPxClientCheckBox = _aspxCreateClass(ASPxClientEdit, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.valueChecked = true;
        this.valueUnchecked = false;
        this.valueGrayed = null;
        this.allowGrayed = false;
        this.isNative = false;
        this.stateController = null;
        this.imageProperties = null;
        this.allowGrayedByClick = true;
        this.internalCheckBox = null;
        this.icbFocusedStyle = [];
        this.sizingConfig.allowSetWidth = false;
        this.sizingConfig.allowSetHeight = false;
        this.CheckedChanged = new ASPxClientEvent();
    },
    InlineInitialize: function () {
        this.isNative = !this.imageProperties;
        this.allowGrayed = this.IsGrayedAllowed();
        this.stateController = ASPxCheckableElementStateController.Create(this.imageProperties, this.valueChecked, this.valueUnchecked, this.valueGrayed, this.allowGrayed);
        if (!this.isNative)
            this.CreateInternalCheckBox();
        ASPxClientEdit.prototype.InlineInitialize.call(this);
    },
    Initialize: function () {
        ASPxClientEdit.prototype.Initialize.call(this);
        if (!_aspxIsExistsElement(this.GetMainElement()))
            return;
        if (!this.isNative) {
            this.previousValue = this.GetStateInput().value;
            this.SetValue(this.GetValue());
        }
        else
            this.previousValue = this.GetInputElement().checked;
    },
    GetInputElement: function () {
        if (this.isNative)
            return ASPxClientEdit.prototype.GetInputElement.call(this);
        else
            return this.GetStateInput();
    },
    CreateInternalCheckBox: function () {
        var instance = this;
        this.internalCheckBox = new ASPxClientCheckBoxInternal(this.GetStateInput(), this.stateController, this.allowGrayed, this.allowGrayedByClick, ASPxCheckEditElementHelper.Instance, this.GetMainElement(), true);
        this.internalCheckBox.CreateFocusDecoration(this.icbFocusedStyle);
        this.internalCheckBox.SetEnabled(this.GetEnabled());
        this.internalCheckBox.readOnly = this.readOnly;
        this.internalCheckBox.CheckedChanged.AddHandler(function (s, e) { instance.OnClick(e); });
        this.internalCheckBox.Focus.AddHandler(function () { instance.OnFocus(); });
        this.internalCheckBox.LostFocus.AddHandler(function () { instance.OnLostFocus(); });
        if (__aspxWebKitFamily)
            _aspxAttachEventToElement(this.internalCheckBox.mainElement.parentNode, "selectstart", _aspxPreventEventAndBubble);
    },
    FindInputElement: function () {
        var element = this.GetMainElement();
        if (_aspxIsExistsElement(element) && element.tagName != "INPUT")
            element = this.GetChild("_I");
        return element;
    },
    IsGrayedAllowed: function () {
        for (var propertyKey in this.imageProperties)
            if (this.imageProperties[propertyKey].length === 3)
                return true;
        return false;
    },
    RaiseValueChangedEvent: function () {
        var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
        processOnServer = this.RaiseCheckedChanged(processOnServer);
        return processOnServer;
    },
    OnClick: function () {
        if (this.ToogleCheckState() && !this.focused)
            this.SetFocus();
    },
    ToogleCheckState: function () {
        if (!this.GetEnabled() || this.readOnly)
            return false;
        var value = this.GetCorrectValue(this.previousValue);
        value = this.stateController.GetNextCheckBoxValue(value, this.allowGrayedByClick && this.allowGrayed);
        this.SetValue(value);
        this.OnValueChanged();
        return true;
    },
    IsElementBelongToInputElement: function (element) {
        return false;
    },
    ForceRefocusEditor: function () {
        if (this.isNative)
            ASPxClientEdit.prototype.ForceRefocusEditor.call(this);
    },
    GetValue: function () {
        var value = this.stateController.GetValueByInputKey(this.GetStateInput().value);
        if (value === "" && this.convertEmptyStringToNull)
            value = null;
        return value;
    },
    SetValue: function (value) {
        this.previousValue = value;
        value = this.GetCorrectValue(value);
        if (this.isNative)
            this.GetInputElement().checked = this.previousValue;
        else
            this.internalCheckBox.SetValue(value);
        this.GetStateInput().value = this.stateController.GetInputKeyByValue(value);
        this.OnValueSet();
    },
    GetICBMainElement: function () {
        return ASPxCheckableElementHelper.Instance.GetICBMainElementByInput(this.GetStateInput());
    },
    GetLabelElement: function () {
        return ASPxCheckEditElementHelper.Instance.GetLabelElement(this.GetMainElement());
    },
    GetStateInput: function () {
        return this.GetChild("_S");
    },
    GetCorrectValue: function (value) {
        var stateIsExist = typeof (this.stateController.GetInputKeyByValue(value)) != "undefined";
        if (!stateIsExist)
            return this.allowGrayed ? this.valueGrayed : this.valueUnchecked;
        return value;
    },
    OnValueSet: function () { },
    RaiseCheckedChanged: function (processOnServer) {
        if (!this.CheckedChanged.IsEmpty()) {
            var args = new ASPxClientProcessingModeEventArgs(processOnServer);
            this.CheckedChanged.FireEvent(this, args);
            processOnServer = args.processOnServer;
        }
        return processOnServer;
    },
    SetEnabled: function (enabled) {
        ASPxClientEdit.prototype.SetEnabled.call(this, enabled);
        if (!this.isNative)
            this.internalCheckBox.SetEnabled(enabled);
    },
    GetChecked: function () {
        return this.stateController.GetCheckStateByInputKey(this.GetStateInput().value) == ASPxClientCheckBoxCheckState.Checked;
    },
    SetChecked: function (isChecked) {
        this.SetCheckState(isChecked ? ASPxClientCheckBoxCheckState.Checked : ASPxClientCheckBoxCheckState.Unchecked);
    },
    GetText: function () {
        var labelElement = this.GetLabelElement();
        return (labelElement != null) ? labelElement.innerHTML : "";
    },
    GetCheckState: function () {
        var internalCheckeState = this.stateController.GetCheckStateByInputKey(this.GetStateInput().value);
        if (internalCheckeState != ASPxClientCheckBoxCheckState.Indeterminate || this.allowGrayed)
            return internalCheckeState;
        else
            return ASPxClientCheckBoxCheckState.Unchecked;
    },
    SetCheckState: function (checkState) {
        if (checkState != ASPxClientCheckBoxCheckState.Indeterminate || this.allowGrayed) {
            var value = this.stateController.GetValueByCheckState(checkState);
            this.SetValue(value);
        }
    },
    SetText: function (text) {
        var labelElement = this.GetLabelElement();
        if (labelElement != null)
            _aspxSetInnerHtml(labelElement, text);
    },
    ChangeEnabledAttributes: function (enabled) {
        if (this.isNative) {
            this.ChangeInputEnabledAttributes(this.GetInputElement(), _aspxChangeAttributesMethod(enabled));
            this.GetInputElement().disabled = !enabled;
        } else
            this.internalCheckBox.SetEnabled(enabled);
    },
    ChangeEnabledStateItems: function (enabled) {
        aspxGetStateController().SetElementEnabled(this.GetMainElement(), enabled);
    },
    ChangeInputEnabledAttributes: function (element, method) {
        method(element, "onclick");
    }
});
ASPxClientCheckBox.Cast = ASPxClientControl.Cast;
ASPxClientRadioButton = _aspxCreateClass(ASPxClientCheckBox, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.isASPxClientRadioButton = true;
        this.groupName = "";
    },
    OnValueSet: function () {
        if (this.previousValue === true)
            this.UncheckOtherGroupMembers(true);
    },
    OnClick: function () {
        if (!this.previousValue) {
            this.UncheckOtherGroupMembers();
            ASPxClientCheckBox.prototype.OnClick.call(this);
        } else {
            if (!this.focused)
                this.SetFocus();
        }
    },
    CreateInternalCheckBox: function () {
        ASPxClientCheckBox.prototype.CreateInternalCheckBox.call(this);
        this.internalCheckBox.autoSwitchEnabled = false;
    },
    UncheckOtherGroupMembers: function (suppressEvents) {
        var members = this.GetGroupMembers();
        for (var i = 0; i < members.length; i++) {
            var radioButton = members[i];
            if (!_aspxIsExistsElement(radioButton.GetMainElement()))
                members[i] = null;
            else {
                if (radioButton != this && radioButton.GetValue()) {
                    radioButton.SetValue(false);
                    if (!suppressEvents)
                        radioButton.RaiseValueChangedEvent();
                }
            }
        }
    },
    OnReadonlyClick: function () {
        if (!this.previousValue) {
            var members = this.GetGroupMembers();
            for (var i = 0; i < members.length; i++) {
                var radioButton = members[i];
                radioButton.SetValue(radioButton.GetValue());
            }
        }
    },
    GetGroupName: function () {
        if (!this.isNative)
            return this.groupName;
        var inputElement = this.GetInputElement();
        if (!_aspxIsExistsElement(inputElement))
            return null;
        var name = inputElement.name;
        if (!name.length)
            name = "";
        return name;
    },
    GetGroupMembers: function () {
        var result = [];
        var groupName = this.GetGroupName();
        if (groupName.length > 0) {
            aspxGetControlCollection().ForEachControl(function (control) {
                if (ASPxIdent.IsASPxClientRadioButton(control)) {
                    var controlGroupName = control.GetGroupName();
                    if (controlGroupName != null && controlGroupName == groupName)
                        result.push(control);
                }
            });
        } else {
            result.push(this);
        }
        return result;
    },
    GetChecked: function () {
        return this.GetValue() == true;
    },
    SetChecked: function (isChecked) {
        this.SetValue(isChecked);
    }
});
ASPxClientRadioButton.Cast = ASPxClientControl.Cast;
ASPxIdent.IsASPxClientRadioButton = function (obj) {
    return !!obj.isASPxClientRadioButton;
};
function aspxChkOnClick(name) {
    var edit = aspxGetControlCollection().Get(name);
    if (edit)
        edit.OnClick();
}
function aspxERBOnReadonlyClick(name) {
    var rb = aspxGetControlCollection().Get(name);
    if (rb)
        rb.OnReadonlyClick();
}

var __aspxCalendarWeekCount = 6;
var __aspxCalendarMsPerDay = 86400000;
var __aspxActiveCalendar = null;
ASPxClientCalendar = _aspxCreateClass(ASPxClientEdit, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.SelectionChanging = new ASPxClientEvent();
        this.SelectionChanged = new ASPxClientEvent();
        this.VisibleMonthChanged = new ASPxClientEvent();
        this.isMouseDown = false;
        this.forceMouseDown = false;
        this.supportGestures = true;
        this.swipeGestureStated = false;
        this.updateAnimationProcessing = false;
        this.selection = new ASPxClientCalendarSelection();
        this.selectionTransaction = null;
        this.selectionStartDate = null;
        this.selectionPrevStartDate = null;
        this.lastSelectedDate = null;
        this.selectionCtrl = false;
        this.selectionByWeeks = false;
        this.nodeCache = {};
        this.titleFormatter = null;
        this.visibleDate = new Date();
        this.firstDayOfWeek = 0;
        this.columns = 1;
        this.rows = 1;
        this.enableFast = true;
        this.enableMulti = false;
        this.minDate = null;
        this.maxDate = null;
        this.customDraw = false;
        this.showWeekNumbers = true;
        this.showDayHeaders = true;
        this.isDateEditCalendar = false;
        this.sizingConfig.allowSetHeight = false;
        this.isDateChangingByKeyboard = false;
        this.MainElementClick = new ASPxClientEvent();
    },
    Initialize: function () {
        this.selectionTransaction = new ASPxClientCalendarSelectionTransaction(this);
        this.selectionPrevStartDate = this.selection.GetFirstDate();
        this.SaveClientState();
        ASPxClientEdit.prototype.Initialize.call(this);
        var mainElement = this.GetMainElement();
        _aspxPreventElementDragAndSelect(mainElement, false, false);
        if (__aspxOpera)
            _aspxSetElementAsUnselectable(mainElement, true, true);
        if (!ASPxClientCalendar.AreDatesEqual(this.currentDate, new Date()))
            this.Update();
    },
    InlineInitialize: function () {
        this.CreateViews();
        if (this.enableFast)
            this.fastNavigation = new ASPxClientCalendarFastNavigation(this);
        this.InitSpecialKeyboardHandling();
        if (this.enableSlideCallbackAnimation && !this.enableSwipeGestures && typeof (ASPxAnimationHelper) != "undefined")
            ASPxAnimationHelper.getSlideAnimationContainer(this.GetCallbackAnimationElement(), true, false);
        ASPxClientEdit.prototype.InlineInitialize.call(this);
    },
    FindInputElement: function () {
        return this.GetChild("_KBS");
    },
    FindStateInputElement: function () {
        return _aspxGetElementById(this.name + "_STATE");
    },
    GetClearButton: function () {
        return this.GetChild("_BC");
    },
    GetTodayButton: function () {
        return this.GetChild("_BT");
    },
    GetValue: function () {
        return this.selection.GetFirstDate();
    },
    GetValueString: function () {
        var value = this.GetValue();
        return value == null ? null : _aspxGetInvariantDateString(value);
    },
    SetValue: function (date) {
        if (date)
            this.SetVisibleDate(date);
        this.SetSelectedDate(date);
    },
    GetFastNavigation: function () {
        return this.fastNavigation;
    },
    GetViewKey: function (row, column) {
        return row + "x" + column;
    },
    GetView: function (row, column) {
        var key = this.GetViewKey(row, column);
        return this.views[key];
    },
    CreateViews: function () {
        this.views = {};
        var key;
        for (var row = 0; row < this.rows; row++) {
            for (var col = 0; col < this.columns; col++) {
                key = this.GetViewKey(row, col);
                var view = new ASPxClientCalendarView(this, row, col);
                view.Initialize();
                this.views[key] = view;
            }
        }
    },
    IsFastNavigationActive: function () {
        if (this.fastNavigation)
            return this.fastNavigation.GetPopup().IsVisible();
        return false;
    },
    IsDateSelected: function (date) {
        return this.selection.Contains(date);
    },
    IsDateVisible: function (date) {
        var startDate = ASPxClientCalendar.CloneDate(this.GetView(0, 0).visibleDate);
        startDate.setDate(1);
        var endDate = ASPxClientCalendar.CloneDate(this.GetView(this.rows - 1, this.columns - 1).visibleDate);
        endDate.setDate(ASPxClientCalendar.GetDaysInMonth(endDate.getMonth(), endDate.getFullYear()));
        return (date >= startDate) && (date < endDate);
    },
    IsDateWeekend: function (date) {
        var day = date.getDay();
        return day == 0 || day == 6;
    },
    IsMultiView: function () {
        return this.columns > 1 || this.rows > 1;
    },
    IsDateInRange: function (date) {
        return date == null ||
   ((this.minDate == null || date >= this.minDate) &&
    (this.maxDate == null || date <= this.maxDate));
    },
    GetCachedElementById: function (id) {
        if (!_aspxIsExistsElement(this.nodeCache[id]))
            this.nodeCache[id] = _aspxGetElementById(id);
        return this.nodeCache[id];
    },
    ShowLoadingPanel: function () {
        this.CreateLoadingPanelWithAbsolutePosition(this.GetMainElement().parentNode, this.GetLoadingPanelOffsetElement(this.GetMainElement()));
    },
    ShowLoadingDiv: function () {
        this.CreateLoadingDiv(this.GetMainElement().parentNode, this.GetMainElement());
    },
    GetCallbackAnimationElement: function () {
        if (this.columns === 1 && this.rows === 1)
            return this.views[this.GetViewKey(0, 0)].GetMonthTable();
        return this.GetMainElement();
    },
    CanHandleGesture: function (evt) {
        var source = _aspxGetEventSource(evt);
        var element = this.GetMainElement();
        if (this.columns === 1 && this.rows === 1)
            element = this.views[this.GetViewKey(0, 0)].GetMonthCell();
        return _aspxGetIsParent(element, source);
    },
    AllowStartGesture: function () {
        return ASPxClientControl.prototype.AllowStartGesture.call(this) && (!this.enableMulti || !this.selectionTransaction.isActive) && !this.updateAnimationProcessing;
    },
    StartGesture: function () {
        this.swipeGestureStated = true;
    },
    AllowExecuteGesture: function (value) {
        return true;
    },
    ExecuteGesture: function (value, count) {
        if (!count) count = 1;
        this.OnShiftMonth((value > 0 ? -1 : 1) * count);
    },
    Update: function () {
        if (this.customDraw) {
            if (this.callBack) {
                this.ShowLoadingElements();
                this.CreateCallback("UPDATE");
            }
            else {
                this.SendPostBack("");
            }
        }
        else {
            if (this.IsAnimationEnabled())
                this.StartBeforeUpdateAnimation();
            else
                this.UpdateInternal();
        }
    },
    UpdateInternal: function () {
        for (var key in this.views) {
            var view = this.views[key];
            if (view.constructor != ASPxClientCalendarView) continue;
            view.Update();
        }
        if (this.IsAnimationEnabled())
            this.StartAfterUpdateAnimation();
    },
    IsAnimationEnabled: function () {
        return this.enableSlideCallbackAnimation || this.enableCallbackAnimation;
    },
    StartBeforeUpdateAnimation: function () {
        this.updateAnimationProcessing = true;
        var element = this.GetCallbackAnimationElement();
        if (this.enableSlideCallbackAnimation && this.slideAnimationDirection)
            ASPxAnimationHelper.slideOut(element, this.slideAnimationDirection, this.FinishBeforeUpdateAnimation.aspxBind(this));
        else if (this.enableCallbackAnimation)
            ASPxAnimationHelper.fadeOut(element, this.FinishBeforeUpdateAnimation.aspxBind(this));
        else
            this.FinishBeforeUpdateAnimation();
    },
    FinishBeforeUpdateAnimation: function () {
        this.UpdateInternal();
    },
    StartAfterUpdateAnimation: function () {
        var element = this.GetCallbackAnimationElement();
        if (this.enableSlideCallbackAnimation && this.slideAnimationDirection)
            ASPxAnimationHelper.slideIn(element, this.slideAnimationDirection, this.FinishAfterUpdateAnimation.aspxBind(this));
        else if (this.enableCallbackAnimation)
            ASPxAnimationHelper.fadeIn(element, this.FinishAfterUpdateAnimation.aspxBind(this));
        else
            this.FinishAfterUpdateAnimation();
    },
    FinishAfterUpdateAnimation: function () {
        this.updateAnimationProcessing = false;
        this.slideAnimationDirection = null;
        this.CheckRepeatGesture();
    },
    ApplySelectionByDiff: function (selection, save) {
        var toShow = [];
        var toHide = [];
        var dates = selection.GetDates();
        var oldDates = this.selection.GetDates();
        var date;
        for (var i = 0; i < dates.length; i++) {
            date = dates[i];
            if (!this.selection.Contains(date))
                toShow.push(date);
        }
        for (var i = 0; i < oldDates.length; i++) {
            date = oldDates[i];
            if (!selection.Contains(date))
                toHide.push(date);
        }
        for (var key in this.views) {
            var view = this.views[key];
            if (view.constructor != ASPxClientCalendarView) continue;
            view.UpdateSelection(toHide, false);
            view.UpdateSelection(toShow, true);
        }
        this.selection.Assign(selection);
        if (save)
            this.SaveClientState();
    },
    ImportEtalonStyle: function (info, suffix) {
        var cell = this.GetEtalonStyleCell(suffix);
        if (_aspxIsExistsElement(cell))
            info.Import(cell);
    },
    GetEtalonStyleCell: function (name) {
        return this.GetCachedElementById(this.name + "_EC_" + name);
    },
    SaveClientState: function () {
        var element = this.FindStateInputElement();
        if (element != null) {
            var visibleDate = this.visibleDate;
            if (visibleDate > this.GetNETMaxDate())
                visibleDate = this.GetNETMaxDate();
            var state = _aspxGetInvariantDateString(visibleDate);
            if (this.selection.count > 0)
                state += ":" + this.FormatDates(this.selection.GetDates(), ":");
            element.value = state;
        }
    },
    GetNETMaxDate: function () {
        return new Date(9999, 11, 31, 23, 59, 59, 999);
    },
    FormatDates: function (dates, separator) {
        var result = "";
        for (var i = 0; i < dates.length; i++) {
            if (result.length > 0)
                result += separator;
            result += _aspxGetInvariantDateString(dates[i]);
        }
        return result;
    },
    InitializeKeyHandlers: function () {
        this.AddKeyDownHandler(ASPxKey.Enter, "OnEnterDown");
        this.AddKeyDownHandler(ASPxKey.Esc, "OnEscape");
        this.AddKeyDownHandler(ASPxKey.PageUp, "OnPageUp");
        this.AddKeyDownHandler(ASPxKey.PageDown, "OnPageDown");
        this.AddKeyDownHandler(ASPxKey.End, "OnEndKeyDown");
        this.AddKeyDownHandler(ASPxKey.Home, "OnHomeKeyDown");
        this.AddKeyDownHandler(ASPxKey.Left, "OnArrowLeft");
        this.AddKeyDownHandler(ASPxKey.Right, "OnArrowRight");
        this.AddKeyDownHandler(ASPxKey.Up, "OnArrowUp");
        this.AddKeyDownHandler(ASPxKey.Down, "OnArrowDown");
        this.AddKeyPressHandler(ASPxKey.Enter, "OnEnterPressed");
    },
    OnArrowUp: function (evt) {
        if (this.IsFastNavigationActive())
            this.GetFastNavigation().OnArrowUp(evt);
        else if (!this.readOnly) {
            var newDate = this.GetNearestDayForToday();
            if (this.lastSelectedDate)
                newDate = ASPxClientCalendar.GetPrevWeekDate(this.lastSelectedDate);
            this.CorrectVisibleMonth(newDate, false);
            this.DoKeyboardSelection(newDate, evt.shiftKey);
        }
        return true;
    },
    OnArrowDown: function (evt) {
        if (this.IsFastNavigationActive())
            this.GetFastNavigation().OnArrowDown(evt);
        else if (!this.readOnly) {
            var newDate = this.GetNearestDayForToday();
            if (this.lastSelectedDate)
                newDate = ASPxClientCalendar.GetNextWeekDate(this.lastSelectedDate);
            this.CorrectVisibleMonth(newDate, true);
            this.DoKeyboardSelection(newDate, evt.shiftKey);
        }
        return true;
    },
    OnArrowLeft: function (evt) {
        if (this.IsFastNavigationActive())
            this.GetFastNavigation().OnArrowLeft(evt);
        else if (!this.readOnly) {
            var newDate = this.GetNearestDayForToday();
            if (this.lastSelectedDate)
                newDate = ASPxClientCalendar.GetYesterDate(this.lastSelectedDate);
            this.CorrectVisibleMonth(newDate, false);
            this.DoKeyboardSelection(newDate, evt.shiftKey);
        }
        return true;
    },
    OnArrowRight: function (evt) {
        if (this.IsFastNavigationActive())
            this.GetFastNavigation().OnArrowRight(evt);
        else if (!this.readOnly) {
            var newDate = this.GetNearestDayForToday();
            if (this.lastSelectedDate)
                newDate = ASPxClientCalendar.GetTomorrowDate(this.lastSelectedDate);
            this.CorrectVisibleMonth(newDate, true);
            this.DoKeyboardSelection(newDate, evt.shiftKey);
        }
        return true;
    },
    OnCallback: function (result) {
        var table = this.GetMainElement();
        for (var rowIndex = 0; rowIndex < this.rows; rowIndex++) {
            for (var cellIndex = 0; cellIndex < this.columns; cellIndex++) {
                _aspxSetInnerHtml(table.rows[rowIndex].cells[cellIndex], result[rowIndex * this.columns + cellIndex]);
            }
        }
        this.CreateViews();
        this.InitializeGestures();
        this.InitializeEnabled();
        if (!this.isDateEditCalendar)
            this.SetFocus();
    },
    OnPageUp: function (evt) {
        if (this.IsFastNavigationActive())
            this.GetFastNavigation().OnPageUp(evt);
        else if (!this.readOnly) {
            var newDate = this.GetNearestDayForToday();
            if (this.lastSelectedDate) {
                if (evt.ctrlKey)
                    newDate = ASPxClientCalendar.GetPrevYearDate(this.lastSelectedDate);
                else
                    newDate = ASPxClientCalendar.GetPrevMonthDate(this.lastSelectedDate);
            }
            this.CorrectVisibleMonth(newDate, false);
            this.DoKeyboardSelection(newDate);
        }
        return true;
    },
    OnPageDown: function (evt) {
        if (this.IsFastNavigationActive())
            this.GetFastNavigation().OnPageDown(evt);
        else if (!this.readOnly) {
            var newDate = this.GetNearestDayForToday();
            if (this.lastSelectedDate) {
                if (evt.ctrlKey)
                    newDate = ASPxClientCalendar.GetNextYearDate(this.lastSelectedDate);
                else
                    newDate = ASPxClientCalendar.GetNextMonthDate(this.lastSelectedDate);
            }
            this.CorrectVisibleMonth(newDate, true);
            this.DoKeyboardSelection(newDate);
        }
        return true;
    },
    OnEndKeyDown: function (evt) {
        if (!this.readOnly && !this.IsFastNavigationActive()) {
            var newDate = this.GetNearestDayForToday();
            if (this.lastSelectedDate)
                newDate = ASPxClientCalendar.CloneDate(this.lastSelectedDate);
            newDate = ASPxClientCalendar.GetLastDayInMonthDate(newDate);
            this.CorrectVisibleMonth(newDate, false);
            this.DoKeyboardSelection(newDate, evt.shiftKey);
        }
        return true;
    },
    OnHomeKeyDown: function (evt) {
        if (!this.readOnly && !this.IsFastNavigationActive()) {
            var newDate = this.GetNearestDayForToday();
            if (this.lastSelectedDate)
                newDate = ASPxClientCalendar.CloneDate(this.lastSelectedDate);
            newDate = ASPxClientCalendar.GetFirstDayInMonthDate(newDate);
            this.CorrectVisibleMonth(newDate, false);
            this.DoKeyboardSelection(newDate, evt.shiftKey);
        }
        return true;
    },
    OnEnterDown: function () {
        if (this.IsFastNavigationActive()) {
            this.GetFastNavigation().OnEnter();
            return true;
        }
        return false;
    },
    OnEnterPressed: function () {
        return true;
    },
    OnEscape: function () {
        if (this.IsFastNavigationActive())
            this.GetFastNavigation().OnEscape();
        return true;
    },
    OnShiftMonth: function (offset) {
        if (offset) {
            var date = ASPxClientCalendar.AddMonths(this.visibleDate, offset);
            this.OnVisibleMonthChanged(date);
        }
    },
    OnDayMouseDown: function (date, shift, ctrl, byWeeks) {
        this.isMouseDown = true;
        this.selectionByWeeks = byWeeks;
        if (!this.enableMulti && this.enableSwipeGestures)
            return;
        this.selectionTransaction.Start();
        if (this.enableMulti) {
            if (ctrl) {
                this.selectionCtrl = true;
                this.selectionTransaction.CopyFromBackup();
            } else
                this.selectionCtrl = false;
            if (shift && this.selectionPrevStartDate) {
                this.selectionStartDate = this.selectionPrevStartDate;
                this.selectionTransaction.selection.AddRange(this.selectionStartDate, date);
                if (byWeeks)
                    this.selectionTransaction.selection.AddWeek(date);
            } else {
                this.selectionStartDate = date;
                this.selectionPrevStartDate = date;
                if (byWeeks)
                    this.selectionTransaction.selection.AddWeek(date);
                else
                    this.selectionTransaction.selection.Add(date);
            }
        }
        else
            this.selectionTransaction.selection.Add(date);
        if (date > this.GetNETMaxDate())
            this.selectionTransaction.CopyFromBackup();
        this.ApplySelectionByDiff(this.selectionTransaction.selection, false);
    },
    OnDayMouseOver: function (date) {
        if (!this.enableMulti && this.enableSwipeGestures)
            return;
        if (this.enableMulti) {
            if (this.selectionCtrl)
                this.selectionTransaction.CopyFromBackup();
            else
                this.selectionTransaction.selection.Clear();
            this.selectionTransaction.selection.AddRange(this.selectionStartDate, date);
            if (this.selectionByWeeks) {
                this.selectionTransaction.selection.AddWeek(date);
                this.selectionTransaction.selection.AddWeek(this.selectionStartDate);
            }
        }
        else {
            this.selectionTransaction.selection.Clear();
            this.selectionTransaction.selection.Add(date);
        }
        this.ApplySelectionByDiff(this.selectionTransaction.selection, false);
    },
    OnDayMouseUp: function (date) {
        if (!__aspxIE && this.isMouseDown)
            this.OnMainElementClick();
        this.isMouseDown = false;
        if (!this.enableMulti && this.enableSwipeGestures && this.swipeGestureStated) {
            this.swipeGestureStated = false;
            return;
        }
        if (this.enableMulti) {
            if (this.selectionCtrl && this.selectionTransaction.backup.Contains(date) &&
    ASPxClientCalendar.AreDatesEqual(date, this.selectionStartDate)) {
                if (this.selectionByWeeks)
                    this.selectionTransaction.selection.RemoveWeek(date);
                else
                    this.selectionTransaction.selection.Remove(date);
            }
        }
        else if (this.enableSwipeGestures && !this.swipeGestureStated) {
            this.selectionTransaction.selection.Add(date);
            if (date > this.GetNETMaxDate())
                this.selectionTransaction.CopyFromBackup();
            this.ApplySelectionByDiff(this.selectionTransaction.selection, false);
        }
        this.lastSelectedDate = ASPxClientCalendar.CloneDate(date);
        this.OnSelectionChanging();
    },
    OnTodayClick: function () {
        var now = new Date();
        var date = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        if (this.IsDateInRange(date)) {
            this.selectionTransaction.Start();
            this.selectionTransaction.selection.Add(date);
            this.OnSelectionChanging();
            if (!ASPxClientCalendar.AreDatesOfSameMonth(date, this.visibleDate))
                this.OnVisibleMonthChanged(date);
        }
    },
    OnClearClick: function () {
        this.selectionTransaction.Start();
        this.OnSelectionChanging();
        this.selectionStartDate = null;
        this.selectionPrevStartDate = null;
        this.lastSelectedDate = null;
    },
    OnSelectMonth: function (row, column) {
        var txn = this.selectionTransaction;
        txn.Start();
        var date = ASPxClientCalendar.CloneDate(this.GetView(row, column).visibleDate);
        date.setDate(1);
        do {
            if (this.IsDateInRange(date))
                txn.selection.Add(date);
            date = ASPxClientCalendar.AddDays(date, 1);
        } while (date.getDate() > 1);
        this.OnSelectionChanging();
    },
    OnTitleClick: function (row, column) {
        this.fastNavigation.activeView = this.GetView(row, column);
        this.fastNavigation.Prepare();
        this.fastNavigation.Show();
    },
    OnMainElementClick: function (mouseEvt) {
        this.MainElementClick.FireEvent(this, mouseEvt);
    },
    OnSelectionChanging: function () {
        if (!this.SelectionChanging.IsEmpty()) {
            var args = new ASPxClientCalendarSelectionEventArgs(false, this.selectionTransaction.selection);
            this.SelectionChanging.FireEvent(this, args);
        }
        var changed = this.selectionTransaction.IsChanged();
        this.selectionTransaction.Commit();
        if (changed)
            this.OnValueChanged();
    },
    OnVisibleMonthChanged: function (date) {
        var offsetInternal = ASPxClientCalendar.GetOffsetInMonths(this.visibleDate, date);
        this.SetVisibleDate(date);
        var processOnServer = this.RaiseVisibleMonthChanged(offsetInternal);
        if (processOnServer && !this.customDraw)
            this.SendPostBackInternal("");
    },
    OnSelectionCancelled: function () {
        this.isMouseDown = false;
        this.selectionTransaction.Rollback();
    },
    RaiseValueChangedEvent: function () {
        var processOnServer = ASPxClientEdit.prototype.RaiseValueChangedEvent.call(this);
        processOnServer = this.RaiseSelectionChanged(processOnServer);
        return processOnServer;
    },
    SetVisibleDate: function (date) {
        var old = this.visibleDate;
        this.visibleDate = date;
        this.SaveClientState();
        this.slideAnimationDirection = this.IsAnimationEnabled() ? ((old < this.visibleDate) ? ASPxAnimationHelper.SLIDE_LEFT_DIRECTION : ASPxAnimationHelper.SLIDE_RIGHT_DIRECTION) : null;
        if (!ASPxClientCalendar.AreDatesOfSameMonth(date, old)) {
            this.Update();
        }
    },
    SetSelectedDate: function (date) {
        if (this.IsDateInRange(date)) {
            var selection = new ASPxClientCalendarSelection();
            if (date != null) {
                selection.Add(date);
                this.lastSelectedDate = ASPxClientCalendar.CloneDate(date);
            }
            this.ApplySelectionByDiff(selection, true);
        }
    },
    CorrectVisibleMonth: function (newDate, isForwardDirection) {
        var offset = ASPxClientCalendar.GetOffsetInMonths(this.visibleDate, newDate);
        if (this.IsMultiView() && offset != 0) {
            var view = isForwardDirection ? this.GetView(this.rows - 1, this.columns - 1) :
            this.GetView(0, 0);
            offset = this.IsDateVisible(newDate) ? 0 :
       ASPxClientCalendar.GetOffsetInMonths(view.visibleDate, newDate);
        }
        if (!this.IsDateInRange(newDate))
            offset = 0;
        if (offset != 0)
            this.OnShiftMonth(offset);
    },
    DoKeyboardSelection: function (date, shift) {
        if (this.IsDateInRange(date)) {
            this.isDateChangingByKeyboard = true;
            this.selectionTransaction.Start();
            if (this.enableMulti && shift && this.selectionStartDate)
                this.selectionTransaction.selection.AddRange(this.selectionStartDate, date);
            else {
                this.selectionTransaction.selection.Add(date);
                this.selectionStartDate = date;
            }
            this.lastSelectedDate = ASPxClientCalendar.CloneDate(date);
            this.OnSelectionChanging();
            this.isDateChangingByKeyboard = false;
        }
    },
    GetNearestDayForToday: function () {
        var now = new Date();
        var ret = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        if (this.minDate && !this.IsDateInRange(ret))
            ret = ASPxClientCalendar.CloneDate(this.minDate);
        return ret;
    },
    UseDelayedSpecialFocus: function () {
        return true;
    },
    GetDelayedSpecialFocusTriggers: function () {
        var list = ASPxClientEdit.prototype.GetDelayedSpecialFocusTriggers.call(this);
        if (this.enableFast)
            list.push(this.GetFastNavigation().GetPopup().GetWindowElement(-1));
        return list;
    },
    GetSelectedDate: function () {
        return this.GetValue();
    },
    GetVisibleDate: function () {
        return this.visibleDate;
    },
    SelectDate: function (date) {
        if (date) {
            this.selection.Add(date);
            this.SaveClientState();
            this.Update();
        }
    },
    SelectRange: function (start, end) {
        if (start && end) {
            this.selection.AddRange(start, end);
            this.SaveClientState();
            this.Update();
        }
    },
    DeselectDate: function (date) {
        if (date) {
            this.selection.Remove(date);
            this.SaveClientState();
            this.Update();
        }
    },
    DeselectRange: function (start, end) {
        if (start && end) {
            this.selection.RemoveRange(start, end);
            this.SaveClientState();
            this.Update();
        }
    },
    ClearSelection: function () {
        this.selection.Clear();
        this.SaveClientState();
        this.Update();
    },
    GetSelectedDates: function () {
        return this.selection.GetDates();
    },
    RaiseSelectionChanged: function (processOnServer) {
        if (!this.SelectionChanged.IsEmpty()) {
            var args = new ASPxClientProcessingModeEventArgs(processOnServer);
            this.SelectionChanged.FireEvent(this, args);
            processOnServer = args.processOnServer;
        }
        return processOnServer;
    },
    RaiseVisibleMonthChanged: function (offsetInternal) {
        var processOnServer = this.autoPostBack;
        if (!this.VisibleMonthChanged.IsEmpty()) {
            var args = new ASPxClientProcessingModeEventArgs(processOnServer);
            args.offsetInternal = offsetInternal;
            this.VisibleMonthChanged.FireEvent(this, args);
            processOnServer = args.processOnServer;
        }
        return processOnServer;
    },
    ChangeEnabledAttributes: function (enabled) {
        _aspxChangeDocumentEventsMethod(enabled)("mouseup", aspxCalDocMouseUp);
        _aspxChangeEventsMethod(enabled)(this.GetMainElement(), "click", ASPxClientCalendar.AnonymousHandlers.MainElementClick(this.name));
        var inputElement = this.GetInputElement();
        if (inputElement)
            this.ChangeSpecialInputEnabledAttributes(inputElement, _aspxChangeEventsMethod(enabled));
        var btnElement = this.GetTodayButton();
        if (btnElement)
            this.ChangeButtonEnabledAttributes(btnElement, _aspxChangeAttributesMethod(enabled));
        btnElement = this.GetClearButton();
        if (btnElement)
            this.ChangeButtonEnabledAttributes(btnElement, _aspxChangeAttributesMethod(enabled));
        for (var key in this.views) {
            var view = this.views[key];
            if (view.constructor != ASPxClientCalendarView) continue;
            view.ChangeEnabledAttributes(enabled);
        }
    },
    ChangeEnabledStateItems: function (enabled) {
        aspxGetStateController().SetElementEnabled(this.GetMainElement(), enabled);
        var btnElement = this.GetTodayButton();
        if (btnElement)
            aspxGetStateController().SetElementEnabled(btnElement, enabled);
        btnElement = this.GetClearButton();
        if (btnElement)
            aspxGetStateController().SetElementEnabled(btnElement, enabled);
        for (var key in this.views) {
            var view = this.views[key];
            if (view.constructor != ASPxClientCalendarView) continue;
            view.ChangeEnabledStateItems(enabled);
        }
        this.UpdateInternal();
    },
    ChangeButtonEnabledAttributes: function (element, method) {
        method(element, "onclick");
        method(element, "ondblclick");
    },
    GetMinDate: function () {
        return this.minDate;
    },
    SetMinDate: function (date) {
        this.minDate = date;
        this.Update();
    },
    GetMaxDate: function () {
        return this.maxDate;
    },
    SetMaxDate: function (date) {
        this.maxDate = date;
        this.Update();
    }
});
ASPxClientCalendar.Cast = ASPxClientControl.Cast;
ASPxClientCalendar.AnonymousHandlers = {
    MainElementClick: function (name) {
        return function (e) {
            var cal = aspxGetControlCollection().Get(name);
            cal && cal.OnMainElementClick(e);
        };
    },
    SelectMonth: function (name, row, column) {
        return function () {
            var cal = aspxGetControlCollection().Get(name);
            cal && cal.OnSelectMonth(row, column);
        };
    },
    DayMouseEvent: function (name, row, column, index, byWeeks) {
        return function (e) {
            var cal = aspxGetControlCollection().Get(name);
            if (!cal)
                return;
            var view = cal.GetView(row, column);
            var date = view.GetDateByIndex(index);
            if (byWeeks)
                date = ASPxClientCalendar.AddDays(date, cal.firstDayOfWeek - date.getDay());
            var allowed = cal.IsDateInRange(date) && (view.IsDateVisible(date) || byWeeks);
            switch (e.type) {
                case "mousedown":
                    if (allowed && _aspxGetIsLeftButtonPressed(e))
                        cal.OnDayMouseDown(date, e.shiftKey, e.ctrlKey, byWeeks);
                    break;
                case "mouseover":
                    if (allowed) {
                        if (cal.forceMouseDown)
                            cal.OnDayMouseDown(date, false, false, false);
                        else if (cal.isMouseDown)
                            cal.OnDayMouseOver(date);
                    }
                    break;
                case "mouseup":
                    if (cal.isMouseDown) {
                        if (allowed)
                            cal.OnDayMouseUp(date);
                        else
                            cal.OnSelectionCancelled();
                    }
                    break;
            }
        };
    },
    FastNavMonthClick: function (name, month) {
        return function () {
            var cal = aspxGetControlCollection().Get(name);
            cal && cal.fastNavigation.OnMonthClick(month);
        };
    },
    FastNavYearClick: function (name, index) {
        return function () {
            var cal = aspxGetControlCollection().Get(name);
            cal && cal.fastNavigation.OnYearClick(index);
        };
    }
};
ASPxClientCalendar.AreDatesEqual = function (date1, date2) {
    if (date1 == date2)
        return true;
    if (!date1 || !date2)
        return false;
    return date1.getFullYear() == date2.getFullYear() && date1.getMonth() == date2.getMonth() && date1.getDate() == date2.getDate();
}
ASPxClientCalendar.AreDatesOfSameMonth = function (date1, date2) {
    if (!date1 || !date2)
        return false;
    return date1.getFullYear() == date2.getFullYear() && date1.getMonth() == date2.getMonth();
}
ASPxClientCalendar.GetUTCTime = function (date) {
    return Date.UTC(date.getFullYear(), date.getMonth(), date.getDate());
}
ASPxClientCalendar.GetFirstDayOfYear = function (date) {
    return new Date(date.getFullYear(), 0, 1);
}
ASPxClientCalendar.GetDayOfYear = function (date) {
    var ms = ASPxClientCalendar.GetUTCTime(date) -
  ASPxClientCalendar.GetUTCTime(ASPxClientCalendar.GetFirstDayOfYear(date));
    return 1 + Math.floor(ms / __aspxCalendarMsPerDay);
}
ASPxClientCalendar.GetISO8601WeekOfYear = function (date) {
    var firstDate = new Date(date.getFullYear(), 0, 1);
    var firstDayOfWeek = firstDate.getDay();
    if (firstDayOfWeek == 0)
        firstDayOfWeek = 7;
    var daysInFirstWeek = 8 - firstDayOfWeek;
    var lastDate = new Date(date.getFullYear(), 11, 31);
    var lastDayOfWeek = lastDate.getDay();
    if (lastDayOfWeek == 0)
        lastDayOfWeek = 7;
    var daysInLastWeek = 8 - lastDayOfWeek;
    var fullWeeks = Math.ceil((ASPxClientCalendar.GetDayOfYear(date) - daysInFirstWeek) / 7);
    var result = fullWeeks;
    if (daysInFirstWeek > 3)
        result++;
    var isThursday = firstDayOfWeek == 4 || lastDayOfWeek == 4;
    if (result > 52 && !isThursday)
        result = 1;
    if (result == 0)
        return ASPxClientCalendar.GetISO8601WeekOfYear(new Date(date.getFullYear() - 1, 11, 31));
    return result;
}
ASPxClientCalendar.GetNextWeekDate = function (date) {
    var ret = new Date(date.getTime());
    var newDay = date.getDate() + 7;
    ret.setDate(newDay);
    return ret;
}
ASPxClientCalendar.GetPrevWeekDate = function (date) {
    var ret = new Date(date.getTime());
    var newDay = date.getDate() - 7;
    ret.setDate(newDay);
    return ret;
}
ASPxClientCalendar.GetYesterDate = function (date) {
    var ret = new Date(date.getTime());
    ret.setDate(ret.getDate() - 1);
    return ret;
}
ASPxClientCalendar.GetTomorrowDate = function (date) {
    var ret = new Date(date.getTime());
    ret.setDate(ret.getDate() + 1);
    return ret;
}
ASPxClientCalendar.GetNextMonthDate = function (date) {
    var ret = new Date(date.getTime());
    var maxDateInNextMonth = ASPxClientCalendar.GetDaysInMonth(ret.getMonth() + 1, ret.getFullYear());
    if (ret.getDate() > maxDateInNextMonth)
        ret.setDate(maxDateInNextMonth);
    ret.setMonth(ret.getMonth() + 1);
    return ret;
}
ASPxClientCalendar.GetNextYearDate = function (date) {
    var ret = new Date(date.getTime());
    var maxDateInPrevYearMonth = ASPxClientCalendar.GetDaysInMonth(ret.getMonth(), ret.getFullYear() + 1);
    if (ret.getDate() > maxDateInPrevYearMonth)
        ret.setDate(maxDateInPrevYearMonth);
    ret.setFullYear(ret.getFullYear() + 1);
    return ret;
}
ASPxClientCalendar.GetPrevMonthDate = function (date) {
    var ret = new Date(date.getTime());
    var maxDateInPrevMonth = ASPxClientCalendar.GetDaysInMonth(ret.getMonth() - 1, ret.getFullYear());
    if (ret.getDate() > maxDateInPrevMonth)
        ret.setDate(maxDateInPrevMonth);
    ret.setMonth(ret.getMonth() - 1);
    return ret;
}
ASPxClientCalendar.GetPrevYearDate = function (date) {
    var ret = new Date(date.getTime());
    var maxDateInPrevYearMonth = ASPxClientCalendar.GetDaysInMonth(ret.getMonth(), ret.getFullYear() - 1);
    if (ret.getDate() > maxDateInPrevYearMonth)
        ret.setDate(maxDateInPrevYearMonth);
    ret.setFullYear(ret.getFullYear() - 1);
    return ret;
}
ASPxClientCalendar.GetFirstDayInMonthDate = function (date) {
    var ret = new Date(date.getTime());
    ret.setDate(1);
    return ret;
}
ASPxClientCalendar.GetLastDayInMonthDate = function (date) {
    var ret = new Date(date.getTime());
    var maxDateInYearMonth = ASPxClientCalendar.GetDaysInMonth(ret.getMonth(), ret.getFullYear());
    ret.setDate(maxDateInYearMonth);
    return ret;
}
ASPxClientCalendar.AddDays = function (startDate, dayCount) {
    var date = ASPxClientCalendar.CloneDate(startDate);
    var dayDiff = 0;
    var hourInc = 3600000;
    if (dayCount < 0)
        hourInc = -1 * hourInc;
    dayCount = Math.abs(dayCount);
    while (true) {
        if (dayDiff == dayCount && startDate.getHours() == date.getHours())
            return date;
        if (dayDiff > dayCount) {
            date.setTime(-1 * hourInc + date.getTime());
            return date;
        }
        var day = date.getDate();
        date.setTime(hourInc + date.getTime());
        if (day != date.getDate())
            dayDiff++;
    }
    return date;
}
ASPxClientCalendar.AddMonths = function (date, count) {
    var newDate = ASPxClientCalendar.CloneDate(date);
    newDate.setMonth(count + newDate.getMonth());
    _aspxFixTimezoneGap(date, newDate);
    if (newDate.getDate() < date.getDate())
        newDate = ASPxClientCalendar.AddDays(newDate, -newDate.getDate());
    return newDate;
}
ASPxClientCalendar.CloneDate = function (date) {
    var cloned = new Date();
    cloned.setTime(date.getTime());
    return cloned;
}
ASPxClientCalendar.GetDecadeStartYear = function (year) {
    return 10 * Math.floor(year / 10);
}
ASPxClientCalendar.GetDaysInRange = function (start, end) {
    return 1 + (ASPxClientCalendar.GetUTCTime(end) - ASPxClientCalendar.GetUTCTime(start)) / __aspxCalendarMsPerDay;
};
ASPxClientCalendar.GetDaysInMonth = function (month, year) {
    var d = new Date(year, month + 1, 0);
    return d.getDate();
};
ASPxClientCalendar.GetOffsetInMonths = function (start, end) {
    return end.getMonth() - start.getMonth() + 12 * (end.getFullYear() - start.getFullYear());
};
ASPxClientCalendarSelection = _aspxCreateClass(null, {
    constructor: function () {
        this.dates = {};
        this.count = 0;
    },
    Assign: function (source) {
        this.Clear();
        for (var key in source.dates) {
            var item = source.dates[key];
            if (item.constructor != Date) continue;
            this.Add(item);
        }
    },
    Clear: function () {
        if (this.count > 0) {
            this.dates = {};
            this.count = 0;
        }
    },
    Equals: function (selection) {
        if (this.count != selection.count)
            return false;
        for (var key in this.dates) {
            if (this.dates[key].constructor != Date) continue;
            if (!selection.ContainsKey(key))
                return false;
        }
        return true;
    },
    Contains: function (date) {
        var key = this.GetKey(date);
        return this.ContainsKey(key);
    },
    ContainsKey: function (key) {
        return !!this.dates[key];
    },
    Add: function (date) {
        var key = this.GetKey(date);
        if (!this.ContainsKey(key)) {
            this.dates[key] = ASPxClientCalendar.CloneDate(date);
            this.count++;
        }
    },
    AddArray: function (dates) {
        for (var i = 0; i < dates.length; i++)
            this.Add(dates[i]);
    },
    AddRange: function (start, end) {
        if (end < start) {
            this.AddRange(end, start);
            return;
        }
        var count = ASPxClientCalendar.GetDaysInRange(start, end);
        var date = ASPxClientCalendar.CloneDate(start);
        for (var i = 0; i < count; i++) {
            this.Add(date);
            date = ASPxClientCalendar.AddDays(date, 1);
        }
    },
    AddWeek: function (startDate) {
        this.AddRange(startDate, ASPxClientCalendar.AddDays(startDate, 6));
    },
    Remove: function (date) {
        var key = this.GetKey(date);
        if (this.ContainsKey(key)) {
            delete this.dates[key];
            this.count--;
        }
    },
    RemoveArray: function (dates) {
        for (var i = 0; i < dates.length; i++)
            this.Remove(dates[i]);
    },
    RemoveRange: function (start, end) {
        if (end < start) {
            this.RemoveRange(end, start);
            return;
        }
        var count = ASPxClientCalendar.GetDaysInRange(start, end);
        var date = ASPxClientCalendar.CloneDate(start);
        for (var i = 0; i < count; i++) {
            this.Remove(date);
            date = ASPxClientCalendar.AddDays(date, 1);
        }
    },
    RemoveWeek: function (startDate) {
        this.RemoveRange(startDate, ASPxClientCalendar.AddDays(startDate, 6));
    },
    GetDates: function () {
        var result = [];
        for (var key in this.dates) {
            var item = this.dates[key];
            if (item.constructor != Date) continue;
            result.push(ASPxClientCalendar.CloneDate(item));
        }
        return result;
    },
    GetFirstDate: function () {
        if (this.count == 0)
            return null;
        for (var key in this.dates) {
            var item = this.dates[key];
            if (item.constructor != Date) continue;
            return ASPxClientCalendar.CloneDate(item);
        }
        return null;
    },
    GetKey: function (date) {
        return _aspxGetInvariantDateString(date);
    }
});
ASPxClientCalendarSelectionTransaction = _aspxCreateClass(null, {
    constructor: function (calendar) {
        this.calendar = calendar;
        this.isActive = false;
        this.backup = new ASPxClientCalendarSelection();
        this.selection = new ASPxClientCalendarSelection;
    },
    Start: function () {
        if (this.isActive)
            this.Rollback();
        this.backup.Assign(this.calendar.selection);
        this.selection.Clear();
        this.isActive = true;
        __aspxActiveCalendar = this.calendar;
    },
    Commit: function () {
        this.calendar.ApplySelectionByDiff(this.selection, true);
        this.Reset();
    },
    Rollback: function () {
        this.calendar.ApplySelectionByDiff(this.backup);
        this.Reset();
    },
    Reset: function () {
        this.backup.Clear();
        this.selection.Clear();
        this.isActive = false;
        __aspxActiveCalendar = null;
    },
    CopyFromBackup: function () {
        this.selection.Assign(this.backup);
    },
    IsChanged: function () {
        return !this.backup.Equals(this.selection);
    }
});
ASPxClientCalendarView = _aspxCreateClass(null, {
    constructor: function (calendar, row, column) {
        this.row = row;
        this.column = column;
        this.calendar = calendar;
        var temp = column + row;
        this.isLowBoundary = temp == 0;
        this.isHighBoundary = temp == calendar.rows + calendar.columns - 2;
        this.visibleDate = null;
        this.startDate = null;
        this.dayFunctions = {};
        this.dayFunctionsWithWeekSelection = {};
    },
    Initialize: function () {
        this.dayCellCache = {};
        this.dayStyleCache = {};
        this.UpdateDate();
        this.UpdateSelection(this.calendar.selection.GetDates(), true);
        this.MakeDisabledStateItems();
    },
    AttachMouseEvents: function (eventMethod, styleMethod) {
        var index;
        var cell;
        if (this.calendar.showDayHeaders) {
            var headCells = this.GetMonthTable().rows[0].cells;
            var dayNameIndex = 0;
            if (this.calendar.showWeekNumbers) {
                dayNameIndex++;
                cell = headCells[0];
                if (this.calendar.enableMulti) {
                    eventMethod(cell, "click", ASPxClientCalendar.AnonymousHandlers.SelectMonth(this.calendar.name, this.row, this.column));
                    styleMethod(cell, "cursor", _aspxGetPointerCursor());
                }
                this.AttachCancelSelect(eventMethod, cell);
            }
            for (var j = 0; j < 7; j++)
                this.AttachCancelSelect(eventMethod, headCells[dayNameIndex++]);
        }
        for (var i = 0; i < __aspxCalendarWeekCount; i++) {
            if (this.calendar.showWeekNumbers) {
                cell = this.GetWeekNumberCell(i);
                if (this.calendar.enableMulti)
                    this.AttachDayMouseEvents(eventMethod, cell, this.GetDayMouseEventFunction(7 * i, true));
                else
                    this.AttachCancelSelect(eventMethod, cell);
            }
            var date;
            for (var j = 0; j < 7; j++) {
                index = i * 7 + j;
                cell = this.GetDayCell(index);
                date = this.GetDateByIndex(index);
                if (!this.calendar.enableMulti && this.IsDateVisible(date) && this.calendar.IsDateInRange(date)) {
                    if (!cell.style.cursor || cell.style.cursor == _aspxGetPointerCursor())
                        styleMethod(cell, "cursor", _aspxGetPointerCursor());
                }
                this.AttachDayMouseEvents(eventMethod, cell, this.GetDayMouseEventFunction(index, false));
            }
        }
    },
    AttachDayMouseEvents: function (method, cell, handler) {
        var types = ["down", "up", "over"];
        for (var i = 0; i < types.length; i++)
            method(cell, "mouse" + types[i], handler);
    },
    AttachCancelSelect: function (method, element) {
        method(element, "mouseup", aspxCalCancelSelect);
    },
    GetDayMouseEventFunction: function (index, selectWeeks) {
        var hash = selectWeeks ? this.dayFunctionsWithWeekSelection : this.dayFunctions;
        if (!hash[index])
            hash[index] = ASPxClientCalendar.AnonymousHandlers.DayMouseEvent(this.calendar.name, this.row, this.column, index, selectWeeks);
        return hash[index];
    },
    UpdateDate: function () {
        this.visibleDate = ASPxClientCalendar.AddMonths(this.calendar.visibleDate,
   this.row * this.calendar.columns + this.column);
        var date = ASPxClientCalendar.CloneDate(this.visibleDate);
        date.setDate(1);
        var offset = date.getDay() - this.calendar.firstDayOfWeek;
        if (offset < 0)
            offset += 7;
        this.startDate = ASPxClientCalendar.AddDays(date, -offset);
    },
    GetDateByIndex: function (index) {
        return ASPxClientCalendar.AddDays(this.startDate, index);
    },
    GetIndexByDate: function (date) {
        return ASPxClientCalendar.GetDaysInRange(this.startDate, date) - 1;
    },
    IsDateOtherMonth: function (date) {
        if (date == null)
            return false;
        return date.getMonth() != this.visibleDate.getMonth() ||
   date.getFullYear() != this.visibleDate.getFullYear();
    },
    GetDayCell: function (index) {
        if (_aspxIsExistsElement(this.dayCellCache[index]))
            return this.dayCellCache[index];
        var mt = this.GetMonthTable();
        var colIndex = index % 7;
        var rowIndex = (index - colIndex) / 7;
        if (this.calendar.showDayHeaders)
            rowIndex++;
        if (this.calendar.showWeekNumbers)
            colIndex++;
        var cell = mt.rows[rowIndex].cells[colIndex];
        this.dayCellCache[index] = cell;
        return cell;
    },
    GetMonthTable: function () {
        return this.GetCachedElementById("mt");
    },
    GetMonthCell: function () {
        return this.GetCachedElementById("mc");
    },
    GetWeekNumberCell: function (index) {
        if (this.calendar.showDayHeaders)
            index++;
        return this.GetMonthTable().rows[index].cells[0];
    },
    GetPrevYearCell: function () {
        return this.GetCachedElementById("PYC");
    },
    GetPrevMonthCell: function () {
        return this.GetCachedElementById("PMC");
    },
    GetTitleCell: function () {
        return this.GetCachedElementById("TC");
    },
    GetTitleElement: function () {
        return this.GetCachedElementById("T");
    },
    GetNextMonthCell: function () {
        return this.GetCachedElementById("NMC");
    },
    GetNextYearCell: function () {
        return this.GetCachedElementById("NYC");
    },
    Update: function () {
        this.dayStyleCache = {};
        this.UpdateDate();
        this.UpdateDays();
        this.UpdateTitle();
        this.UpdateSelection(this.calendar.selection.GetDates(), true);
    },
    UpdateDays: function () {
        var date = ASPxClientCalendar.CloneDate(this.startDate);
        var offset = this.calendar.firstDayOfWeek - 1;
        if (offset < 0)
            offset += 7;
        var weekNumber = ASPxClientCalendar.GetISO8601WeekOfYear(ASPxClientCalendar.AddDays(date, offset));
        var cell;
        for (var i = 0; i < __aspxCalendarWeekCount; i++) {
            if (this.calendar.showWeekNumbers)
                this.GetWeekNumberCell(i).innerHTML = (weekNumber < 10 ? "0" : "") + weekNumber.toString();
            for (var j = 0; j < 7; j++) {
                cell = this.GetDayCell(i * 7 + j);
                cell.innerHTML = this.IsDateVisible(date) ? date.getDate() : "&nbsp;";
                this.ApplyDayCellStyle(cell, date);
                date = ASPxClientCalendar.AddDays(date, 1);
            }
            if (++weekNumber > 52)
                weekNumber = ASPxClientCalendar.GetISO8601WeekOfYear(ASPxClientCalendar.AddDays(date, offset));
        }
    },
    UpdateTitle: function () {
        var el = this.GetTitleElement();
        if (!el) return;
        if (!this.titleFormatter) {
            this.titleFormatter = new ASPxDateFormatter();
            this.titleFormatter.SetFormatString(this.calendar.rtl ? "MMMM yyyy" : __aspxCultureInfo.yearMonth);
        }
        el.innerHTML = this.titleFormatter.Format(this.visibleDate);
    },
    UpdateSelection: function (dates, showSelection) {
        var index;
        var maxIndex = 7 * __aspxCalendarWeekCount - 1;
        for (var i = 0; i < dates.length; i++) {
            index = this.GetIndexByDate(dates[i]);
            if (index < 0 || index > maxIndex || !this.IsDateVisible(dates[i]))
                continue;
            this.ApplySelectionToCell(index, showSelection);
        }
    },
    ApplySelectionToCell: function (index, showSelection) {
        var cell = this.GetDayCell(index);
        if (showSelection) {
            var info;
            if (!this.dayStyleCache[index]) {
                var backup = new ASPxClientCalendarStyleInfo();
                backup.Import(cell);
                this.dayStyleCache[index] = backup;
                info = backup.Clone();
            } else
                info = this.dayStyleCache[index].Clone();
            this.calendar.ImportEtalonStyle(info, "DS");
        } else
            info = this.dayStyleCache[index];
        info.Apply(cell);
    },
    ApplyDayCellStyle: function (cell, date) {
        cell.style.cursor = "";
        var cal = this.calendar;
        var info = new ASPxClientCalendarStyleInfo();
        var needPointer = false;
        cal.ImportEtalonStyle(info, "D");
        if (this.IsDateVisible(date)) {
            if (cal.IsDateWeekend(date))
                cal.ImportEtalonStyle(info, "DW");
            if (this.IsDateOtherMonth(date))
                cal.ImportEtalonStyle(info, "DA");
            if (!cal.IsDateInRange(date))
                cal.ImportEtalonStyle(info, "DO");
            if (ASPxClientCalendar.AreDatesEqual(this.GetActualTodayDate(), date))
                cal.ImportEtalonStyle(info, "DT");
            if (!cal.clientEnabled)
                cal.ImportEtalonStyle(info, "DD");
            else if (!cal.enableMulti)
                needPointer = true;
        }
        info.Apply(cell);
        if (needPointer)
            _aspxSetPointerCursor(cell);
    },
    GetActualTodayDate: function () {
        if (!this.calendar || !this.calendar.actualTodayDate)
            return new Date();
        return this.calendar.actualTodayDate;
    },
    GetIDPostfix: function () {
        return "_" + this.row.toString() + "x" + this.column.toString();
    },
    GetCachedElementById: function (postfix) {
        if (this.calendar.IsMultiView())
            postfix += this.GetIDPostfix();
        return this.calendar.GetCachedElementById(this.calendar.name + "_" + postfix);
    },
    IsDateVisible: function (date) {
        var result = !this.calendar.IsMultiView() || !this.IsDateOtherMonth(date);
        if (!result) {
            result = result || this.isLowBoundary && date <= this.visibleDate ||
    this.isHighBoundary && date >= this.visibleDate;
        }
        return result;
    },
    MakeDisabledStateItems: function () {
        var cells = this.GetAuxCells();
        for (var i = 0; i < cells.length; i++)
            this.AddAuxDisabledStateItem(cells[i], this.GetAuxId(i));
        var element = this.GetTitleCell();
        if (element)
            this.AddHeaderDisabledStateItem(element);
        var element = this.GetTitleElement();
        if (element)
            this.AddHeaderDisabledStateItem(element);
    },
    AddAuxDisabledStateItem: function (element, id) {
        var cell = this.calendar.GetEtalonStyleCell("DD");
        element.id = id;
        aspxGetStateController().AddDisabledItem(id, cell.className, cell.style.cssText, null, null, null);
    },
    AddHeaderDisabledStateItem: function (element) {
        var cell = this.calendar.GetEtalonStyleCell("DD");
        aspxGetStateController().AddDisabledItem(element.id, cell.className, cell.style.cssText, null, null, null);
    },
    ChangeEnabledAttributes: function (enabled) {
        var element = this.GetPrevYearCell();
        if (element)
            this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
        var element = this.GetPrevMonthCell();
        if (element)
            this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
        var element = this.GetTitleElement();
        if (element) {
            this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
            this.ChangeTitleElementEnabledAttributes(element, _aspxChangeStyleAttributesMethod(enabled));
        }
        var element = this.GetNextMonthCell();
        if (element)
            this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
        var element = this.GetNextYearCell();
        if (element)
            this.ChangeButtonEnabledAttributes(element, _aspxChangeAttributesMethod(enabled));
        if (this.calendar.enabled && !this.calendar.readOnly)
            this.AttachMouseEvents(_aspxChangeEventsMethod(enabled), _aspxInitiallyChangeStyleAttributesMethod(enabled));
    },
    ChangeEnabledStateItems: function (enabled) {
        this.SetAuxCellsEnabled(enabled);
        this.SetHeaderCellsEnabled(enabled);
    },
    ChangeTitleElementEnabledAttributes: function (element, method) {
        method(element, "cursor");
    },
    ChangeButtonEnabledAttributes: function (element, method) {
        method(element, "onclick");
        method(element, "ondblclick");
    },
    SetAuxCellsEnabled: function (enabled) {
        var cells = this.GetAuxCells();
        for (var i = 0; i < cells.length; i++)
            aspxGetStateController().SetElementEnabled(cells[i], enabled);
    },
    SetHeaderCellsEnabled: function (enabled) {
        var element = this.GetPrevYearCell();
        if (element)
            aspxGetStateController().SetElementEnabled(element, enabled);
        var element = this.GetPrevMonthCell();
        if (element)
            aspxGetStateController().SetElementEnabled(element, enabled);
        var element = this.GetTitleCell();
        if (element)
            aspxGetStateController().SetElementEnabled(element, enabled);
        var element = this.GetTitleElement();
        if (element)
            aspxGetStateController().SetElementEnabled(element, enabled);
        var element = this.GetNextMonthCell();
        if (element)
            aspxGetStateController().SetElementEnabled(element, enabled);
        var element = this.GetNextYearCell();
        if (element)
            aspxGetStateController().SetElementEnabled(element, enabled);
    },
    GetAuxCells: function () {
        if (this.auxCells == null) {
            this.auxCells = [];
            var table = this.GetMonthTable();
            for (var i = 0; i < table.rows.length; i++) {
                var row = table.rows[i];
                if (i == 0 && this.calendar.showDayHeaders) {
                    for (var j = 0; j < row.cells.length; j++)
                        this.auxCells.push(row.cells[j]);
                }
                if (i > 0 && this.calendar.showWeekNumbers)
                    this.auxCells.push(row.cells[0]);
            }
        }
        return this.auxCells;
    },
    GetAuxId: function (index) {
        return this.calendar.name + "_AUX_" + this.row + "_" + this.column + "_" + index;
    }
});
ASPxClientCalendarFastNavigation = _aspxCreateClass(null, {
    constructor: function (calendar) {
        this.calendar = calendar;
        this.activeMonth = -1;
        this.activeYear = -1;
        this.startYear = -1;
        this.activeView = null;
        this.InitializeUI();
    },
    InitializeUI: function () {
        var item;
        var prefix = this.GetId();
        for (var m = 0; m < 12; m++) {
            item = this.GetMonthItem(m);
            if (!_aspxIsExistsElement(item))
                break;
            item.id = prefix + "_M" + m;
            _aspxAttachEventToElement(item, "click", ASPxClientCalendar.AnonymousHandlers.FastNavMonthClick(this.calendar.name, m));
        }
        for (var i = 0; i < 10; i++) {
            item = this.GetYearItem(i);
            if (!_aspxIsExistsElement(item))
                break;
            item.id = prefix + "_Y" + i;
            _aspxAttachEventToElement(item, "click", ASPxClientCalendar.AnonymousHandlers.FastNavYearClick(this.calendar.name, i));
        }
        _aspxAttachEventToElement(this.GetPopup().GetWindowElement(-1), "click", ASPxClientCalendar.AnonymousHandlers.MainElementClick(this.calendar.name));
    },
    Show: function () {
        this.GetPopup().ShowAtElement(this.activeView.GetTitleElement());
    },
    Hide: function () {
        this.GetPopup().Hide();
    },
    SetMonth: function (month) {
        if (month != this.activeMonth) {
            var prevCell = this.GetMonthItem(this.activeMonth);
            var cell = this.GetMonthItem(month);
            if (_aspxIsExistsElement(prevCell))
                this.ApplyItemStyle(prevCell, false, "M");
            this.ApplyItemStyle(cell, true, "M");
            this.activeMonth = month;
        }
    },
    ShiftMonth: function (offset) {
        var month = (this.activeMonth + offset) % 12;
        month = (month < 0) ? month + 12 : month;
        this.SetMonth(month);
    },
    SetYear: function (year) {
        var startYear = Math.floor(year / 10) * 10;
        this.SetStartYear(startYear);
        this.SetYearIndex(year - startYear);
    },
    SetYearIndex: function (index) {
        var prevIndex = this.activeYear - this.startYear;
        if (index != prevIndex) {
            var prevCell = this.GetYearItem(prevIndex);
            if (_aspxIsExistsElement(prevCell))
                this.ApplyItemStyle(prevCell, false, "Y");
            var cell = this.GetYearItem(index);
            this.ApplyItemStyle(cell, true, "Y");
            this.activeYear = index + this.startYear;
        }
    },
    SetStartYear: function (year) {
        if (this.startYear == year) return;
        this.startYear = year;
        this.PrepareYearList();
    },
    ShiftYear: function (offset) {
        this.SetYear(this.activeYear + offset);
    },
    ShiftStartYear: function (offset) {
        this.SetStartYear(this.startYear + offset);
    },
    ApplyChanges: function () {
        this.GetPopup().Hide();
        var offset = ASPxClientCalendar.GetOffsetInMonths(this.calendar.visibleDate, new Date(this.activeYear, this.activeMonth, 1));
        offset -= this.activeView.row * this.calendar.columns + this.activeView.column;
        if (offset != 0) {
            var date = ASPxClientCalendar.AddMonths(this.calendar.visibleDate, offset);
            this.calendar.OnVisibleMonthChanged(date);
        }
        this.calendar.OnMainElementClick();
    },
    CancelChanges: function () {
        this.GetPopup().Hide();
        this.calendar.OnMainElementClick();
    },
    Prepare: function () {
        var date = this.activeView.visibleDate;
        this.activeYear = date.getFullYear();
        this.activeMonth = date.getMonth();
        this.startYear = ASPxClientCalendar.GetDecadeStartYear(this.activeYear);
        this.PrepareMonthList();
        this.PrepareYearList();
    },
    PrepareMonthList: function () {
        var item;
        for (var month = 0; month < 12; month++) {
            item = this.GetMonthItem(month);
            if (item == null)
                return;
            this.ApplyItemStyle(item, month == this.activeMonth, "M");
        }
    },
    PrepareYearList: function () {
        var year = this.startYear;
        var item;
        for (var index = 0; index < 10; index++) {
            item = this.GetYearItem(index);
            if (item == null)
                return;
            item.innerHTML = year;
            this.ApplyItemStyle(item, year == this.activeYear, "Y");
            year++;
        }
    },
    GetMonthItem: function (month) {
        var t = this.GetCachedElementById("m");
        if (!_aspxIsExistsElement(t))
            return null;
        var colIndex = month % 4;
        var rowIndex = (month - colIndex) / 4;
        return t.rows[rowIndex].cells[colIndex];
    },
    GetYearItem: function (index) {
        var t = this.GetCachedElementById("y");
        if (!_aspxIsExistsElement(t) || index < 0 || index > 9)
            return null;
        var colIndex = index % 5;
        var rowIndex = (index - colIndex) / 5;
        if (rowIndex == 0)
            colIndex++;
        return t.rows[rowIndex].cells[colIndex];
    },
    GetPopup: function () {
        return aspxGetControlCollection().Get(this.GetId());
    },
    ApplyItemStyle: function (item, isSelected, type) {
        var info = new ASPxClientCalendarStyleInfo();
        this.calendar.ImportEtalonStyle(info, "FN" + type);
        if (isSelected)
            this.calendar.ImportEtalonStyle(info, "FN" + type + "S");
        info.Apply(item);
    },
    GetCachedElementById: function (postfix) {
        return this.calendar.GetCachedElementById(this.GetId() + "_" + postfix);
    },
    GetId: function () {
        return this.calendar.name + "_FNP";
    },
    OnArrowUp: function (evt) {
        if (!evt.shiftKey)
            this.ShiftYear(-5);
        else
            this.ShiftMonth(-4);
    },
    OnArrowDown: function (evt) {
        if (!evt.shiftKey)
            this.ShiftYear(5);
        else
            this.ShiftMonth(4);
    },
    OnArrowLeft: function (evt) {
        if (!evt.shiftKey)
            this.ShiftYear(-1);
        else
            this.ShiftMonth(-1);
    },
    OnArrowRight: function (evt) {
        if (!evt.shiftKey)
            this.ShiftYear(1);
        else
            this.ShiftMonth(1);
    },
    OnPageUp: function (evt) {
        this.ShiftYear(-10);
    },
    OnPageDown: function (evt) {
        this.ShiftYear(10);
    },
    OnEnter: function () {
        this.ApplyChanges();
    },
    OnEscape: function () {
        this.CancelChanges();
    },
    OnMonthClick: function (month) {
        this.SetMonth(month);
    },
    OnYearClick: function (index) {
        this.SetYearIndex(index);
    },
    OnYearShuffle: function (offset) {
        this.ShiftStartYear(offset);
    },
    OnOkClick: function () {
        this.ApplyChanges();
    },
    OnCancelClick: function () {
        this.CancelChanges();
    }
});
ASPxClientCalendarStyleInfo = _aspxCreateClass(null, {
    constructor: function () {
        this.className = "";
        this.cssText = "";
    },
    Clone: function () {
        var clone = new ASPxClientCalendarStyleInfo();
        clone.className = this.className;
        clone.cssText = this.cssText;
        return clone;
    },
    Apply: function (element) {
        if (element.className != this.className)
            element.className = this.className;
        if (element._style != this.cssText) {
            element.style.cssText = this.cssText;
            element._style = this.cssText;
        }
    },
    Import: function (element) {
        if (element.className.length > 0) {
            if (this.className.length > 1)
                this.className += " ";
            this.className += element.className;
        }
        var cssText = element.style.cssText;
        if (cssText.length > 0) {
            var pos = cssText.length - 1;
            while (pos > -1 && cssText.charAt(pos) == " ")
                --pos;
            if (cssText.charAt(pos) != ";")
                cssText += ";";
            this.cssText += cssText;
        }
    }
});
ASPxClientCalendarSelectionEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
    constructor: function (processOnServer, selection) {
        this.constructor.prototype.constructor.call(this, processOnServer);
        this.selection = selection;
    }
});
function aspxCalShiftMonth(name, monthOffset) {
    if (monthOffset != 0) {
        var edit = aspxGetControlCollection().Get(name);
        if (edit != null) {
            edit.OnShiftMonth(monthOffset);
        }
    }
}
function aspxCalTodayClick(name) {
    var edit = aspxGetControlCollection().Get(name);
    if (edit != null)
        edit.OnTodayClick();
}
function aspxCalClearClick(name) {
    var edit = aspxGetControlCollection().Get(name);
    if (edit != null)
        edit.OnClearClick();
}
function aspxCalTitleClick(name, row, column) {
    var edit = aspxGetControlCollection().Get(name);
    if (edit != null)
        edit.OnTitleClick(row, column);
}
function aspxCalFNYShuffle(name, offset) {
    var edit = aspxGetControlCollection().Get(name);
    if (edit != null)
        edit.fastNavigation.OnYearShuffle(offset);
}
function aspxCalFNBClick(name, action) {
    var edit = aspxGetControlCollection().Get(name);
    if (edit != null) {
        switch (action) {
            case "ok":
                edit.fastNavigation.OnOkClick();
                break;
            case "cancel":
                edit.fastNavigation.OnCancelClick();
                break;
        }
    }
}
function aspxCalDocMouseUp(evt) {
    var target = _aspxGetEventSource(evt);
    if (__aspxActiveCalendar != null && _aspxIsExistsElement(target)) {
        __aspxActiveCalendar.forceMouseDown = false;
        if (__aspxActiveCalendar.isMouseDown) {
            for (var key in __aspxActiveCalendar.views) {
                var view = __aspxActiveCalendar.views[key];
                if (view.constructor != ASPxClientCalendarView) continue;
                var monthCell = view.GetMonthCell();
                var parent = target.parentNode;
                while (_aspxIsExistsElement(parent)) {
                    if (parent == monthCell)
                        return;
                    parent = parent.parentNode;
                }
            }
            __aspxActiveCalendar.OnSelectionCancelled();
        }
        __aspxActiveCalendar = null;
    }
}
function aspxCalCancelSelect() {
    if (__aspxActiveCalendar != null) {
        __aspxActiveCalendar.forceMouseDown = false;
        __aspxActiveCalendar.OnSelectionCancelled();
    }
}
ASPxClientPopupMenu = _aspxCreateClass(ASPxClientMenuBase, {
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.skipNextPEMouseOutBeforePEMouseOver = false;
        this.cursorOverPopupElement = false;
        this.isPopupMenu = true;
        this.closeAction = "OuterMouseClick";
        this.popupAction = "RightMouseClick";
        this.popupElementIDList = [];
        this.popupElementList = [];
        this.lastUsedPopupElementInfo = {};
        this.popupHorizontalOffset = 0;
        this.popupVerticalOffset = 0;
        this.popupHorizontalAlign = __aspxNotSetAlignIndicator;
        this.popupVerticalAlign = __aspxNotSetAlignIndicator;
        this.isPopupFullCorrectionOn = true;
        this.left = 0;
        this.top = 0;
    },
    Initialize: function () {
        this.RemoveAllPopupElements();
        this.PopulatePopupElements();
        ASPxClientMenuBase.prototype.Initialize.call(this);
    },
    SetPopupElementReference: function (popupElement, popupElementIndex, attach) {
        if (!_aspxIsExistsElement(popupElement)) return;
        var setReferenceFunction = attach ? _aspxAttachEventToElement : _aspxDetachEventFromElement;
        if (this.closeAction == "MouseOut" || this.popupAction == "MouseOver") {
            setReferenceFunction(popupElement, "mouseover", _aspxClientOverControlUtils.OnMouseOver);
            setReferenceFunction(popupElement, "mouseout", _aspxClientOverControlUtils.OnMouseOut);
        }
        if (this.popupAction == "RightMouseClick")
            setReferenceFunction(popupElement, "contextmenu", aspxPMOnMouseUp);
        else if (this.popupAction == "LeftMouseClick")
            setReferenceFunction(popupElement, "mouseup", aspxPMOnMouseUp);
        if (attach) {
            popupElement.DXPopupElementControl = this;
            popupElement.DXPopupElementIndex = popupElementIndex;
        } else
            popupElement.DXPopupElementControl = popupElement.DXPopupElementIndex = undefined;
    },
    GetPopupElement: function (indexPopupElement) {
        var popupElement = this.popupElementList[indexPopupElement];
        return popupElement ? popupElement : null;
    },
    GetLastShownPopupElementIndex: function () {
        return _aspxGetDefinedValue(this.lastUsedPopupElementInfo.shownPEIndex, 0);
    },
    SetLastShownPopupElementIndex: function (popupElementIndex) {
        this.lastUsedPopupElementInfo.shownPEIndex = popupElementIndex;
    },
    GetLastOverPopupElementIndex: function () {
        return _aspxGetDefinedValue(this.lastUsedPopupElementInfo.overPEIndex, -1);
    },
    SetLastOverPopupElementIndex: function (popupElementIndex) {
        this.lastUsedPopupElementInfo.overPEIndex = popupElementIndex;
    },
    PopulatePopupElements: function () {
        var ids = this.popupElementIDList;
        for (var i = 0; i < ids.length; i++) {
            var popupElement = _aspxFindPopupElementById(ids[i]);
            if (popupElement)
                this.AddPopupElement(popupElement);
        }
    },
    AddPopupElement: function (popupElement) {
        var popupElementIndex = this.AddPopupElementInternal(popupElement);
        this.SetPopupElementReference(popupElement, popupElementIndex, true);
    },
    RemovePopupElement: function (popupElement) {
        this.RemovePopupElementInternal(popupElement);
        this.SetPopupElementReference(popupElement, null, false);
    },
    AddPopupElementInternal: function (element) {
        for (var i = 0; i < this.popupElementList.length; i++) {
            if (!this.popupElementList[i]) {
                this.popupElementList[i] = element;
                return i;
            }
        }
        this.popupElementList.push(element);
        return this.popupElementList.length - 1;
    },
    RemovePopupElementInternal: function (element) {
        for (var i = 0; i < this.popupElementList.length; i++) {
            if (this.popupElementList[i] == element) {
                this.popupElementList[i] = null;
                return;
            }
        }
    },
    RemoveAllPopupElements: function () {
        for (var i = 0; i < this.popupElementList.length; i++)
            this.RemovePopupElement(this.popupElementList[i]);
    },
    IsMenuVisible: function () {
        var element = this.GetMainElement();
        return (element != null) ? _aspxGetElementDisplay(element) : false;
    },
    IsVisible: function () {
        return this.isShowing || this.IsMenuVisible();
    },
    IsParentElementPositionStatic: function (indexPath) {
        return false;
    },
    GetClientSubMenuPos: function (element, indexPath, pos, isXPos) {
        if (indexPath == "") {
            var popupPosition = null;
            if (isXPos) {
                popupPosition = _aspxGetPopupAbsoluteX(this.GetMenuMainCell(this.GetMainElement()),
     __aspxPopupShadowWidth, this.GetPopupElement(this.GetLastShownPopupElementIndex()), this.popupHorizontalAlign, this.popupHorizontalOffset, pos, this.left, this.rtl, this.isPopupFullCorrectionOn);
            }
            else {
                popupPosition = _aspxGetPopupAbsoluteY(this.GetMenuMainCell(this.GetMainElement()),
     __aspxPopupShadowHeight, this.GetPopupElement(this.GetLastShownPopupElementIndex()), this.popupVerticalAlign, this.popupVerticalOffset, pos, this.top, this.isPopupFullCorrectionOn);
            }
            popupPosition.position -= _aspxGetPositionElementOffset(element, isXPos);
            return popupPosition;
        }
        return ASPxClientMenuBase.prototype.GetClientSubMenuPos.call(this, element, indexPath, pos, isXPos);
    },
    GetMenuElement: function (indexPath) {
        if (indexPath == "")
            return this.GetMainElement();
        return ASPxClientMenuBase.prototype.GetMenuElement.call(this, indexPath);
    },
    OnItemOverTimer: function (indexPath) {
        aspxGetMenuCollection().ClearCurrentShowingPopupMenuName();
        if (indexPath == "") {
            aspxGetMenuCollection().DoHidePopupMenus(null, -1, this.name, false, "");
            aspxGetMenuCollection().DoShowAtCurrentPos(this.name, indexPath);
        }
        else
            ASPxClientMenuBase.prototype.OnItemOverTimer.call(this, indexPath);
    },
    DoShow: function (x, y) {
        var element = this.GetMainElement();
        if (element != null && !_aspxGetElementDisplay(element)) {
            aspxGetMenuCollection().DoHidePopupMenus(null, -1, this.name, false, "");
            if (!this.isInitialized)
                this.PopulatePopupElements();
            this.isShowing = true;
            this.DoShowPopupMenu(element, x, y, "");
            this.isShowing = false;
        }
    },
    ShowPopupSubMenuAfterCallback: function (element, callbackResult) {
        this.SetSubMenuInnerHtml(element, callbackResult);
        var indexPath = this.GetIndexPathById(element.id, true);
        var scrollHelper = this.scrollHelpers[indexPath];
        if (scrollHelper) {
            element.style.height = "";
            this.PrepareScrolling(element, scrollHelper, _aspxPxToInt(element.style.top));
        }
        aspxGetControlCollection().AdjustControls(element);
    },
    WrongEventOrderOperaHack: function () {
        this.skipNextPEMouseOutBeforePEMouseOver = true;
    },
    WrongEventOrderOperaRollBack: function () {
        this.skipNextPEMouseOutBeforePEMouseOver = false;
    },
    OnAfterItemOver: function (hoverItem, hoverElement) {
        var afterItemOverAllowed = ASPxClientMenuBase.prototype.AfterItemOverAllowed(this, hoverItem);
        if (afterItemOverAllowed) {
            this.WrongEventOrderOperaHack();
            ASPxClientMenuBase.prototype.OnAfterItemOver.call(this, hoverItem, hoverElement);
        }
    },
    OnPopupElementMouseOver: function (evt, popupElement) {
        if (popupElement != null) {
            if (popupElement.DXPopupElementIndex == this.GetLastShownPopupElementIndex())
                this.cursorOverPopupElement = true
            this.WrongEventOrderOperaRollBack();
            if (this.popupAction == "MouseOver") {
                var isVisible = this.IsMenuVisible();
                if (popupElement.DXPopupElementIndex != this.GetLastOverPopupElementIndex()) {
                    this.ClearDisappearTimer();
                    this.ClearAppearTimer();
                    if (isVisible) {
                        this.Hide();
                        isVisible = false;
                    }
                }
                if (!isVisible) {
                    aspxGetMenuCollection().SetCurrentShowingPopupMenuName(this.name);
                    this.ShowInternal(evt, popupElement.DXPopupElementIndex);
                }
                this.SetLastOverPopupElementIndex(popupElement.DXPopupElementIndex);
            }
        }
    },
    OnPopupElementMouseOut: function (evt, popupElement) {
        if (popupElement != null) {
            aspxGetMenuCollection().ClearCurrentShowingPopupMenuName();
            this.cursorOverPopupElement = false;
            if (!this.IsMenuVisible())
                this.ClearAppearTimer();
            else if (!this.skipNextPEMouseOutBeforePEMouseOver)
                this.SetDisappearTimer();
        }
    },
    DoShowPopupMenuBorderCorrector: function (element, x, y, indexPath, toTheLeft, toTheTop) {
        if (indexPath != "")
            ASPxClientMenuBase.prototype.DoShowPopupMenuBorderCorrector.call(this, element, x, y, indexPath, toTheLeft, toTheTop);
    },
    ShowInternal: function (evt, popupElementIndex) {
        this.SetLastShownPopupElementIndex(popupElementIndex);
        var x = _aspxGetEventX(evt);
        var y = _aspxGetEventY(evt);
        if (evt.type == "mouseover")
            aspxGetMenuCollection().SetAppearTimer(this.name, "", this.appearAfter);
        else
            this.DoShow(x, y);
    },
    GetAnimationHorizontalDirection: function (indexPath, popupPosition) {
        if (this.GetMenuLevel(indexPath) == 0)
            return _aspxGetAnimationHorizontalDirection(popupPosition, this.popupHorizontalAlign, this.popupVerticalAlign, this.rtl);
        else
            return popupPosition.isInverted ? 1 : -1;
    },
    GetAnimationVerticalDirection: function (indexPath, popupPosition) {
        if (this.GetMenuLevel(indexPath) == 0)
            return _aspxGetAnimationVerticalDirection(popupPosition, this.popupHorizontalAlign, this.popupVerticalAlign);
        else
            return 0;
    },
    OnHideByItemOut: function () {
        if (this.closeAction == "MouseOut" && !this.cursorOverPopupElement)
            this.Hide();
        else
            ASPxClientMenuBase.prototype.OnHideByItemOut.call(this);
    },
    SetPopupElementID: function (popupElementId) {
        this.RemoveAllPopupElements();
        this.popupElementIDList = popupElementId.split(';');
        if (this.closeAction == "MouseOut") {
            this.ClearDisappearTimer();
            this.Hide();
        }
        this.PopulatePopupElements();
        this.WrongEventOrderOperaRollBack();
    },
    GetCurrentPopupElementIndex: function () {
        var popupElement = this.GetCurrentPopupElement();
        return popupElement ? popupElement.DXPopupElementIndex : -1;
    },
    GetCurrentPopupElement: function () {
        var popupElement = this.GetPopupElement(this.GetLastShownPopupElementIndex());
        if (popupElement && popupElement.DXPopupElementControl)
            return popupElement;
        return null;
    },
    RefreshPopupElementConnection: function () {
        this.RemoveAllPopupElements();
        this.PopulatePopupElements();
    },
    Hide: function () {
        aspxGetMenuCollection().DoHidePopupMenus(null, -1, this.name, false, "");
    },
    Show: function (popupElementIndex) {
        if (this.GetPopupElement(popupElementIndex) != null)
            this.SetLastShownPopupElementIndex(popupElementIndex);
        this.DoShow(__aspxInvalidPosition, __aspxInvalidPosition);
    },
    ShowAtElement: function (htmlElement) {
        this.SetLastShownPopupElementIndex(this.AddPopupElementInternal(htmlElement));
        this.DoShow(__aspxInvalidPosition, __aspxInvalidPosition);
        this.RemovePopupElementInternal(htmlElement);
    },
    ShowAtElementByID: function (id) {
        var htmlElement = document.getElementById(id);
        this.ShowAtElement(htmlElement);
    },
    ShowAtPos: function (x, y) {
        var lastIndexBackup = this.GetLastShownPopupElementIndex();
        this.SetLastShownPopupElementIndex(-1);
        this.DoShow(x, y);
        this.SetLastShownPopupElementIndex(lastIndexBackup);
    },
    GetVisible: function () {
        return this.IsMenuVisible();
    },
    SetVisible: function (visible) {
        if (visible && !this.IsMenuVisible())
            this.Show();
        else if (!visible && this.IsMenuVisible())
            this.Hide();
    }
});
ASPxClientPopupMenu.Cast = ASPxClientControl.Cast;
function aspxPMOnMouseUp(evt, element) {
    var element = _aspxFindEventSourceParentByTestFunc(evt, aspxTestPopupMenuElement);
    if (element == null || !element.DXPopupElementControl.isPopupMenu)
        return;
    var elementPopupAction = element.DXPopupElementControl.popupAction;
    switch (elementPopupAction) {
        case "LeftMouseClick":
            if (!_aspxGetIsLeftButtonPressed(evt)) return;
            break;
        case "RightMouseClick":
            _aspxPreventContextMenu(evt);
    }
    aspxGetMenuCollection().ClearDisappearTimer();
    element.DXPopupElementControl.ShowInternal(evt, element.DXPopupElementIndex);
    return _aspxCancelBubble(evt);
}
function aspxTestPopupMenuElement(element) {
    return !!element.DXPopupElementControl;
}
_aspxAttachEventToDocument("mousemove", aspxPopupMenuDocumentMouseMove);
function aspxPopupMenuDocumentMouseMove(evt) {
    var element = _aspxFindEventSourceParentByTestFunc(evt, aspxTestPopupMenuElement);
    if (element != null)
        aspxGetMenuCollection().SaveCurrentMouseOverPos(evt, element);
}

var __aspxDragHelper = null;
ASPxClientDragHelper = _aspxCreateClass(null, {
    constructor: function (e, root, clone) {
        if (__aspxDragHelper != null) __aspxDragHelper.cancelDrag();
        this.dragArea = 5;
        this.clickX = _aspxGetEventX(e);
        this.clickY = _aspxGetEventY(e);
        this.centerClone = false;
        this.cachedCloneWidth = -1;
        this.cachedCloneHeight = -1;
        this.cachedOriginalX = -1;
        this.cachedOriginalY = -1;
        this.canDrag = true;
        if (typeof (root) == "string")
            root = _aspxGetParentByTagName(_aspxGetEventSource(e), root);
        this.obj = root && root != null ? root : _aspxGetEventSource(e);
        this.clone = clone;
        this.dragObj = null;
        this.additionalObj = null;
        this.onDoClick = null;
        this.onEndDrag = null;
        this.onCancelDrag = null;
        this.onDragDivCreating = null;
        this.onCloneCreating = null;
        this.onCloneCreated = null;
        this.dragDiv = null;
        __aspxDragHelper = this;
        this.clearSelectionOnce = false;
    },
    drag: function (e) {
        if (!this.canDrag) return;
        _aspxClearSelection();
        if (!this.isDragging()) {
            if (!this.isOutOfDragArea(e))
                return;
            this.startDragCore(e);
        }
        if (__aspxIE && !_aspxGetIsLeftButtonPressed(e)) {
            this.cancelDrag(e);
            return;
        }
        if (!__aspxIE)
            _aspxSetElementSelectionEnabled(document.body, false);
        this.dragCore(e);
    },
    startDragCore: function (e) {
        this.dragObj = this.clone != true ? this.obj : this.createClone(e);
    },
    dragCore: function (e) {
        this.updateDragDivPosition(e);
    },
    endDrag: function (e) {
        if (!this.isDragging() && !this.isOutOfDragArea(e)) {
            if (this.onDoClick)
                this.onDoClick(this);
        } else {
            if (this.onEndDrag)
                this.onEndDrag(this);
        }
        this.cancelDrag();
    },
    cancel: function () {
        this.cancelDrag();
    },
    cancelDrag: function () {
        if (this.dragDiv != null) {
            document.body.removeChild(this.dragDiv);
            this.dragDiv = null;
        }
        if (this.onCancelDrag)
            this.onCancelDrag(this);
        __aspxDragHelper = null;
        if (!__aspxIE)
            _aspxSetElementSelectionEnabled(document.body, true);
    },
    isDragging: function () {
        return this.dragObj != null;
    },
    updateDragDivPosition: function (e) {
        if (this.centerClone) {
            this.dragDiv.style.left = _aspxGetEventX(e) - this.cachedCloneWidth / 2 + "px";
            this.dragDiv.style.top = _aspxGetEventY(e) - this.cachedCloneHeight / 2 + "px";
        } else {
            this.dragDiv.style.left = this.cachedOriginalX + _aspxGetEventX(e) - this.clickX + "px";
            this.dragDiv.style.top = this.cachedOriginalY + _aspxGetEventY(e) - this.clickY + "px";
        }
    },
    createClone: function (e) {
        this.dragDiv = document.createElement("div");
        if (this.onDragDivCreating)
            this.onDragDivCreating(this, this.dragDiv);
        var clone = this.creatingClone();
        this.dragDiv.appendChild(clone);
        document.body.appendChild(this.dragDiv);
        this.dragDiv.style.position = "absolute";
        this.dragDiv.style.cursor = "move";
        this.dragDiv.style.borderStyle = "none";
        this.dragDiv.style.padding = "0";
        this.dragDiv.style.margin = "0";
        this.dragDiv.style.backgroundColor = "transparent";
        this.dragDiv.style.zIndex = 20000;
        if (this.onCloneCreated)
            this.onCloneCreated(clone);
        this.cachedCloneWidth = clone.offsetWidth;
        this.cachedCloneHeight = clone.offsetHeight;
        if (!this.centerClone) {
            this.cachedOriginalX = _aspxGetAbsoluteX(this.obj);
            this.cachedOriginalY = _aspxGetAbsoluteY(this.obj);
        }
        this.dragDiv.style.width = this.cachedCloneWidth + "px";
        this.dragDiv.style.height = this.cachedCloneHeight + "px";
        this.updateDragDivPosition(e);
        return this.dragDiv;
    },
    creatingClone: function () {
        var clone = this.obj.cloneNode(true);
        if (!this.onCloneCreating) return clone;
        return this.onCloneCreating(clone);
    },
    addElementToDragDiv: function (element) {
        if (this.dragDiv == null) return;
        this.additionalObj = element.cloneNode(true);
        this.additionalObj.style.visibility = "visible";
        this.additionalObj.style.display = "";
        this.additionalObj.style.top = "";
        this.dragDiv.appendChild(this.additionalObj);
    },
    removeElementFromDragDiv: function () {
        if (this.additionalObj == null || this.dragDiv == null) return;
        this.dragDiv.removeChild(this.additionalObj);
        this.additionalObj = null;
    },
    isOutOfDragArea: function (e) {
        return Math.max(
   Math.abs(_aspxGetEventX(e) - this.clickX),
   Math.abs(_aspxGetEventY(e) - this.clickY)
  ) >= this.dragArea;
    }
});
function DragHelper_onmouseup(e) {
    if (__aspxDragHelper != null) {
        __aspxDragHelper.endDrag(e);
        return true;
    }
}
function DragHelper_cancel(e) {
    if (__aspxDragHelper != null) {
        __aspxDragHelper.cancel(e);
        return true;
    }
}
function DragHelper_onmousemove(e) {
    if (__aspxDragHelper != null && !(__aspxWebKitTouchUI && ASPxClientTouchUI.isGesture)) {
        __aspxDragHelper.drag(e);
        if (ASPxClientTouchUI.isTouchEvent(e) && __aspxDragHelper.canDrag) {
            e.preventDefault();
            ASPxClientTouchUI.preventScrollOnEvent(e);
        }
        return true;
    }
}
function DragHelper_onkeydown(e) {
    if (!__aspxDragHelper) return;
    if (e.keyCode == ASPxKey.Esc)
        __aspxDragHelper.cancelDrag();
    return true;
}
function DragHelper_onkeyup(e) {
    if (!__aspxDragHelper) return;
    if (e.keyCode == ASPxKey.Esc && __aspxWebKitFamily)
        __aspxDragHelper.cancelDrag();
    return true;
}
function DragHelper_onselectstart(e) {
    var drag = __aspxDragHelper;
    if (drag && (drag.canDrag || drag.clearSelectionOnce)) {
        _aspxClearSelection();
        drag.clearSelectionOnce = false;
        return false;
    }
}
(function () {
    if (__aspxMSTouchUI)
        _aspxAttachEventToDocument("MSPointerCancel", DragHelper_cancel);
    _aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, DragHelper_onmouseup);
    _aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseMoveEventName, DragHelper_onmousemove);
    _aspxAttachEventToDocument("keydown", DragHelper_onkeydown);
    _aspxAttachEventToDocument("keyup", DragHelper_onkeyup);
    _aspxAttachEventToDocument("selectstart", DragHelper_onselectstart);
})();
var __aspxCursorTargets = null;
ASPxClientCursorTargets = _aspxCreateClass(null, {
    constructor: function () {
        this.list = [];
        this.starttargetElement = null;
        this.starttargetTag = 0;
        this.oldtargetElement = null;
        this.oldtargetTag = 0;
        this.targetElement = null;
        this.targetTag = 0;
        this.x = 0;
        this.y = 0;
        this.removedX = 0;
        this.removedY = 0;
        this.removedWidth = 0;
        this.removedHeight = 0;
        this.onTargetCreated = null;
        this.onTargetChanging = null;
        this.onTargetChanged = null;
        this.onTargetAdding = null;
        this.onTargetAllowed = null;
        __aspxCursorTargets = this;
    },
    addElement: function (element) {
        if (!this.canAddElement(element)) return null;
        var target = new ASPxClientCursorTarget(element);
        this.onTargetCreated && this.onTargetCreated(this, target);
        this.list.push(target);
        return target;
    },
    removeElement: function (element) {
        for (var i = 0; i < this.list.length; i++) {
            if (this.list[i].element == element) {
                this.list.splice(i, 1);
                return;
            }
        }
    },
    addParentElement: function (parent, child) {
        var target = this.addElement(parent);
        if (target != null) {
            target.targetElement = child;
        }
        return target;
    },
    RegisterTargets: function (element, idPrefixArray) {
        this.addFunc = this.addElement;
        this.RegisterTargetsCore(element, idPrefixArray);
    },
    UnregisterTargets: function (element, idPrefixArray) {
        this.addFunc = this.removeElement;
        this.RegisterTargetsCore(element, idPrefixArray);
    },
    RegisterTargetsCore: function (element, idPrefixArray) {
        if (element == null) return;
        for (var i = 0; i < idPrefixArray.length; i++)
            this.RegisterTargetCore(element, idPrefixArray[i]);
    },
    RegisterTargetCore: function (element, idPrefix) {
        if (!_aspxIsExists(element.id)) return;
        if (element.id.indexOf(idPrefix) > -1)
            this.addFunc(element);
        for (var i = 0; i < element.childNodes.length; i++)
            this.RegisterTargetCore(element.childNodes[i], idPrefix);
    },
    canAddElement: function (element) {
        if (element == null || !_aspxGetElementDisplay(element))
            return false;
        for (var i = 0; i < this.list.length; i++) {
            if (this.list[i].targetElement == element) return false;
        }
        if (this.onTargetAdding != null && !this.onTargetAdding(this, element)) return false;
        return element.style.visibility != "hidden";
    },
    removeInitialTarget: function (x, y) {
        var el = this.getTarget(x + _aspxGetDocumentScrollLeft(), y + _aspxGetDocumentScrollTop());
        if (el == null) return;
        this.removedX = _aspxGetAbsoluteX(el);
        this.removedY = _aspxGetAbsoluteY(el);
        this.removedWidth = el.offsetWidth;
        this.removedHeight = el.offsetHeight;
    },
    getTarget: function (x, y) {
        for (var i = 0; i < this.list.length; i++) {
            var record = this.list[i];
            if (record.contains(x, y)) {
                if (!this.onTargetAllowed || this.onTargetAllowed(record.targetElement, x, y))
                    return record.targetElement;
            }
        }
        return null;
    },
    targetChanged: function (element, tag) {
        this.targetElement = element;
        this.targetTag = tag;
        if (this.onTargetChanging)
            this.onTargetChanging(this);
        if (this.oldtargetElement != this.targetElement || this.oldtargetTag != this.targetTag) {
            if (this.onTargetChanged)
                this.onTargetChanged(this);
            this.oldtargetElement = this.targetElement;
            this.oldtargetTag = this.targetTag;
        }
    },
    cancelChanging: function () {
        this.targetElement = this.oldtargetElement;
        this.targetTag = this.oldtargetTag;
    },
    isLeftPartOfElement: function () {
        if (this.targetElement == null) return true;
        var left = this.x - this.targetElementX();
        return left < this.targetElement.offsetWidth / 2;
    },
    isTopPartOfElement: function () {
        if (this.targetElement == null) return true;
        var top = this.y - this.targetElementY();
        return top < this.targetElement.offsetHeight / 2;
    },
    targetElementX: function () {
        return this.targetElement != null ? _aspxGetAbsoluteX(this.targetElement) : 0;
    },
    targetElementY: function () {
        return this.targetElement != null ? _aspxGetAbsoluteY(this.targetElement) : 0;
    },
    onmousemove: function (e) {
        this.doTargetChanged(e);
    },
    onmouseup: function (e) {
        this.doTargetChanged(e);
        __aspxCursorTargets = null;
    },
    doTargetChanged: function (e) {
        this.x = _aspxGetEventX(e);
        this.y = _aspxGetEventY(e);
        if (this.inRemovedBounds(this.x, this.y)) return;
        this.targetChanged(this.getTarget(this.x, this.y), 0);
    },
    inRemovedBounds: function (x, y) {
        if (this.removedWidth == 0) return false;
        return x > this.removedX && x < (this.removedX + this.removedWidth) &&
   y > this.removedY && y < (this.removedY + this.removedHeight);
    }
});
ASPxClientCursorTarget = _aspxCreateClass(null, {
    constructor: function (element) {
        this.element = element;
        this.targetElement = element;
        this.UpdatePosition();
    },
    contains: function (x, y) {
        return x >= this.absoluteX && x <= this.absoluteX + this.GetElementWidth() &&
   y >= this.absoluteY && y <= this.absoluteY + this.GetElementHeight();
    },
    GetElementWidth: function () {
        return this.element.offsetWidth;
    },
    GetElementHeight: function () {
        return this.element.offsetHeight;
    },
    UpdatePosition: function () {
        this.absoluteX = _aspxGetAbsoluteX(this.element);
        this.absoluteY = _aspxGetAbsoluteY(this.element);
    }
});
function CursorTarget_onmouseup(e) {
    if (__aspxCursorTargets != null) {
        __aspxCursorTargets.onmouseup(e);
        return true;
    }
}
function CursorTarget_onmousemove(e) {
    if (__aspxCursorTargets != null) {
        __aspxCursorTargets.onmousemove(e);
        return true;
    }
}
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseUpEventName, CursorTarget_onmouseup);
_aspxAttachEventToDocument(ASPxClientTouchUI.touchMouseMoveEventName, CursorTarget_onmousemove);

ASPxClientGridView = _aspxCreateClass(ASPxClientControl, {
    MainTableID: "DXMainTable",
    HeaderTableID: "DXHeaderTable",
    FooterTableID: "DXFooterTable",
    DataRowID: "DXDataRow",
    DetailRowID: "DXDRow",
    PreviewRowID: "DXPRow",
    GroupRowID: "DXGroupRow",
    FixedColumnsDivID: "DXFixedColumnsDiv",
    FixedColumnsContentDivID: "DXFixedColumnsContentDiv",
    CustomizationWindowSuffix: "_custwindow",
    EmptyHeaderSuffix: "_emptyheader",
    HeaderRowID: "_DXHeadersRow",
    PagerBottomID: "DXPagerBottom",
    PagerTopID: "DXPagerTop",
    HeaderFilterButtonClassName: "dxgv__hfb",
    CommandId: {
        NextPage: "NEXTPAGE",
        PreviousPage: "PREVPAGE",
        GotoPage: "GOTOPAGE",
        SelectRows: "SELECTROWS",
        SelectRowsKey: "SELECTROWSKEY",
        Group: "GROUP",
        UnGroup: "UNGROUP",
        Sort: "SORT",
        ColumnMove: "COLUMNMOVE",
        CollapseAll: "COLLAPSEALL",
        ExpandAll: "EXPANDALL",
        ExpandRow: "EXPANDROW",
        CollapseRow: "COLLAPSEROW",
        HideAllDetail: "HIDEALLDETAIL",
        ShowAllDetail: "SHOWALLDETAIL",
        ShowDetailRow: "SHOWDETAILROW",
        HideDetailRow: "HIDEDETAILROW",
        PagerOnClick: "PAGERONCLICK",
        ApplyFilter: "APPLYFILTER",
        ApplyColumnFilter: "APPLYCOLUMNFILTER",
        ApplyMultiColumnFilter: "APPLYMULTICOLUMNFILTER",
        ApplyHeaderColumnFilter: "APPLYHEADERCOLUMNFILTER",
        FilterRowMenu: "FILTERROWMENU",
        StartEdit: "STARTEDIT",
        CancelEdit: "CANCELEDIT",
        UpdateEdit: "UPDATEEDIT",
        AddNewRow: "ADDNEWROW",
        DeleteRow: "DELETEROW",
        CustomButton: "CUSTOMBUTTON",
        CustomCallback: "CUSTOMCALLBACK",
        ShowFilterControl: "SHOWFILTERCONTROL",
        CloseFilterControl: "CLOSEFILTERCONTROL",
        SetFilterEnabled: "SETFILTERENABLED",
        Refresh: "REFRESH",
        SelFieldValues: "SELFIELDVALUES",
        RowValues: "ROWVALUES",
        PageRowValues: "PAGEROWVALUES",
        FilterPopup: "FILTERPOPUP",
        CustomValues: "CUSTOMVALUES"
    },
    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);
        this.callBacksEnabled = true;
        this.custwindowLeft = null;
        this.custwindowTop = null;
        this.custwindowVisible = null;
        this.activeElement = null;
        this.filterKeyPressInputValue = "";
        this.userChangedSelection = false;
        this.lockFilter = false;
        this.confirmDelete = "";
        this.filterKeyPressTimerId = -1;
        this.filterRowMenuColumnIndex = -1;
        this.editorIDList = [];
        this.keys = [];
        this.lastMultiSelectIndex = -1;
        this.hasFooterRowTemplate = false;
        this.mainTableClickData = {
            processing: false,
            focusChanged: false,
            selectionChanged: false
        };
        this.afterCallbackRequired = false;
        this.headerFilterPopupDimensions = {};
        this.enableHeaderFilterCaching = true;
        this.postbackRequestCount = 0;
        this.supportGestures = true;
        this.checkBoxImageProperties = null;
        this.internalCheckBoxCollection = null;
        this.sizingConfig.adjustControl = true;
        this.lookupBehavior = false;
        this.SelectionChanged = new ASPxClientEvent();
        this.FocusedRowChanged = new ASPxClientEvent();
        this.ColumnSorting = new ASPxClientEvent();
        this.ColumnGrouping = new ASPxClientEvent();
        this.ColumnMoving = new ASPxClientEvent();
        this.ColumnStartDragging = new ASPxClientEvent();
        this.ColumnResizing = new ASPxClientEvent();
        this.ColumnResized = new ASPxClientEvent();
        this.RowExpanding = new ASPxClientEvent();
        this.RowCollapsing = new ASPxClientEvent();
        this.DetailRowExpanding = new ASPxClientEvent();
        this.DetailRowCollapsing = new ASPxClientEvent();
        this.RowClick = new ASPxClientEvent();
        this.RowDblClick = new ASPxClientEvent();
        this.ContextMenu = new ASPxClientEvent();
        this.CustomizationWindowCloseUp = new ASPxClientEvent();
        this.CustomButtonClick = new ASPxClientEvent();
        this.BatchEditConfirmShowing = new ASPxClientEvent();
        this.InternalCheckBoxClick = new ASPxClientEvent();
        this.funcCallbacks = [];
        this.pendingCommands = [];
        this.pageRowCount = 0;
        this.pageRowSize = 0;
        this.pageIndex = 0;
        this.pageCount = 1;
        this.allowFocusedRow = false;
        this.allowSelectByRowClick = false;
        this.allowSelectSingleRowOnly = false;
        this.allowMultiColumnAutoFilter = false,
  this.focusedRowIndex = -1;
        this.selectedWithoutPageRowCount = 0;
        this.visibleStartIndex = 0;
        this.columns = [];
        this.columnResizeMode = ASPxColumnResizeMode.None;
        this.fixedColumnCount = 0;
        this.horzScroll = ASPxScrollBarMode.Hidden;
        this.vertScroll = ASPxScrollBarMode.Hidden;
        this.scrollToRowIndex = -1;
        this.isVirtualScrolling = false;
        this.useEndlessPaging = false;
        this.allowBatchEditing = false;
        this.batchEditClientState = {};
        this.resetScrollTop = false;
        this.callbackOnFocusedRowChanged = false;
        this.callbackOnSelectionChanged = false;
        this.autoFilterDelay = 1200;
        this.editState = 0;
        this.kbdHelper = null;
        this.tableHelper = null;
        this.enableKeyboard = false;
        this.keyboardLock = false;
        this.accessKey = null;
        this.customKbdHelperName = null;
        this.dragHelper = null;
        this.endlessPagingHelper = null;
        this.batchEditHelper = null;
        this.icbFocusedStyle = null;
        this.pendingEvents = [];
        this.rowHotTrackStyle = null;
        this.rowHotTrackItemsBag = {};
        this.filterEditorState = [];
    },
    HasHorzScroll: function () { return this.horzScroll != ASPxScrollBarMode.Hidden; },
    HasVertScroll: function () { return this.vertScroll != ASPxScrollBarMode.Hidden; },
    HasScrolling: function () { return this.HasHorzScroll() || this.HasVertScroll(); },
    AllowResizing: function () { return this.columnResizeMode != ASPxColumnResizeMode.None; },
    _isGroupRow: function (row) { return row.id.indexOf(this.GroupRowID) > -1; },
    IsHeaderRow: function (row) { return this.IsHeaderRowID(row.id); },
    IsHeaderRowID: function (id) { return id.indexOf(this.name + this.HeaderRowID) == 0; },
    IsEmptyHeaderID: function (id) { return id.indexOf(this.EmptyHeaderSuffix) > -1 },
    GetRootTable: function () { return _aspxGetElementById(this.name); },
    GetGridTD: function () {
        var table = this.GetRootTable();
        if (!table) return null;
        return table.rows[0].cells[0];
    },
    GetArrowDragDownImage: function () { return this.GetChildElementById("IADD"); },
    GetArrowDragUpImage: function () { return this.GetChildElementById("IADU"); },
    GetArrowDragFieldImage: function () { return this.GetChildElementById("IDHF"); },
    GetCallbackStateInput: function () { return this.GetChildElementById("CallbackState"); },
    GetSelectionInput: function () { return this.GetChildElementById("DXSelInput"); },
    GetKeyValuesInput: function () { return this.GetChildElementById("DXKVInput"); },
    GetFocusedRowInput: function () { return this.GetChildElementById("DXFocusedRowInput"); },
    GetColResizedInput: function () { return this.GetChildElementById("DXColResizedInput"); },
    GetPostBackSyncInput: function () { return this.GetChildElementById("DXSyncInput"); },
    GetEndlessPagingGroupStateInput: function () { return this.GetChildElementById("DXEPGSInput"); },
    GetEndlessPagingUpdatableContainer: function () { return this.GetChildElementById("DXEPUC"); },
    GetEndlessPagingLPContainer: function () { return this.GetChildElementById("DXEPLPC"); },
    GetBatchEditorContainer: function (columnIndex) { return this.GetChildElementById("DXBEC" + columnIndex); },
    GetBatchEditPageValuesInput: function () { return this.GetChildElementById("DXBEPVInput"); },
    GetBatchEditClientModifiedValuesInput: function () { return this.GetChildElementById("DXBECMVInput"); },
    GetBatchEditCellErrorTable: function () { return this.GetChildElementById("DXCErrorTable"); },
    GetLoadingPanelDiv: function () { return this.GetChildElementById("LPD"); },
    GetFixedColumnsDiv: function () { return this.GetChildElementById(this.FixedColumnsDivID); },
    GetRow: function (visibleIndex) {
        var res = this.GetDataRow(visibleIndex);
        if (res == null) res = this.GetGroupRow(visibleIndex);
        return res;
    },
    GetDataRow: function (visibleIndex) { return this.GetChildElementById(this.DataRowID + visibleIndex); },
    GetDetailRow: function (visibleIndex) { return this.GetChildElementById(this.DetailRowID + visibleIndex); },
    GetPreviewRow: function (visibleIndex) { return this.GetChildElementById(this.PreviewRowID + visibleIndex); },
    GetGroupRow: function (visibleIndex) {
        var element = this.GetChildElementById(this.GroupRowID + visibleIndex);
        if (!element)
            element = this.GetExpandedGroupRow(visibleIndex);
        return element;
    },
    GetExpandedGroupRow: function (visibleIndex) { return this.GetChildElementById(this.GroupRowID + "Exp" + visibleIndex); },
    GetDataRowSelBtn: function (index) { return this.GetChildElementById("DXSelBtn" + index); },
    GetMainTable: function () { return this.GetChildElementById(this.MainTableID); },
    GetStyleTable: function () { return this.GetChildElementById("DXStyleTable"); },
    GetLoadingPanelContainer: function () { return this.GetChildElementById("DXLPContainer"); },
    GetGroupPanel: function () { return this.GetChildElementById("grouppanel"); },
    GetHeader: function (columnIndex, inGroupPanel) {
        var id = "col" + columnIndex;
        if (inGroupPanel)
            id = "group" + id;
        return this.GetChildElementById(id);
    },
    GetHeaderRow: function (index) {
        return _aspxGetElementById(this.name + this.HeaderRowID + index);
    },
    GetEditingRow: function (obj) { return _aspxGetElementById(obj.name + "_DXEditingRow"); },
    GetEditingErrorRow: function (obj) { return _aspxGetElementById(obj.name + "_DXEditingErrorRow"); },
    GetEditFormTable: function () { return _aspxGetElementById(this.name + "_DXEFT"); },
    GetCustomizationWindow: function () { return aspxGetControlCollection().Get(this.name + this.CustomizationWindowSuffix); },
    GetParentRowsWindow: function () { return aspxGetControlCollection().Get(this.name + "_DXparentrowswindow"); },
    GetEditorPrefix: function () { return "DXEditor"; },
    GetPopupEditForm: function () { return aspxGetControlCollection().Get(this.name + "_DXPEForm"); },
    GetFilterRowMenu: function () { return aspxGetControlCollection().Get(this.name + "_DXFilterRowMenu"); },
    GetFilterControlPopup: function () { return aspxGetControlCollection().Get(this.name + "_DXPFCForm"); },
    GetFilterControl: function () { return aspxGetControlCollection().Get(this.name + "_DXPFCForm_DXPFC"); },
    GetHeaderFilterPopup: function () { return aspxGetControlCollection().Get(this.name + "_DXHFP"); },
    GetHeaderFilterListBox: function () { return aspxGetControlCollection().Get(this.name + "_HFListBox"); },
    GetHeaderFilterSelectAllCheckBox: function () { return aspxGetControlCollection().Get(this.name + "_HFSACheckBox"); },
    GetEditorByColumnIndex: function (colIndex) {
        var list = this._getEditors();
        for (var i = 0; i < list.length; i++) {
            if (this.tryGetNumberFromEndOfString(list[i].name).value === colIndex)
                return list[i];
        }
        return null;
    },
    Initialize: function () {
        this.constructor.prototype.Initialize.call(this);
        if (this.enabled)
            this.SetHeadersClientEvents();
        this.EnsureRowKeys();
        this._setFocusedRowInputValue();
        this.AddSelectStartHandler();
        this.EnsureRowHotTrackItems();
        if (this.enableKeyboard) {
            this.kbdHelper = this.customKbdHelperName ? new window[this.customKbdHelperName](this) : new ASPxGridViewKbdHelper(this);
            this.kbdHelper.Init();
            ASPxKbdHelper.RegisterAccessKey(this);
        }
        if (this.checkBoxImageProperties)
            this.CreateInternalCheckBoxCollection();
        this.CheckPendingEvents();
        this.InitializeHeaderFilterPopup();
        var resizingHelper = this.GetResizingHelper();
        if (resizingHelper)
            resizingHelper.ResetStretchedColumnWidth();
        this.CheckEndlessPagingLoadNextPage();
        var batchEditHelper = this.GetBatchEditHelper();
        if (batchEditHelper)
            batchEditHelper.Init();
        window.setTimeout(function () { this.SaveAutoFilterColumnEditorState(); } .aspxBind(this), 0);
    },
    CheckEndlessPagingLoadNextPage: function () {
        window.setTimeout(function () {
            var scrollHelper = this.GetScrollHelper();
            if (this.useEndlessPaging && scrollHelper)
                scrollHelper.CheckEndlessPagingLoadNextPage();
        } .aspxBind(this), 0);
    },
    EnsureRowKeys: function () {
        var keyValuesInput = this.GetKeyValuesInput();
        if (keyValuesInput)
            this.keys = eval(keyValuesInput.value);
        if (!this.keys)
            this.keys = [];
    },
    InitializeHeaderFilterPopup: function () {
        var popup = this.GetHeaderFilterPopup();
        if (!popup)
            return;
        popup.PopUp.AddHandler(function () { this.OnPopUpHeaderFilterWindow(); } .aspxBind(this));
        popup.CloseUp.AddHandler(function (s) {
            if (!this.UseHFContentCaching())
                window.setTimeout(function () { s.SetContentHtml(""); }, 0);
        } .aspxBind(this));
        popup.Resize.AddHandler(function (s) {
            var colIndex = this.FindColumnIndexByHeaderChild(s.GetCurrentPopupElement());
            var column = this._getColumn(colIndex);
            if (!column) return;
            this.SetHeaderFilterPopupSize(colIndex, s.GetWidth(), s.GetHeight());
        } .aspxBind(this));
        var buttons = this.GetHeaderFilterButtons();
        for (var i = 0; i < buttons.length; i++)
            popup.AddPopupElement(buttons[i]);
    },
    GetHeaderFilterButtons: function () {
        var buttons = [];
        for (var i = 0; i < this.GetColumnsCount(); i++) {
            if (!this.GetColumn(i).visible)
                continue;
            this.PopulateHeaderFilterButtons(this.GetHeader(i, false), buttons);
            this.PopulateHeaderFilterButtons(this.GetHeader(i, true), buttons);
        }
        var custWindow = this.GetCustomizationWindow();
        if (custWindow)
            this.PopulateHeaderFilterButtons(custWindow.GetWindowClientTable(-1), buttons);
        return buttons;
    },
    PopulateHeaderFilterButtons: function (container, buttons) {
        if (!container) return;
        var images = container.getElementsByTagName("IMG");
        for (var i = 0; i < images.length; i++) {
            var image = images[i];
            if (_aspxElementCssClassContains(image, this.HeaderFilterButtonClassName))
                buttons.push(image);
        }
    },
    UseHFContentCaching: function () {
        var listBox = this.GetHeaderFilterListBox();
        if (listBox && listBox.GetMainElement())
            return this.enableHeaderFilterCaching && listBox.GetItemCount() < 1000;
        return false;
    },
    OnPopUpHeaderFilterWindow: function () {
        var popup = this.GetHeaderFilterPopup();
        var colIndex = this.FindColumnIndexByHeaderChild(popup.GetCurrentPopupElement());
        var column = this._getColumn(colIndex);
        if (!column) return;
        var shiftKey = popup.GetPopUpReasonMouseEvent().shiftKey;
        var listBox = this.GetHeaderFilterListBox();
        if (listBox && listBox.cpGVColumnIndex == colIndex && this.UseHFContentCaching() && popup.savedShiftKey === shiftKey) {
            this.RestoreHFListBoxPreviousState(listBox, column);
            return;
        }
        popup.savedShiftKey = shiftKey;
        this.gridFuncCallBack([this.CommandId.FilterPopup, this.name, colIndex, shiftKey ? "T" : ""], this.onFilterPopupCallback);
        popup.SetContentHtml("");
        var buttonPanel = document.getElementById(popup.cpButtonPanelID);
        if (buttonPanel) {
            buttonPanel.style.display = column.HFCheckedList ? "" : "none";
            this.SetHFOkButtonEnabled(false);
        }
        var size = this.GetHeaderFilterPopupSize(colIndex);
        if (size) {
            popup.SetSize(size[0], size[1]);
            if (__aspxFirefox)
                popup.Shown.AddHandler(function (s) {
                    window.setTimeout(function () { s.SetSize(size[0], size[1]); }, 0);
                });
        }
        this.CreateLoadingPanelWithoutBordersInsideContainer(popup.GetContentContainer(-1));
    },
    RestoreHFListBoxPreviousState: function (listBox, column) {
        if (!column.HFCheckedList)
            return;
        listBox.UnselectAll();
        listBox.SelectIndices(listBox.HFSavedSelectedIndices);
        this.UpdateHFSelectAllCheckState();
        this.SetHFOkButtonEnabled(false);
    },
    SetHFOkButtonEnabled: function (enabled) {
        var popup = this.GetHeaderFilterPopup();
        if (!popup) return;
        var button = aspxGetControlCollection().Get(popup.cpOkButtonID);
        if (!button) return;
        button.SetEnabled(enabled);
    },
    GetHeaderFilterPopupSize: function (key) {
        var size = this.headerFilterPopupDimensions[key];
        if (size) return size;
        if (!this.headerFilterPopupDimensions["Default"]) {
            var popup = this.GetHeaderFilterPopup();
            this.SetHeaderFilterPopupSize("Default", popup.GetWidth(), popup.GetHeight());
        }
        return this.headerFilterPopupDimensions["Default"];
    },
    SetHeaderFilterPopupSize: function (key, width, height) {
        this.headerFilterPopupDimensions[key] = [width, height];
    },
    FindColumnIndexByHeaderChild: function (element) {
        if (!element)
            return -1;
        var level = 0;
        while (level < 6) {
            var index = this.getColumnIndex(element.id);
            if (index > -1)
                return index;
            element = element.parentNode;
            level++;
        }
        return -1;
    },
    InitializeHFListBox: function (listBox) {
        _aspxAttachEventToElement(listBox.GetListTable(), "mousedown", function () { window.setTimeout(_aspxClearSelection, 0); });
        listBox.SelectedIndexChanged.AddHandler(function (s) { this.OnHFListBoxSelectionChanged(s); } .aspxBind(this));
        listBox.HFSavedSelectedIndices = listBox.GetSelectedIndices();
    },
    OnHFListBoxSelectionChanged: function (listBox) {
        var column = this.GetColumn(listBox.cpGVColumnIndex);
        if (!column) return;
        if (!column.HFCheckedList) {
            this.ApplyHeaderFilterByColumn();
            return;
        }
        this.UpdateHFSelectAllCheckState();
        this.SetHFOkButtonEnabled(this.IsHFSelectedIndicesChanged());
    },
    UpdateHFSelectAllCheckState: function () {
        var listBox = this.GetHeaderFilterListBox();
        var selectedItemCount = listBox.GetSelectedIndices().length;
        var checkState = ASPxClientCheckBoxCheckState.Indeterminate;
        if (selectedItemCount == 0)
            checkState = ASPxClientCheckBoxCheckState.Unchecked;
        else if (selectedItemCount == listBox.GetItemCount())
            checkState = ASPxClientCheckBoxCheckState.Checked;
        this.GetHeaderFilterSelectAllCheckBox().SetCheckState(checkState);
    },
    OnHFSelectAllCheckedChanged: function (checkBox) {
        var listBox = this.GetHeaderFilterListBox();
        if (checkBox.GetChecked())
            listBox.SelectAll();
        else
            listBox.UnselectAll();
        this.SetHFOkButtonEnabled(this.IsHFSelectedIndicesChanged());
    },
    IsHFSelectedIndicesChanged: function () {
        var listBox = this.GetHeaderFilterListBox();
        if (!listBox) return;
        var indices = listBox.GetSelectedIndices();
        var savedIndices = listBox.HFSavedSelectedIndices;
        if (indices.length != savedIndices.length)
            return true;
        for (var i = 0; i < indices.length; i++) {
            if (_aspxArrayBinarySearch(savedIndices, indices[i]) < 0)
                return true;
        }
        return false;
    },
    CheckPendingEvents: function () {
        if (this.pendingEvents.length < 1)
            return;
        for (var i = 0; i < this.pendingEvents.length; i++)
            this.ScheduleRaisingEvent(this.pendingEvents[i]);
        this.pendingEvents.length = 0;
    },
    ScheduleRaisingEvent: function (eventName) {
        window.setTimeout(function () { this[eventName](); } .aspxBind(this), 0);
    },
    CreateInternalCheckBoxCollection: function () {
        if (!this.internalCheckBoxCollection)
            this.internalCheckBoxCollection = new ASPxCheckBoxInternalCollection(this.checkBoxImageProperties);
        else
            this.internalCheckBoxCollection.SetImageProperties(this.checkBoxImageProperties);
        this.CompleteInternalCheckBoxCollection();
    },
    CompleteInternalCheckBoxCollection: function () {
        if (!this.IsLastCallbackProcessedAsEndless())
            this.internalCheckBoxCollection.Clear();
        for (var i = 0; i < this.pageRowCount; i++) {
            var index = i + this.visibleStartIndex;
            var icbInputElement = this.GetDataRowSelBtn(index);
            if (icbInputElement) {
                var enabled = !this.IsCheckBoxDisabled(icbInputElement);
                this.AddInternalCheckBoxToCollection(icbInputElement, index, enabled);
            }
        }
    },
    IsCheckBoxDisabled: function (icbInputElement) {
        var icbMainElement = ASPxCheckableElementHelper.Instance.GetICBMainElementByInput(icbInputElement);
        return icbMainElement.className.indexOf("dxgv_cd") != -1;
    },
    AddInternalCheckBoxToCollection: function (icbInputElement, visibleIndex, enabled) {
        var internalCheckBox = null;
        if (this.IsLastCallbackProcessedAsEndless())
            internalCheckBox = this.internalCheckBoxCollection.Get(icbInputElement.id);
        if (!internalCheckBox)
            internalCheckBox = this.internalCheckBoxCollection.Add(icbInputElement.id, icbInputElement);
        internalCheckBox.CreateFocusDecoration(this.icbFocusedStyle);
        internalCheckBox.SetEnabled(enabled && this.GetEnabled());
        internalCheckBox.readOnly = this.readOnly;
        var grid = this;
        internalCheckBox.CheckedChanged.AddHandler(
   function (s, e) {
       var rowCheckBox = grid.GetDataRowSelBtn(visibleIndex);
       if (grid.allowSelectSingleRowOnly)
           grid._selectAllSelBtn(false, rowCheckBox.id);
       if (!grid.RaiseInternalCheckBoxClick(visibleIndex)) {
           grid.ScheduleCommand(function () { grid.SelectRow(visibleIndex, s.GetChecked()); }, true);
           grid.mainTableClickCore(e, true);
       }
   }
  );
    },
    AdjustControlCore: function () {
        ASPxClientControl.prototype.AdjustControlCore.call(this);
        this.UpdateScrollableControls();
        this.UpdateIndentCellWidths();
        this.ValidateColumnWidths();
        this.ApplyPostBackSyncData();
        this.AdjustPagerControls();
    },
    GetChildElementById: function (childName) {
        if (!this.childrenCache)
            this.childrenCache = {};
        if (!_aspxIsExistsElement(this.childrenCache[childName]))
            this.childrenCache[childName] = _aspxGetElementById(this.name + "_" + childName);
        return this.childrenCache[childName];
    },
    SerializeCallbackArgs: function (array) {
        if (!_aspxIsExists(array) || array.constructor != Array || array.length == 0)
            return "";
        var sb = [];
        for (var i = 0; i < array.length; i++) {
            var item = array[i].toString();
            sb.push(item.length);
            sb.push('|');
            sb.push(item);
        }
        return sb.join("");
    },
    gridCallBack: function (args) {
        this.OnBeforeCallbackOrPostBack();
        var serializedArgs = this.SerializeCallbackArgs(args);
        if (!this.callBack || !this.callBacksEnabled) {
            this.lockFilter = true;
            this.postbackRequestCount++;
            this.SendPostBack(serializedArgs);
        } else {
            var command = this.GetCorrectedCommand(args);
            this.OnBeforeCallback(command);
            var preparedArgs = this.prepareCallbackArgs(serializedArgs, this.GetGridTD());
            this.lockFilter = true;
            this.userChangedSelection = false;
            this.CreateCallback(preparedArgs, command);
        }
    },
    GetCorrectedCommand: function (args) {
        if (args.length == 0)
            return "";
        var command = args[0];
        if (args.length > 1 && command == this.CommandId.ColumnMove) {
            if (args[args.length - 1])
                command = this.CommandId.UnGroup;
            if (args[args.length - 2])
                command = this.CommandId.Group;
        }
        return command;
    },
    FuncGetCallBackIndex: function (onCallBack) {
        for (var i = 0; i < this.funcCallbacks.length; i++) {
            if (this.funcCallbacks[i] == null) {
                this.funcCallbacks[i] = onCallBack;
                return i;
            }
        }
        this.funcCallbacks.push(onCallBack);
        return this.funcCallbacks.length - 1;
    },
    GetFuncCallBack: function (index) {
        if (index < 0 || index >= this.funcCallbacks.length) return null;
        var result = this.funcCallbacks[index];
        this.funcCallbacks[index] = null;
        return result;
    },
    gridFuncCallBack: function (args, onCallBack) {
        var serializedArgs = this.SerializeCallbackArgs(args);
        var callbackArgs = this.formatCallbackArg("FB", this.FuncGetCallBackIndex(onCallBack).toString()) +
   this.prepareCallbackArgs(serializedArgs, null);
        this.CreateCallback(callbackArgs, "FUNCTION");
    },
    prepareCallbackArgs: function (serializedArgs, rootTD) {
        var preparedArgs =
   this.formatCallbackArg("EV", this.GetEditorValues(rootTD)) +
   this.formatCallbackArg("SR", this.GetSelectedState()) +
   this.formatCallbackArg("KV", this.GetKeyValuesInput()) +
   this.formatCallbackArg("FR", this.GetFocusedRowInput()) +
   this.formatCallbackArg("CR", this.GetColResizedInput()) +
   this.formatCallbackArg("GB", serializedArgs);
        return preparedArgs;
    },
    formatCallbackArg: function (prefix, arg) {
        if (arg == null) return "";
        if (!_aspxIsExists(arg.length) && _aspxIsExists(arg.value)) {
            arg = arg.value;
        }
        if (arg == null || arg == "") return "";
        return prefix + "|" + arg.length + ';' + arg + ';';
    },
    OnCallback: function (result) {
        this.HideFilterControlPopup();
        var isFuncCallback = result.indexOf("FB|") == 0;
        this.afterCallbackRequired = !isFuncCallback;
        if (isFuncCallback) {
            this.OnFunctionalCallback(result);
            return;
        }
        var helper = this.GetEndlessPagingHelper();
        if (result.indexOf("EP|") == 0 && helper) {
            helper.OnCallback(result);
        } else {
            var rootTD = this.GetGridTD();
            if (rootTD)
                _aspxSetInnerHtml(rootTD, result);
        }
    },
    OnFunctionalCallback: function (result) {
        this.PreventCallbackAnimation();
        var result = this.ParseFuncCallbackResult(result.substr(3));
        if (!result) return;
        if (this.IsHeaderFilterFuncCallback(result.callback))
            this.OnFuncCallback(result);
        else
            window.setTimeout(function () { this.OnFuncCallback(result); } .aspxBind(this), 0);
    },
    OnCallbackFinalized: function () {
        if (this.afterCallbackRequired)
            this.OnAfterCallback();
    },
    IsHeaderFilterFuncCallback: function (callback) {
        return callback === this.onFilterPopupCallback;
    },
    ParseFuncCallbackResult: function (result) {
        var pos = result.indexOf("|");
        if (pos < 0) return;
        var index = parseInt(result.substr(0, pos), 10);
        var onCallback = this.GetFuncCallBack(index);
        if (onCallback == null) return;
        result = result.substr(pos + 1);
        return { callback: onCallback, params: result };
    },
    OnFuncCallback: function (result) {
        if (result && result.callback)
            result.callback(eval(result.params));
    },
    OnCallbackError: function (result, data) {
        this.showingError = result;
        this.errorData = data;
        if (this.GetGridTD())
            this.afterCallbackRequired = true;
    },
    ShowError: function (errorText, errorData) {
        var batchEditHelper = this.GetBatchEditHelper();
        if (batchEditHelper && batchEditHelper.ShowError(errorText, errorData))
            return;
        var displayIn = this;
        var popupForm = this.GetPopupEditForm();
        if (popupForm) {
            displayIn = popupForm;
            if (!popupForm.IsVisible()) {
                popupForm.Show();
            }
        }
        var errorRow = this.GetEditingErrorRow(displayIn);
        if (!errorRow) {
            var editRow = this.GetEditingRow(displayIn);
            if (editRow) {
                errorRow = this.CreateEditingErrorRow();
                errorRow.id = editRow.id.replace("DXEditingRow", "DXEditingErrorRow");
                _aspxInsertElementAfter(errorRow, editRow);
            }
        }
        if (errorRow)
            errorRow.cells[errorRow.cells.length - 1].innerHTML = errorText;
        else
            alert(errorText);
    },
    CreateEditingErrorRow: function () {
        var row = this.GetStyleTable().rows[1].cloneNode(true);
        for (var i = 0; i < row.cells.length; i++) {
            var cell = row.cells[i];
            var colSpan = parseInt(_aspxGetAttribute(cell, "data-colSpan"));
            if (!isNaN(colSpan))
                cell.colSpan = colSpan;
        }
        return row;
    },
    OnBeforeCallbackOrPostBack: function () {
        this.HidePopupEditForm();
        ASPxClientGridView.SaveActiveElementSettings(this);
        var resizingHelper = this.GetResizingHelper();
        if (resizingHelper)
            resizingHelper.SaveControlDimensions(true);
    },
    OnBeforeCallback: function (command) {
        this.keyboardLock = true;
        var endlessPagingHelper = this.GetEndlessPagingHelper();
        if (endlessPagingHelper)
            endlessPagingHelper.OnBeforeCallback(command);
        this.ShowLoadingElements();
        this.SaveCallbackSettings();
        this.RemoveSelectStartHandler();
        var popup = this.GetHeaderFilterPopup();
        if (popup)
            popup.RemoveAllPopupElements();
        var scrollHelper = this.GetScrollHelper();
        if (scrollHelper && this.isVirtualScrolling)
            scrollHelper.ClearVirtualScrollTimer();
    },
    OnAfterCallback: function () {
        var checkBoxCollectionReinitializeRequired = true;
        if (this.showingError) {
            checkBoxCollectionReinitializeRequired = false;
            this.ShowError(this.showingError, this.errorData);
            this.showingError = null;
            this.errorData = null;
        }
        this.childrenCache = {};
        this.pendingCommands = [];
        this.lockFilter = true;
        try {
            this.EnsureRowKeys();
            this.headerMatrix && this.headerMatrix.Invalidate();
            this.SetHeadersClientEvents();
            this.RestoreCallbackSettings();
            this.AddSelectStartHandler();
            this.EnsureRowHotTrackItems();
            if (this.kbdHelper && !this.useEndlessPaging)
                this.kbdHelper.EnsureFocusedRowVisible();
        }
        finally {
            window.setTimeout(function () { this.lockFilter = false; } .aspxBind(this), 0);
            this.keyboardLock = false;
        }
        if (this.checkBoxImageProperties && checkBoxCollectionReinitializeRequired)
            this.CreateInternalCheckBoxCollection();
        this.CheckPendingEvents();
        this.InitializeHeaderFilterPopup();
        var endlessPagingHelper = this.GetEndlessPagingHelper();
        if (endlessPagingHelper)
            endlessPagingHelper.OnAfterCallback();
        var batchEditHelper = this.GetBatchEditHelper();
        if (batchEditHelper)
            batchEditHelper.OnAfterCallback();
        this.CheckEndlessPagingLoadNextPage();
        window.setTimeout(function () { this.SaveAutoFilterColumnEditorState(); } .aspxBind(this), 0);
    },
    SaveAutoFilterColumnEditorState: function () {
        for (var i = 0; i < this.columns.length; i++) {
            var columnIndex = this.columns[i].index;
            this.filterEditorState[columnIndex] = this.GetAutoFilterEditorValue(columnIndex);
        }
    },
    GetAutoFilterEditorValue: function (columnIndex) {
        var editor = this.GetAutoFilterEditor(columnIndex);
        if (editor && editor.GetMainElement())
            return editor.GetValueString();
        return null;
    },
    ClearAutoFilterState: function () {
        this.filterEditorState = [];
    },
    SaveCallbackSettings: function () {
        var custWindow = this.GetCustomizationWindow();
        if (custWindow != null) {
            var custWindowElement = custWindow.GetWindowElement(-1);
            if (custWindowElement) {
                this.custwindowLeft = _aspxGetAbsoluteX(custWindowElement);
                this.custwindowTop = _aspxGetAbsoluteY(custWindowElement);
                this.custwindowVisible = custWindow.IsVisible();
            }
        } else {
            this.custwindowVisible = null;
        }
        var helper = this.GetFixedColumnsHelper();
        if (helper != null) helper.SaveCallbackSettings();
    },
    RestoreCallbackSettings: function () {
        var custWindow = this.GetCustomizationWindow();
        if (custWindow != null && this.custwindowVisible != null) {
            if (this.custwindowVisible) {
                custWindow.enableAnimation = false;
                custWindow.ShowAtPos(this.custwindowLeft, this.custwindowTop);
            }
        }
        var resizingHelper = this.GetResizingHelper();
        if (resizingHelper)
            resizingHelper.ResetStretchedColumnWidth();
        this.UpdateScrollableControls();
        this.UpdateIndentCellWidths();
        if (resizingHelper)
            resizingHelper.ValidateColumnWidths();
        this.ApplyPostBackSyncData();
        this.ResetControlAdjustment();
        var helper = this.GetFixedColumnsHelper();
        if (helper != null) helper.RestoreCallbackSettings();
        ASPxClientGridView.RestoreActiveElementSettings(this);
    },
    HidePopupEditForm: function () {
        var popup = this.GetPopupEditForm();
        if (popup != null) {
            popup.Hide();
        }
    },
    _isRowSelected: function (visibleIndex) {
        if (!this.GetDataRow(visibleIndex)) return false;
        var index = this._getRowIndexOnPage(visibleIndex);
        var selInput = this.GetSelectionInput();
        if (!selInput) return false;
        return this._isTrueInCheckList(selInput.value, index);
    },
    _isTrueInCheckList: function (checkList, index) {
        if (index < 0 || index >= checkList.length) return false;
        return checkList.charAt(index) == "T";
    },
    _getSelectedRowCount: function () {
        var res = this.selectedWithoutPageRowCount;
        var selInput = this.GetSelectionInput();
        if (!selInput) return res;
        var checkList = selInput.value;
        var selCount = 0;
        for (var i = 0; i < checkList.length; i++) {
            if (checkList.charAt(i) == "T") selCount++;
        }
        return res + selCount;
    },
    _selectAllRowsOnPage: function (checked) {
        if (checked && this.allowSelectSingleRowOnly) {
            this.SelectRow(0, true);
            return;
        }
        var selInput = this.GetSelectionInput();
        if (!selInput) return;
        this._selectAllSelBtn(checked);
        var prevSelectedRowCount = 0;
        var isTrueInCheckList = false;
        for (var i = 0; i < this.pageRowCount; i++) {
            isTrueInCheckList = this._isTrueInCheckList(selInput.value, i);
            if (isTrueInCheckList) prevSelectedRowCount++;
            if (isTrueInCheckList != checked) {
                this.ChangeRowStyle(i + this.visibleStartIndex, checked ? 0 : 4);
            }
        }
        if (prevSelectedRowCount == 0 && !checked) return;
        var selValue = "";
        if (checked) {
            for (var i = 0; i < this.pageRowCount; i++)
                selValue += this.IsDataRow(this.visibleStartIndex + i) ? "T" : "F";
        }
        if (selValue != selInput.value) {
            this.userChangedSelection = true;
            if (selValue == "") selValue = "U";
            selInput.value = selValue;
        }
        this.DoSelectionChanged(-1, checked, true);
    },
    DeleteGridRow: function (visibleIndex) {
        if (this.confirmDelete != "" && !confirm(this.confirmDelete)) return;
        this.DeleteRow(visibleIndex);
    },
    _selectAllSelBtn: function (checked, exceptInternalCheckBoxName) {
        if (this.checkBoxImageProperties) {
            for (var internalCheckBoxName in this.internalCheckBoxCollection.checkBoxes) {
                if (exceptInternalCheckBoxName !== internalCheckBoxName && this.internalCheckBoxCollection.checkBoxes[internalCheckBoxName].SetValue)
                    this.internalCheckBoxCollection.checkBoxes[internalCheckBoxName].SetValue(checked ? ASPxClientCheckBoxInputKey.Checked : ASPxClientCheckBoxInputKey.Unchecked);
            }
        }
    },
    doRowMultiSelect: function (row, rowIndex, evt) {
        var ctrlKey = evt.ctrlKey || evt.metaKey,
   shiftKey = evt.shiftKey;
        if ((ctrlKey || shiftKey) && (!__aspxIE || __aspxBrowserVersion > 8))
            _aspxClearSelection();
        if (this.allowSelectSingleRowOnly)
            shiftKey = false;
        if (!ctrlKey && !shiftKey) {
            this._selectAllRowsOnPage(false);
            this.SelectRow(rowIndex, true);
            this.lastMultiSelectIndex = rowIndex;
        } else {
            if (ctrlKey) {
                this.SelectRow(rowIndex, !this._isRowSelected(rowIndex));
                this.lastMultiSelectIndex = rowIndex;
            } else {
                var startIndex = rowIndex > this.lastMultiSelectIndex ? this.lastMultiSelectIndex + 1 : rowIndex;
                var endIndex = rowIndex > this.lastMultiSelectIndex ? rowIndex : this.lastMultiSelectIndex - 1;
                for (var i = this.visibleStartIndex; i < this.pageRowCount + this.visibleStartIndex; i++) {
                    if (i == this.lastMultiSelectIndex)
                        continue;
                    this.SelectRow(i, i >= startIndex && i <= endIndex);
                }
            }
        }
        this.UpdatePostBackSyncInput();
    },
    AddSelectStartHandler: function () {
        if (!this.allowSelectByRowClick || !__aspxIE || __aspxBrowserVersion > 8)
            return;
        _aspxAttachEventToElement(this.GetMainTable(), "selectstart", ASPxClientGridView.SelectStartHandler);
    },
    RemoveSelectStartHandler: function () {
        if (!this.allowSelectByRowClick || !__aspxIE)
            return;
        _aspxDetachEventFromElement(this.GetMainTable(), "selectstart", ASPxClientGridView.SelectStartHandler);
    },
    SelectRow: function (visibleIndex, checked, fromCheckBox) {
        if (!this.IsDataRow(visibleIndex)) return;
        if (this._isRowSelected(visibleIndex) == checked) return;
        if (_aspxIsExists(fromCheckBox)) fromCheckBox = false;
        var index = this._getRowIndexOnPage(visibleIndex);
        if (index < 0) return;
        if (checked && this.allowSelectSingleRowOnly)
            this._selectAllRowsOnPage(false);
        var selInput = this.GetSelectionInput();
        if (selInput) {
            this.userChangedSelection = true;
            var checkList = selInput.value;
            if (index >= checkList.length) {
                if (!checked) return;
                for (var i = checkList.length; i <= index; i++)
                    checkList += "F";
            }
            checkList = checkList.substr(0, index) + (checked ? "T" : "F") + checkList.substr(index + 1, checkList.length - index - 1);
            if (checkList.indexOf("T") < 0) checkList = "U";
            selInput.value = checkList;
        }
        var checkBox = this.GetDataRowSelBtn(visibleIndex);
        if (checkBox) {
            var internalCheckBox = this.internalCheckBoxCollection.Get(checkBox.id);
            internalCheckBox.SetValue(checked ? ASPxClientCheckBoxInputKey.Checked : ASPxClientCheckBoxInputKey.Unchecked);
        }
        this.ChangeRowStyle(visibleIndex, checked ? 0 : 4);
        this.DoSelectionChanged(visibleIndex, checked, false);
    },
    ScheduleUserCommand: function (args, postponed, e) {
        if (!args || args.length == 0)
            return;
        var commandName = args[0];
        var rowCommands = ["CustomButton", "Select", "StartEdit", "Delete"];
        if ((this.useEndlessPaging || this.allowBatchEditing) && _aspxArrayIndexOf(rowCommands, commandName) > -1)
            args[args.length - 1] = this.FindParentRowVisibleIndex(_aspxGetEventSource(e), true);
        this.ScheduleCommand(args, postponed);
    },
    FindParentRowVisibleIndex: function (element, dataAndGroupOnly) {
        var regEx = this.GetRowVisibleIndexRegExp(dataAndGroupOnly);
        while (element) {
            if (element.tagName === "BODY" || element.id == this.name)
                return -1;
            var matches = regEx.exec(element.id);
            if (matches && matches.length == 3)
                return parseInt(matches[2]);
            element = element.parentNode;
        }
        return -1;
    },
    GetRowVisibleIndexRegExp: function (dataAndGroupOnly) {
        var idParts = [this.DataRowID, this.GroupRowID + "(?:Exp)?"];
        if (!dataAndGroupOnly) {
            idParts.push(this.PreviewRowID);
            idParts.push(this.DetailRowID);
        }
        return new RegExp("^(" + this.name + "_(?:" + idParts.join("|") + "))(-?\\d+)$");
    },
    ScheduleCommand: function (args, postponed) {
        if (postponed)
            this.pendingCommands.push(args);
        else
            this.PerformScheduledCommand(args);
    },
    PerformScheduledCommand: function (args) {
        if (_aspxIsFunction(args)) {
            args();
            return;
        }
        if (args && args.length > 0) {
            var commandName = "UA_" + args[0];
            if (this[commandName])
                this[commandName].apply(this, args.slice(1));
        }
    },
    PerformPendingCommands: function () {
        var commandCount = this.pendingCommands.length;
        for (var i = 0; i < commandCount; i++)
            this.PerformScheduledCommand(this.pendingCommands.pop());
    },
    getRowByHtmlEvent: function (evt) {
        var row = this.getRowByHtmlEventCore(evt, this.DataRowID);
        if (!row)
            row = this.getRowByHtmlEventCore(evt, this.GroupRowID);
        return row;
    },
    getRowByHtmlEventCore: function (evt, partialID) {
        var row = _aspxGetParentByPartialId(_aspxGetEventSource(evt), partialID);
        if (row && row.id.indexOf(this.name) > -1)
            return row;
        return null;
    },
    NeedProcessTableClick: function (evt) {
        var headerTable = _aspxGetParentByPartialId(_aspxGetEventSource(evt), this.HeaderTableID);
        if (headerTable) {
            var headerTableID = headerTable.id;
            var gridID = headerTableID.substr(0, headerTableID.length - this.HeaderTableID.length - 1);
            return this.name == gridID;
        }
        var mainTable = _aspxGetParentByPartialId(_aspxGetEventSource(evt), this.MainTableID);
        if (mainTable) {
            var mainTableID = mainTable.id;
            var gridID = mainTableID.substr(0, mainTableID.length - this.MainTableID.length - 1);
            return this.name == gridID;
        }
        return false;
    },
    mainTableClick: function (evt) { this.mainTableClickCore(evt); },
    mainTableDblClick: function (evt) {
        var row = this.getRowByHtmlEvent(evt);
        if (row) {
            var batchEditHelper = this.GetBatchEditHelper();
            if (batchEditHelper)
                batchEditHelper.ProcessTableClick(row, evt, true);
            this.RaiseRowDblClick(this.getRowIndex(row.id), evt);
        }
    },
    mainTableClickCore: function (evt, fromCheckBox) {
        if (this.kbdHelper)
            this.kbdHelper.HandleClick(evt);
        var sendNotificationCallack = true;
        this.mainTableClickData.processing = true;
        try {
            this.ProcessTableClick(evt, fromCheckBox);
            var savedRequestCount = this.requestCount + this.postbackRequestCount;
            this.PerformPendingCommands();
            var currentRequestCount = this.requestCount + this.postbackRequestCount;
            sendNotificationCallack = currentRequestCount == savedRequestCount;
        } finally {
            if (sendNotificationCallack)
                if (this.mainTableClickData.focusChanged && !this.mainTableClickData.selectionChanged) {
                    this.gridCallBack(["FOCUSEDROW"]);
                } else if (this.mainTableClickData.selectionChanged) {
                    this.gridCallBack(["SELECTION"]);
                }
            this.mainTableClickData.processing = false;
            this.mainTableClickData.focusChanged = false;
            this.mainTableClickData.selectionChanged = false;
        }
    },
    ProcessTableClick: function (evt, fromCheckBox) {
        var source = _aspxGetEventSource(evt);
        var row = this.getRowByHtmlEvent(evt);
        if (row) {
            var rowIndex = this.getRowIndex(row.id);
            var isCommandColumnItem = source && source.className && source.className.indexOf("dxgv__cci") > -1;
            if (!isCommandColumnItem && !fromCheckBox) {
                var batchEditHelper = this.GetBatchEditHelper();
                if (batchEditHelper && batchEditHelper.ProcessTableClick(row, evt))
                    return;
                if (this.RaiseRowClick(rowIndex, evt))
                    return;
            }
            if (this.allowFocusedRow) {
                this.focusRow(row);
            }
            if (this.allowSelectByRowClick) {
                var isActionElement = source && source.tagName.match(/input|select|textarea|^a$/i);
                if (!isActionElement && !isCommandColumnItem && !fromCheckBox) {
                    if (this.lookupBehavior) {
                        var checked = this.allowSelectSingleRowOnly || !this._isRowSelected(rowIndex);
                        this.SelectRow(rowIndex, checked);
                    } else
                        this.doRowMultiSelect(row, rowIndex, evt);
                }
            } else {
                this.lastMultiSelectIndex = rowIndex;
            }
        }
    },
    focusRow: function (row) {
        if (!row) return;
        var index = this.getRowIndex(row.id);
        this._setFocusedRowIndex(index);
    },
    _setFocusedRowIndex: function (visibleIndex) {
        if (visibleIndex < 0)
            visibleIndex = -1;
        if (!this.allowFocusedRow || visibleIndex == this.focusedRowIndex)
            return;
        var oldIndex = this.focusedRowIndex;
        this.focusedRowIndex = visibleIndex;
        this.ChangeFocusedRowStyle(oldIndex, false);
        this.ChangeFocusedRowStyle(this.focusedRowIndex, true);
        this._setFocusedRowInputValue();
        if (this.callbackOnFocusedRowChanged) {
            this.UpdatePostBackSyncInput(true);
            if (!this.mainTableClickData.processing) {
                this.gridCallBack(["FOCUSEDROW"]);
            } else {
                this.mainTableClickData.focusChanged = true;
            }
            return;
        }
        this.RaiseFocusedRowChanged();
    },
    ChangeFocusedRowStyle: function (visibleIndex, focused) {
        var rowStyle = -1;
        var row = this.GetRow(visibleIndex);
        if (focused && row)
            rowStyle = this._isGroupRow(row) ? 2 : 1;
        if (!focused)
            rowStyle = this._isRowSelected(visibleIndex) ? 0 : 4;
        if (rowStyle > -1)
            this.ChangeRowStyle(visibleIndex, rowStyle);
    },
    _setFocusedRowInputValue: function () {
        if (this.GetFocusedRowInput() != null) {
            this.GetFocusedRowInput().value = this.focusedRowIndex;
        }
    },
    _getFocusedRowIndex: function () {
        if (!this.allowFocusedRow) return -1;
        return this.focusedRowIndex;
    },
    getRowIndex: function (rowId) {
        if (this.IsHeaderRowID(rowId))
            return -1;
        return this.tryGetNumberFromEndOfString(rowId).value;
    },
    tryGetNumberFromEndOfString: function (str) {
        var value = -1;
        var success = false;
        var n = str.length - 1;
        while (!isNaN(parseInt(str.substr(n), 10))) {
            value = parseInt(str.substr(n), 10);
            success = true;
            n--;
        }
        return { success: success, value: value };
    },
    GetSelectedState: function () {
        if (!this.userChangedSelection) return null;
        var input = this.GetSelectionInput();
        if (!input) return null;
        return input.value;
    },
    ChangeRowStyle: function (visibleIndex, rowStyle) {
        if (this._getFocusedRowIndex() == visibleIndex && rowStyle != 1 && rowStyle != 2) return;
        var row = this.GetRow(visibleIndex);
        if (!row) return;
        if (rowStyle == 0 && this._isGroupRow(row)) return;
        var index = this._getRowIndexOnPage(visibleIndex);
        var styleRow = this._getStyleRow(index, rowStyle);
        if (!styleRow) return;
        row.className = styleRow.className;
        row.style.cssText = styleRow.style.cssText;
    },
    _getRowIndexOnPage: function (visibleIndex) {
        return visibleIndex - this.visibleStartIndex;
    },
    getColumnIndex: function (colId) {
        if (this.IsEmptyHeaderID(colId))
            return -1;
        var index = this.tryGetNumberFromEndOfString(colId).value;
        var postfix = "col" + index;
        if (colId.lastIndexOf(postfix) == colId.length - postfix.length)
            return index;
        return -1;
    },
    getColumnObject: function (colId) {
        var index = this.getColumnIndex(colId);
        return index > -1 ? this._getColumn(index) : null;
    },
    _getColumnIndexByColumnArgs: function (column) {
        column = this._getColumnObjectByArg(column);
        if (!column) return null;
        return column.index;
    },
    _getColumnObjectByArg: function (arg) {
        if (!_aspxIsExists(arg)) return null;
        if (typeof (arg) == "number") return this._getColumn(arg);
        if (_aspxIsExists(arg.index)) return arg;
        var column = this._getColumnById(arg);
        if (column) return column;
        return this._getColumnByField(arg);
    },
    _getColumnsCount: function () { return this.columns.length; },
    _getColumn: function (index) {
        if (index < 0 || index >= this.columns.length) return null;
        return this.columns[index];
    },
    _getColumnById: function (id) {
        if (!_aspxIsExists(id)) return null;
        for (var i = 0; i < this.columns.length; i++) {
            if (this.columns[i].id == id) return this.columns[i];
        }
        return null;
    },
    _getColumnByField: function (fieldName) {
        if (!_aspxIsExists(fieldName)) return null;
        for (var i = 0; i < this.columns.length; i++) {
            if (this.columns[i].fieldName == fieldName) return this.columns[i];
        }
        return null;
    },
    _getStyleRow: function (index, rowStyle) {
        var styleTable = this.GetStyleTable();
        if (!styleTable) return null;
        if (rowStyle < 4) return styleTable.rows[rowStyle + 2];
        return styleTable.rows[6 + index];
    },
    DoSelectionChanged: function (index, isSelected, isSelectAllOnPage) {
        if (this.callbackOnSelectionChanged) {
            this.UpdatePostBackSyncInput(true);
            if (!this.mainTableClickData.processing) {
                this.gridCallBack(["SELECTION"]);
            } else {
                this.mainTableClickData.selectionChanged = true;
            }
            return;
        }
        this.RaiseSelectionChanged(index, isSelected, isSelectAllOnPage, false);
    },
    CommandCustomButton: function (id, index) {
        var processOnServer = true;
        if (!this.CustomButtonClick.IsEmpty()) {
            var e = new ASPxClientGridViewCustomButtonEventArgs(index, id);
            this.CustomButtonClick.FireEvent(this, e);
            processOnServer = e.processOnServer;
        }
        if (processOnServer)
            this.gridCallBack(["CUSTOMBUTTON", id, index]);
    },
    HeaderMouseDown: function (element, e) {
        if (!_aspxGetIsLeftButtonPressed(e))
            return;
        var source = _aspxGetEventSource(e);
        if (_aspxElementCssClassContains(source, this.HeaderFilterButtonClassName))
            return;
        if (this.TryStartColumnResizing(e, element))
            return;
        var column = this._getColumnObjectByArg(this.getColumnIndex(element.id));
        var dragCanceled = this.RaiseColumnStartDragging(column);
        var canDrag = !dragCanceled && this.canDragColumn(element) && source.tagName != "IMG";
        if (!this.dragHelper)
            this.dragHelper = new ASPxClientGridViewDragHelper(this);
        var drag = this.dragHelper.CreateDrag(e, element, canDrag);
        if (!canDrag && (e.shiftKey || e.ctrlKey))
            drag.clearSelectionOnce = true;
        this.dragHelper.CreateTargets(drag, e);
    },
    TryStartColumnResizing: function (e, headerCell) {
        var helper = this.GetResizingHelper();
        if (!helper || !helper.CanStartResizing(e, headerCell))
            return false;
        var column = this.columns[helper.GetResizingColumnIndex(e, headerCell)];
        if (this.RaiseColumnResizing(column))
            return false;
        helper.StartResizing(column.index);
        return true;
    },
    OnParentRowMouseEnter: function (element) {
        if (this.GetParentRowsWindow() == null) return;
        if (this.GetParentRowsWindow().IsWindowVisible()) return;
        this.ParentRowsTimerId = _aspxSetTimeout("aspxGVParentRowsTimer(\"" + this.name + "\", \"" + element.id + "\");", 500);
    },
    OnParentRowMouseLeave: function (evt) {
        _aspxClearTimer(this.ParentRowsTimerId);
        if (this.GetParentRowsWindow() == null) return;
        if (evt && evt.toElement) {
            if (_aspxGetParentByPartialId(evt.toElement, this.GetParentRowsWindow().name) != null)
                return;
        }
        this.HideParentRows();
    },
    ShowParentRows: function (element) {
        this.ParentRowsTimerId = null;
        if (this.GetParentRowsWindow() != null) {
            this.GetParentRowsWindow().ShowAtElement(element);
        }
    },
    onFilterPopupCallback: function (values) {
        var grid = aspxGetControlCollection().Get(values[0]);
        if (grid != null)
            grid.GetHeaderFilterPopup().SetContentHtml(values[1], grid.enableCallbackAnimation);
    },
    HideParentRows: function () {
        this.ParentRowsTimerId = null;
        if (this.GetParentRowsWindow() != null) {
            this.GetParentRowsWindow().Hide();
        }
    },
    canSortByColumn: function (headerElement) {
        return this.getColumnObject(headerElement.id).allowSort;
    },
    canGroupByColumn: function (headerElement) {
        return this.getColumnObject(headerElement.id).allowGroup;
    },
    canDragColumn: function (headerElement) {
        return this.getColumnObject(headerElement.id).allowDrag;
    },
    doPagerOnClick: function (id) {
        if (!_aspxIsExists(id)) return;
        this.AssignSlideAnimationDirectionByPagerArgument(id, this.pageIndex);
        if (__aspxIE && this.kbdHelper)
            this.kbdHelper.Focus();
        var scrollHelper = this.GetScrollHelper();
        if (scrollHelper)
            scrollHelper.ResetScrollTop();
        this.gridCallBack([this.CommandId.PagerOnClick, id]);
    },
    CanHandleGesture: function (evt) {
        var source = _aspxGetEventSource(evt);
        var table = this.GetMainTable();
        if (!table) return false;
        if (_aspxGetIsParent(table, source))
            return !this.IsHeaderChild(source);
        if (table.parentNode.tagName == "DIV" && _aspxGetIsParent(table.parentNode, source))
            return __aspxTouchUI || evt.offsetX < table.parentNode.clientWidth;
        return false;
    },
    AllowStartGesture: function () {
        return ASPxClientControl.prototype.AllowStartGesture.call(this) &&
   (this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, 1) || this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, -1));
    },
    AllowExecuteGesture: function (value) {
        return this.AllowExecutePagerGesture(this.pageIndex, this.pageCount, value);
    },
    ExecuteGesture: function (value, count) {
        this.ExecutePagerGesture(this.pageIndex, this.pageCount, value, count, function (arg) { this.doPagerOnClick(arg); } .aspxBind(this));
    },
    OnColumnFilterInputChanged: function (editor) {
        this.ApplyColumnAutoFilterCore(editor);
    },
    OnColumnFilterInputSpecKeyPress: function (editor, e) {
        if (e.htmlEvent)
            e = e.htmlEvent;
        if (e.keyCode == ASPxKey.Tab)
            return true;
        if (e.keyCode == ASPxKey.Enter) {
            _aspxPreventEventAndBubble(e);
            editor.Validate();
            if (this.allowMultiColumnAutoFilter)
                this.ApplyMultiColumnAutoFilter(editor);
            else
                this.ApplyColumnAutoFilterCore(editor);
            return true;
        }
        if (e.keyCode == ASPxKey.Delete && e.ctrlKey) {
            _aspxPreventEventAndBubble(e);
            editor.SetValue(null);
            if (!this.allowMultiColumnAutoFilter)
                this.ApplyColumnAutoFilterCore(editor);
            return true;
        }
        return false;
    },
    OnColumnFilterInputKeyPress: function (editor, e) {
        if (this.OnColumnFilterInputSpecKeyPress(editor, e))
            return;
        if (e.htmlEvent) e = e.htmlEvent;
        this.ClearAutoFilterInputTimer();
        if (editor != this.FilterKeyPressEditor)
            this.filterKeyPressInputValue = editor.GetValueString();
        this.FilterKeyPressEditor = editor;
        this.filterKeyPressTimerId = _aspxSetTimeout("aspxGVTimer(\"" + this.name + "\");", this.autoFilterDelay);
    },
    ClearAutoFilterInputTimer: function () {
        this.filterKeyPressTimerId = _aspxClearTimer(this.filterKeyPressTimerId);
    },
    GetAutoFilterEditorInputElement: function (editor) {
        if (document.activeElement) return document.activeElement;
        if (editor.GetInputElement) return editor.GetInputElement();
        return null;
    },
    OnFilterKeyPressTick: function () {
        if (this.FilterKeyPressEditor) {
            this.ApplyColumnAutoFilterCore(this.FilterKeyPressEditor);
        }
    },
    ApplyColumnAutoFilterCore: function (editor) {
        if (this.lockFilter) return;
        this.ClearAutoFilterInputTimer();
        if (this.FilterKeyPressEditor && editor == this.FilterKeyPressEditor) {
            if (this.FilterKeyPressEditor.GetValueString() == this.filterKeyPressInputValue) return;
        }
        var column = this.getColumnIndex(editor.name);
        if (column < 0) return;
        this.SaveAutoFilterActiveElement(editor);
        this.AutoFilterByColumn(column, editor.GetValueString());
    },
    ApplyMultiColumnAutoFilter: function (editor) {
        if (this.lockFilter) return;
        this.SaveAutoFilterActiveElement(editor);
        var args = [];
        var modifiedValues = this.GetModifiedAutoFilterValues();
        for (var columnIndex in modifiedValues) {
            args.push(columnIndex);
            args.push(modifiedValues[columnIndex]);
        }
        if (args.length > 0)
            this.gridCallBack([this.CommandId.ApplyMultiColumnFilter].concat(args));
    },
    SaveAutoFilterActiveElement: function (editor) {
        if (!editor)
            return;
        if (this.getColumnIndex(editor.name) >= 0)
            this.activeElement = this.GetAutoFilterEditorInputElement(editor);
    },
    GetModifiedAutoFilterValues: function () {
        var result = {};
        for (var i = 0; i < this.columns.length; ++i) {
            var columnIndex = this.columns[i].index;
            var filterEditorValue = this.GetAutoFilterEditorValue(columnIndex);
            if (this.filterEditorState[columnIndex] !== filterEditorValue)
                result[columnIndex] = filterEditorValue == null ? "" : filterEditorValue;
        }
        return result;
    },
    FilterRowMenuButtonClick: function (columnIndex, element) {
        var menu = this.GetFilterRowMenu();
        if (!menu) return;
        var column = this._getColumn(columnIndex);
        if (!column) return;
        for (var i = menu.GetItemCount() - 1; i >= 0; i--) {
            var item = menu.GetItem(i);
            item.SetChecked(item.name.substr(0, item.name.indexOf("|")) == this.filterRowConditions[columnIndex]);
            item.SetVisible(this.GetFilterRowMenuItemVisible(item, column));
        }
        menu.ShowAtElement(element);
        this.filterRowMenuColumnIndex = columnIndex;
    },
    GetFilterRowMenuItemVisible: function (item, column) {
        if (column.filterRowTypeKind) {
            var visible = item.name.indexOf(column.filterRowTypeKind) > -1;
            if (!visible && column.showFilterMenuLikeItem)
                return item.name.indexOf("L") > -1;
            return visible;
        }
        return false;
    },
    FilterRowMenuItemClick: function (item) {
        var itemName = item.name.substr(0, item.name.indexOf("|"));
        var args = [this.filterRowMenuColumnIndex, itemName];
        if (this.allowMultiColumnAutoFilter) {
            var modifiedFilterValues = this.GetModifiedAutoFilterValues();
            modifiedFilterValues[this.filterRowMenuColumnIndex] = this.GetAutoFilterEditorValue(this.filterRowMenuColumnIndex);
            for (var columnIndex in modifiedFilterValues) {
                var modifiedValue = modifiedFilterValues[columnIndex];
                args.push(columnIndex);
                args.push(modifiedValue === null ? "" : modifiedValue);
            }
        }
        this.gridCallBack(["FILTERROWMENU"].concat(args));
    },
    ShowLoadingPanel: function () {
        var gridMainCell = this.GetGridTD();
        if (!gridMainCell)
            return;
        var endlessPagingHelper = this.GetEndlessPagingHelper();
        if (endlessPagingHelper && endlessPagingHelper.NeedShowLoadingPanelAtBottom()) {
            var container = this.GetEndlessPagingLPContainer();
            _aspxSetElementDisplay(container, true);
            this.CreateLoadingPanelWithoutBordersInsideContainer(container);
            return;
        }
        var lpContainer = this.GetLoadingPanelContainer();
        if (lpContainer)
            this.CreateLoadingPanelInline(lpContainer);
        else
            this.CreateLoadingPanelWithAbsolutePosition(gridMainCell, this.GetLoadingPanelOffsetElement(gridMainCell));
    },
    ShowLoadingDiv: function () {
        var endlessPagingHelper = this.GetEndlessPagingHelper();
        if (endlessPagingHelper && endlessPagingHelper.NeedShowLoadingPanelAtBottom())
            return;
        this.CreateLoadingDiv(this.GetGridTD());
    },
    GetCallbackAnimationElement: function () {
        var table = this.GetMainTable();
        if (table && table.parentNode && table.parentNode.tagName == "DIV")
            return table.parentNode;
        return table;
    },
    NeedPreventTouchUIMouseScrolling: function (element) {
        return this.IsHeaderChild(element);
    },
    IsHeaderChild: function (source) {
        var mainElement = this.GetMainElement();
        if (!mainElement)
            return false;
        if (!_aspxGetIsParent(mainElement, source))
            return false;
        var headerRowCount = this.GetHeaderMatrix().GetRowCount();
        for (var i = 0; i < headerRowCount; i++) {
            if (_aspxGetIsParent(this.GetHeaderRow(i), source))
                return true;
        }
        return false;
    },
    _updateEdit: function () {
        var batchEditHelper = this.GetBatchEditHelper();
        if (batchEditHelper && !batchEditHelper.CanUpdate())
            return;
        if (!batchEditHelper && !this._validateEditors())
            return;
        if (batchEditHelper)
            batchEditHelper.OnUpdate();
        this.gridCallBack(["UPDATEEDIT"]);
    },
    _validateEditors: function () {
        var editors = this._getEditors();
        var isValid = true;
        if (editors.length > 0)
            isValid &= this._validate(editors);
        if (window.ASPxClientEdit)
            isValid &= ASPxClientEdit.ValidateEditorsInContainer(this.GetEditFormTable(), this.name);
        return isValid;
    },
    _validate: function (list) {
        var isValid = true;
        var firstInvalid = null;
        var edit;
        for (var i = 0; i < list.length; i++) {
            edit = list[i];
            edit.Validate();
            isValid = edit.GetIsValid() && isValid;
            if (firstInvalid == null && edit.setFocusOnError && !edit.GetIsValid())
                firstInvalid = edit;
        }
        if (firstInvalid != null)
            firstInvalid.Focus();
        return isValid;
    },
    _getEditors: function () {
        var list = [];
        for (var i = 0; i < this.editorIDList.length; i++) {
            var editor = aspxGetControlCollection().Get(this.editorIDList[i]);
            if (editor && editor.enabled && editor.GetMainElement && _aspxIsExistsElement(editor.GetMainElement())) {
                if (!editor.Validate) continue;
                list.push(editor);
            }
        }
        return list;
    },
    GetEditorValues: function () {
        if (this.allowBatchEditing) return null;
        var list = this._getEditors();
        if (list.length == 0) return null;
        var res = list.length + ";";
        for (var i = 0; i < list.length; i++) {
            res += this.GetEditorValue(list[i]);
        }
        return res;
    },
    GetEditorValue: function (editor) {
        var value = editor.GetValueString();
        var valueLength = -1;
        if (!_aspxIsExists(value)) {
            value = "";
        } else {
            value = value.toString();
            valueLength = value.length;
        }
        return this.GetEditorIndex(editor.name) + "," + valueLength + "," + value + ";";
    },
    GetEditorIndex: function (editorId) {
        var i = editorId.lastIndexOf(this.GetEditorPrefix());
        if (i < 0) return -1;
        var result = editorId.substr(i + this.GetEditorPrefix().length);
        i = result.indexOf('_');
        return i > 0
   ? result.substr(0, i)
   : result;
    },
    GetBatchEditHelper: function () {
        if (!this.allowBatchEditing) return null;
        if (!this.batchEditHelper)
            this.batchEditHelper = new ASPxClientGridViewBatchEditHelper(this);
        return this.batchEditHelper;
    },
    GetTableHelper: function () {
        if (!this.tableHelper && typeof (ASPxClientGridViewTableHelper) != "undefined")
            this.tableHelper = new ASPxClientGridViewTableHelper(this, this.MainTableID, this.HeaderTableID, this.FooterTableID, this.horzScroll, this.vertScroll);
        return this.tableHelper;
    },
    GetScrollHelper: function () {
        if (!this.HasScrolling()) return null;
        if (!this.scrollableHelper)
            this.scrollableHelper = new ASPxClientGridViewTableScrollHelper(this.GetTableHelper());
        return this.scrollableHelper;
    },
    GetFixedColumnsHelper: function () {
        if (!this.GetFixedColumnsDiv()) return null;
        if (!this.fixedColumnsHelper)
            this.fixedColumnsHelper = new ASPxClientTableFixedColumnsHelper(this.GetTableHelper(), this.FixedColumnsDivID, this.FixedColumnsContentDivID, this.fixedColumnCount);
        return this.fixedColumnsHelper;
    },
    GetResizingHelper: function () {
        if (!this.AllowResizing()) return null;
        if (!this.resizingHelper)
            this.resizingHelper = new ASPxClientGridViewTableResizingHelper(this.GetTableHelper());
        return this.resizingHelper;
    },
    GetEndlessPagingHelper: function () {
        if (!this.useEndlessPaging) return null;
        if (!this.endlessPagingHelper)
            this.endlessPagingHelper = new ASPxClientGridViewEndlessPagingHelper(this);
        return this.endlessPagingHelper;
    },
    IsLastCallbackProcessedAsEndless: function () {
        var helper = this.GetEndlessPagingHelper();
        return helper && helper.endlessCallbackComplete;
    },
    GetHeaderMatrix: function () {
        if (!this.headerMatrix)
            this.headerMatrix = new ASPxClientGridViewHeaderMatrix(this);
        return this.headerMatrix;
    },
    UpdateScrollableControls: function () {
        var helper = this.GetScrollHelper();
        if (helper)
            helper.Update();
    },
    ValidateColumnWidths: function () {
        var helper = this.GetResizingHelper();
        if (helper)
            helper.ValidateColumnWidths();
    },
    SetHeadersClientEvents: function () {
        if (!this.AllowResizing())
            return;
        var helper = this.GetResizingHelper();
        var attachMouseMove = function (headerCell) {
            _aspxAttachEventToElement(headerCell, "mousemove", function (e) { helper.UpdateCursor(e, headerCell); });
        };
        for (var i = 0; i < this.columns.length; i++) {
            var header = this.GetHeader(this.columns[i].index);
            if (header)
                attachMouseMove(header);
        }
    },
    OnBrowserWindowResize: function (e) {
        if (this.AllowResizing() && !this.HasScrolling())
            this.GetResizingHelper().ValidateColumnWidths();
        this.AdjustControl();
    },
    UpdatePostBackSyncInput: function (isChangedNotification) {
        var input = this.GetPostBackSyncInput();
        if (!input) return;
        var selectedIndex = isChangedNotification ? -1 : this.lastMultiSelectIndex;
        ASPxSimpleHiddenField.Set("SI", selectedIndex, input);
    },
    ApplyPostBackSyncData: function () {
        var savedState = ASPxSimpleHiddenField.Get("SI", this.GetPostBackSyncInput());
        if (savedState && savedState.length > 0)
            this.lastMultiSelectIndex = Number(savedState);
    },
    doScrollToRowIndex: function () {
        if (this.scrollToRowIndex < 0) return false;
        this.MakeRowVisible(this.scrollToRowIndex);
        this.scrollToRowIndex = -1;
        return true;
    },
    EnsureRowHotTrackItems: function () {
        if (this.rowHotTrackStyle == null) return;
        var list = [];
        for (var i = 0; i < this.pageRowCount; i++) {
            var index = i + this.visibleStartIndex;
            if (this.rowHotTrackItemsBag[index]) continue;
            list.push(this.DataRowID + index);
            this.rowHotTrackItemsBag[index] = true;
        }
        if (list.length > 0) {
            aspxAddHoverItems(this.name, [
    [
     [this.rowHotTrackStyle[0]],
     [this.rowHotTrackStyle[1]],
     list
    ]
   ]);
        }
    },
    UpdateIndentCellWidths: function () {
        if (this.indentColumnCount <= 0)
            return;
        if (this.HasScrolling() || this.AllowResizing())
            this.GetTableHelper().UpdateIndentCellWidths();
    },
    OnContextMenuClick: function (e) {
        var args = this.GetContextMenuArgs(e);
        if (args)
            this.RaiseContextMenu(args.objectType, args.index, e);
    },
    GetContextMenuArgs: function (e) {
        var objectTypes = {};
        objectTypes[this.name + "_" + this.DataRowID] = "row";
        objectTypes[this.name + "_" + "col"] = "header";
        objectTypes[this.name + "_" + "groupcol"] = "header";
        objectTypes[this.name + "_" + this.GroupRowID] = "grouprow";
        objectTypes[this.name + "_" + this.GroupRowID + "Exp"] = "grouprow";
        var src = _aspxGetEventSource(e);
        var element = src;
        while (element) {
            if (element.tagName == "BODY")
                return;
            var id = element.id;
            element = element.parentNode;
            if (!id) continue;
            var indexInfo = this.tryGetNumberFromEndOfString(id);
            if (!indexInfo.success) continue;
            var index = indexInfo.value;
            for (var partialID in objectTypes)
                if (id == partialID + index)
                    return { objectType: objectTypes[partialID], index: index };
        }
    },
    Focus: function () {
        if (this.kbdHelper)
            this.kbdHelper.Focus();
    },
    PerformCallback: function (args) {
        if (!_aspxIsExists(args)) args = "";
        this.gridCallBack([this.CommandId.CustomCallback, args]);
    },
    GetValuesOnCustomCallback: function (args, onCallBack) {
        this.gridFuncCallBack([this.CommandId.CustomValues, args], onCallBack);
    },
    GotoPage: function (pageIndex) {
        if (this.useEndlessPaging)
            return;
        this.gridCallBack([this.CommandId.GotoPage, pageIndex]);
    },
    GetPageIndex: function () {
        return this.pageIndex;
    },
    GetPageCount: function () {
        return this.pageCount;
    },
    NextPage: function () {
        this.gridCallBack([this.CommandId.NextPage]);
    },
    PrevPage: function (focusBottomRow) {
        if (this.useEndlessPaging)
            return;
        this.gridCallBack([this.CommandId.PreviousPage, focusBottomRow ? "T" : "F"]);
    },
    UnGroup: function (column) {
        column = this._getColumnIndexByColumnArgs(column);
        this.GroupBy(column, -1);
    },
    ExpandAll: function () {
        this.gridCallBack([this.CommandId.ExpandAll]);
    },
    CollapseAll: function () {
        this.gridCallBack([this.CommandId.CollapseAll]);
    },
    ExpandAllDetailRows: function () {
        this.gridCallBack([this.CommandId.ShowAllDetail]);
    },
    CollapseAllDetailRows: function () {
        this.gridCallBack([this.CommandId.HideAllDetail]);
    },
    ExpandRow: function (visibleIndex, recursive) {
        if (this.RaiseRowExpanding(visibleIndex)) return;
        recursive = !!recursive;
        this.gridCallBack([this.CommandId.ExpandRow, visibleIndex, recursive]);
    },
    CollapseRow: function (visibleIndex, recursive) {
        if (this.RaiseRowCollapsing(visibleIndex)) return;
        recursive = !!recursive;
        this.gridCallBack([this.CommandId.CollapseRow, visibleIndex, recursive]);
    },
    MakeRowVisible: function (visibleIndex) {
        if (!this.HasVertScroll()) return;
        var row = this.GetRow(visibleIndex);
        if (row == null && visibleIndex >= this.visibleStartIndex
   && visibleIndex < this.visibleStartIndex + this.pageRowCount) {
            row = this.GetEditingRow(this);
        }
        if (row == null) return;
        this.GetScrollHelper().MakeRowVisible(row);
    },
    ExpandDetailRow: function (visibleIndex) {
        var key = this.GetRowKey(visibleIndex);
        if (key == null) return;
        if (this.RaiseDetailRowExpanding(visibleIndex)) return;
        this.gridCallBack([this.CommandId.ShowDetailRow, key]);
    },
    CollapseDetailRow: function (visibleIndex) {
        var key = this.GetRowKey(visibleIndex);
        if (key == null) return;
        if (this.RaiseDetailRowCollapsing(visibleIndex)) return;
        this.gridCallBack([this.CommandId.HideDetailRow, key]);
    },
    GetRowKey: function (visibleIndex) {
        var arrayIndex = visibleIndex - this.visibleStartIndex;
        if (arrayIndex < 0 || arrayIndex > this.keys.length - 1)
            return null;
        var key = this.keys[arrayIndex];
        if (key == "/^DXN")
            key = null;
        return key;
    },
    StartEditRow: function (visibleIndex) {
        var batchEditHelper = this.GetBatchEditHelper();
        if (batchEditHelper) {
            batchEditHelper.StartEdit(visibleIndex);
            return;
        }
        var key = this.GetRowKey(visibleIndex);
        if (key != null)
            this.StartEditRowByKey(key);
    },
    StartEditRowByKey: function (key) {
        var batchEditHelper = this.GetBatchEditHelper();
        if (batchEditHelper) {
            batchEditHelper.StartEdit(batchEditHelper.FindRowVisibleIndexByKey(key));
            return;
        }
        this.gridCallBack([this.CommandId.StartEdit, key]);
    },
    IsEditing: function () {
        return this.editState > 0;
    },
    IsNewRowEditing: function () {
        return this.editState > 1;
    },
    IsNewRowAtBottom: function () {
        return this.editState == 3;
    },
    UpdateEdit: function () {
        this._updateEdit();
    },
    CancelEdit: function () {
        var batchEditHelper = this.GetBatchEditHelper();
        if (batchEditHelper) {
            batchEditHelper.CancelEdit();
            return;
        }
        this.gridCallBack([this.CommandId.CancelEdit]);
    },
    AddNewRow: function () {
        var batchEditHelper = this.GetBatchEditHelper();
        if (batchEditHelper) {
            batchEditHelper.AddNewRow();
            return;
        }
        this.gridCallBack([this.CommandId.AddNewRow]);
    },
    DeleteRow: function (visibleIndex) {
        var batchEditHelper = this.GetBatchEditHelper();
        if (batchEditHelper) {
            batchEditHelper.DeleteRow(visibleIndex);
            return;
        }
        var key = this.GetRowKey(visibleIndex);
        if (key != null)
            this.DeleteRowByKey(key);
    },
    DeleteRowByKey: function (key) {
        var batchEditHelper = this.GetBatchEditHelper();
        if (batchEditHelper) {
            batchEditHelper.DeleteRowByKey(key);
            return;
        }
        this.gridCallBack([this.CommandId.DeleteRow, key]);
    },
    Refresh: function () {
        var batchEditHelper = this.GetBatchEditHelper();
        if (batchEditHelper)
            batchEditHelper.CancelEdit();
        this.gridCallBack([this.CommandId.Refresh]);
    },
    ApplyFilter: function (expression) {
        expression = expression || "";
        this.gridCallBack([this.CommandId.ApplyFilter, expression]);
    },
    ClearFilter: function () {
        this.ClearAutoFilterState();
        this.ApplyFilter();
    },
    GetAutoFilterEditor: function (column) {
        var index = this._getColumnIndexByColumnArgs(column);
        if (!_aspxIsExists(index)) return null;
        return aspxGetControlCollection().Get(this.name + "_DXFREditorcol" + index);
    },
    AutoFilterByColumn: function (column, val) {
        var index = this._getColumnIndexByColumnArgs(column);
        if (!_aspxIsExists(index)) return;
        if (!_aspxIsExists(val)) val = "";
        this.gridCallBack([this.CommandId.ApplyColumnFilter, index, val]);
    },
    ApplyHeaderFilterByColumn: function () {
        this.GetHeaderFilterPopup().Hide();
        var listBox = this.GetHeaderFilterListBox();
        var column = this.GetColumn(listBox.cpGVColumnIndex);
        if (!column) return;
        var values = listBox.GetSelectedValues();
        this.gridCallBack([this.CommandId.ApplyHeaderColumnFilter, column.index, _aspxToJson(values)]);
    },
    GroupBy: function (column, groupIndex, sortOrder) {
        if (this.RaiseColumnGrouping(this._getColumnObjectByArg(column))) return;
        column = this._getColumnIndexByColumnArgs(column);
        if (!_aspxIsExists(groupIndex)) groupIndex = "";
        if (!_aspxIsExists(sortOrder)) sortOrder = "ASC";
        this.gridCallBack([this.CommandId.Group, column, groupIndex, sortOrder]);
    },
    SortBy: function (column, sortOrder, reset, sortIndex) {
        if (this.RaiseColumnSorting(this._getColumnObjectByArg(column))) return;
        column = this._getColumnIndexByColumnArgs(column);
        if (!_aspxIsExists(sortIndex)) sortIndex = "";
        if (!_aspxIsExists(sortOrder)) sortOrder = "";
        if (!_aspxIsExists(reset)) reset = true;
        this.gridCallBack([this.CommandId.Sort, column, sortIndex, sortOrder, reset]);
    },
    MoveColumn: function (column, columnMoveTo, moveBefore, moveToGroup, moveFromGroup) {
        if (!_aspxIsExists(column)) return;
        if (!_aspxIsExists(columnMoveTo)) columnMoveTo = -1;
        if (!_aspxIsExists(moveBefore)) moveBefore = true;
        if (!_aspxIsExists(moveToGroup)) moveToGroup = false;
        if (!_aspxIsExists(moveFromGroup)) moveFromGroup = false;
        if (moveToGroup) {
            if (this.RaiseColumnGrouping(this._getColumnObjectByArg(column))) return;
        }
        column = this._getColumnIndexByColumnArgs(column);
        this.gridCallBack([this.CommandId.ColumnMove, column, columnMoveTo, moveBefore, moveToGroup, moveFromGroup]);
    },
    GetFocusedRowIndex: function () {
        return this._getFocusedRowIndex();
    },
    SetFocusedRowIndex: function (visibleIndex) {
        return this._setFocusedRowIndex(visibleIndex);
    },
    IsCustomizationWindowVisible: function () {
        var custWindow = this.GetCustomizationWindow();
        return custWindow != null && custWindow.IsVisible();
    },
    ShowCustomizationWindow: function (showAtElement) {
        var custWindow = this.GetCustomizationWindow();
        if (!showAtElement) showAtElement = this.GetMainElement();
        custWindow.ShowAtElement(showAtElement);
    },
    HideCustomizationWindow: function () {
        var custWindow = this.GetCustomizationWindow();
        if (custWindow != null) custWindow.Hide();
    },
    SelectRows: function (visibleIndices, selected) {
        if (!_aspxIsExists(selected)) selected = true;
        if (!_aspxIsExists(visibleIndices)) {
            selected = selected ? "all" : "unall";
            visibleIndices = [];
        } else {
            if (visibleIndices.constructor != Array)
                visibleIndices = [visibleIndices];
        }
        this.gridCallBack([this.CommandId.SelectRows, selected].concat(visibleIndices));
    },
    SelectRowsByKey: function (keys, selected) {
        if (!_aspxIsExists(selected)) selected = true;
        if (!_aspxIsExists(keys)) return;
        if (keys.constructor != Array)
            keys = [keys];
        this.gridCallBack([this.CommandId.SelectRowsKey, selected].concat(keys));
    },
    UnselectRowsByKey: function (keys) {
        this.SelectRowsByKey(keys, false);
    },
    UnselectRows: function (visibleIndices) {
        this.SelectRows(visibleIndices, false);
    },
    UnselectFilteredRows: function () {
        this.gridCallBack([this.CommandId.SelectRows, "unallf"]);
    },
    SelectRowOnPage: function (visibleIndex, selected) {
        if (!_aspxIsExists(selected)) selected = true;
        this.SelectRow(visibleIndex, selected);
    },
    UnselectRowOnPage: function (visibleIndex) {
        this.SelectRowOnPage(visibleIndex, false);
    },
    SelectAllRowsOnPage: function (selected) {
        if (!_aspxIsExists(selected)) selected = true;
        this._selectAllRowsOnPage(selected);
    },
    UnselectAllRowsOnPage: function () {
        this._selectAllRowsOnPage(false);
    },
    GetSelectedRowCount: function () {
        return this._getSelectedRowCount();
    },
    GetSelectedFieldValues: function (fieldNames, onCallBack) {
        this.gridFuncCallBack([this.CommandId.SelFieldValues, fieldNames], onCallBack);
    },
    GetSelectedKeysOnPage: function () {
        var keys = [];
        for (var i = 0; i < this.pageRowCount; i++) {
            if (this._isRowSelected(this.visibleStartIndex + i))
                keys.push(this.keys[i]);
        }
        return keys;
    },
    IsRowSelectedOnPage: function (visibleIndex) {
        return this._isRowSelected(visibleIndex);
    },
    GetRowValues: function (visibleIndex, fieldNames, onCallBack) {
        this.gridFuncCallBack([this.CommandId.RowValues, visibleIndex, fieldNames], onCallBack);
    },
    GetPageRowValues: function (fieldNames, onCallBack) {
        this.gridFuncCallBack([this.CommandId.PageRowValues, fieldNames], onCallBack);
    },
    GetVisibleRowsOnPage: function () {
        var batchEditHelper = this.GetBatchEditHelper();
        if (batchEditHelper)
            return batchEditHelper.GetVisibleRowsOnPageCount();
        return this.pageRowCount;
    },
    GetTopVisibleIndex: function () {
        return this.visibleStartIndex;
    },
    IsGroupRow: function (visibleIndex) {
        return this.GetGroupRow(visibleIndex) != null;
    },
    IsDataRow: function (visibleIndex) {
        return this.GetDataRow(visibleIndex) != null;
    },
    IsGroupRowExpanded: function (visibleIndex) {
        return this.GetExpandedGroupRow(visibleIndex) != null;
    },
    GetColumnsCount: function () {
        return this._getColumnsCount();
    },
    GetColumn: function (index) {
        return this._getColumn(index);
    },
    GetColumnById: function (id) {
        return this._getColumnById(id);
    },
    GetColumnByField: function (fieldName) {
        return this._getColumnByField(fieldName);
    },
    GetEditor: function (column) {
        var columnObject = this._getColumnObjectByArg(column);
        return columnObject != null ? this.GetEditorByColumnIndex(columnObject.index) : null;
    },
    FocusEditor: function (column) {
        var editor = this.GetEditor(column);
        if (editor && editor.SetFocus) {
            editor.SetFocus();
        }
    },
    GetEditValue: function (column) {
        var editor = this.GetEditor(column);
        return editor != null && editor.enabled ? editor.GetValue() : null;
    },
    SetEditValue: function (column, value) {
        var editor = this.GetEditor(column);
        if (editor != null && editor.enabled) {
            editor.SetValue(value);
        }
    },
    ShowFilterControl: function () {
        this.PreventCallbackAnimation();
        this.gridCallBack([this.CommandId.ShowFilterControl]);
    },
    CloseFilterControl: function () {
        this.PreventCallbackAnimation();
        this.HideFilterControlPopup();
        this.gridCallBack([this.CommandId.CloseFilterControl]);
    },
    HideFilterControlPopup: function () {
        var popup = this.GetFilterControlPopup();
        if (popup) popup.Hide();
    },
    ApplyFilterControl: function () {
        this.PreventCallbackAnimation();
        var fc = this.GetFilterControl();
        if (fc == null) return;
        if (!this.callBacksEnabled)
            this.HideFilterControlPopup();
        if (!fc.isApplied)
            fc.Apply(this);
    },
    SetFilterEnabled: function (isFilterEnabled) {
        this.gridCallBack([this.CommandId.SetFilterEnabled, isFilterEnabled]);
    },
    SetWidth: function (width) {
        var scrollHelper = this.GetScrollHelper();
        if (scrollHelper)
            scrollHelper.OnSetWidth(width);
        this.constructor.prototype.SetWidth.call(this, width);
    },
    SetHeight: function (height) {
        var scrollHelper = this.GetScrollHelper();
        if (scrollHelper)
            scrollHelper.SetHeight(height);
    },
    GetVertScrollPos: function () {
        return this.GetVerticalScrollPosition();
    },
    GetVerticalScrollPosition: function () {
        if (this.isVirtualScrolling)
            return 0;
        var scrollHelper = this.GetScrollHelper();
        if (scrollHelper)
            return scrollHelper.GetVertScrollPosition();
        return 0;
    },
    GetHorzScrollPos: function () {
        return this.GetHorizontalScrollPosition();
    },
    GetHorizontalScrollPosition: function () {
        var scrollHelper = this.GetScrollHelper();
        if (scrollHelper)
            return scrollHelper.GetHorzScrollPosition();
        return 0;
    },
    SetVertScrollPos: function (value) {
        this.SetVerticalScrollPosition(value);
    },
    SetVerticalScrollPosition: function (value) {
        if (this.isVirtualScrolling)
            return;
        var scrollHelper = this.GetScrollHelper();
        if (scrollHelper)
            scrollHelper.SetVertScrollPosition(value);
    },
    SetHorzScrollPos: function (value) {
        this.SetHorizontalScrollPosition(value);
    },
    SetHorizontalScrollPosition: function (value) {
        var scrollHelper = this.GetScrollHelper();
        if (scrollHelper)
            scrollHelper.SetHorzScrollPosition(value);
    },
    RaiseSelectionChangedOutOfServer: function () {
        this.RaiseSelectionChanged(-1, false, false, true);
    },
    RaiseSelectionChanged: function (visibleIndex, isSelected, isAllRecordsOnPage, isChangedOnServer) {
        if (!this.SelectionChanged.IsEmpty()) {
            var args = new ASPxClientGridViewSelectionEventArgs(visibleIndex, isSelected, isAllRecordsOnPage, isChangedOnServer);
            this.SelectionChanged.FireEvent(this, args);
            if (args.processOnServer) {
                this.gridCallBack(["SELECTION"]);
            }
        }
        return false;
    },
    RaiseFocusedRowChanged: function () {
        if (!this.FocusedRowChanged.IsEmpty()) {
            var args = new ASPxClientProcessingModeEventArgs(false);
            this.FocusedRowChanged.FireEvent(this, args);
            if (args.processOnServer) {
                this.gridCallBack(["FOCUSEDROW"]);
            }
        }
        return false;
    },
    RaiseColumnSorting: function (column) {
        if (!this.ColumnSorting.IsEmpty()) {
            var args = new ASPxClientGridViewColumnCancelEventArgs(column);
            this.ColumnSorting.FireEvent(this, args);
            return args.cancel;
        }
        return false;
    },
    RaiseColumnGrouping: function (column) {
        if (!this.ColumnGrouping.IsEmpty()) {
            var args = new ASPxClientGridViewColumnCancelEventArgs(column);
            this.ColumnGrouping.FireEvent(this, args);
            return args.cancel;
        }
        return false;
    },
    RaiseColumnStartDragging: function (column) {
        if (!this.ColumnStartDragging.IsEmpty()) {
            var args = new ASPxClientGridViewColumnCancelEventArgs(column);
            this.ColumnStartDragging.FireEvent(this, args);
            return args.cancel;
        }
        return false;
    },
    RaiseColumnResizing: function (column) {
        if (!this.ColumnResizing.IsEmpty()) {
            var args = new ASPxClientGridViewColumnCancelEventArgs(column);
            this.ColumnResizing.FireEvent(this, args);
            return args.cancel;
        }
        return false;
    },
    RaiseColumnResized: function (column) {
        if (!this.ColumnResized.IsEmpty()) {
            var args = new ASPxClientGridViewColumnProcessingModeEventArgs(column);
            this.ColumnResized.FireEvent(this, args);
            if (args.processOnServer)
                this.Refresh();
        }
    },
    RaiseRowExpanding: function (visibleIndex) {
        if (!this.RowExpanding.IsEmpty()) {
            var args = new ASPxClientGridViewRowCancelEventArgs(visibleIndex);
            this.RowExpanding.FireEvent(this, args);
            return args.cancel;
        }
        return false;
    },
    RaiseRowCollapsing: function (visibleIndex) {
        if (!this.RowCollapsing.IsEmpty()) {
            var args = new ASPxClientGridViewRowCancelEventArgs(visibleIndex);
            this.RowCollapsing.FireEvent(this, args);
            return args.cancel;
        }
        return false;
    },
    RaiseDetailRowExpanding: function (visibleIndex) {
        if (!this.DetailRowExpanding.IsEmpty()) {
            var args = new ASPxClientGridViewRowCancelEventArgs(visibleIndex);
            this.DetailRowExpanding.FireEvent(this, args);
            return args.cancel;
        }
        return false;
    },
    RaiseDetailRowCollapsing: function (visibleIndex) {
        if (!this.DetailRowCollapsing.IsEmpty()) {
            var args = new ASPxClientGridViewRowCancelEventArgs(visibleIndex);
            this.DetailRowCollapsing.FireEvent(this, args);
            return args.cancel;
        }
        return false;
    },
    RaiseRowClick: function (visibleIndex, htmlEvent) {
        if (!this.RowClick.IsEmpty()) {
            var args = new ASPxClientGridViewRowClickEventArgs(visibleIndex, htmlEvent);
            this.RowClick.FireEvent(this, args);
            return args.cancel;
        }
        return false;
    },
    RaiseRowDblClick: function (visibleIndex, htmlEvent) {
        if (!this.RowDblClick.IsEmpty()) {
            _aspxClearSelection();
            var args = new ASPxClientGridViewRowClickEventArgs(visibleIndex, htmlEvent);
            this.RowDblClick.FireEvent(this, args);
            return args.cancel;
        }
        return false;
    },
    RaiseContextMenu: function (objectType, index, htmlEvent) {
        if (!this.ContextMenu.IsEmpty()) {
            var args = new ASPxClientGridViewContextMenuEventArgs(objectType, index, htmlEvent);
            this.ContextMenu.FireEvent(this, args);
            return true;
        }
        return false;
    },
    RaiseCustomizationWindowCloseUp: function () {
        if (!this.CustomizationWindowCloseUp.IsEmpty()) {
            var args = new ASPxClientEventArgs();
            this.CustomizationWindowCloseUp.FireEvent(this, args);
        }
        return false;
    },
    RaiseColumnMoving: function (targets) {
        if (this.ColumnMoving.IsEmpty()) return;
        var srcColumn = this.getColumnObject(targets.obj.id);
        var destColumn = this.getColumnObject(targets.targetElement.id);
        var isLeft = targets.isLeftPartOfElement();
        var isGroupPanel = targets.targetElement == targets.grid.GetGroupPanel();
        var args = new ASPxClientGridViewColumnMovingEventArgs(srcColumn, destColumn, isLeft, isGroupPanel);
        this.ColumnMoving.FireEvent(this, args);
        if (!args.allow) {
            targets.targetElement = null;
        }
    },
    RaiseBatchEditConfirmShowing: function (requestTriggerID) {
        if (!this.BatchEditConfirmShowing.IsEmpty()) {
            var args = new ASPxClientGridViewBatchEditConfirmShowingEventArgs(requestTriggerID);
            this.BatchEditConfirmShowing.FireEvent(this, args);
            return args.cancel;
        }
        return false;
    },
    RaiseInternalCheckBoxClick: function (visibleIndex) {
        if (!this.InternalCheckBoxClick.IsEmpty()) {
            var args = { "visibleIndex": visibleIndex, cancel: false };
            this.InternalCheckBoxClick.FireEvent(this, args);
            return args.cancel;
        }
        return false;
    },
    UA_AddNew: function () {
        this.AddNewRow();
    },
    UA_StartEdit: function (visibleIndex) {
        this.StartEditRow(visibleIndex);
    },
    UA_Delete: function (visibleIndex) {
        this.DeleteGridRow(visibleIndex);
    },
    UA_UpdateEdit: function () {
        this.UpdateEdit();
    },
    UA_CancelEdit: function () {
        this.CancelEdit();
    },
    UA_CustomButton: function (id, visibleIndex) {
        this.CommandCustomButton(id, visibleIndex);
    },
    UA_Select: function (visibleIndex) {
        if (!this.lookupBehavior || this.allowSelectByRowClick)
            this.SelectRow(visibleIndex, !this._isRowSelected(visibleIndex));
    },
    UA_ClearFilter: function () {
        this.ClearFilter();
    },
    UA_ApplyMultiColumnAutoFilter: function () {
        this.ApplyMultiColumnAutoFilter();
    }
});
ASPxClientGridView.Cast = ASPxClientControl.Cast;
ASPxClientGridViewColumn = _aspxCreateClass(null, {
    constructor: function (name, index, parentIndex, fieldName, visible, filterRowTypeKind, showFilterMenuLikeItem,
  allowGroup, allowSort, allowDrag, HFCheckedList, inCustWindow, minWidth) {
        this.name = name;
        this.id = name;
        this.index = index;
        this.parentIndex = parentIndex;
        this.fieldName = fieldName;
        this.visible = !!visible;
        this.filterRowTypeKind = filterRowTypeKind;
        this.showFilterMenuLikeItem = !!showFilterMenuLikeItem;
        this.allowGroup = !!allowGroup;
        this.allowSort = !!allowSort;
        this.allowDrag = !!allowDrag;
        this.HFCheckedList = !!HFCheckedList;
        this.inCustWindow = !!inCustWindow;
        this.minWidth = minWidth;
    }
});
ASPxClientGridViewColumnCancelEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
    constructor: function (column) {
        this.constructor.prototype.constructor.call(this);
        this.column = column;
    }
});
ASPxClientGridViewColumnProcessingModeEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
    constructor: function (column) {
        this.constructor.prototype.constructor.call(this, false);
        this.column = column;
    }
});
ASPxClientGridViewRowCancelEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
    constructor: function (visibleIndex) {
        this.constructor.prototype.constructor.call(this);
        this.visibleIndex = visibleIndex;
    }
});
ASPxClientGridViewSelectionEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
    constructor: function (visibleIndex, isSelected, isAllRecordsOnPage, isChangedOnServer) {
        this.constructor.prototype.constructor.call(this, false);
        this.visibleIndex = visibleIndex;
        this.isSelected = isSelected;
        this.isAllRecordsOnPage = isAllRecordsOnPage;
        this.isChangedOnServer = isChangedOnServer;
    }
});
ASPxClientGridViewRowClickEventArgs = _aspxCreateClass(ASPxClientGridViewRowCancelEventArgs, {
    constructor: function (visibleIndex, htmlEvent) {
        this.constructor.prototype.constructor.call(this, visibleIndex);
        this.htmlEvent = htmlEvent;
    }
});
ASPxClientGridViewContextMenuEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
    constructor: function (objectType, index, htmlEvent) {
        this.constructor.prototype.constructor.call(this);
        this.objectType = objectType;
        this.index = index;
        this.htmlEvent = htmlEvent;
    }
});
ASPxClientGridViewCustomButtonEventArgs = _aspxCreateClass(ASPxClientProcessingModeEventArgs, {
    constructor: function (visibleIndex, buttonID) {
        this.constructor.prototype.constructor.call(this, false);
        this.visibleIndex = visibleIndex;
        this.buttonID = buttonID;
    }
});
ASPxClientGridViewColumnMovingEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
    constructor: function (sourceColumn, destinationColumn, isDropBefore, isGroupPanel) {
        this.constructor.prototype.constructor.call(this);
        this.allow = true;
        this.sourceColumn = sourceColumn;
        this.destinationColumn = destinationColumn;
        this.isDropBefore = isDropBefore;
        this.isGroupPanel = isGroupPanel;
    }
});
ASPxClientGridViewBatchEditConfirmShowingEventArgs = _aspxCreateClass(ASPxClientCancelEventArgs, {
    constructor: function (requestTriggerID) {
        this.constructor.prototype.constructor.call(this);
        this.requestTriggerID = requestTriggerID;
    }
});
ASPxGridViewKbdHelper = _aspxCreateClass(ASPxKbdHelper, {
    HandleKeyDown: function (e) {
        var grid = this.control;
        var index = grid.GetFocusedRowIndex();
        var busy = grid.keyboardLock;
        var key = _aspxGetKeyCode(e);
        if (grid.rtl) {
            if (key == ASPxKey.Left)
                key = ASPxKey.Right;
            else if (key == ASPxKey.Right)
                key = ASPxKey.Left;
        }
        switch (key) {
            case ASPxKey.Down:
                if (!busy)
                    this.TryMoveFocusDown(index, e.shiftKey);
                return true;
            case ASPxKey.Up:
                if (!busy)
                    this.TryMoveFocusUp(index, e.shiftKey);
                return true;
            case ASPxKey.Right:
                if (!busy) {
                    if (!this.TryExpand(index))
                        this.TryMoveFocusDown(index, e.shiftKey);
                }
                return true;
            case ASPxKey.Left:
                if (!busy) {
                    if (!this.TryCollapse(index))
                        this.TryMoveFocusUp(index, e.shiftKey);
                }
                return true;
            case ASPxKey.PageDown:
                if (e.shiftKey) {
                    if (!busy && grid.pageIndex < grid.pageCount - 1)
                        grid.NextPage();
                    return true;
                }
                break;
            case ASPxKey.PageUp:
                if (e.shiftKey) {
                    if (!busy && grid.pageIndex > 0)
                        grid.PrevPage();
                    return true;
                }
                break;
        }
        return false;
    },
    HandleKeyPress: function (e) {
        var grid = this.control;
        var index = grid.GetFocusedRowIndex();
        var busy = grid.keyboardLock;
        switch (_aspxGetKeyCode(e)) {
            case ASPxKey.Space:
                if (!busy && this.IsRowSelectable(index))
                    grid.IsRowSelectedOnPage(index) ? grid.UnselectRowOnPage(index) : grid.SelectRowOnPage(index);
                return true;
            case 43:
                if (!busy)
                    this.TryExpand(index);
                return true;
            case 45:
                if (!busy)
                    this.TryCollapse(index);
                return true;
        }
        return false;
    },
    EnsureFocusedRowVisible: function () {
        var grid = this.control;
        if (!grid.HasVertScroll()) return;
        var row = grid.GetRow(grid.GetFocusedRowIndex());
        grid.GetScrollHelper().MakeRowVisible(row, true);
    },
    HasDetailButton: function (expanded) {
        var grid = this.control;
        var row = grid.GetRow(grid.GetFocusedRowIndex());
        if (!row) return;
        var needle = expanded ? "aspxGVHideDetailRow" : "aspxGVShowDetailRow";
        return row.innerHTML.indexOf(needle) > -1;
    },
    IsRowSelectable: function (index) {
        if (this.control.allowSelectByRowClick)
            return true;
        var row = this.control.GetRow(index);
        if (row && row.innerHTML.indexOf("aspxGVSelectRow") > -1)
            return true;
        var check = this.control.GetDataRowSelBtn(index);
        if (check && this.control.internalCheckBoxCollection && !!this.control.internalCheckBoxCollection.Get(check.id))
            return true;
        return false;
    },
    UpdateShiftSelection: function (start, end) {
        var grid = this.control;
        grid.UnselectAllRowsOnPage();
        if (grid.lastMultiSelectIndex > -1)
            start = grid.lastMultiSelectIndex;
        else
            grid.lastMultiSelectIndex = start;
        for (var i = Math.min(start, end); i <= Math.max(start, end); i++)
            grid.SelectRowOnPage(i);
    },
    TryExpand: function (index) {
        var grid = this.control;
        if (grid.IsGroupRow(index) && !grid.IsGroupRowExpanded(index)) {
            grid.ExpandRow(index);
            return true;
        }
        if (this.HasDetailButton(false)) {
            grid.ExpandDetailRow(index);
            return true;
        }
        return false;
    },
    TryCollapse: function (index) {
        var grid = this.control;
        if (grid.IsGroupRow(index) && grid.IsGroupRowExpanded(index)) {
            grid.CollapseRow(index);
            return true;
        }
        if (this.HasDetailButton(true)) {
            grid.CollapseDetailRow(index);
            return true;
        }
        return false;
    },
    TryMoveFocusDown: function (index, select) {
        var grid = this.control;
        if (index < grid.visibleStartIndex + grid.pageRowCount - 1) {
            if (index < 0)
                grid.SetFocusedRowIndex(grid.visibleStartIndex);
            else
                grid.SetFocusedRowIndex(index + 1);
            this.EnsureFocusedRowVisible();
            if (this.IsRowSelectable(index)) {
                if (select) {
                    this.UpdateShiftSelection(index, index + 1);
                } else {
                    grid.lastMultiSelectIndex = -1;
                }
            }
        } else {
            if (grid.pageIndex < grid.pageCount - 1 && grid.pageIndex >= 0) {
                grid.NextPage();
            }
        }
    },
    TryMoveFocusUp: function (index, select) {
        var grid = this.control;
        if (index > grid.visibleStartIndex || index == -1) {
            if (index < 0)
                grid.SetFocusedRowIndex(grid.visibleStartIndex + grid.pageRowCount - 1);
            else
                grid.SetFocusedRowIndex(index - 1);
            this.EnsureFocusedRowVisible();
            if (this.IsRowSelectable(index)) {
                if (select) {
                    this.UpdateShiftSelection(index, index - 1);
                } else {
                    grid.lastMultiSelectIndex = -1;
                }
            }
        } else {
            if (grid.pageIndex > 0) {
                grid.PrevPage(true);
            }
        }
    }
});
ASPxClientGridViewDragHelper = _aspxCreateClass(null, {
    constructor: function (grid) {
        this.grid = grid;
    },
    CreateDrag: function (e, element, canDrag) {
        var drag = new ASPxClientDragHelper(e, element, true);
        drag.centerClone = true;
        drag.canDrag = canDrag;
        drag.grid = this.grid;
        drag.ctrl = e.ctrlKey;
        drag.shift = e.shiftKey;
        drag.onDragDivCreating = this.OnDragDivCreating;
        drag.onDoClick = this.OnDoClick;
        drag.onCloneCreating = this.OnCloneCreating;
        drag.onEndDrag = this.OnEndDrag;
        drag.onCancelDrag = this.OnCancelDrag;
        return drag;
    },
    PrepareTargetHeightFunc: function () {
        ASPxClientGridViewDragHelper.Target_GetElementHeight = null;
        var headerRowCount = this.grid.GetHeaderMatrix().GetRowCount();
        if (headerRowCount) {
            var row = this.grid.GetHeaderRow(headerRowCount - 1);
            var headerBottom = _aspxGetAbsoluteY(row) + row.offsetHeight;
            ASPxClientGridViewDragHelper.Target_GetElementHeight = function () {
                return headerBottom - this.absoluteY;
            };
        }
    },
    CreateTargets: function (drag, e) {
        if (!drag.canDrag) return;
        var grid = this.grid;
        this.PrepareTargetHeightFunc();
        var targets = new ASPxClientCursorTargets();
        targets.obj = drag.obj;
        targets.grid = grid;
        targets.onTargetCreated = this.OnTargetCreated;
        targets.onTargetChanging = this.OnTargetChanging;
        targets.onTargetChanged = this.OnTargetChanged;
        var scrollLeft = null, scrollRight;
        var scrollHelper = grid.GetScrollHelper();
        var scrollableControl = scrollHelper && scrollHelper.GetHorzScrollableControl();
        if (scrollableControl) {
            scrollLeft = _aspxGetAbsoluteX(scrollableControl);
            scrollRight = scrollLeft + scrollableControl.offsetWidth;
        }
        var sourceColumn = grid.getColumnObject(drag.obj.id);
        var win = grid.GetCustomizationWindow();
        if (win && !sourceColumn.inCustWindow)
            this.AddDragDropTarget(targets, win.GetWindowClientTable(-1));
        for (var i = 0; i < grid.columns.length; i++) {
            var column = grid.columns[i];
            for (var grouped = 0; grouped <= 1; grouped++) {
                var targetElement = grid.GetHeader(column.index, !!grouped);
                if (!targetElement)
                    continue;
                if (scrollLeft !== null) {
                    var targetX = _aspxGetAbsoluteX(targetElement);
                    if (targetX < scrollLeft || targetX + targetElement.offsetWidth > scrollRight)
                        continue;
                }
                if (this.IsValidColumnDragDropTarget(drag.obj, targetElement, sourceColumn, column))
                    this.AddDragDropTarget(targets, targetElement);
            }
        }
        this.AddDragDropTarget(targets, grid.GetGroupPanel());
        this.AddDragDropTarget(targets, _aspxGetElementById(grid.name + this.grid.EmptyHeaderSuffix));
    },
    IsValidColumnDragDropTarget: function (sourceElement, targetElement, sourceColumn, targetColumn) {
        if (sourceColumn == targetColumn)
            return false;
        if (sourceColumn.parentIndex == targetColumn.parentIndex)
            return true;
        if (sourceColumn.parentIndex == targetColumn.index) {
            return (sourceColumn.inCustWindow || this.IsGroupingTarget(sourceElement))
    && this.grid.GetHeaderMatrix().IsLeaf(targetColumn.index);
        }
        if (this.IsGroupingTarget(targetElement))
            return true;
        return false;
    },
    AddDragDropTarget: function (targets, element) {
        element && targets.addElement(element);
    },
    IsGroupHeaderTarget: function (element) {
        if (!element)
            return false;
        return element.id.indexOf(this.grid.name + "_groupcol") == 0;
    },
    IsGroupingTarget: function (element) {
        return element == this.grid.GetGroupPanel() || this.IsGroupHeaderTarget(element);
    },
    IsCustWindowTarget: function (element) {
        var win = this.grid.GetCustomizationWindow();
        return win && element == win.GetWindowClientTable(-1);
    },
    OnDragDivCreating: function (drag, dragDiv) {
        var rootTable = drag.grid.GetRootTable();
        if (!dragDiv || !rootTable) return;
        dragDiv.className = rootTable.className;
        dragDiv.style.cssText = rootTable.style.cssText;
    },
    OnDoClick: function (drag) {
        if (!drag.grid.canSortByColumn(drag.obj)) return;
        drag.grid.SortBy(drag.grid.getColumnIndex(drag.obj.id), drag.ctrl ? "NONE" : "", !drag.shift && !drag.ctrl);
    },
    OnCancelDrag: function (drag) {
        drag.grid.dragHelper.ChangeTargetImagesVisibility(false);
    },
    OnEndDrag: function (drag) {
        if (!drag.targetElement)
            return;
        var grid = drag.grid;
        var sourceElement = drag.obj;
        var targetElement = drag.targetElement;
        var isLeft = drag.targetTag;
        if (grid.rtl)
            isLeft = !isLeft;
        grid.MoveColumn(
   grid.getColumnIndex(sourceElement.id),
   grid.IsEmptyHeaderID(targetElement.id) ? 0 : grid.getColumnIndex(targetElement.id),
   isLeft,
   grid.dragHelper.IsGroupingTarget(targetElement),
   grid.dragHelper.IsGroupingTarget(sourceElement)
  );
    },
    OnCloneCreating: function (clone) {
        var table = document.createElement("table");
        table.cellSpacing = 0;
        if (this.obj.offsetWidth > 0)
            table.style.width = Math.min(200, this.obj.offsetWidth) + "px";
        if (this.obj.offsetHeight > 0)
            table.style.height = this.obj.offsetHeight + "px";
        var row = table.insertRow(-1);
        clone.style.borderLeftWidth = "";
        clone.style.borderTopWidth = "";
        clone.style.borderRightWidth = "";
        row.appendChild(clone);
        table.style.opacity = 0.80;
        table.style.filter = "alpha(opacity=80)";
        if (_aspxIsElementRightToLeft(this.obj))
            table.dir = "rtl";
        return table;
    },
    OnTargetCreated: function (targets, targetObj) {
        var f = ASPxClientGridViewDragHelper.Target_GetElementHeight;
        var h = targets.grid.dragHelper;
        var el = targetObj.element;
        if (f && !h.IsCustWindowTarget(el) && !h.IsGroupingTarget(el))
            targetObj.GetElementHeight = f;
    },
    OnTargetChanging: function (targets) {
        if (!targets.targetElement)
            return;
        targets.targetTag = targets.isLeftPartOfElement();
        var grid = targets.grid;
        var grouping = false;
        if (targets.targetElement == grid.GetGroupPanel()) {
            targets.targetTag = true;
            grouping = true;
        }
        if (grid.dragHelper.IsGroupHeaderTarget(targets.targetElement)) {
            grouping = true;
        }
        if (grouping && !grid.canGroupByColumn(targets.obj))
            targets.targetElement = null;
        if (targets.targetElement) {
            grid.RaiseColumnMoving(targets);
        }
    },
    OnTargetChanged: function (targets) {
        if (__aspxDragHelper == null)
            return;
        var element = targets.targetElement;
        if (element == __aspxDragHelper.obj)
            return;
        var grid = targets.grid;
        grid.dragHelper.ChangeTargetImagesVisibility(false);
        if (!element) {
            __aspxDragHelper.targetElement = null;
            return;
        }
        __aspxDragHelper.targetElement = element;
        __aspxDragHelper.targetTag = targets.targetTag;
        var moveToGroup = grid.dragHelper.IsGroupingTarget(element);
        var moveToCustWindow = grid.dragHelper.IsCustWindowTarget(element);
        if (moveToCustWindow) {
            __aspxDragHelper.addElementToDragDiv(grid.GetArrowDragFieldImage());
            return;
        }
        var matrix = grid.GetHeaderMatrix();
        var targetColumnIndex = grid.getColumnIndex(element.id);
        var isRightSide = !targets.targetTag;
        var left = _aspxGetAbsoluteX(element);
        var neighbor;
        if (moveToGroup) {
            var method = isRightSide ^ grid.rtl ? "nextSibling" : "previousSibling";
            neighbor = grid.dragHelper.GetGroupNodeNeighbor(element, method);
            if (neighbor && neighbor.id == __aspxDragHelper.obj.id) {
                __aspxDragHelper.targetElement = null;
                return;
            }
        } else {
            if (targetColumnIndex > -1) {
                var method = isRightSide ^ grid.rtl ? "GetRightNeighbor" : "GetLeftNeighbor";
                var neighborIndex = matrix[method](targetColumnIndex);
                var sourceColumn = grid.getColumnObject(__aspxDragHelper.obj.id);
                if (neighborIndex == sourceColumn.index && !sourceColumn.inCustWindow && !grid.dragHelper.IsGroupHeaderTarget(__aspxDragHelper.obj)) {
                    __aspxDragHelper.targetElement = null;
                    return;
                }
                if (!isNaN(neighborIndex))
                    neighbor = grid.GetHeader(neighborIndex)
            }
        }
        if (element == grid.GetGroupPanel()) {
            if (grid.rtl)
                left += element.offsetWidth;
        } else {
            if (isRightSide) {
                if (neighbor)
                    left = _aspxGetAbsoluteX(neighbor);
                else
                    left += element.offsetWidth;
            }
        }
        var bottomElement = element;
        if (!moveToGroup && targetColumnIndex > -1)
            bottomElement = grid.GetHeader(matrix.GetLeaf(targetColumnIndex, !isRightSide, false));
        grid.dragHelper.SetDragImagesPosition(left, _aspxGetAbsoluteY(element), _aspxGetAbsoluteY(bottomElement) + bottomElement.offsetHeight);
        grid.dragHelper.ChangeTargetImagesVisibility(true);
    },
    GetGroupNodeNeighbor: function (element, method) {
        return this.GetGroupNodeNeighborCore(element, method, 2);
    },
    GetGroupNodeNeighborCore: function (element, method, distance) {
        var neighbor = element[method];
        if (neighbor && neighbor.nodeType == 1) {
            if (this.IsGroupingTarget(neighbor))
                return neighbor;
            if (distance > 1)
                return this.GetGroupNodeNeighborCore(neighbor, method, --distance);
        }
        return null;
    },
    ChangeTargetImagesVisibility: function (vis) {
        if (this.grid.GetArrowDragDownImage() == null) return;
        var value = vis ? "visible" : "hidden";
        this.grid.GetArrowDragDownImage().style.visibility = value;
        this.grid.GetArrowDragUpImage().style.visibility = value;
        if (__aspxDragHelper != null) {
            __aspxDragHelper.removeElementFromDragDiv();
        }
    },
    SetDragImagesPosition: function (left, top, bottom) {
        var downImage = this.grid.GetArrowDragDownImage();
        if (downImage) {
            _aspxSetAbsoluteX(downImage, left - downImage.offsetWidth / 2);
            _aspxSetAbsoluteY(downImage, top - downImage.offsetHeight);
        }
        var upImage = this.grid.GetArrowDragUpImage();
        if (upImage) {
            _aspxSetAbsoluteX(upImage, left - upImage.offsetWidth / 2);
            _aspxSetAbsoluteY(upImage, bottom);
        }
    }
});
ASPxClientGridViewDragHelper.Target_GetElementHeight = null;
ASPxClientGridViewHeaderMatrix = _aspxCreateClass(null, {
    constructor: function (grid) {
        this.grid = grid;
    },
    Invalidate: function () {
        this.matrix = null;
        this.inverseMatrix = null;
    },
    GetRowCount: function () {
        this.EnsureMatrix();
        return this.matrix.length;
    },
    IsLeftmostColumn: function (columnIndex) {
        this.EnsureMatrix();
        return this.inverseMatrix[columnIndex].left == 0;
    },
    IsRightmostColumn: function (columnIndex) {
        this.EnsureMatrix();
        return this.inverseMatrix[columnIndex].right == this.matrix[0].length - 1;
    },
    IsLeaf: function (columnIndex) {
        this.EnsureMatrix();
        return this.inverseMatrix[columnIndex].bottom == this.matrix.length - 1;
    },
    GetLeaf: function (columnIndex, isLeft, isOuter) {
        this.EnsureMatrix();
        var rect = this.inverseMatrix[columnIndex];
        var row = this.matrix[this.matrix.length - 1];
        if (isLeft) {
            if (isOuter)
                return row[rect.left - 1];
            return row[rect.left];
        }
        if (isOuter)
            return row[rect.right + 1];
        return row[rect.right];
    },
    GetLeafIndex: function (columnIndex) {
        this.EnsureMatrix();
        return this.inverseMatrix[columnIndex].left;
    },
    GetLeafIndices: function () {
        return this.GetRowIndices(this.GetRowCount() - 1);
    },
    GetRowIndices: function (rowIndex) {
        this.EnsureMatrix();
        return this.matrix[rowIndex] || [];
    },
    GetRowSpan: function (columnIndex) {
        this.EnsureMatrix();
        var rect = this.inverseMatrix[columnIndex];
        return rect.bottom - rect.top + 1;
    },
    GetLeftNeighbor: function (columnIndex) {
        this.EnsureMatrix();
        var rect = this.inverseMatrix[columnIndex];
        return this.matrix[rect.top][rect.left - 1];
    },
    GetRightNeighbor: function (columnIndex) {
        this.EnsureMatrix();
        var rect = this.inverseMatrix[columnIndex];
        return this.matrix[rect.top][rect.right + 1];
    },
    GetRightNeighborLeaf: function (columnIndex) {
        return this.GetLeaf(columnIndex, false, true);
    },
    EnsureMatrix: function () {
        this.matrix || this.Fill();
    },
    Fill: function () {
        this.matrix = [];
        this.inverseMatrix = {};
        var rowIndex = 0;
        while (true) {
            var row = this.grid.GetHeaderRow(rowIndex);
            if (!row)
                break;
            var lastFreeIndex = 0;
            for (var cellIndex = !rowIndex ? this.grid.indentColumnCount : 0; cellIndex < row.cells.length; cellIndex++) {
                var cell = row.cells[cellIndex];
                var columnIndex = this.grid.getColumnIndex(cell.id);
                if (columnIndex < 0)
                    break;
                lastFreeIndex = this.FindFreeCellIndex(rowIndex, lastFreeIndex);
                this.FillBlock(rowIndex, lastFreeIndex, cell.rowSpan, cell.colSpan, columnIndex);
                lastFreeIndex += cell.colSpan;
            }
            ++rowIndex;
        }
    },
    FindFreeCellIndex: function (rowIndex, lastFreeCell) {
        var row = this.matrix[rowIndex];
        var result = lastFreeCell;
        if (row) {
            while (!isNaN(row[result]))
                result++;
        }
        return result;
    },
    FillBlock: function (rowIndex, cellIndex, rowSpan, colSpan, columnIndex) {
        var rect = {
            top: rowIndex,
            bottom: rowIndex + rowSpan - 1,
            left: cellIndex,
            right: cellIndex + colSpan - 1
        };
        for (var i = rect.top; i <= rect.bottom; i++) {
            while (!this.matrix[i])
                this.matrix.push([]);
            for (var j = rect.left; j <= rect.right; j++)
                this.matrix[i][j] = columnIndex;
        }
        this.inverseMatrix[columnIndex] = rect;
    }
});
function aspxGVContextMenu(name, e) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null)
        gv.OnContextMenuClick(e);
}
function aspxGVExpandRow(name, visibleIndex, event) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null) {
        if (gv.useEndlessPaging && event)
            visibleIndex = gv.FindParentRowVisibleIndex(_aspxGetEventSource(event), true);
        gv.ExpandRow(visibleIndex);
    }
}
function aspxGVCollapseRow(name, visibleIndex, event) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null) {
        if (gv.useEndlessPaging && event)
            visibleIndex = gv.FindParentRowVisibleIndex(_aspxGetEventSource(event), true);
        gv.CollapseRow(visibleIndex);
    }
}
function aspxGVShowDetailRow(name, visibleIndex, event) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null) {
        if (gv.useEndlessPaging && event)
            visibleIndex = gv.FindParentRowVisibleIndex(_aspxGetEventSource(event), true);
        gv.ExpandDetailRow(visibleIndex);
    }
}
function aspxGVHideDetailRow(name, visibleIndex, event) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null) {
        if (gv.useEndlessPaging && event)
            visibleIndex = gv.FindParentRowVisibleIndex(_aspxGetEventSource(event), true);
        gv.CollapseDetailRow(visibleIndex);
    }
}
function aspxGVHeaderMouseDown(name, element, e) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null)
        gv.HeaderMouseDown(element, e);
}
function aspxGVPagerOnClick(name, value) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null)
        gv.doPagerOnClick(value);
}
function aspxGVFilterKeyPress(name, element, e) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null)
        gv.OnColumnFilterInputKeyPress(element, e);
}
function aspxGVFilterSpecKeyPress(name, element, e) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null)
        gv.OnColumnFilterInputSpecKeyPress(element, e);
}
function aspxGVFilterChanged(name, element) {
    _aspxSetTimeout("aspxGVFilterChangedDelayed(\"" + name + "\", \"" + element.name + "\");", 0);
}
function aspxGVFilterChangedDelayed(name, elementName) {
    var gv = aspxGetControlCollection().Get(name);
    var element = aspxGetControlCollection().Get(elementName);
    if (gv != null && element != null)
        gv.OnColumnFilterInputChanged(element);
}
function aspxGVTimer(name) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null)
        gv.OnFilterKeyPressTick();
}
function aspxGVShowParentRows(name, evt, element) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null) {
        if (element)
            gv.OnParentRowMouseEnter(element);
        else
            gv.OnParentRowMouseLeave(evt);
    }
}
function aspxGVTableClick(name, evt) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null && gv.NeedProcessTableClick(evt))
        gv.mainTableClick(evt);
}
function aspxGVTableDblClick(name, evt) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null && gv.NeedProcessTableClick(evt))
        gv.mainTableDblClick(evt);
}
function aspxGVParentRowsTimer(name, rowId) {
    var gv = aspxGetControlCollection().Get(name);
    var element = _aspxGetElementById(rowId);
    if (!element || !gv) return;
    gv.ShowParentRows(element);
}
function aspxGVCustWindowShown_IE(s) {
    var div = document.getElementById(s.name + "_Scroller");
    div.style.overflow = "hidden";
    var width1 = div.clientWidth;
    div.style.overflow = "auto";
    var width2 = div.clientWidth;
    if (width2 > width1) {
        div.style.width = width1 + "px";
        div.style.paddingRight = (width2 - width1) + "px";
        window.setTimeout(function () {
            div.className = "_";
            div.className = "";
        }, 0);
    }
}
function aspxGVCustWindowCloseUp(name) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null) {
        gv.RaiseCustomizationWindowCloseUp();
    }
}
function aspxGVApplyFilterPopup(name) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null)
        gv.ApplyHeaderFilterByColumn();
}
function aspxGVShowFilterControl(name) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null) {
        gv.ShowFilterControl();
    }
}
function aspxGVCloseFilterControl(name) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null) {
        gv.CloseFilterControl();
    }
}
function aspxGVSetFilterEnabled(name, value) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null) {
        gv.SetFilterEnabled(value);
    }
}
function aspxGVApplyFilterControl(name) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null)
        gv.ApplyFilterControl();
}
function aspxGVFilterRowMenu(name, columnIndex, element) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null)
        gv.FilterRowMenuButtonClick(columnIndex, element);
}
function aspxGVFilterRowMenuClick(name, e) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null)
        gv.FilterRowMenuItemClick(e.item);
}
function aspxGVSort(name, columnIndex) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null)
        gv.SortBy(columnIndex);
}
function aspxGVScheduleCommand(name, commandArgs, postponed, event) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null)
        gv.ScheduleUserCommand(commandArgs, postponed, event);
}
function aspxGVHFListBoxInit(name, listBox) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null && listBox)
        gv.InitializeHFListBox(listBox);
}
function aspxGVHFSelectAllCheckedChanged(name, checkBox) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null && checkBox)
        gv.OnHFSelectAllCheckedChanged(checkBox);
}
function aspxGVHFCancelButtonClick(name) {
    var gv = aspxGetControlCollection().Get(name);
    if (gv != null)
        gv.GetHeaderFilterPopup().Hide();
}
ASPxClientGridView.SelectStartHandler = function (e) {
    if (_aspxGetEventSource(e).tagName.match(/input|select|textarea/i))
        return;
    if (e.ctrlKey || e.shiftKey) {
        _aspxClearSelection();
        _aspxPreventEventAndBubble(e);
    }
};
ASPxClientGridView.SaveActiveElementSettings = function (grid) {
    var element = grid.activeElement;
    grid.activeElement = null;
    ASPxClientGridView.activeElementData = null;
    if (!element || !element.id || element.tagName != "INPUT" || element.id.indexOf(grid.name + "_") != 0)
        return;
    ASPxClientGridView.activeElementData = [grid.name, element.id, _aspxGetSelectionInfo(element).endPos];
    if (typeof (Sys) != "undefined" && typeof (Sys.Application) != "undefined") {
        if (!ASPxClientGridView.MsAjaxActiveElementHandlerAdded) {
            Sys.Application.add_load(function () { ASPxClientGridView.RestoreActiveElementSettings(); });
            ASPxClientGridView.MsAjaxActiveElementHandlerAdded = true;
        }
    }
};
ASPxClientGridView.RestoreActiveElementSettings = function (grid) {
    var data = ASPxClientGridView.activeElementData;
    if (!data || grid && data[0] != grid.name) return;
    var element = _aspxGetElementById(data[1]);
    if (element) {
        window.setTimeout(function () {
            element.focus();
            _aspxSetInputSelection(element, data[2], data[2]);
        }, 0);
    }
    ASPxClientGridView.activeElementData = null;
};
ASPxSmartKbdHelper = _aspxCreateClass(ASPxKbdHelper, {
    constructor: function (control) {
        this.constructor.prototype.constructor.call(this, control);
    },

    Init: function () {
        ASPxSmartKbdHelper.GlobalInit();
        ASPxSmartKbdHelper.RegisterKbdHelper(this);

        ASPxKbdHelper.prototype.Init.call(this);
    },

    HandleGlobalKeyDown: function (e) { },
    HandleGlobalKeyPress: function (e) { },
    HandleGlobalKeyUp: function (e) { }
});

ASPxSmartKbdHelper.swallowGlobalKey = false;
ASPxSmartKbdHelper._instanceRepository = null;

ASPxSmartKbdHelper.InstanceRepository = function () {
    return ASPxSmartKbdHelper._instanceRepository || (ASPxSmartKbdHelper._instanceRepository = new ASPxKbdHelperRepository());
};

ASPxSmartKbdHelper.GlobalInit = function () {
    if (ASPxSmartKbdHelper.ready) return;

    _aspxAttachEventToDocument("keydown", ASPxSmartKbdHelper.OnGlobalKeyDown);
    _aspxAttachEventToDocument("keypress", ASPxSmartKbdHelper.OnGlobalKeyPress);
    _aspxAttachEventToDocument("keyup", ASPxSmartKbdHelper.OnGlobalKeyUp);

    ASPxSmartKbdHelper.ready = true;
};

ASPxSmartKbdHelper.RegisterKbdHelper = function (kbdHelper) {
    ASPxSmartKbdHelper.InstanceRepository().AddItem(kbdHelper);
};

ASPxSmartKbdHelper.ProcessGlobalKey = function (e, actionName) {
    var instanceRepository = ASPxSmartKbdHelper.InstanceRepository().Actualize();

    if (instanceRepository.IsEmpty()) return;

    if (!ASPxSmartKbdHelper.swallowGlobalKey)
        ASPxSmartKbdHelper.swallowGlobalKey = instanceRepository.Handle(e, actionName);
    if (ASPxSmartKbdHelper.swallowGlobalKey)
        _aspxPreventEvent(e);
};

ASPxSmartKbdHelper.OnGlobalKeyDown = function (e) {
    ASPxSmartKbdHelper.swallowGlobalKey = false;
    ASPxSmartKbdHelper.ProcessGlobalKey(e, "HandleGlobalKeyDown");
};

ASPxSmartKbdHelper.OnGlobalKeyPress = function (e) {
    ASPxSmartKbdHelper.ProcessGlobalKey(e, "HandleGlobalKeyPress");
};

ASPxSmartKbdHelper.OnGlobalKeyUp = function (e) {
    ASPxSmartKbdHelper.ProcessGlobalKey(e, "HandleGlobalKeyUp");
};


function _aspxIsControlAlive(control) {
    if (!_aspxIsExists(control)) return false;

    var controlIsNotExist = control !== aspxGetControlCollection().Get(control.name);
    var controlIsTerminated = control.GetMainElement() == null;

    return (controlIsNotExist || controlIsTerminated);
};


var ASPxKbdHelperRepository = function () {
    var collection = ASPxCollection.apply(null, arguments);

    ASPxKbdHelperRepository.injectClassMethods(collection);

    collection.IsASPxKbdHelperRepository = true;

    return (collection);
}

ASPxKbdHelperRepository.injectClassMethods = function (controlCollection) {
    for (var method in ASPxKbdHelperRepository.prototype) {
        if (ASPxKbdHelperRepository.prototype.hasOwnProperty(method)) {
            controlCollection[method] = ASPxKbdHelperRepository.prototype[method];
        }
    }
    return (controlCollection);
};

ASPxKbdHelperRepository.prototype = {

    CreateInstance: function () {
        return (new ASPxKbdHelperRepository());
    },


    AddItem: function (item) {
        if (item && item instanceof ASPxSmartKbdHelper) {
            ASPxCollection.prototype.AddItem.call(this, item);
        }
        return (this);
    },


    Actualize: function () {
        return this.RemoveRange(
            this.Select(function () {
                return _aspxIsControlAlive(this.control);
            })
        );
    },


    Handle: function (e, actionName) {
        var result = false;
        this.Each(function () {
            var handlerExecutionResult = this[actionName](e);
            result = result || handlerExecutionResult;
        });
        return (result);
    }
};


ASPxWindowHelper = new Object();

ASPxWindowHelper.OnBeforeUnload_HandlersRepository = new ASPxCollection();

ASPxWindowHelper.BindOnBeforeUnload = function (argument) {
    var currentHandler = typeof argument !== "function" ? function () { return argument; } : argument;

    var handlersRepository = ASPxWindowHelper.OnBeforeUnload_HandlersRepository;
    handlersRepository.AddItem(currentHandler);

    window.onbeforeunload = currentHandler;
};

ASPxWindowHelper.UnBindOnBeforeUnload = function () {
    var handlersRepository = ASPxWindowHelper.OnBeforeUnload_HandlersRepository;
    handlersRepository.Pop();

    window.onbeforeunload = handlersRepository.Last();
};
ASPxClientGridViewVisibleColumn = _aspxCreateClass(ASPxClientGridViewColumn, {
    constructor: function (column, visibleIndex) {
        this.actualColumn = column;

        this.constructor.prototype.constructor.call(
            this,
            column.name,
            column.index,
            column.parentIndex,
            column.fieldName,
            column.visible,
            column.filterRowTypeKind,
            column.showFilterMenuLikeItem,
            column.allowGroup,
            column.allowSort,
            column.allowDrag,
            column.HFCheckedList,
            column.inCustWindow,
            column.minWidth
        );

        this.visibleIndex = visibleIndex;
    }
});


ASPxClientSmartGridViewErrorHelper = _aspxCreateClass(null, {
    constructor: function (parentGridView) {
        this.parentGridView = parentGridView;
    },


    ParentGridView: function () {
        return this.parentGridView;
    },

    ErrorDescriptors: function () {
        return this.ParentGridView().ErrorDescriptors;
    },

    UniqueID: function () {
        return this.ParentGridView().uniqueID;
    },


    Interpritate: function (errorMessage, errorData) {
        return this.TryToRecoverErrorObject(errorMessage, errorData)
               || this.TryToInterpritateErrorObject(errorMessage, errorData)
               || this.CreateCommonErrorObject(errorMessage, errorData);
    },

    TryToRecoverErrorObject: function (errorMessage, errorData) {
        var errorObject = _aspxParseJSON(errorMessage);

        if (errorObject != null && errorObject.Descriptor) {

            var descriptor = errorObject.Descriptor;

            delete errorObject.Descriptor;

            var errorDescriptors = this.ErrorDescriptors();

            switch (descriptor) {
                case errorDescriptors.SOURCE_ELEMENT_VALIDATION_ERROR:
                    errorObject.Type = "SOURCE_ELEMENT_VALIDATION_ERROR";
                    break;
                case errorDescriptors.SOURCE_ELEMENT_NOT_FOUND_ERROR:
                    errorObject.Type = "SOURCE_ELEMENT_NOT_FOUND_ERROR";
                    break;
            }

            errorObject.Data = errorData;

            return errorObject;
        }

        return null;
    },

    TryToInterpritateErrorObject: function (errorMessage, errorData) {
        var errorMessageNormalized = this.Normalize(errorMessage);
        var errorMessagePattern = this.ToPatternView(errorMessageNormalized, this.UniqueID());

        var errorType = null;

        switch (errorMessagePattern) {
            //TODO: Найти более эффективный способ определения CALLBACK_TARGET_NOT_FOUND_ERROR - .NET занимается локализацией текста ошибки 
            case "The target '{0}' for the callback could not be found or did not implement ICallbackEventHandler.":
            case "Не удалось найти назначение '{0}' для обратного вызова или не был реализован ICallbackEventHandler.":
                errorType = "CALLBACK_TARGET_NOT_FOUND_ERROR";
                break;
        }

        if (errorType != null) {
            var result = new Object();
            result.Type = errorType;
            result.Message = errorMessageNormalized;
            result.Data = errorData;

            return result;
        }

        return null;
    },

    CreateCommonErrorObject: function (errorMessage, errorData) {
        var result = new Object();
        result.Type = "COMMON_CALLBACK_ERROR";
        result.Message = errorMessage;
        result.Data = errorData;

        return result;
    },


    Normalize: function (source) {
        return _aspxReplaceAll(source, "&#39;", "'");
    },

    ToPatternView: function () {
        if (arguments.length == 0) return null;

        var result = arguments[0];

        for (var index = 1; index < arguments.length; index++) {
            result = _aspxReplaceAll(result, arguments[index], "{" + (index - 1) + "}");
        }

        return result;
    }
});


ASPxClientSmartGridView = _aspxCreateClass(ASPxClientGridView, {
    SBSRSummaryControlIDSuffix: "_SBSRS",

    ErrorDescriptors: {
        SOURCE_ELEMENT_VALIDATION_ERROR: "SOURCE_ELEMENT_VALIDATION_ERROR_OBJECT",
        SOURCE_ELEMENT_NOT_FOUND_ERROR: "SOURCE_ELEMENT_NOT_FOUND_ERROR_OBJECT"
    },

    constructor: function (name) {
        this.constructor.prototype.constructor.call(this, name);

        this.visibleColumns = [];

        this.readOnly = false;

        this.isSearchPerformed = null;
        this.confirmEditFormWindowUnload = "";
        this.sourceElementNotFound = "";
        this.callbackTargetNotFound = "";
        this.boundOnBeforeUnload = false;

        this.CommandId.PerformSearch = "PERFORMSEARCH";
        this.CommandId.CancelSearch = "CANCELSEARCH";

        this.editFormPopUpActionsRepository = null;
        this.editFormCloseUpActionsRepository = null;
        this.errorHelper = null;

        this.EditFormAttached = new ASPxClientEvent();
        this.EditFormDetached = new ASPxClientEvent();
        this.EditFormInit = new ASPxClientEvent();
        this.EditFormPopUp = new ASPxClientEvent();
        this.EditFormCloseUp = new ASPxClientEvent();

        this.ValidationError = new ASPxClientEvent();
        this.SourceElementNotFound = new ASPxClientEvent();
        this.CallbackTargetNotFound = new ASPxClientEvent();
        this.CommonCallbackError = new ASPxClientEvent();

        this.SRSummaryControl = null;
    },


    GetChildControl: function (idPostfix) {
        return aspxGetControlCollection().Get(this.name + idPostfix);
    },


    GetEditFormPopUpActionsRepository: function () {
        return this.editFormPopUpActionsRepository || (this.editFormPopUpActionsRepository = new ASPxActionsRepository());
    },

    GetEditFormCloseUpActionsRepository: function () {
        return this.editFormCloseUpActionsRepository || (this.editFormCloseUpActionsRepository = new ASPxActionsRepository());
    },

    GetErrorHelper: function () {
        return this.errorHelper || (this.errorHelper = new ASPxClientSmartGridViewErrorHelper(this));
    },


    GetSRSummaryControl: function () {
        return this.SRSummaryControl || (this.SRSummaryControl = this.GetChildControl(this.SBSRSummaryControlIDSuffix));
    },


    FindElementColumn: function (element) {
        //We have to use jQuery - there is no other simple way to detect actual parent row of the element:
        var $element = $(element);

        var elementColumn = $element.is("td.dxgv") ? $element : $element.parents("td.dxgv:first");
        if (elementColumn.length == 0) return null;

        var elementRow = elementColumn.parents("tr:first");
        if (elementRow.length == 0) return null;

        if (this._isGroupRow(elementRow[0])) return null;

        var columnVisibleIndex = elementRow.children("td:not('.dxgvIndentCell'):not('.dxgvDetailButton')").index(elementColumn);
        if (columnVisibleIndex == -1) return null;

        var visibleColumn = this.GetVisibleColumn(columnVisibleIndex);
        if (visibleColumn == null) return null;

        return visibleColumn.actualColumn;
    },


    getColumnByHtmlEvent: function (evt) {
        return this.FindElementColumn(evt.target || evt.srcElement);
    },

    getRowIndex: function (argument) {
        return ASPxClientGridView.prototype.getRowIndex.call(this,
            typeof argument.id !== "undefined" ? argument.id : argument
        );
    },

    getColumnIndex: function (argument) {
        if (argument == null) return -1;
        if (typeof argument.index !== "undefined") return argument.index;

        return ASPxClientGridView.prototype.getColumnIndex.call(this, argument);
    },


    mainTableDblClick: function (evt) {
        var row = this.getRowByHtmlEvent(evt);

        if (row) {
            var column = this.getColumnByHtmlEvent(evt);

            this.RaiseRowDblClick(row, column, evt);
        }
    },


    RaiseRowDblClick: function (row, column, htmlEvent) {
        if (!this.RowDblClick.IsEmpty()) {
            _aspxClearSelection();

            var args = new ASPxSmartClientGridViewRowClickEventArgs(
                this.getRowIndex(row),
                this.getColumnIndex(column),
                htmlEvent
            );

            this.RowDblClick.FireEvent(this, args);

            return args.cancel;
        }
        return false;
    },


    ScheduleUserCommand: function (args, postponed, e) {
        if (!args || args.length == 0) return;

        var commandName = args[0];
        var rowCommands = ["CustomButton", "Select", "AddNew", "StartEdit", "Delete", "ExpandAll", "CollapseAll"];

        if ((this.useEndlessPaging || this.allowBatchEditing) && _aspxArrayIndexOf(rowCommands, commandName) > -1)
            args[args.length - 1] = this.FindParentRowVisibleIndex(_aspxGetEventSource(e), true);

        this.ScheduleCommand(args, postponed);
    },

    UA_StartEdit: function (visibleIndex) {
        this.StartEditRow(visibleIndex, true);
    },

    UA_AddNew: function (visibleIndex) {
        this.AddNewRow(visibleIndex, true);
    },

    UA_Delete: function (visibleIndex) {
        this.DeleteGridRow(visibleIndex, true);
    },

    UA_ExpandAll: function () {
        this.ExpandAll();
    },

    UA_CollapseAll: function () {
        this.CollapseAll();
    },


    GetColumnFieldName: function (index) {
        var column = this.GetColumn(index);
        return column ? column.fieldName : null;
    },


    GetVisibleColumnsCount: function () {
        return this.visibleColumns.length;
    },

    GetVisibleColumn: function (columnVisibleIndex) {
        if (columnVisibleIndex < 0 || columnVisibleIndex >= this.visibleColumns.length) return null;
        return this.visibleColumns[columnVisibleIndex];
    },


    GetEditors: function () {
        return new ASPxControlCollection(
            this._getEditors()
        );
    },

    FocusEditors: function () {
        this.GetEditors().Focus();
    },


    GetEditorValueString: function (editor) {
        return editor.GetEditorValueString ? editor.GetEditorValueString() : editor.GetValueString();
    },

    GetEditorValue: function (editor) {
        var value = this.GetEditorValueString(editor);

        var valueLength = -1;
        if (!_aspxIsExists(value)) {
            value = "";
        } else {
            value = value.toString();
            valueLength = value.length;
        }

        return this.GetEditorIndex(editor.name) + "," + valueLength + "," + value + ";";
    },


    IsSearchPerformed: function () {
        return this.isSearchPerformed;
    },

    PerformSearch: function () {
        this.gridCallBack([this.CommandId.PerformSearch]);
    },

    CancelSearch: function () {
        this.gridCallBack([this.CommandId.CancelSearch]);
    },


    IsDetailRow: function (visibleIndex) {
        return this.hasDetailRows && this.IsDataRow(visibleIndex);
    },

    IsDetailRowExpanded: function (visibleIndex) {
        return this.GetDetailRow(visibleIndex) != null;
    },


    AddNewRow: function (visibleIndex, eventMarker) {
        if (this.readOnly) return;
        this.gridCallBack([this.CommandId.AddNewRow, visibleIndex || "undefined", eventMarker || false]);
    },

    StartEditRow: function (visibleIndex, eventMarker) {
        var key = this.GetRowKey(visibleIndex);

        if (key != null) {
            this.StartEditRowByKey(key, eventMarker);
        }
    },

    StartEditRowByKey: function (key, eventMarker) {
        this.gridCallBack([this.CommandId.StartEdit, key, eventMarker || false]);
    },

    DeleteGridRow: function (visibleIndex, eventMarker) {
        if (this.readOnly) return;

        if (this.confirmDelete != "" && !confirm(this.confirmDelete)) return;

        this.DeleteRow(visibleIndex, eventMarker);
    },

    DeleteRow: function (visibleIndex, eventMarker) {
        if (this.readOnly) return;

        var key = this.GetRowKey(visibleIndex);

        if (key != null) {
            this.DeleteRowByKey(key, eventMarker || false);
        }
    },

    UpdateEdit: function () {
        if (this.readOnly) return;

        ASPxClientGridView.prototype.UpdateEdit.call(this);
    },


    ExecuteOnEditFormPopUp: function (action) {
        this.GetEditFormPopUpActionsRepository().AddItem(action);
    },

    ExecuteOnEditFormCloseUp: function (action) {
        this.GetEditFormCloseUpActionsRepository().AddItem(action);
    },


    OnEditFormPopUp: function () {
        this.InitializeEditFormWindowUnloadHandlers();

        this.FocusEditors();

        this.GetEditFormPopUpActionsRepository().Execute(this);
    },

    OnEditFormCloseUp: function () {
        this.FinalizeEditFormWindowUnloadHandlers();

        this.GetEditFormCloseUpActionsRepository().Execute(this);
    },


    OnCallbackGeneralError: function (errorMessage) {
        this.OnCallbackError(errorMessage, null);
        this.OnCallbackFinalized();
    },

    OnCallbackError: function (result, data) {
        var errorObject = this.GetErrorHelper().Interpritate(result, data);

        switch (errorObject.Type) {
            case "SOURCE_ELEMENT_VALIDATION_ERROR":
                this.RaiseValidationError(errorObject);
                break;
            case "SOURCE_ELEMENT_NOT_FOUND_ERROR":
                this.RaiseSourceElementNotFound(errorObject);
                break;
            case "CALLBACK_TARGET_NOT_FOUND_ERROR":
                this.RaiseCallbackTargetNotFound(errorObject);
                break;
            default:
                this.RaiseCommonCallbackError(errorObject);
                break;
        }

        if (this.GetGridTD())
            this.afterCallbackRequired = true;
    },

    OnValidationError: function (errorObject) {
        if (errorObject.FieldName) {
            this.ExecuteOnEditFormPopUp(function () {
                this.FocusEditor(errorObject.FieldName);
            });
        }

        this.showingError = errorObject.Message;
        this.data = errorObject.Data;
    },

    OnSourceElementNotFound: function (errorObject) {
        this.CancelEdit();


        var errorMessage = null;

        if (this.sourceElementNotFound != "") {
            errorMessage = this.sourceElementNotFound;
        } else if (errorObject.Message && errorObject.Message != "") {
            errorMessage = errorObject.Message;
        }

        if (errorMessage) {
            window.setTimeout(function () {
                alert(errorMessage);
            }, 0);
        }
    },

    OnCallbackTargetNotFound: function (errorObject) {

        var confirmMessage = null;

        if (this.callbackTargetNotFound != "") {
            confirmMessage = this.callbackTargetNotFound;
        } else if (errorObject.Message && errorObject.Message != "") {
            confirmMessage = errorObject.Message;
        }

        if (confirmMessage) {
            if (confirm(confirmMessage)) {
                this.Refresh();
            }
        }
    },

    OnCommonCallbackError: function (errorObject) {
        this.showingError = errorObject.Message;
        this.data = errorObject.Data;
    },


    OnPopupEditForm_Attached: function (s, e) {
        this.RaiseEditFormAttached(s, e);
    },

    OnPopupEditForm_Detached: function (s, e) {
        this.RaiseEditFormDetached(s, e);
    },

    OnPopupEditForm_Init: function (s, e) {
        this.RaiseEditFormInit(s, e);
    },

    OnPopupEditForm_PopUp: function (s, e) {
        this.RaiseEditFormPopUp(s, e);
    },

    OnPopupEditForm_CloseUp: function (s, e) {
        this.RaiseEditFormCloseUp(s, e);
    },


    RaiseEditFormAttached: function (sourceEditForm, sourceEventArgs) {
        if (!this.EditFormAttached.IsEmpty()) {
            this.EditFormAttached.FireEvent(
                this, new ASPxSmartClientGridViewEditFormEventArgs(sourceEditForm, sourceEventArgs)
            );
        }
    },

    RaiseEditFormDetached: function (sourceEditForm, sourceEventArgs) {
        if (!this.EditFormDetached.IsEmpty()) {
            this.EditFormDetached.FireEvent(
                this, new ASPxSmartClientGridViewEditFormEventArgs(sourceEditForm, sourceEventArgs)
            );
        }
    },

    RaiseEditFormInit: function (sourceEditForm, sourceEventArgs) {
        if (!this.EditFormInit.IsEmpty()) {
            this.EditFormInit.FireEvent(
                this, new ASPxSmartClientGridViewEditFormEventArgs(sourceEditForm, sourceEventArgs)
            );
        }
    },

    RaiseEditFormPopUp: function (sourceEditForm, sourceEventArgs) {
        this.OnEditFormPopUp(sourceEditForm, sourceEventArgs);

        if (!this.EditFormPopUp.IsEmpty()) {
            this.EditFormPopUp.FireEvent(
                this, new ASPxSmartClientGridViewEditFormEventArgs(sourceEditForm, sourceEventArgs)
            );
        }
    },

    RaiseEditFormCloseUp: function (sourceEditForm, sourceEventArgs) {
        this.OnEditFormCloseUp(sourceEditForm, sourceEventArgs);

        if (!this.EditFormCloseUp.IsEmpty()) {
            this.EditFormCloseUp.FireEvent(
                this, new ASPxSmartClientGridViewEditFormEventArgs(sourceEditForm, sourceEventArgs)
            );
        }
    },


    RaiseValidationError: function (errorObject) {
        var handled = false;

        if (!this.ValidationError.IsEmpty()) {
            var e = new ASPxSmartClientGridViewCallbackErrorEventArgs(errorObject);

            this.ValidationError.FireEvent(this, e);

            handled = e.handled;
        }

        if (!handled) {
            this.OnValidationError(errorObject);
        }
    },

    RaiseSourceElementNotFound: function (errorObject) {
        var handled = false;

        if (!this.SourceElementNotFound.IsEmpty()) {
            var e = new ASPxSmartClientGridViewCallbackErrorEventArgs(errorObject);

            this.SourceElementNotFound.FireEvent(this, e);

            handled = e.handled;
        }

        if (!handled) {
            this.OnSourceElementNotFound(errorObject);
        }
    },

    RaiseCallbackTargetNotFound: function (errorObject) {
        var handled = false;

        if (!this.CallbackTargetNotFound.IsEmpty()) {
            var e = new ASPxSmartClientGridViewCallbackErrorEventArgs(errorObject);

            this.CallbackTargetNotFound.FireEvent(this, e);

            handled = e.handled;
        }

        if (!handled) {
            this.OnCallbackTargetNotFound(errorObject);
        }
    },

    RaiseCommonCallbackError: function (errorObject) {
        var handled = false;

        if (!this.CommonCallbackError.IsEmpty()) {
            var e = new ASPxSmartClientGridViewCallbackErrorEventArgs(errorObject);

            this.CommonCallbackError.FireEvent(this, e);

            handled = e.handled;
        }

        if (!handled) {
            this.OnCommonCallbackError(errorObject);
        }
    },


    InitializeEditFormWindowUnloadHandlers: function () {
        if (this.boundOnBeforeUnload) return;

        if (this.readOnly) return;

        if (this.confirmEditFormWindowUnload != "") {
            ASPxWindowHelper.BindOnBeforeUnload(this.confirmEditFormWindowUnload);
            this.boundOnBeforeUnload = true;
        }
    },

    FinalizeEditFormWindowUnloadHandlers: function () {
        if (this.boundOnBeforeUnload) {
            ASPxWindowHelper.UnBindOnBeforeUnload();
            this.boundOnBeforeUnload = false;
        }
    }
});

ASPxClientSmartGridView.Cast = ASPxClientGridView.Cast;

ASPxSmartClientGridViewRowClickEventArgs = _aspxCreateClass(ASPxClientGridViewRowClickEventArgs, {
    constructor: function (rowIndex, columnIndex, htmlEvent) {
        this.constructor.prototype.constructor.call(this, rowIndex, htmlEvent);
        this.columnIndex = columnIndex;
    }
});

ASPxSmartClientGridViewEditFormEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
    constructor: function (sourceEditForm, sourceEventArgs) {
        this.constructor.prototype.constructor.call(this);
        this.sourceEditForm = sourceEditForm;
        this.sourceEventArgs = sourceEventArgs;
    }
});

ASPxSmartClientGridViewCallbackErrorEventArgs = _aspxCreateClass(ASPxClientEventArgs, {
    constructor: function (errorObject) {
        this.constructor.prototype.constructor.call(this);
        this.ErrorObject = errorObject;
        this.handled = false;
    }
});


function ASPxSmartGridViewDefaults_EditDataRow_OnRowDblClick(s, e) {
    if (s.IsDataRow(e.visibleIndex)) {
        var sourceColumnFieldName = s.GetColumnFieldName(e.columnIndex);

        s.ExecuteOnEditFormPopUp(function () {
            this.FocusEditor(sourceColumnFieldName);
        });

        s.StartEditRow(e.visibleIndex);
    }
};

function ASPxSmartGridViewDefaults_ExpandCollapseGroupRow_OnRowDblClick(s, e) {
    if (s.IsGroupRow(e.visibleIndex)) {
        if (s.IsGroupRowExpanded(e.visibleIndex)) {
            s.CollapseRow(e.visibleIndex);
        } else {
            s.ExpandRow(e.visibleIndex);
        }
    }
};

function ASPxSmartGridViewDefaults_ExpandCollapseDetailRow_OnRowDblClick(s, e) {
    if (s.IsDetailRow(e.visibleIndex)) {
        if (s.IsDetailRowExpanded(e.visibleIndex)) {
            s.CollapseDetailRow(e.visibleIndex);
        } else {
            s.ExpandDetailRow(e.visibleIndex);
        }
    }
};

function ASPxSmartGridViewDefaults_ExpandCollapseRow_OnRowDblClick(s, e) {
    ASPxSmartGridViewDefaults_ExpandCollapseDetailRow_OnRowDblClick(s, e);
    ASPxSmartGridViewDefaults_ExpandCollapseGroupRow_OnRowDblClick(s, e);
}

function ASPxSmartGridViewDefaults_EditOrExpandCollapseRow_OnRowDblClick(s, e) {
    ASPxSmartGridViewDefaults_EditDataRow_OnRowDblClick(s, e);
    ASPxSmartGridViewDefaults_ExpandCollapseGroupRow_OnRowDblClick(s, e);
}
function CommonASPxGridViewDefaults_EditDataRow_OnRowDblClick(s, e) {
    ASPxSmartGridViewDefaults_EditDataRow_OnRowDblClick(s, e);
};

function CommonASPxGridViewDefaults_ExpandCollapseDetailRow_OnRowDblClick(s, e) {
    ASPxSmartGridViewDefaults_ExpandCollapseDetailRow_OnRowDblClick(s, e);
};

function CommonASPxGridViewDefaults_ExpandCollapseRow_OnRowDblClick(s, e) {
    ASPxSmartGridViewDefaults_ExpandCollapseRow_OnRowDblClick(s, e);
};

function CommonASPxGridViewDefaults_EditOrExpandCollapseRow_OnRowDblClick(s, e) {
    ASPxSmartGridViewDefaults_EditOrExpandCollapseRow_OnRowDblClick(s, e);
};

function CommonASPxGridViewDefaults_ExpandChildsFunctionality_OnEditFormInit(s) {
    ASPxControlsHelper.ExpandFunctionality(
        s.GetPopupEditForm().Controls().Except(ASPxClientGridView)
    );
};
